{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar SMTPConnection = require('../smtp-connection');\n\nvar assign = require('../shared').assign;\n\nvar XOAuth2 = require('../xoauth2');\n\nvar EventEmitter = require('events');\n/**\n * Creates an element for the pool\n *\n * @constructor\n * @param {Object} options SMTPPool instance\n */\n\n\nvar PoolResource = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(PoolResource, _EventEmitter);\n\n  var _super = _createSuper(PoolResource);\n\n  function PoolResource(pool) {\n    var _this;\n\n    _classCallCheck(this, PoolResource);\n\n    _this = _super.call(this);\n    _this.pool = pool;\n    _this.options = pool.options;\n    _this.logger = _this.pool.logger;\n\n    if (_this.options.auth) {\n      switch ((_this.options.auth.type || '').toString().toUpperCase()) {\n        case 'OAUTH2':\n          {\n            var oauth2 = new XOAuth2(_this.options.auth, _this.logger);\n            oauth2.provisionCallback = _this.pool.mailer && _this.pool.mailer.get('oauth2_provision_cb') || oauth2.provisionCallback;\n            _this.auth = {\n              type: 'OAUTH2',\n              user: _this.options.auth.user,\n              oauth2: oauth2,\n              method: 'XOAUTH2'\n            };\n            oauth2.on('token', function (token) {\n              return _this.pool.mailer.emit('token', token);\n            });\n            oauth2.on('error', function (err) {\n              return _this.emit('error', err);\n            });\n            break;\n          }\n\n        default:\n          if (!_this.options.auth.user && !_this.options.auth.pass) {\n            break;\n          }\n\n          _this.auth = {\n            type: (_this.options.auth.type || '').toString().toUpperCase() || 'LOGIN',\n            user: _this.options.auth.user,\n            credentials: {\n              user: _this.options.auth.user || '',\n              pass: _this.options.auth.pass,\n              options: _this.options.auth.options\n            },\n            method: (_this.options.auth.method || '').trim().toUpperCase() || _this.options.authMethod || false\n          };\n      }\n    }\n\n    _this._connection = false;\n    _this._connected = false;\n    _this.messages = 0;\n    _this.available = true;\n    return _this;\n  }\n  /**\n   * Initiates a connection to the SMTP server\n   *\n   * @param {Function} callback Callback function to run once the connection is established or failed\n   */\n\n\n  _createClass(PoolResource, [{\n    key: \"connect\",\n    value: function connect(callback) {\n      var _this2 = this;\n\n      this.pool.getSocket(this.options, function (err, socketOptions) {\n        if (err) {\n          return callback(err);\n        }\n\n        var returned = false;\n        var options = _this2.options;\n\n        if (socketOptions && socketOptions.connection) {\n          _this2.logger.info({\n            tnx: 'proxy',\n            remoteAddress: socketOptions.connection.remoteAddress,\n            remotePort: socketOptions.connection.remotePort,\n            destHost: options.host || '',\n            destPort: options.port || '',\n            action: 'connected'\n          }, 'Using proxied socket from %s:%s to %s:%s', socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || '', options.port || '');\n\n          options = assign(false, options);\n          Object.keys(socketOptions).forEach(function (key) {\n            options[key] = socketOptions[key];\n          });\n        }\n\n        _this2.connection = new SMTPConnection(options);\n\n        _this2.connection.once('error', function (err) {\n          _this2.emit('error', err);\n\n          if (returned) {\n            return;\n          }\n\n          returned = true;\n          return callback(err);\n        });\n\n        _this2.connection.once('end', function () {\n          _this2.close();\n\n          if (returned) {\n            return;\n          }\n\n          returned = true;\n          var timer = setTimeout(function () {\n            if (returned) {\n              return;\n            } // still have not returned, this means we have an unexpected connection close\n\n\n            var err = new Error('Unexpected socket close');\n\n            if (_this2.connection && _this2.connection._socket && _this2.connection._socket.upgrading) {\n              // starttls connection errors\n              err.code = 'ETLS';\n            }\n\n            callback(err);\n          }, 1000);\n\n          try {\n            timer.unref();\n          } catch (E) {// Ignore. Happens on envs with non-node timer implementation\n          }\n        });\n\n        _this2.connection.connect(function () {\n          if (returned) {\n            return;\n          }\n\n          if (_this2.auth && (_this2.connection.allowsAuth || options.forceAuth)) {\n            _this2.connection.login(_this2.auth, function (err) {\n              if (returned) {\n                return;\n              }\n\n              returned = true;\n\n              if (err) {\n                _this2.connection.close();\n\n                _this2.emit('error', err);\n\n                return callback(err);\n              }\n\n              _this2._connected = true;\n              callback(null, true);\n            });\n          } else {\n            returned = true;\n            _this2._connected = true;\n            return callback(null, true);\n          }\n        });\n      });\n    }\n    /**\n     * Sends an e-mail to be sent using the selected settings\n     *\n     * @param {Object} mail Mail object\n     * @param {Function} callback Callback function\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(mail, callback) {\n      var _this3 = this;\n\n      if (!this._connected) {\n        return this.connect(function (err) {\n          if (err) {\n            return callback(err);\n          }\n\n          return _this3.send(mail, callback);\n        });\n      }\n\n      var envelope = mail.message.getEnvelope();\n      var messageId = mail.message.messageId();\n      var recipients = [].concat(envelope.to || []);\n\n      if (recipients.length > 3) {\n        recipients.push('...and ' + recipients.splice(2).length + ' more');\n      }\n\n      this.logger.info({\n        tnx: 'send',\n        messageId: messageId,\n        cid: this.id\n      }, 'Sending message %s using #%s to <%s>', messageId, this.id, recipients.join(', '));\n\n      if (mail.data.dsn) {\n        envelope.dsn = mail.data.dsn;\n      }\n\n      this.connection.send(envelope, mail.message.createReadStream(), function (err, info) {\n        _this3.messages++;\n\n        if (err) {\n          _this3.connection.close();\n\n          _this3.emit('error', err);\n\n          return callback(err);\n        }\n\n        info.envelope = {\n          from: envelope.from,\n          to: envelope.to\n        };\n        info.messageId = messageId;\n        setImmediate(function () {\n          var err;\n\n          if (_this3.messages >= _this3.options.maxMessages) {\n            err = new Error('Resource exhausted');\n            err.code = 'EMAXLIMIT';\n\n            _this3.connection.close();\n\n            _this3.emit('error', err);\n          } else {\n            _this3.pool._checkRateLimit(function () {\n              _this3.available = true;\n\n              _this3.emit('available');\n            });\n          }\n        });\n        callback(null, info);\n      });\n    }\n    /**\n     * Closes the connection\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      this._connected = false;\n\n      if (this.auth && this.auth.oauth2) {\n        this.auth.oauth2.removeAllListeners();\n      }\n\n      if (this.connection) {\n        this.connection.close();\n      }\n\n      this.emit('close');\n    }\n  }]);\n\n  return PoolResource;\n}(EventEmitter);\n\nmodule.exports = PoolResource;","map":{"version":3,"sources":["/home/yamin/My_repos/new-email-app/new-email-app/node_modules/nodemailer/lib/smtp-pool/pool-resource.js"],"names":["SMTPConnection","require","assign","XOAuth2","EventEmitter","PoolResource","pool","options","logger","auth","type","toString","toUpperCase","oauth2","provisionCallback","mailer","get","user","method","on","token","emit","err","pass","credentials","trim","authMethod","_connection","_connected","messages","available","callback","getSocket","socketOptions","returned","connection","info","tnx","remoteAddress","remotePort","destHost","host","destPort","port","action","Object","keys","forEach","key","once","close","timer","setTimeout","Error","_socket","upgrading","code","unref","E","connect","allowsAuth","forceAuth","login","mail","send","envelope","message","getEnvelope","messageId","recipients","concat","to","length","push","splice","cid","id","join","data","dsn","createReadStream","from","setImmediate","maxMessages","_checkRateLimit","removeAllListeners","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst SMTPConnection = require('../smtp-connection');\nconst assign = require('../shared').assign;\nconst XOAuth2 = require('../xoauth2');\nconst EventEmitter = require('events');\n\n/**\n * Creates an element for the pool\n *\n * @constructor\n * @param {Object} options SMTPPool instance\n */\nclass PoolResource extends EventEmitter {\n    constructor(pool) {\n        super();\n\n        this.pool = pool;\n        this.options = pool.options;\n        this.logger = this.pool.logger;\n\n        if (this.options.auth) {\n            switch ((this.options.auth.type || '').toString().toUpperCase()) {\n                case 'OAUTH2': {\n                    let oauth2 = new XOAuth2(this.options.auth, this.logger);\n                    oauth2.provisionCallback = (this.pool.mailer && this.pool.mailer.get('oauth2_provision_cb')) || oauth2.provisionCallback;\n                    this.auth = {\n                        type: 'OAUTH2',\n                        user: this.options.auth.user,\n                        oauth2,\n                        method: 'XOAUTH2'\n                    };\n                    oauth2.on('token', token => this.pool.mailer.emit('token', token));\n                    oauth2.on('error', err => this.emit('error', err));\n                    break;\n                }\n                default:\n                    if (!this.options.auth.user && !this.options.auth.pass) {\n                        break;\n                    }\n                    this.auth = {\n                        type: (this.options.auth.type || '').toString().toUpperCase() || 'LOGIN',\n                        user: this.options.auth.user,\n                        credentials: {\n                            user: this.options.auth.user || '',\n                            pass: this.options.auth.pass,\n                            options: this.options.auth.options\n                        },\n                        method: (this.options.auth.method || '').trim().toUpperCase() || this.options.authMethod || false\n                    };\n            }\n        }\n\n        this._connection = false;\n        this._connected = false;\n\n        this.messages = 0;\n        this.available = true;\n    }\n\n    /**\n     * Initiates a connection to the SMTP server\n     *\n     * @param {Function} callback Callback function to run once the connection is established or failed\n     */\n    connect(callback) {\n        this.pool.getSocket(this.options, (err, socketOptions) => {\n            if (err) {\n                return callback(err);\n            }\n\n            let returned = false;\n            let options = this.options;\n            if (socketOptions && socketOptions.connection) {\n                this.logger.info(\n                    {\n                        tnx: 'proxy',\n                        remoteAddress: socketOptions.connection.remoteAddress,\n                        remotePort: socketOptions.connection.remotePort,\n                        destHost: options.host || '',\n                        destPort: options.port || '',\n                        action: 'connected'\n                    },\n                    'Using proxied socket from %s:%s to %s:%s',\n                    socketOptions.connection.remoteAddress,\n                    socketOptions.connection.remotePort,\n                    options.host || '',\n                    options.port || ''\n                );\n\n                options = assign(false, options);\n                Object.keys(socketOptions).forEach(key => {\n                    options[key] = socketOptions[key];\n                });\n            }\n\n            this.connection = new SMTPConnection(options);\n\n            this.connection.once('error', err => {\n                this.emit('error', err);\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                return callback(err);\n            });\n\n            this.connection.once('end', () => {\n                this.close();\n                if (returned) {\n                    return;\n                }\n                returned = true;\n\n                let timer = setTimeout(() => {\n                    if (returned) {\n                        return;\n                    }\n                    // still have not returned, this means we have an unexpected connection close\n                    let err = new Error('Unexpected socket close');\n                    if (this.connection && this.connection._socket && this.connection._socket.upgrading) {\n                        // starttls connection errors\n                        err.code = 'ETLS';\n                    }\n                    callback(err);\n                }, 1000);\n\n                try {\n                    timer.unref();\n                } catch (E) {\n                    // Ignore. Happens on envs with non-node timer implementation\n                }\n            });\n\n            this.connection.connect(() => {\n                if (returned) {\n                    return;\n                }\n\n                if (this.auth && (this.connection.allowsAuth || options.forceAuth)) {\n                    this.connection.login(this.auth, err => {\n                        if (returned) {\n                            return;\n                        }\n                        returned = true;\n\n                        if (err) {\n                            this.connection.close();\n                            this.emit('error', err);\n                            return callback(err);\n                        }\n\n                        this._connected = true;\n                        callback(null, true);\n                    });\n                } else {\n                    returned = true;\n                    this._connected = true;\n                    return callback(null, true);\n                }\n            });\n        });\n    }\n\n    /**\n     * Sends an e-mail to be sent using the selected settings\n     *\n     * @param {Object} mail Mail object\n     * @param {Function} callback Callback function\n     */\n    send(mail, callback) {\n        if (!this._connected) {\n            return this.connect(err => {\n                if (err) {\n                    return callback(err);\n                }\n                return this.send(mail, callback);\n            });\n        }\n\n        let envelope = mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push('...and ' + recipients.splice(2).length + ' more');\n        }\n        this.logger.info(\n            {\n                tnx: 'send',\n                messageId,\n                cid: this.id\n            },\n            'Sending message %s using #%s to <%s>',\n            messageId,\n            this.id,\n            recipients.join(', ')\n        );\n\n        if (mail.data.dsn) {\n            envelope.dsn = mail.data.dsn;\n        }\n\n        this.connection.send(envelope, mail.message.createReadStream(), (err, info) => {\n            this.messages++;\n\n            if (err) {\n                this.connection.close();\n                this.emit('error', err);\n                return callback(err);\n            }\n\n            info.envelope = {\n                from: envelope.from,\n                to: envelope.to\n            };\n            info.messageId = messageId;\n\n            setImmediate(() => {\n                let err;\n                if (this.messages >= this.options.maxMessages) {\n                    err = new Error('Resource exhausted');\n                    err.code = 'EMAXLIMIT';\n                    this.connection.close();\n                    this.emit('error', err);\n                } else {\n                    this.pool._checkRateLimit(() => {\n                        this.available = true;\n                        this.emit('available');\n                    });\n                }\n            });\n\n            callback(null, info);\n        });\n    }\n\n    /**\n     * Closes the connection\n     */\n    close() {\n        this._connected = false;\n        if (this.auth && this.auth.oauth2) {\n            this.auth.oauth2.removeAllListeners();\n        }\n        if (this.connection) {\n            this.connection.close();\n        }\n        this.emit('close');\n    }\n}\n\nmodule.exports = PoolResource;\n"]},"metadata":{},"sourceType":"script"}