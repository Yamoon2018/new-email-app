{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar dns = require('dns');\n\nvar Netmask = require('netmask').Netmask;\n/**\n * Module exports.\n */\n\n\nmodule.exports = isInNet;\nisInNet.async = true;\n/**\n * True iff the IP address of the host matches the specified IP address pattern.\n *\n * Pattern and mask specification is done the same way as for SOCKS configuration.\n *\n * Examples:\n *\n * ``` js\n * isInNet(host, \"198.95.249.79\", \"255.255.255.255\")\n *   // is true iff the IP address of host matches exactly 198.95.249.79.\n *\n * isInNet(host, \"198.95.0.0\", \"255.255.0.0\")\n *   // is true iff the IP address of the host matches 198.95.*.*.\n * ```\n *\n * @param {String} host a DNS hostname, or IP address. If a hostname is passed,\n *   it will be resoved into an IP address by this function.\n * @param {String} pattern an IP address pattern in the dot-separated format mask.\n * @param {String} mask for the IP address pattern informing which parts of the\n *   IP address should be matched against. 0 means ignore, 255 means match.\n * @return {Boolean}\n */\n\nfunction isInNet(host, pattern, mask, fn) {\n  var family = 4;\n  dns.lookup(host, family, function (err, ip) {\n    if (err) return fn(err);\n    if (!ip) ip = '127.0.0.1';\n    var netmask = new Netmask(pattern, mask);\n    fn(null, netmask.contains(ip));\n  });\n}","map":{"version":3,"sources":["/home/yamin/My_repos/new-email-app/new-email-app/node_modules/pac-resolver/isInNet.js"],"names":["dns","require","Netmask","module","exports","isInNet","async","host","pattern","mask","fn","family","lookup","err","ip","netmask","contains"],"mappings":"AACA;AACA;AACA;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAjB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAAP,CAAmBC,OAAjC;AAEA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,OAAjB;AAEAA,OAAO,CAACC,KAAR,GAAgB,IAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASD,OAAT,CAAkBE,IAAlB,EAAwBC,OAAxB,EAAiCC,IAAjC,EAAuCC,EAAvC,EAA2C;AACzC,MAAIC,MAAM,GAAG,CAAb;AACAX,EAAAA,GAAG,CAACY,MAAJ,CAAWL,IAAX,EAAiBI,MAAjB,EAAyB,UAAUE,GAAV,EAAeC,EAAf,EAAmB;AAC1C,QAAID,GAAJ,EAAS,OAAOH,EAAE,CAACG,GAAD,CAAT;AACT,QAAI,CAACC,EAAL,EAASA,EAAE,GAAG,WAAL;AACT,QAAIC,OAAO,GAAG,IAAIb,OAAJ,CAAYM,OAAZ,EAAqBC,IAArB,CAAd;AACAC,IAAAA,EAAE,CAAC,IAAD,EAAOK,OAAO,CAACC,QAAR,CAAiBF,EAAjB,CAAP,CAAF;AACD,GALD;AAMD","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar dns = require('dns');\nvar Netmask = require('netmask').Netmask;\n\n/**\n * Module exports.\n */\n\nmodule.exports = isInNet;\n\nisInNet.async = true;\n\n/**\n * True iff the IP address of the host matches the specified IP address pattern.\n *\n * Pattern and mask specification is done the same way as for SOCKS configuration.\n *\n * Examples:\n *\n * ``` js\n * isInNet(host, \"198.95.249.79\", \"255.255.255.255\")\n *   // is true iff the IP address of host matches exactly 198.95.249.79.\n *\n * isInNet(host, \"198.95.0.0\", \"255.255.0.0\")\n *   // is true iff the IP address of the host matches 198.95.*.*.\n * ```\n *\n * @param {String} host a DNS hostname, or IP address. If a hostname is passed,\n *   it will be resoved into an IP address by this function.\n * @param {String} pattern an IP address pattern in the dot-separated format mask.\n * @param {String} mask for the IP address pattern informing which parts of the\n *   IP address should be matched against. 0 means ignore, 255 means match.\n * @return {Boolean}\n */\n\nfunction isInNet (host, pattern, mask, fn) {\n  var family = 4;\n  dns.lookup(host, family, function (err, ip) {\n    if (err) return fn(err);\n    if (!ip) ip = '127.0.0.1';\n    var netmask = new Netmask(pattern, mask);\n    fn(null, netmask.contains(ip));\n  });\n}\n"]},"metadata":{},"sourceType":"script"}