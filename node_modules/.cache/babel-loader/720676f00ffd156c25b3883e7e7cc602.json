{"ast":null,"code":"/***** xregexp.js *****/\n\n/*!\r\n * XRegExp v2.0.0\r\n * (c) 2007-2012 Steven Levithan <http://xregexp.com/>\r\n * MIT License\r\n */\n\n/**\r\n * XRegExp provides augmented, extensible JavaScript regular expressions. You get new syntax,\r\n * flags, and methods beyond what browsers support natively. XRegExp is also a regex utility belt\r\n * with tools to make your client-side grepping simpler and more powerful, while freeing you from\r\n * worrying about pesky cross-browser inconsistencies and the dubious `lastIndex` property. See\r\n * XRegExp's documentation (http://xregexp.com/) for more details.\r\n * @module xregexp\r\n * @requires N/A\r\n */\nvar XRegExp; // Avoid running twice; that would reset tokens and could break references to native globals\n\nXRegExp = XRegExp || function (undef) {\n  \"use strict\";\n  /*--------------------------------------\r\n   *  Private variables\r\n   *------------------------------------*/\n\n  var _self,\n      addToken,\n      add,\n      // Optional features; can be installed and uninstalled\n  features = {\n    natives: false,\n    extensibility: false\n  },\n      // Store native methods to use and restore (\"native\" is an ES3 reserved keyword)\n  nativ = {\n    exec: RegExp.prototype.exec,\n    test: RegExp.prototype.test,\n    match: String.prototype.match,\n    replace: String.prototype.replace,\n    split: String.prototype.split\n  },\n      // Storage for fixed/extended native methods\n  fixed = {},\n      // Storage for cached regexes\n  cache = {},\n      // Storage for addon tokens\n  tokens = [],\n      // Token scopes\n  defaultScope = \"default\",\n      classScope = \"class\",\n      // Regexes that match native regex syntax\n  nativeTokens = {\n    // Any native multicharacter token in default scope (includes octals, excludes character classes)\n    \"default\": /^(?:\\\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\\d*|x[\\dA-Fa-f]{2}|u[\\dA-Fa-f]{4}|c[A-Za-z]|[\\s\\S])|\\(\\?[:=!]|[?*+]\\?|{\\d+(?:,\\d*)?}\\??)/,\n    // Any native multicharacter token in character class scope (includes octals)\n    \"class\": /^(?:\\\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\\dA-Fa-f]{2}|u[\\dA-Fa-f]{4}|c[A-Za-z]|[\\s\\S]))/\n  },\n      // Any backreference in replacement strings\n  replacementToken = /\\$(?:{([\\w$]+)}|(\\d\\d?|[\\s\\S]))/g,\n      // Any character with a later instance in the string\n  duplicateFlags = /([\\s\\S])(?=[\\s\\S]*\\1)/g,\n      // Any greedy/lazy quantifier\n  quantifier = /^(?:[?*+]|{\\d+(?:,\\d*)?})\\??/,\n      // Check for correct `exec` handling of nonparticipating capturing groups\n  compliantExecNpcg = nativ.exec.call(/()??/, \"\")[1] === undef,\n      // Check for flag y support (Firefox 3+)\n  hasNativeY = RegExp.prototype.sticky !== undef,\n      // Used to kill infinite recursion during XRegExp construction\n  isInsideConstructor = false,\n      // Storage for known flags, including addon flags\n  registeredFlags = \"gim\" + (hasNativeY ? \"y\" : \"\");\n  /*--------------------------------------\r\n   *  Private helper functions\r\n   *------------------------------------*/\n\n  /**\r\n   * Attaches XRegExp.prototype properties and named capture supporting data to a regex object.\r\n   * @private\r\n   * @param {RegExp} regex Regex to augment.\r\n   * @param {Array} captureNames Array with capture names, or null.\r\n   * @param {Boolean} [isNative] Whether the regex was created by `RegExp` rather than `XRegExp`.\r\n   * @returns {RegExp} Augmented regex.\r\n   */\n\n\n  function augment(regex, captureNames, isNative) {\n    var p; // Can't auto-inherit these since the XRegExp constructor returns a nonprimitive value\n\n    for (p in _self.prototype) {\n      if (_self.prototype.hasOwnProperty(p)) {\n        regex[p] = _self.prototype[p];\n      }\n    }\n\n    regex.xregexp = {\n      captureNames: captureNames,\n      isNative: !!isNative\n    };\n    return regex;\n  }\n  /**\r\n   * Returns native `RegExp` flags used by a regex object.\r\n   * @private\r\n   * @param {RegExp} regex Regex to check.\r\n   * @returns {String} Native flags in use.\r\n   */\n\n\n  function getNativeFlags(regex) {\n    //return nativ.exec.call(/\\/([a-z]*)$/i, String(regex))[1];\n    return (regex.global ? \"g\" : \"\") + (regex.ignoreCase ? \"i\" : \"\") + (regex.multiline ? \"m\" : \"\") + (regex.extended ? \"x\" : \"\") + ( // Proposed for ES6, included in AS3\n    regex.sticky ? \"y\" : \"\"); // Proposed for ES6, included in Firefox 3+\n  }\n  /**\r\n   * Copies a regex object while preserving special properties for named capture and augmenting with\r\n   * `XRegExp.prototype` methods. The copy has a fresh `lastIndex` property (set to zero). Allows\r\n   * adding and removing flags while copying the regex.\r\n   * @private\r\n   * @param {RegExp} regex Regex to copy.\r\n   * @param {String} [addFlags] Flags to be added while copying the regex.\r\n   * @param {String} [removeFlags] Flags to be removed while copying the regex.\r\n   * @returns {RegExp} Copy of the provided regex, possibly with modified flags.\r\n   */\n\n\n  function copy(regex, addFlags, removeFlags) {\n    if (!_self.isRegExp(regex)) {\n      throw new TypeError(\"type RegExp expected\");\n    }\n\n    var flags = nativ.replace.call(getNativeFlags(regex) + (addFlags || \"\"), duplicateFlags, \"\");\n\n    if (removeFlags) {\n      // Would need to escape `removeFlags` if this was public\n      flags = nativ.replace.call(flags, new RegExp(\"[\" + removeFlags + \"]+\", \"g\"), \"\");\n    }\n\n    if (regex.xregexp && !regex.xregexp.isNative) {\n      // Compiling the current (rather than precompilation) source preserves the effects of nonnative source flags\n      regex = augment(_self(regex.source, flags), regex.xregexp.captureNames ? regex.xregexp.captureNames.slice(0) : null);\n    } else {\n      // Augment with `XRegExp.prototype` methods, but use native `RegExp` (avoid searching for special tokens)\n      regex = augment(new RegExp(regex.source, flags), null, true);\n    }\n\n    return regex;\n  }\n  /*\r\n   * Returns the last index at which a given value can be found in an array, or `-1` if it's not\r\n   * present. The array is searched backwards.\r\n   * @private\r\n   * @param {Array} array Array to search.\r\n   * @param {*} value Value to locate in the array.\r\n   * @returns {Number} Last zero-based index at which the item is found, or -1.\r\n   */\n\n\n  function lastIndexOf(array, value) {\n    var i = array.length;\n\n    if (Array.prototype.lastIndexOf) {\n      return array.lastIndexOf(value); // Use the native method if available\n    }\n\n    while (i--) {\n      if (array[i] === value) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n  /**\r\n   * Determines whether an object is of the specified type.\r\n   * @private\r\n   * @param {*} value Object to check.\r\n   * @param {String} type Type to check for, in lowercase.\r\n   * @returns {Boolean} Whether the object matches the type.\r\n   */\n\n\n  function isType(value, type) {\n    return Object.prototype.toString.call(value).toLowerCase() === \"[object \" + type + \"]\";\n  }\n  /**\r\n   * Prepares an options object from the given value.\r\n   * @private\r\n   * @param {String|Object} value Value to convert to an options object.\r\n   * @returns {Object} Options object.\r\n   */\n\n\n  function prepareOptions(value) {\n    value = value || {};\n\n    if (value === \"all\" || value.all) {\n      value = {\n        natives: true,\n        extensibility: true\n      };\n    } else if (isType(value, \"string\")) {\n      value = _self.forEach(value, /[^\\s,]+/, function (m) {\n        this[m] = true;\n      }, {});\n    }\n\n    return value;\n  }\n  /**\r\n   * Runs built-in/custom tokens in reverse insertion order, until a match is found.\r\n   * @private\r\n   * @param {String} pattern Original pattern from which an XRegExp object is being built.\r\n   * @param {Number} pos Position to search for tokens within `pattern`.\r\n   * @param {Number} scope Current regex scope.\r\n   * @param {Object} context Context object assigned to token handler functions.\r\n   * @returns {Object} Object with properties `output` (the substitution string returned by the\r\n   *   successful token handler) and `match` (the token's match array), or null.\r\n   */\n\n\n  function runTokens(pattern, pos, scope, context) {\n    var i = tokens.length,\n        result = null,\n        match,\n        t; // Protect against constructing XRegExps within token handler and trigger functions\n\n    isInsideConstructor = true; // Must reset `isInsideConstructor`, even if a `trigger` or `handler` throws\n\n    try {\n      while (i--) {\n        // Run in reverse order\n        t = tokens[i];\n\n        if ((t.scope === \"all\" || t.scope === scope) && (!t.trigger || t.trigger.call(context))) {\n          t.pattern.lastIndex = pos;\n          match = fixed.exec.call(t.pattern, pattern); // Fixed `exec` here allows use of named backreferences, etc.\n\n          if (match && match.index === pos) {\n            result = {\n              output: t.handler.call(context, match, scope),\n              match: match\n            };\n            break;\n          }\n        }\n      }\n    } catch (err) {\n      throw err;\n    } finally {\n      isInsideConstructor = false;\n    }\n\n    return result;\n  }\n  /**\r\n   * Enables or disables XRegExp syntax and flag extensibility.\r\n   * @private\r\n   * @param {Boolean} on `true` to enable; `false` to disable.\r\n   */\n\n\n  function setExtensibility(on) {\n    _self.addToken = addToken[on ? \"on\" : \"off\"];\n    features.extensibility = on;\n  }\n  /**\r\n   * Enables or disables native method overrides.\r\n   * @private\r\n   * @param {Boolean} on `true` to enable; `false` to disable.\r\n   */\n\n\n  function setNatives(on) {\n    RegExp.prototype.exec = (on ? fixed : nativ).exec;\n    RegExp.prototype.test = (on ? fixed : nativ).test;\n    String.prototype.match = (on ? fixed : nativ).match;\n    String.prototype.replace = (on ? fixed : nativ).replace;\n    String.prototype.split = (on ? fixed : nativ).split;\n    features.natives = on;\n  }\n  /*--------------------------------------\r\n   *  Constructor\r\n   *------------------------------------*/\n\n  /**\r\n   * Creates an extended regular expression object for matching text with a pattern. Differs from a\r\n   * native regular expression in that additional syntax and flags are supported. The returned object\r\n   * is in fact a native `RegExp` and works with all native methods.\r\n   * @class XRegExp\r\n   * @constructor\r\n   * @param {String|RegExp} pattern Regex pattern string, or an existing `RegExp` object to copy.\r\n   * @param {String} [flags] Any combination of flags:\r\n   *   <li>`g` - global\r\n   *   <li>`i` - ignore case\r\n   *   <li>`m` - multiline anchors\r\n   *   <li>`n` - explicit capture\r\n   *   <li>`s` - dot matches all (aka singleline)\r\n   *   <li>`x` - free-spacing and line comments (aka extended)\r\n   *   <li>`y` - sticky (Firefox 3+ only)\r\n   *   Flags cannot be provided when constructing one `RegExp` from another.\r\n   * @returns {RegExp} Extended regular expression object.\r\n   * @example\r\n   *\r\n   * // With named capture and flag x\r\n   * date = XRegExp('(?<year>  [0-9]{4}) -?  # year  \\n\\\r\n   *                 (?<month> [0-9]{2}) -?  # month \\n\\\r\n   *                 (?<day>   [0-9]{2})     # day   ', 'x');\r\n   *\r\n   * // Passing a regex object to copy it. The copy maintains special properties for named capture,\r\n   * // is augmented with `XRegExp.prototype` methods, and has a fresh `lastIndex` property (set to\r\n   * // zero). Native regexes are not recompiled using XRegExp syntax.\r\n   * XRegExp(/regex/);\r\n   */\n\n\n  _self = function self(pattern, flags) {\n    if (_self.isRegExp(pattern)) {\n      if (flags !== undef) {\n        throw new TypeError(\"can't supply flags when constructing one RegExp from another\");\n      }\n\n      return copy(pattern);\n    } // Tokens become part of the regex construction process, so protect against infinite recursion\n    // when an XRegExp is constructed within a token handler function\n\n\n    if (isInsideConstructor) {\n      throw new Error(\"can't call the XRegExp constructor within token definition functions\");\n    }\n\n    var output = [],\n        scope = defaultScope,\n        tokenContext = {\n      hasNamedCapture: false,\n      captureNames: [],\n      hasFlag: function hasFlag(flag) {\n        return flags.indexOf(flag) > -1;\n      }\n    },\n        pos = 0,\n        tokenResult,\n        match,\n        chr;\n    pattern = pattern === undef ? \"\" : String(pattern);\n    flags = flags === undef ? \"\" : String(flags);\n\n    if (nativ.match.call(flags, duplicateFlags)) {\n      // Don't use test/exec because they would update lastIndex\n      throw new SyntaxError(\"invalid duplicate regular expression flag\");\n    } // Strip/apply leading mode modifier with any combination of flags except g or y: (?imnsx)\n\n\n    pattern = nativ.replace.call(pattern, /^\\(\\?([\\w$]+)\\)/, function ($0, $1) {\n      if (nativ.test.call(/[gy]/, $1)) {\n        throw new SyntaxError(\"can't use flag g or y in mode modifier\");\n      }\n\n      flags = nativ.replace.call(flags + $1, duplicateFlags, \"\");\n      return \"\";\n    });\n\n    _self.forEach(flags, /[\\s\\S]/, function (m) {\n      if (registeredFlags.indexOf(m[0]) < 0) {\n        throw new SyntaxError(\"invalid regular expression flag \" + m[0]);\n      }\n    });\n\n    while (pos < pattern.length) {\n      // Check for custom tokens at the current position\n      tokenResult = runTokens(pattern, pos, scope, tokenContext);\n\n      if (tokenResult) {\n        output.push(tokenResult.output);\n        pos += tokenResult.match[0].length || 1;\n      } else {\n        // Check for native tokens (except character classes) at the current position\n        match = nativ.exec.call(nativeTokens[scope], pattern.slice(pos));\n\n        if (match) {\n          output.push(match[0]);\n          pos += match[0].length;\n        } else {\n          chr = pattern.charAt(pos);\n\n          if (chr === \"[\") {\n            scope = classScope;\n          } else if (chr === \"]\") {\n            scope = defaultScope;\n          } // Advance position by one character\n\n\n          output.push(chr);\n          ++pos;\n        }\n      }\n    }\n\n    return augment(new RegExp(output.join(\"\"), nativ.replace.call(flags, /[^gimy]+/g, \"\")), tokenContext.hasNamedCapture ? tokenContext.captureNames : null);\n  };\n  /*--------------------------------------\r\n   *  Public methods/properties\r\n   *------------------------------------*/\n  // Installed and uninstalled states for `XRegExp.addToken`\n\n\n  addToken = {\n    on: function on(regex, handler, options) {\n      options = options || {};\n\n      if (regex) {\n        tokens.push({\n          pattern: copy(regex, \"g\" + (hasNativeY ? \"y\" : \"\")),\n          handler: handler,\n          scope: options.scope || defaultScope,\n          trigger: options.trigger || null\n        });\n      } // Providing `customFlags` with null `regex` and `handler` allows adding flags that do\n      // nothing, but don't throw an error\n\n\n      if (options.customFlags) {\n        registeredFlags = nativ.replace.call(registeredFlags + options.customFlags, duplicateFlags, \"\");\n      }\n    },\n    off: function off() {\n      throw new Error(\"extensibility must be installed before using addToken\");\n    }\n  };\n  /**\r\n   * Extends or changes XRegExp syntax and allows custom flags. This is used internally and can be\r\n   * used to create XRegExp addons. `XRegExp.install('extensibility')` must be run before calling\r\n   * this function, or an error is thrown. If more than one token can match the same string, the last\r\n   * added wins.\r\n   * @memberOf XRegExp\r\n   * @param {RegExp} regex Regex object that matches the new token.\r\n   * @param {Function} handler Function that returns a new pattern string (using native regex syntax)\r\n   *   to replace the matched token within all future XRegExp regexes. Has access to persistent\r\n   *   properties of the regex being built, through `this`. Invoked with two arguments:\r\n   *   <li>The match array, with named backreference properties.\r\n   *   <li>The regex scope where the match was found.\r\n   * @param {Object} [options] Options object with optional properties:\r\n   *   <li>`scope` {String} Scopes where the token applies: 'default', 'class', or 'all'.\r\n   *   <li>`trigger` {Function} Function that returns `true` when the token should be applied; e.g.,\r\n   *     if a flag is set. If `false` is returned, the matched string can be matched by other tokens.\r\n   *     Has access to persistent properties of the regex being built, through `this` (including\r\n   *     function `this.hasFlag`).\r\n   *   <li>`customFlags` {String} Nonnative flags used by the token's handler or trigger functions.\r\n   *     Prevents XRegExp from throwing an invalid flag error when the specified flags are used.\r\n   * @example\r\n   *\r\n   * // Basic usage: Adds \\a for ALERT character\r\n   * XRegExp.addToken(\r\n   *   /\\\\a/,\r\n   *   function () {return '\\\\x07';},\r\n   *   {scope: 'all'}\r\n   * );\r\n   * XRegExp('\\\\a[\\\\a-\\\\n]+').test('\\x07\\n\\x07'); // -> true\r\n   */\n\n  _self.addToken = addToken.off;\n  /**\r\n   * Caches and returns the result of calling `XRegExp(pattern, flags)`. On any subsequent call with\r\n   * the same pattern and flag combination, the cached copy is returned.\r\n   * @memberOf XRegExp\r\n   * @param {String} pattern Regex pattern string.\r\n   * @param {String} [flags] Any combination of XRegExp flags.\r\n   * @returns {RegExp} Cached XRegExp object.\r\n   * @example\r\n   *\r\n   * while (match = XRegExp.cache('.', 'gs').exec(str)) {\r\n   *   // The regex is compiled once only\r\n   * }\r\n   */\n\n  _self.cache = function (pattern, flags) {\n    var key = pattern + \"/\" + (flags || \"\");\n    return cache[key] || (cache[key] = _self(pattern, flags));\n  };\n  /**\r\n   * Escapes any regular expression metacharacters, for use when matching literal strings. The result\r\n   * can safely be used at any point within a regex that uses any flags.\r\n   * @memberOf XRegExp\r\n   * @param {String} str String to escape.\r\n   * @returns {String} String with regex metacharacters escaped.\r\n   * @example\r\n   *\r\n   * XRegExp.escape('Escaped? <.>');\r\n   * // -> 'Escaped\\?\\ <\\.>'\r\n   */\n\n\n  _self.escape = function (str) {\n    return nativ.replace.call(str, /[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n  };\n  /**\r\n   * Executes a regex search in a specified string. Returns a match array or `null`. If the provided\r\n   * regex uses named capture, named backreference properties are included on the match array.\r\n   * Optional `pos` and `sticky` arguments specify the search start position, and whether the match\r\n   * must start at the specified position only. The `lastIndex` property of the provided regex is not\r\n   * used, but is updated for compatibility. Also fixes browser bugs compared to the native\r\n   * `RegExp.prototype.exec` and can be used reliably cross-browser.\r\n   * @memberOf XRegExp\r\n   * @param {String} str String to search.\r\n   * @param {RegExp} regex Regex to search with.\r\n   * @param {Number} [pos=0] Zero-based index at which to start the search.\r\n   * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position\r\n   *   only. The string `'sticky'` is accepted as an alternative to `true`.\r\n   * @returns {Array} Match array with named backreference properties, or null.\r\n   * @example\r\n   *\r\n   * // Basic use, with named backreference\r\n   * var match = XRegExp.exec('U+2620', XRegExp('U\\\\+(?<hex>[0-9A-F]{4})'));\r\n   * match.hex; // -> '2620'\r\n   *\r\n   * // With pos and sticky, in a loop\r\n   * var pos = 2, result = [], match;\r\n   * while (match = XRegExp.exec('<1><2><3><4>5<6>', /<(\\d)>/, pos, 'sticky')) {\r\n   *   result.push(match[1]);\r\n   *   pos = match.index + match[0].length;\r\n   * }\r\n   * // result -> ['2', '3', '4']\r\n   */\n\n\n  _self.exec = function (str, regex, pos, sticky) {\n    var r2 = copy(regex, \"g\" + (sticky && hasNativeY ? \"y\" : \"\"), sticky === false ? \"y\" : \"\"),\n        match;\n    r2.lastIndex = pos = pos || 0;\n    match = fixed.exec.call(r2, str); // Fixed `exec` required for `lastIndex` fix, etc.\n\n    if (sticky && match && match.index !== pos) {\n      match = null;\n    }\n\n    if (regex.global) {\n      regex.lastIndex = match ? r2.lastIndex : 0;\n    }\n\n    return match;\n  };\n  /**\r\n   * Executes a provided function once per regex match.\r\n   * @memberOf XRegExp\r\n   * @param {String} str String to search.\r\n   * @param {RegExp} regex Regex to search with.\r\n   * @param {Function} callback Function to execute for each match. Invoked with four arguments:\r\n   *   <li>The match array, with named backreference properties.\r\n   *   <li>The zero-based match index.\r\n   *   <li>The string being traversed.\r\n   *   <li>The regex object being used to traverse the string.\r\n   * @param {*} [context] Object to use as `this` when executing `callback`.\r\n   * @returns {*} Provided `context` object.\r\n   * @example\r\n   *\r\n   * // Extracts every other digit from a string\r\n   * XRegExp.forEach('1a2345', /\\d/, function (match, i) {\r\n   *   if (i % 2) this.push(+match[0]);\r\n   * }, []);\r\n   * // -> [2, 4]\r\n   */\n\n\n  _self.forEach = function (str, regex, callback, context) {\n    var pos = 0,\n        i = -1,\n        match;\n\n    while (match = _self.exec(str, regex, pos)) {\n      callback.call(context, match, ++i, str, regex);\n      pos = match.index + (match[0].length || 1);\n    }\n\n    return context;\n  };\n  /**\r\n   * Copies a regex object and adds flag `g`. The copy maintains special properties for named\r\n   * capture, is augmented with `XRegExp.prototype` methods, and has a fresh `lastIndex` property\r\n   * (set to zero). Native regexes are not recompiled using XRegExp syntax.\r\n   * @memberOf XRegExp\r\n   * @param {RegExp} regex Regex to globalize.\r\n   * @returns {RegExp} Copy of the provided regex with flag `g` added.\r\n   * @example\r\n   *\r\n   * var globalCopy = XRegExp.globalize(/regex/);\r\n   * globalCopy.global; // -> true\r\n   */\n\n\n  _self.globalize = function (regex) {\n    return copy(regex, \"g\");\n  };\n  /**\r\n   * Installs optional features according to the specified options.\r\n   * @memberOf XRegExp\r\n   * @param {Object|String} options Options object or string.\r\n   * @example\r\n   *\r\n   * // With an options object\r\n   * XRegExp.install({\r\n   *   // Overrides native regex methods with fixed/extended versions that support named\r\n   *   // backreferences and fix numerous cross-browser bugs\r\n   *   natives: true,\r\n   *\r\n   *   // Enables extensibility of XRegExp syntax and flags\r\n   *   extensibility: true\r\n   * });\r\n   *\r\n   * // With an options string\r\n   * XRegExp.install('natives extensibility');\r\n   *\r\n   * // Using a shortcut to install all optional features\r\n   * XRegExp.install('all');\r\n   */\n\n\n  _self.install = function (options) {\n    options = prepareOptions(options);\n\n    if (!features.natives && options.natives) {\n      setNatives(true);\n    }\n\n    if (!features.extensibility && options.extensibility) {\n      setExtensibility(true);\n    }\n  };\n  /**\r\n   * Checks whether an individual optional feature is installed.\r\n   * @memberOf XRegExp\r\n   * @param {String} feature Name of the feature to check. One of:\r\n   *   <li>`natives`\r\n   *   <li>`extensibility`\r\n   * @returns {Boolean} Whether the feature is installed.\r\n   * @example\r\n   *\r\n   * XRegExp.isInstalled('natives');\r\n   */\n\n\n  _self.isInstalled = function (feature) {\n    return !!features[feature];\n  };\n  /**\r\n   * Returns `true` if an object is a regex; `false` if it isn't. This works correctly for regexes\r\n   * created in another frame, when `instanceof` and `constructor` checks would fail.\r\n   * @memberOf XRegExp\r\n   * @param {*} value Object to check.\r\n   * @returns {Boolean} Whether the object is a `RegExp` object.\r\n   * @example\r\n   *\r\n   * XRegExp.isRegExp('string'); // -> false\r\n   * XRegExp.isRegExp(/regex/i); // -> true\r\n   * XRegExp.isRegExp(RegExp('^', 'm')); // -> true\r\n   * XRegExp.isRegExp(XRegExp('(?s).')); // -> true\r\n   */\n\n\n  _self.isRegExp = function (value) {\n    return isType(value, \"regexp\");\n  };\n  /**\r\n   * Retrieves the matches from searching a string using a chain of regexes that successively search\r\n   * within previous matches. The provided `chain` array can contain regexes and objects with `regex`\r\n   * and `backref` properties. When a backreference is specified, the named or numbered backreference\r\n   * is passed forward to the next regex or returned.\r\n   * @memberOf XRegExp\r\n   * @param {String} str String to search.\r\n   * @param {Array} chain Regexes that each search for matches within preceding results.\r\n   * @returns {Array} Matches by the last regex in the chain, or an empty array.\r\n   * @example\r\n   *\r\n   * // Basic usage; matches numbers within <b> tags\r\n   * XRegExp.matchChain('1 <b>2</b> 3 <b>4 a 56</b>', [\r\n   *   XRegExp('(?is)<b>.*?</b>'),\r\n   *   /\\d+/\r\n   * ]);\r\n   * // -> ['2', '4', '56']\r\n   *\r\n   * // Passing forward and returning specific backreferences\r\n   * html = '<a href=\"http://xregexp.com/api/\">XRegExp</a>\\\r\n   *         <a href=\"http://www.google.com/\">Google</a>';\r\n   * XRegExp.matchChain(html, [\r\n   *   {regex: /<a href=\"([^\"]+)\">/i, backref: 1},\r\n   *   {regex: XRegExp('(?i)^https?://(?<domain>[^/?#]+)'), backref: 'domain'}\r\n   * ]);\r\n   * // -> ['xregexp.com', 'www.google.com']\r\n   */\n\n\n  _self.matchChain = function (str, chain) {\n    return function recurseChain(values, level) {\n      var item = chain[level].regex ? chain[level] : {\n        regex: chain[level]\n      },\n          matches = [],\n          addMatch = function addMatch(match) {\n        matches.push(item.backref ? match[item.backref] || \"\" : match[0]);\n      },\n          i;\n\n      for (i = 0; i < values.length; ++i) {\n        _self.forEach(values[i], item.regex, addMatch);\n      }\n\n      return level === chain.length - 1 || !matches.length ? matches : recurseChain(matches, level + 1);\n    }([str], 0);\n  };\n  /**\r\n   * Returns a new string with one or all matches of a pattern replaced. The pattern can be a string\r\n   * or regex, and the replacement can be a string or a function to be called for each match. To\r\n   * perform a global search and replace, use the optional `scope` argument or include flag `g` if\r\n   * using a regex. Replacement strings can use `${n}` for named and numbered backreferences.\r\n   * Replacement functions can use named backreferences via `arguments[0].name`. Also fixes browser\r\n   * bugs compared to the native `String.prototype.replace` and can be used reliably cross-browser.\r\n   * @memberOf XRegExp\r\n   * @param {String} str String to search.\r\n   * @param {RegExp|String} search Search pattern to be replaced.\r\n   * @param {String|Function} replacement Replacement string or a function invoked to create it.\r\n   *   Replacement strings can include special replacement syntax:\r\n   *     <li>$$ - Inserts a literal '$'.\r\n   *     <li>$&, $0 - Inserts the matched substring.\r\n   *     <li>$` - Inserts the string that precedes the matched substring (left context).\r\n   *     <li>$' - Inserts the string that follows the matched substring (right context).\r\n   *     <li>$n, $nn - Where n/nn are digits referencing an existent capturing group, inserts\r\n   *       backreference n/nn.\r\n   *     <li>${n} - Where n is a name or any number of digits that reference an existent capturing\r\n   *       group, inserts backreference n.\r\n   *   Replacement functions are invoked with three or more arguments:\r\n   *     <li>The matched substring (corresponds to $& above). Named backreferences are accessible as\r\n   *       properties of this first argument.\r\n   *     <li>0..n arguments, one for each backreference (corresponding to $1, $2, etc. above).\r\n   *     <li>The zero-based index of the match within the total search string.\r\n   *     <li>The total string being searched.\r\n   * @param {String} [scope='one'] Use 'one' to replace the first match only, or 'all'. If not\r\n   *   explicitly specified and using a regex with flag `g`, `scope` is 'all'.\r\n   * @returns {String} New string with one or all matches replaced.\r\n   * @example\r\n   *\r\n   * // Regex search, using named backreferences in replacement string\r\n   * var name = XRegExp('(?<first>\\\\w+) (?<last>\\\\w+)');\r\n   * XRegExp.replace('John Smith', name, '${last}, ${first}');\r\n   * // -> 'Smith, John'\r\n   *\r\n   * // Regex search, using named backreferences in replacement function\r\n   * XRegExp.replace('John Smith', name, function (match) {\r\n   *   return match.last + ', ' + match.first;\r\n   * });\r\n   * // -> 'Smith, John'\r\n   *\r\n   * // Global string search/replacement\r\n   * XRegExp.replace('RegExp builds RegExps', 'RegExp', 'XRegExp', 'all');\r\n   * // -> 'XRegExp builds XRegExps'\r\n   */\n\n\n  _self.replace = function (str, search, replacement, scope) {\n    var isRegex = _self.isRegExp(search),\n        search2 = search,\n        result;\n\n    if (isRegex) {\n      if (scope === undef && search.global) {\n        scope = \"all\"; // Follow flag g when `scope` isn't explicit\n      } // Note that since a copy is used, `search`'s `lastIndex` isn't updated *during* replacement iterations\n\n\n      search2 = copy(search, scope === \"all\" ? \"g\" : \"\", scope === \"all\" ? \"\" : \"g\");\n    } else if (scope === \"all\") {\n      search2 = new RegExp(_self.escape(String(search)), \"g\");\n    }\n\n    result = fixed.replace.call(String(str), search2, replacement); // Fixed `replace` required for named backreferences, etc.\n\n    if (isRegex && search.global) {\n      search.lastIndex = 0; // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)\n    }\n\n    return result;\n  };\n  /**\r\n   * Splits a string into an array of strings using a regex or string separator. Matches of the\r\n   * separator are not included in the result array. However, if `separator` is a regex that contains\r\n   * capturing groups, backreferences are spliced into the result each time `separator` is matched.\r\n   * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably\r\n   * cross-browser.\r\n   * @memberOf XRegExp\r\n   * @param {String} str String to split.\r\n   * @param {RegExp|String} separator Regex or string to use for separating the string.\r\n   * @param {Number} [limit] Maximum number of items to include in the result array.\r\n   * @returns {Array} Array of substrings.\r\n   * @example\r\n   *\r\n   * // Basic use\r\n   * XRegExp.split('a b c', ' ');\r\n   * // -> ['a', 'b', 'c']\r\n   *\r\n   * // With limit\r\n   * XRegExp.split('a b c', ' ', 2);\r\n   * // -> ['a', 'b']\r\n   *\r\n   * // Backreferences in result array\r\n   * XRegExp.split('..word1..', /([a-z]+)(\\d+)/i);\r\n   * // -> ['..', 'word', '1', '..']\r\n   */\n\n\n  _self.split = function (str, separator, limit) {\n    return fixed.split.call(str, separator, limit);\n  };\n  /**\r\n   * Executes a regex search in a specified string. Returns `true` or `false`. Optional `pos` and\r\n   * `sticky` arguments specify the search start position, and whether the match must start at the\r\n   * specified position only. The `lastIndex` property of the provided regex is not used, but is\r\n   * updated for compatibility. Also fixes browser bugs compared to the native\r\n   * `RegExp.prototype.test` and can be used reliably cross-browser.\r\n   * @memberOf XRegExp\r\n   * @param {String} str String to search.\r\n   * @param {RegExp} regex Regex to search with.\r\n   * @param {Number} [pos=0] Zero-based index at which to start the search.\r\n   * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position\r\n   *   only. The string `'sticky'` is accepted as an alternative to `true`.\r\n   * @returns {Boolean} Whether the regex matched the provided value.\r\n   * @example\r\n   *\r\n   * // Basic use\r\n   * XRegExp.test('abc', /c/); // -> true\r\n   *\r\n   * // With pos and sticky\r\n   * XRegExp.test('abc', /c/, 0, 'sticky'); // -> false\r\n   */\n\n\n  _self.test = function (str, regex, pos, sticky) {\n    // Do this the easy way :-)\n    return !!_self.exec(str, regex, pos, sticky);\n  };\n  /**\r\n   * Uninstalls optional features according to the specified options.\r\n   * @memberOf XRegExp\r\n   * @param {Object|String} options Options object or string.\r\n   * @example\r\n   *\r\n   * // With an options object\r\n   * XRegExp.uninstall({\r\n   *   // Restores native regex methods\r\n   *   natives: true,\r\n   *\r\n   *   // Disables additional syntax and flag extensions\r\n   *   extensibility: true\r\n   * });\r\n   *\r\n   * // With an options string\r\n   * XRegExp.uninstall('natives extensibility');\r\n   *\r\n   * // Using a shortcut to uninstall all optional features\r\n   * XRegExp.uninstall('all');\r\n   */\n\n\n  _self.uninstall = function (options) {\n    options = prepareOptions(options);\n\n    if (features.natives && options.natives) {\n      setNatives(false);\n    }\n\n    if (features.extensibility && options.extensibility) {\n      setExtensibility(false);\n    }\n  };\n  /**\r\n   * Returns an XRegExp object that is the union of the given patterns. Patterns can be provided as\r\n   * regex objects or strings. Metacharacters are escaped in patterns provided as strings.\r\n   * Backreferences in provided regex objects are automatically renumbered to work correctly. Native\r\n   * flags used by provided regexes are ignored in favor of the `flags` argument.\r\n   * @memberOf XRegExp\r\n   * @param {Array} patterns Regexes and strings to combine.\r\n   * @param {String} [flags] Any combination of XRegExp flags.\r\n   * @returns {RegExp} Union of the provided regexes and strings.\r\n   * @example\r\n   *\r\n   * XRegExp.union(['a+b*c', /(dogs)\\1/, /(cats)\\1/], 'i');\r\n   * // -> /a\\+b\\*c|(dogs)\\1|(cats)\\2/i\r\n   *\r\n   * XRegExp.union([XRegExp('(?<pet>dogs)\\\\k<pet>'), XRegExp('(?<pet>cats)\\\\k<pet>')]);\r\n   * // -> XRegExp('(?<pet>dogs)\\\\k<pet>|(?<pet>cats)\\\\k<pet>')\r\n   */\n\n\n  _self.union = function (patterns, flags) {\n    var parts = /(\\()(?!\\?)|\\\\([1-9]\\d*)|\\\\[\\s\\S]|\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*]/g,\n        numCaptures = 0,\n        numPriorCaptures,\n        captureNames,\n        rewrite = function rewrite(match, paren, backref) {\n      var name = captureNames[numCaptures - numPriorCaptures];\n\n      if (paren) {\n        // Capturing group\n        ++numCaptures;\n\n        if (name) {\n          // If the current capture has a name\n          return \"(?<\" + name + \">\";\n        }\n      } else if (backref) {\n        // Backreference\n        return \"\\\\\" + (+backref + numPriorCaptures);\n      }\n\n      return match;\n    },\n        output = [],\n        pattern,\n        i;\n\n    if (!(isType(patterns, \"array\") && patterns.length)) {\n      throw new TypeError(\"patterns must be a nonempty array\");\n    }\n\n    for (i = 0; i < patterns.length; ++i) {\n      pattern = patterns[i];\n\n      if (_self.isRegExp(pattern)) {\n        numPriorCaptures = numCaptures;\n        captureNames = pattern.xregexp && pattern.xregexp.captureNames || []; // Rewrite backreferences. Passing to XRegExp dies on octals and ensures patterns\n        // are independently valid; helps keep this simple. Named captures are put back\n\n        output.push(_self(pattern.source).source.replace(parts, rewrite));\n      } else {\n        output.push(_self.escape(pattern));\n      }\n    }\n\n    return _self(output.join(\"|\"), flags);\n  };\n  /**\r\n   * The XRegExp version number.\r\n   * @static\r\n   * @memberOf XRegExp\r\n   * @type String\r\n   */\n\n\n  _self.version = \"2.0.0\";\n  /*--------------------------------------\r\n   *  Fixed/extended native methods\r\n   *------------------------------------*/\n\n  /**\r\n   * Adds named capture support (with backreferences returned as `result.name`), and fixes browser\r\n   * bugs in the native `RegExp.prototype.exec`. Calling `XRegExp.install('natives')` uses this to\r\n   * override the native method. Use via `XRegExp.exec` without overriding natives.\r\n   * @private\r\n   * @param {String} str String to search.\r\n   * @returns {Array} Match array with named backreference properties, or null.\r\n   */\n\n  fixed.exec = function (str) {\n    var match, name, r2, origLastIndex, i;\n\n    if (!this.global) {\n      origLastIndex = this.lastIndex;\n    }\n\n    match = nativ.exec.apply(this, arguments);\n\n    if (match) {\n      // Fix browsers whose `exec` methods don't consistently return `undefined` for\n      // nonparticipating capturing groups\n      if (!compliantExecNpcg && match.length > 1 && lastIndexOf(match, \"\") > -1) {\n        r2 = new RegExp(this.source, nativ.replace.call(getNativeFlags(this), \"g\", \"\")); // Using `str.slice(match.index)` rather than `match[0]` in case lookahead allowed\n        // matching due to characters outside the match\n\n        nativ.replace.call(String(str).slice(match.index), r2, function () {\n          var i;\n\n          for (i = 1; i < arguments.length - 2; ++i) {\n            if (arguments[i] === undef) {\n              match[i] = undef;\n            }\n          }\n        });\n      } // Attach named capture properties\n\n\n      if (this.xregexp && this.xregexp.captureNames) {\n        for (i = 1; i < match.length; ++i) {\n          name = this.xregexp.captureNames[i - 1];\n\n          if (name) {\n            match[name] = match[i];\n          }\n        }\n      } // Fix browsers that increment `lastIndex` after zero-length matches\n\n\n      if (this.global && !match[0].length && this.lastIndex > match.index) {\n        this.lastIndex = match.index;\n      }\n    }\n\n    if (!this.global) {\n      this.lastIndex = origLastIndex; // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)\n    }\n\n    return match;\n  };\n  /**\r\n   * Fixes browser bugs in the native `RegExp.prototype.test`. Calling `XRegExp.install('natives')`\r\n   * uses this to override the native method.\r\n   * @private\r\n   * @param {String} str String to search.\r\n   * @returns {Boolean} Whether the regex matched the provided value.\r\n   */\n\n\n  fixed.test = function (str) {\n    // Do this the easy way :-)\n    return !!fixed.exec.call(this, str);\n  };\n  /**\r\n   * Adds named capture support (with backreferences returned as `result.name`), and fixes browser\r\n   * bugs in the native `String.prototype.match`. Calling `XRegExp.install('natives')` uses this to\r\n   * override the native method.\r\n   * @private\r\n   * @param {RegExp} regex Regex to search with.\r\n   * @returns {Array} If `regex` uses flag g, an array of match strings or null. Without flag g, the\r\n   *   result of calling `regex.exec(this)`.\r\n   */\n\n\n  fixed.match = function (regex) {\n    if (!_self.isRegExp(regex)) {\n      regex = new RegExp(regex); // Use native `RegExp`\n    } else if (regex.global) {\n      var result = nativ.match.apply(this, arguments);\n      regex.lastIndex = 0; // Fixes IE bug\n\n      return result;\n    }\n\n    return fixed.exec.call(regex, this);\n  };\n  /**\r\n   * Adds support for `${n}` tokens for named and numbered backreferences in replacement text, and\r\n   * provides named backreferences to replacement functions as `arguments[0].name`. Also fixes\r\n   * browser bugs in replacement text syntax when performing a replacement using a nonregex search\r\n   * value, and the value of a replacement regex's `lastIndex` property during replacement iterations\r\n   * and upon completion. Note that this doesn't support SpiderMonkey's proprietary third (`flags`)\r\n   * argument. Calling `XRegExp.install('natives')` uses this to override the native method. Use via\r\n   * `XRegExp.replace` without overriding natives.\r\n   * @private\r\n   * @param {RegExp|String} search Search pattern to be replaced.\r\n   * @param {String|Function} replacement Replacement string or a function invoked to create it.\r\n   * @returns {String} New string with one or all matches replaced.\r\n   */\n\n\n  fixed.replace = function (search, replacement) {\n    var isRegex = _self.isRegExp(search),\n        captureNames,\n        result,\n        str,\n        origLastIndex;\n\n    if (isRegex) {\n      if (search.xregexp) {\n        captureNames = search.xregexp.captureNames;\n      }\n\n      if (!search.global) {\n        origLastIndex = search.lastIndex;\n      }\n    } else {\n      search += \"\";\n    }\n\n    if (isType(replacement, \"function\")) {\n      result = nativ.replace.call(String(this), search, function () {\n        var args = arguments,\n            i;\n\n        if (captureNames) {\n          // Change the `arguments[0]` string primitive to a `String` object that can store properties\n          args[0] = new String(args[0]); // Store named backreferences on the first argument\n\n          for (i = 0; i < captureNames.length; ++i) {\n            if (captureNames[i]) {\n              args[0][captureNames[i]] = args[i + 1];\n            }\n          }\n        } // Update `lastIndex` before calling `replacement`.\n        // Fixes IE, Chrome, Firefox, Safari bug (last tested IE 9, Chrome 17, Firefox 11, Safari 5.1)\n\n\n        if (isRegex && search.global) {\n          search.lastIndex = args[args.length - 2] + args[0].length;\n        }\n\n        return replacement.apply(null, args);\n      });\n    } else {\n      str = String(this); // Ensure `args[args.length - 1]` will be a string when given nonstring `this`\n\n      result = nativ.replace.call(str, search, function () {\n        var args = arguments; // Keep this function's `arguments` available through closure\n\n        return nativ.replace.call(String(replacement), replacementToken, function ($0, $1, $2) {\n          var n; // Named or numbered backreference with curly brackets\n\n          if ($1) {\n            /* XRegExp behavior for `${n}`:\r\n             * 1. Backreference to numbered capture, where `n` is 1+ digits. `0`, `00`, etc. is the entire match.\r\n             * 2. Backreference to named capture `n`, if it exists and is not a number overridden by numbered capture.\r\n             * 3. Otherwise, it's an error.\r\n             */\n            n = +$1; // Type-convert; drop leading zeros\n\n            if (n <= args.length - 3) {\n              return args[n] || \"\";\n            }\n\n            n = captureNames ? lastIndexOf(captureNames, $1) : -1;\n\n            if (n < 0) {\n              throw new SyntaxError(\"backreference to undefined group \" + $0);\n            }\n\n            return args[n + 1] || \"\";\n          } // Else, special variable or numbered backreference (without curly brackets)\n\n\n          if ($2 === \"$\") return \"$\";\n          if ($2 === \"&\" || +$2 === 0) return args[0]; // $&, $0 (not followed by 1-9), $00\n\n          if ($2 === \"`\") return args[args.length - 1].slice(0, args[args.length - 2]);\n          if ($2 === \"'\") return args[args.length - 1].slice(args[args.length - 2] + args[0].length); // Else, numbered backreference (without curly brackets)\n\n          $2 = +$2; // Type-convert; drop leading zero\n\n          /* XRegExp behavior:\r\n           * - Backreferences without curly brackets end after 1 or 2 digits. Use `${..}` for more digits.\r\n           * - `$1` is an error if there are no capturing groups.\r\n           * - `$10` is an error if there are less than 10 capturing groups. Use `${1}0` instead.\r\n           * - `$01` is equivalent to `$1` if a capturing group exists, otherwise it's an error.\r\n           * - `$0` (not followed by 1-9), `$00`, and `$&` are the entire match.\r\n           * Native behavior, for comparison:\r\n           * - Backreferences end after 1 or 2 digits. Cannot use backreference to capturing group 100+.\r\n           * - `$1` is a literal `$1` if there are no capturing groups.\r\n           * - `$10` is `$1` followed by a literal `0` if there are less than 10 capturing groups.\r\n           * - `$01` is equivalent to `$1` if a capturing group exists, otherwise it's a literal `$01`.\r\n           * - `$0` is a literal `$0`. `$&` is the entire match.\r\n           */\n\n          if (!isNaN($2)) {\n            if ($2 > args.length - 3) {\n              throw new SyntaxError(\"backreference to undefined group \" + $0);\n            }\n\n            return args[$2] || \"\";\n          }\n\n          throw new SyntaxError(\"invalid token \" + $0);\n        });\n      });\n    }\n\n    if (isRegex) {\n      if (search.global) {\n        search.lastIndex = 0; // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)\n      } else {\n        search.lastIndex = origLastIndex; // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)\n      }\n    }\n\n    return result;\n  };\n  /**\r\n   * Fixes browser bugs in the native `String.prototype.split`. Calling `XRegExp.install('natives')`\r\n   * uses this to override the native method. Use via `XRegExp.split` without overriding natives.\r\n   * @private\r\n   * @param {RegExp|String} separator Regex or string to use for separating the string.\r\n   * @param {Number} [limit] Maximum number of items to include in the result array.\r\n   * @returns {Array} Array of substrings.\r\n   */\n\n\n  fixed.split = function (separator, limit) {\n    if (!_self.isRegExp(separator)) {\n      return nativ.split.apply(this, arguments); // use faster native method\n    }\n\n    var str = String(this),\n        origLastIndex = separator.lastIndex,\n        output = [],\n        lastLastIndex = 0,\n        lastLength;\n    /* Values for `limit`, per the spec:\r\n     * If undefined: pow(2,32) - 1\r\n     * If 0, Infinity, or NaN: 0\r\n     * If positive number: limit = floor(limit); if (limit >= pow(2,32)) limit -= pow(2,32);\r\n     * If negative number: pow(2,32) - floor(abs(limit))\r\n     * If other: Type-convert, then use the above rules\r\n     */\n\n    limit = (limit === undef ? -1 : limit) >>> 0;\n\n    _self.forEach(str, separator, function (match) {\n      if (match.index + match[0].length > lastLastIndex) {\n        // != `if (match[0].length)`\n        output.push(str.slice(lastLastIndex, match.index));\n\n        if (match.length > 1 && match.index < str.length) {\n          Array.prototype.push.apply(output, match.slice(1));\n        }\n\n        lastLength = match[0].length;\n        lastLastIndex = match.index + lastLength;\n      }\n    });\n\n    if (lastLastIndex === str.length) {\n      if (!nativ.test.call(separator, \"\") || lastLength) {\n        output.push(\"\");\n      }\n    } else {\n      output.push(str.slice(lastLastIndex));\n    }\n\n    separator.lastIndex = origLastIndex;\n    return output.length > limit ? output.slice(0, limit) : output;\n  };\n  /*--------------------------------------\r\n   *  Built-in tokens\r\n   *------------------------------------*/\n  // Shortcut\n\n\n  add = addToken.on;\n  /* Letter identity escapes that natively match literal characters: \\p, \\P, etc.\r\n   * Should be SyntaxErrors but are allowed in web reality. XRegExp makes them errors for cross-\r\n   * browser consistency and to reserve their syntax, but lets them be superseded by XRegExp addons.\r\n   */\n\n  add(/\\\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\\dA-Fa-f]{4})|x(?![\\dA-Fa-f]{2}))/, function (match, scope) {\n    // \\B is allowed in default scope only\n    if (match[1] === \"B\" && scope === defaultScope) {\n      return match[0];\n    }\n\n    throw new SyntaxError(\"invalid escape \" + match[0]);\n  }, {\n    scope: \"all\"\n  });\n  /* Empty character class: [] or [^]\r\n   * Fixes a critical cross-browser syntax inconsistency. Unless this is standardized (per the spec),\r\n   * regex syntax can't be accurately parsed because character class endings can't be determined.\r\n   */\n\n  add(/\\[(\\^?)]/, function (match) {\n    // For cross-browser compatibility with ES3, convert [] to \\b\\B and [^] to [\\s\\S].\n    // (?!) should work like \\b\\B, but is unreliable in Firefox\n    return match[1] ? \"[\\\\s\\\\S]\" : \"\\\\b\\\\B\";\n  });\n  /* Comment pattern: (?# )\r\n   * Inline comments are an alternative to the line comments allowed in free-spacing mode (flag x).\r\n   */\n\n  add(/(?:\\(\\?#[^)]*\\))+/, function (match) {\n    // Keep tokens separated unless the following token is a quantifier\n    return nativ.test.call(quantifier, match.input.slice(match.index + match[0].length)) ? \"\" : \"(?:)\";\n  });\n  /* Named backreference: \\k<name>\r\n   * Backreference names can use the characters A-Z, a-z, 0-9, _, and $ only.\r\n   */\n\n  add(/\\\\k<([\\w$]+)>/, function (match) {\n    var index = isNaN(match[1]) ? lastIndexOf(this.captureNames, match[1]) + 1 : +match[1],\n        endIndex = match.index + match[0].length;\n\n    if (!index || index > this.captureNames.length) {\n      throw new SyntaxError(\"backreference to undefined group \" + match[0]);\n    } // Keep backreferences separate from subsequent literal numbers\n\n\n    return \"\\\\\" + index + (endIndex === match.input.length || isNaN(match.input.charAt(endIndex)) ? \"\" : \"(?:)\");\n  });\n  /* Whitespace and line comments, in free-spacing mode (aka extended mode, flag x) only.\r\n   */\n\n  add(/(?:\\s+|#.*)+/, function (match) {\n    // Keep tokens separated unless the following token is a quantifier\n    return nativ.test.call(quantifier, match.input.slice(match.index + match[0].length)) ? \"\" : \"(?:)\";\n  }, {\n    trigger: function trigger() {\n      return this.hasFlag(\"x\");\n    },\n    customFlags: \"x\"\n  });\n  /* Dot, in dotall mode (aka singleline mode, flag s) only.\r\n   */\n\n  add(/\\./, function () {\n    return \"[\\\\s\\\\S]\";\n  }, {\n    trigger: function trigger() {\n      return this.hasFlag(\"s\");\n    },\n    customFlags: \"s\"\n  });\n  /* Named capturing group; match the opening delimiter only: (?<name>\r\n   * Capture names can use the characters A-Z, a-z, 0-9, _, and $ only. Names can't be integers.\r\n   * Supports Python-style (?P<name> as an alternate syntax to avoid issues in recent Opera (which\r\n   * natively supports the Python-style syntax). Otherwise, XRegExp might treat numbered\r\n   * backreferences to Python-style named capture as octals.\r\n   */\n\n  add(/\\(\\?P?<([\\w$]+)>/, function (match) {\n    if (!isNaN(match[1])) {\n      // Avoid incorrect lookups, since named backreferences are added to match arrays\n      throw new SyntaxError(\"can't use integer as capture name \" + match[0]);\n    }\n\n    this.captureNames.push(match[1]);\n    this.hasNamedCapture = true;\n    return \"(\";\n  });\n  /* Numbered backreference or octal, plus any following digits: \\0, \\11, etc.\r\n   * Octals except \\0 not followed by 0-9 and backreferences to unopened capture groups throw an\r\n   * error. Other matches are returned unaltered. IE <= 8 doesn't support backreferences greater than\r\n   * \\99 in regex syntax.\r\n   */\n\n  add(/\\\\(\\d+)/, function (match, scope) {\n    if (!(scope === defaultScope && /^[1-9]/.test(match[1]) && +match[1] <= this.captureNames.length) && match[1] !== \"0\") {\n      throw new SyntaxError(\"can't use octal escape or backreference to undefined group \" + match[0]);\n    }\n\n    return match[0];\n  }, {\n    scope: \"all\"\n  });\n  /* Capturing group; match the opening parenthesis only.\r\n   * Required for support of named capturing groups. Also adds explicit capture mode (flag n).\r\n   */\n\n  add(/\\((?!\\?)/, function () {\n    if (this.hasFlag(\"n\")) {\n      return \"(?:\";\n    }\n\n    this.captureNames.push(null);\n    return \"(\";\n  }, {\n    customFlags: \"n\"\n  });\n  /*--------------------------------------\r\n   *  Expose XRegExp\r\n   *------------------------------------*/\n  // For CommonJS enviroments\n\n  if (typeof exports !== \"undefined\") {\n    exports.XRegExp = _self;\n  }\n\n  return _self;\n}();\n/***** unicode-base.js *****/\n\n/*!\r\n * XRegExp Unicode Base v1.0.0\r\n * (c) 2008-2012 Steven Levithan <http://xregexp.com/>\r\n * MIT License\r\n * Uses Unicode 6.1 <http://unicode.org/>\r\n */\n\n/**\r\n * Adds support for the `\\p{L}` or `\\p{Letter}` Unicode category. Addon packages for other Unicode\r\n * categories, scripts, blocks, and properties are available separately. All Unicode tokens can be\r\n * inverted using `\\P{..}` or `\\p{^..}`. Token names are case insensitive, and any spaces, hyphens,\r\n * and underscores are ignored.\r\n * @requires XRegExp\r\n */\n\n\n(function (XRegExp) {\n  \"use strict\";\n\n  var unicode = {};\n  /*--------------------------------------\r\n   *  Private helper functions\r\n   *------------------------------------*/\n  // Generates a standardized token name (lowercase, with hyphens, spaces, and underscores removed)\n\n  function slug(name) {\n    return name.replace(/[- _]+/g, \"\").toLowerCase();\n  } // Expands a list of Unicode code points and ranges to be usable in a regex character class\n\n\n  function expand(str) {\n    return str.replace(/\\w{4}/g, \"\\\\u$&\");\n  } // Adds leading zeros if shorter than four characters\n\n\n  function pad4(str) {\n    while (str.length < 4) {\n      str = \"0\" + str;\n    }\n\n    return str;\n  } // Converts a hexadecimal number to decimal\n\n\n  function dec(hex) {\n    return parseInt(hex, 16);\n  } // Converts a decimal number to hexadecimal\n\n\n  function hex(dec) {\n    return parseInt(dec, 10).toString(16);\n  } // Inverts a list of Unicode code points and ranges\n\n\n  function invert(range) {\n    var output = [],\n        lastEnd = -1,\n        start;\n    XRegExp.forEach(range, /\\\\u(\\w{4})(?:-\\\\u(\\w{4}))?/, function (m) {\n      start = dec(m[1]);\n\n      if (start > lastEnd + 1) {\n        output.push(\"\\\\u\" + pad4(hex(lastEnd + 1)));\n\n        if (start > lastEnd + 2) {\n          output.push(\"-\\\\u\" + pad4(hex(start - 1)));\n        }\n      }\n\n      lastEnd = dec(m[2] || m[1]);\n    });\n\n    if (lastEnd < 0xFFFF) {\n      output.push(\"\\\\u\" + pad4(hex(lastEnd + 1)));\n\n      if (lastEnd < 0xFFFE) {\n        output.push(\"-\\\\uFFFF\");\n      }\n    }\n\n    return output.join(\"\");\n  } // Generates an inverted token on first use\n\n\n  function cacheInversion(item) {\n    return unicode[\"^\" + item] || (unicode[\"^\" + item] = invert(unicode[item]));\n  }\n  /*--------------------------------------\r\n   *  Core functionality\r\n   *------------------------------------*/\n\n\n  XRegExp.install(\"extensibility\");\n  /**\r\n   * Adds to the list of Unicode properties that XRegExp regexes can match via \\p{..} or \\P{..}.\r\n   * @memberOf XRegExp\r\n   * @param {Object} pack Named sets of Unicode code points and ranges.\r\n   * @param {Object} [aliases] Aliases for the primary token names.\r\n   * @example\r\n   *\r\n   * XRegExp.addUnicodePackage({\r\n   *   XDigit: '0030-00390041-00460061-0066' // 0-9A-Fa-f\r\n   * }, {\r\n   *   XDigit: 'Hexadecimal'\r\n   * });\r\n   */\n\n  XRegExp.addUnicodePackage = function (pack, aliases) {\n    var p;\n\n    if (!XRegExp.isInstalled(\"extensibility\")) {\n      throw new Error(\"extensibility must be installed before adding Unicode packages\");\n    }\n\n    if (pack) {\n      for (p in pack) {\n        if (pack.hasOwnProperty(p)) {\n          unicode[slug(p)] = expand(pack[p]);\n        }\n      }\n    }\n\n    if (aliases) {\n      for (p in aliases) {\n        if (aliases.hasOwnProperty(p)) {\n          unicode[slug(aliases[p])] = unicode[slug(p)];\n        }\n      }\n    }\n  };\n  /* Adds data for the Unicode `Letter` category. Addon packages include other categories, scripts,\r\n   * blocks, and properties.\r\n   */\n\n\n  XRegExp.addUnicodePackage({\n    L: \"0041-005A0061-007A00AA00B500BA00C0-00D600D8-00F600F8-02C102C6-02D102E0-02E402EC02EE0370-037403760377037A-037D03860388-038A038C038E-03A103A3-03F503F7-0481048A-05270531-055605590561-058705D0-05EA05F0-05F20620-064A066E066F0671-06D306D506E506E606EE06EF06FA-06FC06FF07100712-072F074D-07A507B107CA-07EA07F407F507FA0800-0815081A082408280840-085808A008A2-08AC0904-0939093D09500958-09610971-09770979-097F0985-098C098F09900993-09A809AA-09B009B209B6-09B909BD09CE09DC09DD09DF-09E109F009F10A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A59-0A5C0A5E0A72-0A740A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABD0AD00AE00AE10B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3D0B5C0B5D0B5F-0B610B710B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BD00C05-0C0C0C0E-0C100C12-0C280C2A-0C330C35-0C390C3D0C580C590C600C610C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBD0CDE0CE00CE10CF10CF20D05-0D0C0D0E-0D100D12-0D3A0D3D0D4E0D600D610D7A-0D7F0D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60E01-0E300E320E330E40-0E460E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB00EB20EB30EBD0EC0-0EC40EC60EDC-0EDF0F000F40-0F470F49-0F6C0F88-0F8C1000-102A103F1050-1055105A-105D106110651066106E-10701075-1081108E10A0-10C510C710CD10D0-10FA10FC-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A1380-138F13A0-13F41401-166C166F-167F1681-169A16A0-16EA1700-170C170E-17111720-17311740-17511760-176C176E-17701780-17B317D717DC1820-18771880-18A818AA18B0-18F51900-191C1950-196D1970-19741980-19AB19C1-19C71A00-1A161A20-1A541AA71B05-1B331B45-1B4B1B83-1BA01BAE1BAF1BBA-1BE51C00-1C231C4D-1C4F1C5A-1C7D1CE9-1CEC1CEE-1CF11CF51CF61D00-1DBF1E00-1F151F18-1F1D1F20-1F451F48-1F4D1F50-1F571F591F5B1F5D1F5F-1F7D1F80-1FB41FB6-1FBC1FBE1FC2-1FC41FC6-1FCC1FD0-1FD31FD6-1FDB1FE0-1FEC1FF2-1FF41FF6-1FFC2071207F2090-209C21022107210A-211321152119-211D212421262128212A-212D212F-2139213C-213F2145-2149214E218321842C00-2C2E2C30-2C5E2C60-2CE42CEB-2CEE2CF22CF32D00-2D252D272D2D2D30-2D672D6F2D80-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDE2E2F300530063031-3035303B303C3041-3096309D-309F30A1-30FA30FC-30FF3105-312D3131-318E31A0-31BA31F0-31FF3400-4DB54E00-9FCCA000-A48CA4D0-A4FDA500-A60CA610-A61FA62AA62BA640-A66EA67F-A697A6A0-A6E5A717-A71FA722-A788A78B-A78EA790-A793A7A0-A7AAA7F8-A801A803-A805A807-A80AA80C-A822A840-A873A882-A8B3A8F2-A8F7A8FBA90A-A925A930-A946A960-A97CA984-A9B2A9CFAA00-AA28AA40-AA42AA44-AA4BAA60-AA76AA7AAA80-AAAFAAB1AAB5AAB6AAB9-AABDAAC0AAC2AADB-AADDAAE0-AAEAAAF2-AAF4AB01-AB06AB09-AB0EAB11-AB16AB20-AB26AB28-AB2EABC0-ABE2AC00-D7A3D7B0-D7C6D7CB-D7FBF900-FA6DFA70-FAD9FB00-FB06FB13-FB17FB1DFB1F-FB28FB2A-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FBB1FBD3-FD3DFD50-FD8FFD92-FDC7FDF0-FDFBFE70-FE74FE76-FEFCFF21-FF3AFF41-FF5AFF66-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDC\"\n  }, {\n    L: \"Letter\"\n  });\n  /* Adds Unicode property syntax to XRegExp: \\p{..}, \\P{..}, \\p{^..}\r\n   */\n\n  XRegExp.addToken(/\\\\([pP]){(\\^?)([^}]*)}/, function (match, scope) {\n    var inv = match[1] === \"P\" || match[2] ? \"^\" : \"\",\n        item = slug(match[3]); // The double negative \\P{^..} is invalid\n\n    if (match[1] === \"P\" && match[2]) {\n      throw new SyntaxError(\"invalid double negation \\\\P{^\");\n    }\n\n    if (!unicode.hasOwnProperty(item)) {\n      throw new SyntaxError(\"invalid or unknown Unicode property \" + match[0]);\n    }\n\n    return scope === \"class\" ? inv ? cacheInversion(item) : unicode[item] : \"[\" + inv + unicode[item] + \"]\";\n  }, {\n    scope: \"all\"\n  });\n})(XRegExp);\n/***** unicode-categories.js *****/\n\n/*!\r\n * XRegExp Unicode Categories v1.2.0\r\n * (c) 2010-2012 Steven Levithan <http://xregexp.com/>\r\n * MIT License\r\n * Uses Unicode 6.1 <http://unicode.org/>\r\n */\n\n/**\r\n * Adds support for all Unicode categories (aka properties) E.g., `\\p{Lu}` or\r\n * `\\p{Uppercase Letter}`. Token names are case insensitive, and any spaces, hyphens, and\r\n * underscores are ignored.\r\n * @requires XRegExp, XRegExp Unicode Base\r\n */\n\n\n(function (XRegExp) {\n  \"use strict\";\n\n  if (!XRegExp.addUnicodePackage) {\n    throw new ReferenceError(\"Unicode Base must be loaded before Unicode Categories\");\n  }\n\n  XRegExp.install(\"extensibility\");\n  XRegExp.addUnicodePackage({\n    //L: \"\", // Included in the Unicode Base addon\n    Ll: \"0061-007A00B500DF-00F600F8-00FF01010103010501070109010B010D010F01110113011501170119011B011D011F01210123012501270129012B012D012F01310133013501370138013A013C013E014001420144014601480149014B014D014F01510153015501570159015B015D015F01610163016501670169016B016D016F0171017301750177017A017C017E-0180018301850188018C018D019201950199-019B019E01A101A301A501A801AA01AB01AD01B001B401B601B901BA01BD-01BF01C601C901CC01CE01D001D201D401D601D801DA01DC01DD01DF01E101E301E501E701E901EB01ED01EF01F001F301F501F901FB01FD01FF02010203020502070209020B020D020F02110213021502170219021B021D021F02210223022502270229022B022D022F02310233-0239023C023F0240024202470249024B024D024F-02930295-02AF037103730377037B-037D039003AC-03CE03D003D103D5-03D703D903DB03DD03DF03E103E303E503E703E903EB03ED03EF-03F303F503F803FB03FC0430-045F04610463046504670469046B046D046F04710473047504770479047B047D047F0481048B048D048F04910493049504970499049B049D049F04A104A304A504A704A904AB04AD04AF04B104B304B504B704B904BB04BD04BF04C204C404C604C804CA04CC04CE04CF04D104D304D504D704D904DB04DD04DF04E104E304E504E704E904EB04ED04EF04F104F304F504F704F904FB04FD04FF05010503050505070509050B050D050F05110513051505170519051B051D051F05210523052505270561-05871D00-1D2B1D6B-1D771D79-1D9A1E011E031E051E071E091E0B1E0D1E0F1E111E131E151E171E191E1B1E1D1E1F1E211E231E251E271E291E2B1E2D1E2F1E311E331E351E371E391E3B1E3D1E3F1E411E431E451E471E491E4B1E4D1E4F1E511E531E551E571E591E5B1E5D1E5F1E611E631E651E671E691E6B1E6D1E6F1E711E731E751E771E791E7B1E7D1E7F1E811E831E851E871E891E8B1E8D1E8F1E911E931E95-1E9D1E9F1EA11EA31EA51EA71EA91EAB1EAD1EAF1EB11EB31EB51EB71EB91EBB1EBD1EBF1EC11EC31EC51EC71EC91ECB1ECD1ECF1ED11ED31ED51ED71ED91EDB1EDD1EDF1EE11EE31EE51EE71EE91EEB1EED1EEF1EF11EF31EF51EF71EF91EFB1EFD1EFF-1F071F10-1F151F20-1F271F30-1F371F40-1F451F50-1F571F60-1F671F70-1F7D1F80-1F871F90-1F971FA0-1FA71FB0-1FB41FB61FB71FBE1FC2-1FC41FC61FC71FD0-1FD31FD61FD71FE0-1FE71FF2-1FF41FF61FF7210A210E210F2113212F21342139213C213D2146-2149214E21842C30-2C5E2C612C652C662C682C6A2C6C2C712C732C742C76-2C7B2C812C832C852C872C892C8B2C8D2C8F2C912C932C952C972C992C9B2C9D2C9F2CA12CA32CA52CA72CA92CAB2CAD2CAF2CB12CB32CB52CB72CB92CBB2CBD2CBF2CC12CC32CC52CC72CC92CCB2CCD2CCF2CD12CD32CD52CD72CD92CDB2CDD2CDF2CE12CE32CE42CEC2CEE2CF32D00-2D252D272D2DA641A643A645A647A649A64BA64DA64FA651A653A655A657A659A65BA65DA65FA661A663A665A667A669A66BA66DA681A683A685A687A689A68BA68DA68FA691A693A695A697A723A725A727A729A72BA72DA72F-A731A733A735A737A739A73BA73DA73FA741A743A745A747A749A74BA74DA74FA751A753A755A757A759A75BA75DA75FA761A763A765A767A769A76BA76DA76FA771-A778A77AA77CA77FA781A783A785A787A78CA78EA791A793A7A1A7A3A7A5A7A7A7A9A7FAFB00-FB06FB13-FB17FF41-FF5A\",\n    Lu: \"0041-005A00C0-00D600D8-00DE01000102010401060108010A010C010E01100112011401160118011A011C011E01200122012401260128012A012C012E01300132013401360139013B013D013F0141014301450147014A014C014E01500152015401560158015A015C015E01600162016401660168016A016C016E017001720174017601780179017B017D018101820184018601870189-018B018E-0191019301940196-0198019C019D019F01A001A201A401A601A701A901AC01AE01AF01B1-01B301B501B701B801BC01C401C701CA01CD01CF01D101D301D501D701D901DB01DE01E001E201E401E601E801EA01EC01EE01F101F401F6-01F801FA01FC01FE02000202020402060208020A020C020E02100212021402160218021A021C021E02200222022402260228022A022C022E02300232023A023B023D023E02410243-02460248024A024C024E03700372037603860388-038A038C038E038F0391-03A103A3-03AB03CF03D2-03D403D803DA03DC03DE03E003E203E403E603E803EA03EC03EE03F403F703F903FA03FD-042F04600462046404660468046A046C046E04700472047404760478047A047C047E0480048A048C048E04900492049404960498049A049C049E04A004A204A404A604A804AA04AC04AE04B004B204B404B604B804BA04BC04BE04C004C104C304C504C704C904CB04CD04D004D204D404D604D804DA04DC04DE04E004E204E404E604E804EA04EC04EE04F004F204F404F604F804FA04FC04FE05000502050405060508050A050C050E05100512051405160518051A051C051E05200522052405260531-055610A0-10C510C710CD1E001E021E041E061E081E0A1E0C1E0E1E101E121E141E161E181E1A1E1C1E1E1E201E221E241E261E281E2A1E2C1E2E1E301E321E341E361E381E3A1E3C1E3E1E401E421E441E461E481E4A1E4C1E4E1E501E521E541E561E581E5A1E5C1E5E1E601E621E641E661E681E6A1E6C1E6E1E701E721E741E761E781E7A1E7C1E7E1E801E821E841E861E881E8A1E8C1E8E1E901E921E941E9E1EA01EA21EA41EA61EA81EAA1EAC1EAE1EB01EB21EB41EB61EB81EBA1EBC1EBE1EC01EC21EC41EC61EC81ECA1ECC1ECE1ED01ED21ED41ED61ED81EDA1EDC1EDE1EE01EE21EE41EE61EE81EEA1EEC1EEE1EF01EF21EF41EF61EF81EFA1EFC1EFE1F08-1F0F1F18-1F1D1F28-1F2F1F38-1F3F1F48-1F4D1F591F5B1F5D1F5F1F68-1F6F1FB8-1FBB1FC8-1FCB1FD8-1FDB1FE8-1FEC1FF8-1FFB21022107210B-210D2110-211221152119-211D212421262128212A-212D2130-2133213E213F214521832C00-2C2E2C602C62-2C642C672C692C6B2C6D-2C702C722C752C7E-2C802C822C842C862C882C8A2C8C2C8E2C902C922C942C962C982C9A2C9C2C9E2CA02CA22CA42CA62CA82CAA2CAC2CAE2CB02CB22CB42CB62CB82CBA2CBC2CBE2CC02CC22CC42CC62CC82CCA2CCC2CCE2CD02CD22CD42CD62CD82CDA2CDC2CDE2CE02CE22CEB2CED2CF2A640A642A644A646A648A64AA64CA64EA650A652A654A656A658A65AA65CA65EA660A662A664A666A668A66AA66CA680A682A684A686A688A68AA68CA68EA690A692A694A696A722A724A726A728A72AA72CA72EA732A734A736A738A73AA73CA73EA740A742A744A746A748A74AA74CA74EA750A752A754A756A758A75AA75CA75EA760A762A764A766A768A76AA76CA76EA779A77BA77DA77EA780A782A784A786A78BA78DA790A792A7A0A7A2A7A4A7A6A7A8A7AAFF21-FF3A\",\n    Lt: \"01C501C801CB01F21F88-1F8F1F98-1F9F1FA8-1FAF1FBC1FCC1FFC\",\n    Lm: \"02B0-02C102C6-02D102E0-02E402EC02EE0374037A0559064006E506E607F407F507FA081A0824082809710E460EC610FC17D718431AA71C78-1C7D1D2C-1D6A1D781D9B-1DBF2071207F2090-209C2C7C2C7D2D6F2E2F30053031-3035303B309D309E30FC-30FEA015A4F8-A4FDA60CA67FA717-A71FA770A788A7F8A7F9A9CFAA70AADDAAF3AAF4FF70FF9EFF9F\",\n    Lo: \"00AA00BA01BB01C0-01C3029405D0-05EA05F0-05F20620-063F0641-064A066E066F0671-06D306D506EE06EF06FA-06FC06FF07100712-072F074D-07A507B107CA-07EA0800-08150840-085808A008A2-08AC0904-0939093D09500958-09610972-09770979-097F0985-098C098F09900993-09A809AA-09B009B209B6-09B909BD09CE09DC09DD09DF-09E109F009F10A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A59-0A5C0A5E0A72-0A740A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABD0AD00AE00AE10B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3D0B5C0B5D0B5F-0B610B710B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BD00C05-0C0C0C0E-0C100C12-0C280C2A-0C330C35-0C390C3D0C580C590C600C610C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBD0CDE0CE00CE10CF10CF20D05-0D0C0D0E-0D100D12-0D3A0D3D0D4E0D600D610D7A-0D7F0D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60E01-0E300E320E330E40-0E450E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB00EB20EB30EBD0EC0-0EC40EDC-0EDF0F000F40-0F470F49-0F6C0F88-0F8C1000-102A103F1050-1055105A-105D106110651066106E-10701075-1081108E10D0-10FA10FD-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A1380-138F13A0-13F41401-166C166F-167F1681-169A16A0-16EA1700-170C170E-17111720-17311740-17511760-176C176E-17701780-17B317DC1820-18421844-18771880-18A818AA18B0-18F51900-191C1950-196D1970-19741980-19AB19C1-19C71A00-1A161A20-1A541B05-1B331B45-1B4B1B83-1BA01BAE1BAF1BBA-1BE51C00-1C231C4D-1C4F1C5A-1C771CE9-1CEC1CEE-1CF11CF51CF62135-21382D30-2D672D80-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDE3006303C3041-3096309F30A1-30FA30FF3105-312D3131-318E31A0-31BA31F0-31FF3400-4DB54E00-9FCCA000-A014A016-A48CA4D0-A4F7A500-A60BA610-A61FA62AA62BA66EA6A0-A6E5A7FB-A801A803-A805A807-A80AA80C-A822A840-A873A882-A8B3A8F2-A8F7A8FBA90A-A925A930-A946A960-A97CA984-A9B2AA00-AA28AA40-AA42AA44-AA4BAA60-AA6FAA71-AA76AA7AAA80-AAAFAAB1AAB5AAB6AAB9-AABDAAC0AAC2AADBAADCAAE0-AAEAAAF2AB01-AB06AB09-AB0EAB11-AB16AB20-AB26AB28-AB2EABC0-ABE2AC00-D7A3D7B0-D7C6D7CB-D7FBF900-FA6DFA70-FAD9FB1DFB1F-FB28FB2A-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FBB1FBD3-FD3DFD50-FD8FFD92-FDC7FDF0-FDFBFE70-FE74FE76-FEFCFF66-FF6FFF71-FF9DFFA0-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDC\",\n    M: \"0300-036F0483-04890591-05BD05BF05C105C205C405C505C70610-061A064B-065F067006D6-06DC06DF-06E406E706E806EA-06ED07110730-074A07A6-07B007EB-07F30816-0819081B-08230825-08270829-082D0859-085B08E4-08FE0900-0903093A-093C093E-094F0951-0957096209630981-098309BC09BE-09C409C709C809CB-09CD09D709E209E30A01-0A030A3C0A3E-0A420A470A480A4B-0A4D0A510A700A710A750A81-0A830ABC0ABE-0AC50AC7-0AC90ACB-0ACD0AE20AE30B01-0B030B3C0B3E-0B440B470B480B4B-0B4D0B560B570B620B630B820BBE-0BC20BC6-0BC80BCA-0BCD0BD70C01-0C030C3E-0C440C46-0C480C4A-0C4D0C550C560C620C630C820C830CBC0CBE-0CC40CC6-0CC80CCA-0CCD0CD50CD60CE20CE30D020D030D3E-0D440D46-0D480D4A-0D4D0D570D620D630D820D830DCA0DCF-0DD40DD60DD8-0DDF0DF20DF30E310E34-0E3A0E47-0E4E0EB10EB4-0EB90EBB0EBC0EC8-0ECD0F180F190F350F370F390F3E0F3F0F71-0F840F860F870F8D-0F970F99-0FBC0FC6102B-103E1056-1059105E-10601062-10641067-106D1071-10741082-108D108F109A-109D135D-135F1712-17141732-1734175217531772177317B4-17D317DD180B-180D18A91920-192B1930-193B19B0-19C019C819C91A17-1A1B1A55-1A5E1A60-1A7C1A7F1B00-1B041B34-1B441B6B-1B731B80-1B821BA1-1BAD1BE6-1BF31C24-1C371CD0-1CD21CD4-1CE81CED1CF2-1CF41DC0-1DE61DFC-1DFF20D0-20F02CEF-2CF12D7F2DE0-2DFF302A-302F3099309AA66F-A672A674-A67DA69FA6F0A6F1A802A806A80BA823-A827A880A881A8B4-A8C4A8E0-A8F1A926-A92DA947-A953A980-A983A9B3-A9C0AA29-AA36AA43AA4CAA4DAA7BAAB0AAB2-AAB4AAB7AAB8AABEAABFAAC1AAEB-AAEFAAF5AAF6ABE3-ABEAABECABEDFB1EFE00-FE0FFE20-FE26\",\n    Mn: \"0300-036F0483-04870591-05BD05BF05C105C205C405C505C70610-061A064B-065F067006D6-06DC06DF-06E406E706E806EA-06ED07110730-074A07A6-07B007EB-07F30816-0819081B-08230825-08270829-082D0859-085B08E4-08FE0900-0902093A093C0941-0948094D0951-095709620963098109BC09C1-09C409CD09E209E30A010A020A3C0A410A420A470A480A4B-0A4D0A510A700A710A750A810A820ABC0AC1-0AC50AC70AC80ACD0AE20AE30B010B3C0B3F0B41-0B440B4D0B560B620B630B820BC00BCD0C3E-0C400C46-0C480C4A-0C4D0C550C560C620C630CBC0CBF0CC60CCC0CCD0CE20CE30D41-0D440D4D0D620D630DCA0DD2-0DD40DD60E310E34-0E3A0E47-0E4E0EB10EB4-0EB90EBB0EBC0EC8-0ECD0F180F190F350F370F390F71-0F7E0F80-0F840F860F870F8D-0F970F99-0FBC0FC6102D-10301032-10371039103A103D103E10581059105E-10601071-1074108210851086108D109D135D-135F1712-17141732-1734175217531772177317B417B517B7-17BD17C617C9-17D317DD180B-180D18A91920-19221927192819321939-193B1A171A181A561A58-1A5E1A601A621A65-1A6C1A73-1A7C1A7F1B00-1B031B341B36-1B3A1B3C1B421B6B-1B731B801B811BA2-1BA51BA81BA91BAB1BE61BE81BE91BED1BEF-1BF11C2C-1C331C361C371CD0-1CD21CD4-1CE01CE2-1CE81CED1CF41DC0-1DE61DFC-1DFF20D0-20DC20E120E5-20F02CEF-2CF12D7F2DE0-2DFF302A-302D3099309AA66FA674-A67DA69FA6F0A6F1A802A806A80BA825A826A8C4A8E0-A8F1A926-A92DA947-A951A980-A982A9B3A9B6-A9B9A9BCAA29-AA2EAA31AA32AA35AA36AA43AA4CAAB0AAB2-AAB4AAB7AAB8AABEAABFAAC1AAECAAEDAAF6ABE5ABE8ABEDFB1EFE00-FE0FFE20-FE26\",\n    Mc: \"0903093B093E-09400949-094C094E094F0982098309BE-09C009C709C809CB09CC09D70A030A3E-0A400A830ABE-0AC00AC90ACB0ACC0B020B030B3E0B400B470B480B4B0B4C0B570BBE0BBF0BC10BC20BC6-0BC80BCA-0BCC0BD70C01-0C030C41-0C440C820C830CBE0CC0-0CC40CC70CC80CCA0CCB0CD50CD60D020D030D3E-0D400D46-0D480D4A-0D4C0D570D820D830DCF-0DD10DD8-0DDF0DF20DF30F3E0F3F0F7F102B102C10311038103B103C105610571062-10641067-106D108310841087-108C108F109A-109C17B617BE-17C517C717C81923-19261929-192B193019311933-193819B0-19C019C819C91A19-1A1B1A551A571A611A631A641A6D-1A721B041B351B3B1B3D-1B411B431B441B821BA11BA61BA71BAA1BAC1BAD1BE71BEA-1BEC1BEE1BF21BF31C24-1C2B1C341C351CE11CF21CF3302E302FA823A824A827A880A881A8B4-A8C3A952A953A983A9B4A9B5A9BAA9BBA9BD-A9C0AA2FAA30AA33AA34AA4DAA7BAAEBAAEEAAEFAAF5ABE3ABE4ABE6ABE7ABE9ABEAABEC\",\n    Me: \"0488048920DD-20E020E2-20E4A670-A672\",\n    N: \"0030-003900B200B300B900BC-00BE0660-066906F0-06F907C0-07C90966-096F09E6-09EF09F4-09F90A66-0A6F0AE6-0AEF0B66-0B6F0B72-0B770BE6-0BF20C66-0C6F0C78-0C7E0CE6-0CEF0D66-0D750E50-0E590ED0-0ED90F20-0F331040-10491090-10991369-137C16EE-16F017E0-17E917F0-17F91810-18191946-194F19D0-19DA1A80-1A891A90-1A991B50-1B591BB0-1BB91C40-1C491C50-1C5920702074-20792080-20892150-21822185-21892460-249B24EA-24FF2776-27932CFD30073021-30293038-303A3192-31953220-32293248-324F3251-325F3280-328932B1-32BFA620-A629A6E6-A6EFA830-A835A8D0-A8D9A900-A909A9D0-A9D9AA50-AA59ABF0-ABF9FF10-FF19\",\n    Nd: \"0030-00390660-066906F0-06F907C0-07C90966-096F09E6-09EF0A66-0A6F0AE6-0AEF0B66-0B6F0BE6-0BEF0C66-0C6F0CE6-0CEF0D66-0D6F0E50-0E590ED0-0ED90F20-0F291040-10491090-109917E0-17E91810-18191946-194F19D0-19D91A80-1A891A90-1A991B50-1B591BB0-1BB91C40-1C491C50-1C59A620-A629A8D0-A8D9A900-A909A9D0-A9D9AA50-AA59ABF0-ABF9FF10-FF19\",\n    Nl: \"16EE-16F02160-21822185-218830073021-30293038-303AA6E6-A6EF\",\n    No: \"00B200B300B900BC-00BE09F4-09F90B72-0B770BF0-0BF20C78-0C7E0D70-0D750F2A-0F331369-137C17F0-17F919DA20702074-20792080-20892150-215F21892460-249B24EA-24FF2776-27932CFD3192-31953220-32293248-324F3251-325F3280-328932B1-32BFA830-A835\",\n    P: \"0021-00230025-002A002C-002F003A003B003F0040005B-005D005F007B007D00A100A700AB00B600B700BB00BF037E0387055A-055F0589058A05BE05C005C305C605F305F40609060A060C060D061B061E061F066A-066D06D40700-070D07F7-07F90830-083E085E0964096509700AF00DF40E4F0E5A0E5B0F04-0F120F140F3A-0F3D0F850FD0-0FD40FD90FDA104A-104F10FB1360-13681400166D166E169B169C16EB-16ED1735173617D4-17D617D8-17DA1800-180A194419451A1E1A1F1AA0-1AA61AA8-1AAD1B5A-1B601BFC-1BFF1C3B-1C3F1C7E1C7F1CC0-1CC71CD32010-20272030-20432045-20512053-205E207D207E208D208E2329232A2768-277527C527C627E6-27EF2983-299829D8-29DB29FC29FD2CF9-2CFC2CFE2CFF2D702E00-2E2E2E30-2E3B3001-30033008-30113014-301F3030303D30A030FBA4FEA4FFA60D-A60FA673A67EA6F2-A6F7A874-A877A8CEA8CFA8F8-A8FAA92EA92FA95FA9C1-A9CDA9DEA9DFAA5C-AA5FAADEAADFAAF0AAF1ABEBFD3EFD3FFE10-FE19FE30-FE52FE54-FE61FE63FE68FE6AFE6BFF01-FF03FF05-FF0AFF0C-FF0FFF1AFF1BFF1FFF20FF3B-FF3DFF3FFF5BFF5DFF5F-FF65\",\n    Pd: \"002D058A05BE140018062010-20152E172E1A2E3A2E3B301C303030A0FE31FE32FE58FE63FF0D\",\n    Ps: \"0028005B007B0F3A0F3C169B201A201E2045207D208D23292768276A276C276E27702772277427C527E627E827EA27EC27EE2983298529872989298B298D298F299129932995299729D829DA29FC2E222E242E262E283008300A300C300E3010301430163018301A301DFD3EFE17FE35FE37FE39FE3BFE3DFE3FFE41FE43FE47FE59FE5BFE5DFF08FF3BFF5BFF5FFF62\",\n    Pe: \"0029005D007D0F3B0F3D169C2046207E208E232A2769276B276D276F27712773277527C627E727E927EB27ED27EF298429862988298A298C298E2990299229942996299829D929DB29FD2E232E252E272E293009300B300D300F3011301530173019301B301E301FFD3FFE18FE36FE38FE3AFE3CFE3EFE40FE42FE44FE48FE5AFE5CFE5EFF09FF3DFF5DFF60FF63\",\n    Pi: \"00AB2018201B201C201F20392E022E042E092E0C2E1C2E20\",\n    Pf: \"00BB2019201D203A2E032E052E0A2E0D2E1D2E21\",\n    Pc: \"005F203F20402054FE33FE34FE4D-FE4FFF3F\",\n    Po: \"0021-00230025-0027002A002C002E002F003A003B003F0040005C00A100A700B600B700BF037E0387055A-055F058905C005C305C605F305F40609060A060C060D061B061E061F066A-066D06D40700-070D07F7-07F90830-083E085E0964096509700AF00DF40E4F0E5A0E5B0F04-0F120F140F850FD0-0FD40FD90FDA104A-104F10FB1360-1368166D166E16EB-16ED1735173617D4-17D617D8-17DA1800-18051807-180A194419451A1E1A1F1AA0-1AA61AA8-1AAD1B5A-1B601BFC-1BFF1C3B-1C3F1C7E1C7F1CC0-1CC71CD3201620172020-20272030-2038203B-203E2041-20432047-205120532055-205E2CF9-2CFC2CFE2CFF2D702E002E012E06-2E082E0B2E0E-2E162E182E192E1B2E1E2E1F2E2A-2E2E2E30-2E393001-3003303D30FBA4FEA4FFA60D-A60FA673A67EA6F2-A6F7A874-A877A8CEA8CFA8F8-A8FAA92EA92FA95FA9C1-A9CDA9DEA9DFAA5C-AA5FAADEAADFAAF0AAF1ABEBFE10-FE16FE19FE30FE45FE46FE49-FE4CFE50-FE52FE54-FE57FE5F-FE61FE68FE6AFE6BFF01-FF03FF05-FF07FF0AFF0CFF0EFF0FFF1AFF1BFF1FFF20FF3CFF61FF64FF65\",\n    S: \"0024002B003C-003E005E0060007C007E00A2-00A600A800A900AC00AE-00B100B400B800D700F702C2-02C502D2-02DF02E5-02EB02ED02EF-02FF03750384038503F60482058F0606-0608060B060E060F06DE06E906FD06FE07F609F209F309FA09FB0AF10B700BF3-0BFA0C7F0D790E3F0F01-0F030F130F15-0F170F1A-0F1F0F340F360F380FBE-0FC50FC7-0FCC0FCE0FCF0FD5-0FD8109E109F1390-139917DB194019DE-19FF1B61-1B6A1B74-1B7C1FBD1FBF-1FC11FCD-1FCF1FDD-1FDF1FED-1FEF1FFD1FFE20442052207A-207C208A-208C20A0-20B9210021012103-21062108210921142116-2118211E-2123212521272129212E213A213B2140-2144214A-214D214F2190-2328232B-23F32400-24262440-244A249C-24E92500-26FF2701-27672794-27C427C7-27E527F0-29822999-29D729DC-29FB29FE-2B4C2B50-2B592CE5-2CEA2E80-2E992E9B-2EF32F00-2FD52FF0-2FFB300430123013302030363037303E303F309B309C319031913196-319F31C0-31E33200-321E322A-324732503260-327F328A-32B032C0-32FE3300-33FF4DC0-4DFFA490-A4C6A700-A716A720A721A789A78AA828-A82BA836-A839AA77-AA79FB29FBB2-FBC1FDFCFDFDFE62FE64-FE66FE69FF04FF0BFF1C-FF1EFF3EFF40FF5CFF5EFFE0-FFE6FFE8-FFEEFFFCFFFD\",\n    Sm: \"002B003C-003E007C007E00AC00B100D700F703F60606-060820442052207A-207C208A-208C21182140-2144214B2190-2194219A219B21A021A321A621AE21CE21CF21D221D421F4-22FF2308-230B23202321237C239B-23B323DC-23E125B725C125F8-25FF266F27C0-27C427C7-27E527F0-27FF2900-29822999-29D729DC-29FB29FE-2AFF2B30-2B442B47-2B4CFB29FE62FE64-FE66FF0BFF1C-FF1EFF5CFF5EFFE2FFE9-FFEC\",\n    Sc: \"002400A2-00A5058F060B09F209F309FB0AF10BF90E3F17DB20A0-20B9A838FDFCFE69FF04FFE0FFE1FFE5FFE6\",\n    Sk: \"005E006000A800AF00B400B802C2-02C502D2-02DF02E5-02EB02ED02EF-02FF0375038403851FBD1FBF-1FC11FCD-1FCF1FDD-1FDF1FED-1FEF1FFD1FFE309B309CA700-A716A720A721A789A78AFBB2-FBC1FF3EFF40FFE3\",\n    So: \"00A600A900AE00B00482060E060F06DE06E906FD06FE07F609FA0B700BF3-0BF80BFA0C7F0D790F01-0F030F130F15-0F170F1A-0F1F0F340F360F380FBE-0FC50FC7-0FCC0FCE0FCF0FD5-0FD8109E109F1390-1399194019DE-19FF1B61-1B6A1B74-1B7C210021012103-210621082109211421162117211E-2123212521272129212E213A213B214A214C214D214F2195-2199219C-219F21A121A221A421A521A7-21AD21AF-21CD21D021D121D321D5-21F32300-2307230C-231F2322-2328232B-237B237D-239A23B4-23DB23E2-23F32400-24262440-244A249C-24E92500-25B625B8-25C025C2-25F72600-266E2670-26FF2701-27672794-27BF2800-28FF2B00-2B2F2B452B462B50-2B592CE5-2CEA2E80-2E992E9B-2EF32F00-2FD52FF0-2FFB300430123013302030363037303E303F319031913196-319F31C0-31E33200-321E322A-324732503260-327F328A-32B032C0-32FE3300-33FF4DC0-4DFFA490-A4C6A828-A82BA836A837A839AA77-AA79FDFDFFE4FFE8FFEDFFEEFFFCFFFD\",\n    Z: \"002000A01680180E2000-200A20282029202F205F3000\",\n    Zs: \"002000A01680180E2000-200A202F205F3000\",\n    Zl: \"2028\",\n    Zp: \"2029\",\n    C: \"0000-001F007F-009F00AD03780379037F-0383038B038D03A20528-05300557055805600588058B-058E059005C8-05CF05EB-05EF05F5-0605061C061D06DD070E070F074B074C07B2-07BF07FB-07FF082E082F083F085C085D085F-089F08A108AD-08E308FF097809800984098D098E0991099209A909B109B3-09B509BA09BB09C509C609C909CA09CF-09D609D8-09DB09DE09E409E509FC-0A000A040A0B-0A0E0A110A120A290A310A340A370A3A0A3B0A3D0A43-0A460A490A4A0A4E-0A500A52-0A580A5D0A5F-0A650A76-0A800A840A8E0A920AA90AB10AB40ABA0ABB0AC60ACA0ACE0ACF0AD1-0ADF0AE40AE50AF2-0B000B040B0D0B0E0B110B120B290B310B340B3A0B3B0B450B460B490B4A0B4E-0B550B58-0B5B0B5E0B640B650B78-0B810B840B8B-0B8D0B910B96-0B980B9B0B9D0BA0-0BA20BA5-0BA70BAB-0BAD0BBA-0BBD0BC3-0BC50BC90BCE0BCF0BD1-0BD60BD8-0BE50BFB-0C000C040C0D0C110C290C340C3A-0C3C0C450C490C4E-0C540C570C5A-0C5F0C640C650C70-0C770C800C810C840C8D0C910CA90CB40CBA0CBB0CC50CC90CCE-0CD40CD7-0CDD0CDF0CE40CE50CF00CF3-0D010D040D0D0D110D3B0D3C0D450D490D4F-0D560D58-0D5F0D640D650D76-0D780D800D810D840D97-0D990DB20DBC0DBE0DBF0DC7-0DC90DCB-0DCE0DD50DD70DE0-0DF10DF5-0E000E3B-0E3E0E5C-0E800E830E850E860E890E8B0E8C0E8E-0E930E980EA00EA40EA60EA80EA90EAC0EBA0EBE0EBF0EC50EC70ECE0ECF0EDA0EDB0EE0-0EFF0F480F6D-0F700F980FBD0FCD0FDB-0FFF10C610C8-10CC10CE10CF1249124E124F12571259125E125F1289128E128F12B112B612B712BF12C112C612C712D7131113161317135B135C137D-137F139A-139F13F5-13FF169D-169F16F1-16FF170D1715-171F1737-173F1754-175F176D17711774-177F17DE17DF17EA-17EF17FA-17FF180F181A-181F1878-187F18AB-18AF18F6-18FF191D-191F192C-192F193C-193F1941-1943196E196F1975-197F19AC-19AF19CA-19CF19DB-19DD1A1C1A1D1A5F1A7D1A7E1A8A-1A8F1A9A-1A9F1AAE-1AFF1B4C-1B4F1B7D-1B7F1BF4-1BFB1C38-1C3A1C4A-1C4C1C80-1CBF1CC8-1CCF1CF7-1CFF1DE7-1DFB1F161F171F1E1F1F1F461F471F4E1F4F1F581F5A1F5C1F5E1F7E1F7F1FB51FC51FD41FD51FDC1FF01FF11FF51FFF200B-200F202A-202E2060-206F20722073208F209D-209F20BA-20CF20F1-20FF218A-218F23F4-23FF2427-243F244B-245F27002B4D-2B4F2B5A-2BFF2C2F2C5F2CF4-2CF82D262D28-2D2C2D2E2D2F2D68-2D6E2D71-2D7E2D97-2D9F2DA72DAF2DB72DBF2DC72DCF2DD72DDF2E3C-2E7F2E9A2EF4-2EFF2FD6-2FEF2FFC-2FFF3040309730983100-3104312E-3130318F31BB-31BF31E4-31EF321F32FF4DB6-4DBF9FCD-9FFFA48D-A48FA4C7-A4CFA62C-A63FA698-A69EA6F8-A6FFA78FA794-A79FA7AB-A7F7A82C-A82FA83A-A83FA878-A87FA8C5-A8CDA8DA-A8DFA8FC-A8FFA954-A95EA97D-A97FA9CEA9DA-A9DDA9E0-A9FFAA37-AA3FAA4EAA4FAA5AAA5BAA7C-AA7FAAC3-AADAAAF7-AB00AB07AB08AB0FAB10AB17-AB1FAB27AB2F-ABBFABEEABEFABFA-ABFFD7A4-D7AFD7C7-D7CAD7FC-F8FFFA6EFA6FFADA-FAFFFB07-FB12FB18-FB1CFB37FB3DFB3FFB42FB45FBC2-FBD2FD40-FD4FFD90FD91FDC8-FDEFFDFEFDFFFE1A-FE1FFE27-FE2FFE53FE67FE6C-FE6FFE75FEFD-FF00FFBF-FFC1FFC8FFC9FFD0FFD1FFD8FFD9FFDD-FFDFFFE7FFEF-FFFBFFFEFFFF\",\n    Cc: \"0000-001F007F-009F\",\n    Cf: \"00AD0600-060406DD070F200B-200F202A-202E2060-2064206A-206FFEFFFFF9-FFFB\",\n    Co: \"E000-F8FF\",\n    Cs: \"D800-DFFF\",\n    Cn: \"03780379037F-0383038B038D03A20528-05300557055805600588058B-058E059005C8-05CF05EB-05EF05F5-05FF0605061C061D070E074B074C07B2-07BF07FB-07FF082E082F083F085C085D085F-089F08A108AD-08E308FF097809800984098D098E0991099209A909B109B3-09B509BA09BB09C509C609C909CA09CF-09D609D8-09DB09DE09E409E509FC-0A000A040A0B-0A0E0A110A120A290A310A340A370A3A0A3B0A3D0A43-0A460A490A4A0A4E-0A500A52-0A580A5D0A5F-0A650A76-0A800A840A8E0A920AA90AB10AB40ABA0ABB0AC60ACA0ACE0ACF0AD1-0ADF0AE40AE50AF2-0B000B040B0D0B0E0B110B120B290B310B340B3A0B3B0B450B460B490B4A0B4E-0B550B58-0B5B0B5E0B640B650B78-0B810B840B8B-0B8D0B910B96-0B980B9B0B9D0BA0-0BA20BA5-0BA70BAB-0BAD0BBA-0BBD0BC3-0BC50BC90BCE0BCF0BD1-0BD60BD8-0BE50BFB-0C000C040C0D0C110C290C340C3A-0C3C0C450C490C4E-0C540C570C5A-0C5F0C640C650C70-0C770C800C810C840C8D0C910CA90CB40CBA0CBB0CC50CC90CCE-0CD40CD7-0CDD0CDF0CE40CE50CF00CF3-0D010D040D0D0D110D3B0D3C0D450D490D4F-0D560D58-0D5F0D640D650D76-0D780D800D810D840D97-0D990DB20DBC0DBE0DBF0DC7-0DC90DCB-0DCE0DD50DD70DE0-0DF10DF5-0E000E3B-0E3E0E5C-0E800E830E850E860E890E8B0E8C0E8E-0E930E980EA00EA40EA60EA80EA90EAC0EBA0EBE0EBF0EC50EC70ECE0ECF0EDA0EDB0EE0-0EFF0F480F6D-0F700F980FBD0FCD0FDB-0FFF10C610C8-10CC10CE10CF1249124E124F12571259125E125F1289128E128F12B112B612B712BF12C112C612C712D7131113161317135B135C137D-137F139A-139F13F5-13FF169D-169F16F1-16FF170D1715-171F1737-173F1754-175F176D17711774-177F17DE17DF17EA-17EF17FA-17FF180F181A-181F1878-187F18AB-18AF18F6-18FF191D-191F192C-192F193C-193F1941-1943196E196F1975-197F19AC-19AF19CA-19CF19DB-19DD1A1C1A1D1A5F1A7D1A7E1A8A-1A8F1A9A-1A9F1AAE-1AFF1B4C-1B4F1B7D-1B7F1BF4-1BFB1C38-1C3A1C4A-1C4C1C80-1CBF1CC8-1CCF1CF7-1CFF1DE7-1DFB1F161F171F1E1F1F1F461F471F4E1F4F1F581F5A1F5C1F5E1F7E1F7F1FB51FC51FD41FD51FDC1FF01FF11FF51FFF2065-206920722073208F209D-209F20BA-20CF20F1-20FF218A-218F23F4-23FF2427-243F244B-245F27002B4D-2B4F2B5A-2BFF2C2F2C5F2CF4-2CF82D262D28-2D2C2D2E2D2F2D68-2D6E2D71-2D7E2D97-2D9F2DA72DAF2DB72DBF2DC72DCF2DD72DDF2E3C-2E7F2E9A2EF4-2EFF2FD6-2FEF2FFC-2FFF3040309730983100-3104312E-3130318F31BB-31BF31E4-31EF321F32FF4DB6-4DBF9FCD-9FFFA48D-A48FA4C7-A4CFA62C-A63FA698-A69EA6F8-A6FFA78FA794-A79FA7AB-A7F7A82C-A82FA83A-A83FA878-A87FA8C5-A8CDA8DA-A8DFA8FC-A8FFA954-A95EA97D-A97FA9CEA9DA-A9DDA9E0-A9FFAA37-AA3FAA4EAA4FAA5AAA5BAA7C-AA7FAAC3-AADAAAF7-AB00AB07AB08AB0FAB10AB17-AB1FAB27AB2F-ABBFABEEABEFABFA-ABFFD7A4-D7AFD7C7-D7CAD7FC-D7FFFA6EFA6FFADA-FAFFFB07-FB12FB18-FB1CFB37FB3DFB3FFB42FB45FBC2-FBD2FD40-FD4FFD90FD91FDC8-FDEFFDFEFDFFFE1A-FE1FFE27-FE2FFE53FE67FE6C-FE6FFE75FEFDFEFEFF00FFBF-FFC1FFC8FFC9FFD0FFD1FFD8FFD9FFDD-FFDFFFE7FFEF-FFF8FFFEFFFF\"\n  }, {\n    //L: \"Letter\", // Included in the Unicode Base addon\n    Ll: \"Lowercase_Letter\",\n    Lu: \"Uppercase_Letter\",\n    Lt: \"Titlecase_Letter\",\n    Lm: \"Modifier_Letter\",\n    Lo: \"Other_Letter\",\n    M: \"Mark\",\n    Mn: \"Nonspacing_Mark\",\n    Mc: \"Spacing_Mark\",\n    Me: \"Enclosing_Mark\",\n    N: \"Number\",\n    Nd: \"Decimal_Number\",\n    Nl: \"Letter_Number\",\n    No: \"Other_Number\",\n    P: \"Punctuation\",\n    Pd: \"Dash_Punctuation\",\n    Ps: \"Open_Punctuation\",\n    Pe: \"Close_Punctuation\",\n    Pi: \"Initial_Punctuation\",\n    Pf: \"Final_Punctuation\",\n    Pc: \"Connector_Punctuation\",\n    Po: \"Other_Punctuation\",\n    S: \"Symbol\",\n    Sm: \"Math_Symbol\",\n    Sc: \"Currency_Symbol\",\n    Sk: \"Modifier_Symbol\",\n    So: \"Other_Symbol\",\n    Z: \"Separator\",\n    Zs: \"Space_Separator\",\n    Zl: \"Line_Separator\",\n    Zp: \"Paragraph_Separator\",\n    C: \"Other\",\n    Cc: \"Control\",\n    Cf: \"Format\",\n    Co: \"Private_Use\",\n    Cs: \"Surrogate\",\n    Cn: \"Unassigned\"\n  });\n})(XRegExp);\n/***** unicode-scripts.js *****/\n\n/*!\r\n * XRegExp Unicode Scripts v1.2.0\r\n * (c) 2010-2012 Steven Levithan <http://xregexp.com/>\r\n * MIT License\r\n * Uses Unicode 6.1 <http://unicode.org/>\r\n */\n\n/**\r\n * Adds support for all Unicode scripts in the Basic Multilingual Plane (U+0000-U+FFFF).\r\n * E.g., `\\p{Latin}`. Token names are case insensitive, and any spaces, hyphens, and underscores\r\n * are ignored.\r\n * @requires XRegExp, XRegExp Unicode Base\r\n */\n\n\n(function (XRegExp) {\n  \"use strict\";\n\n  if (!XRegExp.addUnicodePackage) {\n    throw new ReferenceError(\"Unicode Base must be loaded before Unicode Scripts\");\n  }\n\n  XRegExp.install(\"extensibility\");\n  XRegExp.addUnicodePackage({\n    Arabic: \"0600-06040606-060B060D-061A061E0620-063F0641-064A0656-065E066A-066F0671-06DC06DE-06FF0750-077F08A008A2-08AC08E4-08FEFB50-FBC1FBD3-FD3DFD50-FD8FFD92-FDC7FDF0-FDFCFE70-FE74FE76-FEFC\",\n    Armenian: \"0531-05560559-055F0561-0587058A058FFB13-FB17\",\n    Balinese: \"1B00-1B4B1B50-1B7C\",\n    Bamum: \"A6A0-A6F7\",\n    Batak: \"1BC0-1BF31BFC-1BFF\",\n    Bengali: \"0981-09830985-098C098F09900993-09A809AA-09B009B209B6-09B909BC-09C409C709C809CB-09CE09D709DC09DD09DF-09E309E6-09FB\",\n    Bopomofo: \"02EA02EB3105-312D31A0-31BA\",\n    Braille: \"2800-28FF\",\n    Buginese: \"1A00-1A1B1A1E1A1F\",\n    Buhid: \"1740-1753\",\n    Canadian_Aboriginal: \"1400-167F18B0-18F5\",\n    Cham: \"AA00-AA36AA40-AA4DAA50-AA59AA5C-AA5F\",\n    Cherokee: \"13A0-13F4\",\n    Common: \"0000-0040005B-0060007B-00A900AB-00B900BB-00BF00D700F702B9-02DF02E5-02E902EC-02FF0374037E038503870589060C061B061F06400660-066906DD096409650E3F0FD5-0FD810FB16EB-16ED173517361802180318051CD31CE11CE9-1CEC1CEE-1CF31CF51CF62000-200B200E-2064206A-20702074-207E2080-208E20A0-20B92100-21252127-2129212C-21312133-214D214F-215F21892190-23F32400-24262440-244A2460-26FF2701-27FF2900-2B4C2B50-2B592E00-2E3B2FF0-2FFB3000-300430063008-30203030-3037303C-303F309B309C30A030FB30FC3190-319F31C0-31E33220-325F327F-32CF3358-33FF4DC0-4DFFA700-A721A788-A78AA830-A839FD3EFD3FFDFDFE10-FE19FE30-FE52FE54-FE66FE68-FE6BFEFFFF01-FF20FF3B-FF40FF5B-FF65FF70FF9EFF9FFFE0-FFE6FFE8-FFEEFFF9-FFFD\",\n    Coptic: \"03E2-03EF2C80-2CF32CF9-2CFF\",\n    Cyrillic: \"0400-04840487-05271D2B1D782DE0-2DFFA640-A697A69F\",\n    Devanagari: \"0900-09500953-09630966-09770979-097FA8E0-A8FB\",\n    Ethiopic: \"1200-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A135D-137C1380-13992D80-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDEAB01-AB06AB09-AB0EAB11-AB16AB20-AB26AB28-AB2E\",\n    Georgian: \"10A0-10C510C710CD10D0-10FA10FC-10FF2D00-2D252D272D2D\",\n    Glagolitic: \"2C00-2C2E2C30-2C5E\",\n    Greek: \"0370-03730375-0377037A-037D038403860388-038A038C038E-03A103A3-03E103F0-03FF1D26-1D2A1D5D-1D611D66-1D6A1DBF1F00-1F151F18-1F1D1F20-1F451F48-1F4D1F50-1F571F591F5B1F5D1F5F-1F7D1F80-1FB41FB6-1FC41FC6-1FD31FD6-1FDB1FDD-1FEF1FF2-1FF41FF6-1FFE2126\",\n    Gujarati: \"0A81-0A830A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABC-0AC50AC7-0AC90ACB-0ACD0AD00AE0-0AE30AE6-0AF1\",\n    Gurmukhi: \"0A01-0A030A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A3C0A3E-0A420A470A480A4B-0A4D0A510A59-0A5C0A5E0A66-0A75\",\n    Han: \"2E80-2E992E9B-2EF32F00-2FD5300530073021-30293038-303B3400-4DB54E00-9FCCF900-FA6DFA70-FAD9\",\n    Hangul: \"1100-11FF302E302F3131-318E3200-321E3260-327EA960-A97CAC00-D7A3D7B0-D7C6D7CB-D7FBFFA0-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDC\",\n    Hanunoo: \"1720-1734\",\n    Hebrew: \"0591-05C705D0-05EA05F0-05F4FB1D-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FB4F\",\n    Hiragana: \"3041-3096309D-309F\",\n    Inherited: \"0300-036F04850486064B-0655065F0670095109521CD0-1CD21CD4-1CE01CE2-1CE81CED1CF41DC0-1DE61DFC-1DFF200C200D20D0-20F0302A-302D3099309AFE00-FE0FFE20-FE26\",\n    Javanese: \"A980-A9CDA9CF-A9D9A9DEA9DF\",\n    Kannada: \"0C820C830C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBC-0CC40CC6-0CC80CCA-0CCD0CD50CD60CDE0CE0-0CE30CE6-0CEF0CF10CF2\",\n    Katakana: \"30A1-30FA30FD-30FF31F0-31FF32D0-32FE3300-3357FF66-FF6FFF71-FF9D\",\n    Kayah_Li: \"A900-A92F\",\n    Khmer: \"1780-17DD17E0-17E917F0-17F919E0-19FF\",\n    Lao: \"0E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB90EBB-0EBD0EC0-0EC40EC60EC8-0ECD0ED0-0ED90EDC-0EDF\",\n    Latin: \"0041-005A0061-007A00AA00BA00C0-00D600D8-00F600F8-02B802E0-02E41D00-1D251D2C-1D5C1D62-1D651D6B-1D771D79-1DBE1E00-1EFF2071207F2090-209C212A212B2132214E2160-21882C60-2C7FA722-A787A78B-A78EA790-A793A7A0-A7AAA7F8-A7FFFB00-FB06FF21-FF3AFF41-FF5A\",\n    Lepcha: \"1C00-1C371C3B-1C491C4D-1C4F\",\n    Limbu: \"1900-191C1920-192B1930-193B19401944-194F\",\n    Lisu: \"A4D0-A4FF\",\n    Malayalam: \"0D020D030D05-0D0C0D0E-0D100D12-0D3A0D3D-0D440D46-0D480D4A-0D4E0D570D60-0D630D66-0D750D79-0D7F\",\n    Mandaic: \"0840-085B085E\",\n    Meetei_Mayek: \"AAE0-AAF6ABC0-ABEDABF0-ABF9\",\n    Mongolian: \"1800180118041806-180E1810-18191820-18771880-18AA\",\n    Myanmar: \"1000-109FAA60-AA7B\",\n    New_Tai_Lue: \"1980-19AB19B0-19C919D0-19DA19DE19DF\",\n    Nko: \"07C0-07FA\",\n    Ogham: \"1680-169C\",\n    Ol_Chiki: \"1C50-1C7F\",\n    Oriya: \"0B01-0B030B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3C-0B440B470B480B4B-0B4D0B560B570B5C0B5D0B5F-0B630B66-0B77\",\n    Phags_Pa: \"A840-A877\",\n    Rejang: \"A930-A953A95F\",\n    Runic: \"16A0-16EA16EE-16F0\",\n    Samaritan: \"0800-082D0830-083E\",\n    Saurashtra: \"A880-A8C4A8CE-A8D9\",\n    Sinhala: \"0D820D830D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60DCA0DCF-0DD40DD60DD8-0DDF0DF2-0DF4\",\n    Sundanese: \"1B80-1BBF1CC0-1CC7\",\n    Syloti_Nagri: \"A800-A82B\",\n    Syriac: \"0700-070D070F-074A074D-074F\",\n    Tagalog: \"1700-170C170E-1714\",\n    Tagbanwa: \"1760-176C176E-177017721773\",\n    Tai_Le: \"1950-196D1970-1974\",\n    Tai_Tham: \"1A20-1A5E1A60-1A7C1A7F-1A891A90-1A991AA0-1AAD\",\n    Tai_Viet: \"AA80-AAC2AADB-AADF\",\n    Tamil: \"0B820B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BBE-0BC20BC6-0BC80BCA-0BCD0BD00BD70BE6-0BFA\",\n    Telugu: \"0C01-0C030C05-0C0C0C0E-0C100C12-0C280C2A-0C330C35-0C390C3D-0C440C46-0C480C4A-0C4D0C550C560C580C590C60-0C630C66-0C6F0C78-0C7F\",\n    Thaana: \"0780-07B1\",\n    Thai: \"0E01-0E3A0E40-0E5B\",\n    Tibetan: \"0F00-0F470F49-0F6C0F71-0F970F99-0FBC0FBE-0FCC0FCE-0FD40FD90FDA\",\n    Tifinagh: \"2D30-2D672D6F2D702D7F\",\n    Vai: \"A500-A62B\",\n    Yi: \"A000-A48CA490-A4C6\"\n  });\n})(XRegExp);\n/***** unicode-blocks.js *****/\n\n/*!\r\n * XRegExp Unicode Blocks v1.2.0\r\n * (c) 2010-2012 Steven Levithan <http://xregexp.com/>\r\n * MIT License\r\n * Uses Unicode 6.1 <http://unicode.org/>\r\n */\n\n/**\r\n * Adds support for all Unicode blocks in the Basic Multilingual Plane (U+0000-U+FFFF). Unicode\r\n * blocks use the prefix \"In\". E.g., `\\p{InBasicLatin}`. Token names are case insensitive, and any\r\n * spaces, hyphens, and underscores are ignored.\r\n * @requires XRegExp, XRegExp Unicode Base\r\n */\n\n\n(function (XRegExp) {\n  \"use strict\";\n\n  if (!XRegExp.addUnicodePackage) {\n    throw new ReferenceError(\"Unicode Base must be loaded before Unicode Blocks\");\n  }\n\n  XRegExp.install(\"extensibility\");\n  XRegExp.addUnicodePackage({\n    InBasic_Latin: \"0000-007F\",\n    InLatin_1_Supplement: \"0080-00FF\",\n    InLatin_Extended_A: \"0100-017F\",\n    InLatin_Extended_B: \"0180-024F\",\n    InIPA_Extensions: \"0250-02AF\",\n    InSpacing_Modifier_Letters: \"02B0-02FF\",\n    InCombining_Diacritical_Marks: \"0300-036F\",\n    InGreek_and_Coptic: \"0370-03FF\",\n    InCyrillic: \"0400-04FF\",\n    InCyrillic_Supplement: \"0500-052F\",\n    InArmenian: \"0530-058F\",\n    InHebrew: \"0590-05FF\",\n    InArabic: \"0600-06FF\",\n    InSyriac: \"0700-074F\",\n    InArabic_Supplement: \"0750-077F\",\n    InThaana: \"0780-07BF\",\n    InNKo: \"07C0-07FF\",\n    InSamaritan: \"0800-083F\",\n    InMandaic: \"0840-085F\",\n    InArabic_Extended_A: \"08A0-08FF\",\n    InDevanagari: \"0900-097F\",\n    InBengali: \"0980-09FF\",\n    InGurmukhi: \"0A00-0A7F\",\n    InGujarati: \"0A80-0AFF\",\n    InOriya: \"0B00-0B7F\",\n    InTamil: \"0B80-0BFF\",\n    InTelugu: \"0C00-0C7F\",\n    InKannada: \"0C80-0CFF\",\n    InMalayalam: \"0D00-0D7F\",\n    InSinhala: \"0D80-0DFF\",\n    InThai: \"0E00-0E7F\",\n    InLao: \"0E80-0EFF\",\n    InTibetan: \"0F00-0FFF\",\n    InMyanmar: \"1000-109F\",\n    InGeorgian: \"10A0-10FF\",\n    InHangul_Jamo: \"1100-11FF\",\n    InEthiopic: \"1200-137F\",\n    InEthiopic_Supplement: \"1380-139F\",\n    InCherokee: \"13A0-13FF\",\n    InUnified_Canadian_Aboriginal_Syllabics: \"1400-167F\",\n    InOgham: \"1680-169F\",\n    InRunic: \"16A0-16FF\",\n    InTagalog: \"1700-171F\",\n    InHanunoo: \"1720-173F\",\n    InBuhid: \"1740-175F\",\n    InTagbanwa: \"1760-177F\",\n    InKhmer: \"1780-17FF\",\n    InMongolian: \"1800-18AF\",\n    InUnified_Canadian_Aboriginal_Syllabics_Extended: \"18B0-18FF\",\n    InLimbu: \"1900-194F\",\n    InTai_Le: \"1950-197F\",\n    InNew_Tai_Lue: \"1980-19DF\",\n    InKhmer_Symbols: \"19E0-19FF\",\n    InBuginese: \"1A00-1A1F\",\n    InTai_Tham: \"1A20-1AAF\",\n    InBalinese: \"1B00-1B7F\",\n    InSundanese: \"1B80-1BBF\",\n    InBatak: \"1BC0-1BFF\",\n    InLepcha: \"1C00-1C4F\",\n    InOl_Chiki: \"1C50-1C7F\",\n    InSundanese_Supplement: \"1CC0-1CCF\",\n    InVedic_Extensions: \"1CD0-1CFF\",\n    InPhonetic_Extensions: \"1D00-1D7F\",\n    InPhonetic_Extensions_Supplement: \"1D80-1DBF\",\n    InCombining_Diacritical_Marks_Supplement: \"1DC0-1DFF\",\n    InLatin_Extended_Additional: \"1E00-1EFF\",\n    InGreek_Extended: \"1F00-1FFF\",\n    InGeneral_Punctuation: \"2000-206F\",\n    InSuperscripts_and_Subscripts: \"2070-209F\",\n    InCurrency_Symbols: \"20A0-20CF\",\n    InCombining_Diacritical_Marks_for_Symbols: \"20D0-20FF\",\n    InLetterlike_Symbols: \"2100-214F\",\n    InNumber_Forms: \"2150-218F\",\n    InArrows: \"2190-21FF\",\n    InMathematical_Operators: \"2200-22FF\",\n    InMiscellaneous_Technical: \"2300-23FF\",\n    InControl_Pictures: \"2400-243F\",\n    InOptical_Character_Recognition: \"2440-245F\",\n    InEnclosed_Alphanumerics: \"2460-24FF\",\n    InBox_Drawing: \"2500-257F\",\n    InBlock_Elements: \"2580-259F\",\n    InGeometric_Shapes: \"25A0-25FF\",\n    InMiscellaneous_Symbols: \"2600-26FF\",\n    InDingbats: \"2700-27BF\",\n    InMiscellaneous_Mathematical_Symbols_A: \"27C0-27EF\",\n    InSupplemental_Arrows_A: \"27F0-27FF\",\n    InBraille_Patterns: \"2800-28FF\",\n    InSupplemental_Arrows_B: \"2900-297F\",\n    InMiscellaneous_Mathematical_Symbols_B: \"2980-29FF\",\n    InSupplemental_Mathematical_Operators: \"2A00-2AFF\",\n    InMiscellaneous_Symbols_and_Arrows: \"2B00-2BFF\",\n    InGlagolitic: \"2C00-2C5F\",\n    InLatin_Extended_C: \"2C60-2C7F\",\n    InCoptic: \"2C80-2CFF\",\n    InGeorgian_Supplement: \"2D00-2D2F\",\n    InTifinagh: \"2D30-2D7F\",\n    InEthiopic_Extended: \"2D80-2DDF\",\n    InCyrillic_Extended_A: \"2DE0-2DFF\",\n    InSupplemental_Punctuation: \"2E00-2E7F\",\n    InCJK_Radicals_Supplement: \"2E80-2EFF\",\n    InKangxi_Radicals: \"2F00-2FDF\",\n    InIdeographic_Description_Characters: \"2FF0-2FFF\",\n    InCJK_Symbols_and_Punctuation: \"3000-303F\",\n    InHiragana: \"3040-309F\",\n    InKatakana: \"30A0-30FF\",\n    InBopomofo: \"3100-312F\",\n    InHangul_Compatibility_Jamo: \"3130-318F\",\n    InKanbun: \"3190-319F\",\n    InBopomofo_Extended: \"31A0-31BF\",\n    InCJK_Strokes: \"31C0-31EF\",\n    InKatakana_Phonetic_Extensions: \"31F0-31FF\",\n    InEnclosed_CJK_Letters_and_Months: \"3200-32FF\",\n    InCJK_Compatibility: \"3300-33FF\",\n    InCJK_Unified_Ideographs_Extension_A: \"3400-4DBF\",\n    InYijing_Hexagram_Symbols: \"4DC0-4DFF\",\n    InCJK_Unified_Ideographs: \"4E00-9FFF\",\n    InYi_Syllables: \"A000-A48F\",\n    InYi_Radicals: \"A490-A4CF\",\n    InLisu: \"A4D0-A4FF\",\n    InVai: \"A500-A63F\",\n    InCyrillic_Extended_B: \"A640-A69F\",\n    InBamum: \"A6A0-A6FF\",\n    InModifier_Tone_Letters: \"A700-A71F\",\n    InLatin_Extended_D: \"A720-A7FF\",\n    InSyloti_Nagri: \"A800-A82F\",\n    InCommon_Indic_Number_Forms: \"A830-A83F\",\n    InPhags_pa: \"A840-A87F\",\n    InSaurashtra: \"A880-A8DF\",\n    InDevanagari_Extended: \"A8E0-A8FF\",\n    InKayah_Li: \"A900-A92F\",\n    InRejang: \"A930-A95F\",\n    InHangul_Jamo_Extended_A: \"A960-A97F\",\n    InJavanese: \"A980-A9DF\",\n    InCham: \"AA00-AA5F\",\n    InMyanmar_Extended_A: \"AA60-AA7F\",\n    InTai_Viet: \"AA80-AADF\",\n    InMeetei_Mayek_Extensions: \"AAE0-AAFF\",\n    InEthiopic_Extended_A: \"AB00-AB2F\",\n    InMeetei_Mayek: \"ABC0-ABFF\",\n    InHangul_Syllables: \"AC00-D7AF\",\n    InHangul_Jamo_Extended_B: \"D7B0-D7FF\",\n    InHigh_Surrogates: \"D800-DB7F\",\n    InHigh_Private_Use_Surrogates: \"DB80-DBFF\",\n    InLow_Surrogates: \"DC00-DFFF\",\n    InPrivate_Use_Area: \"E000-F8FF\",\n    InCJK_Compatibility_Ideographs: \"F900-FAFF\",\n    InAlphabetic_Presentation_Forms: \"FB00-FB4F\",\n    InArabic_Presentation_Forms_A: \"FB50-FDFF\",\n    InVariation_Selectors: \"FE00-FE0F\",\n    InVertical_Forms: \"FE10-FE1F\",\n    InCombining_Half_Marks: \"FE20-FE2F\",\n    InCJK_Compatibility_Forms: \"FE30-FE4F\",\n    InSmall_Form_Variants: \"FE50-FE6F\",\n    InArabic_Presentation_Forms_B: \"FE70-FEFF\",\n    InHalfwidth_and_Fullwidth_Forms: \"FF00-FFEF\",\n    InSpecials: \"FFF0-FFFF\"\n  });\n})(XRegExp);\n/***** unicode-properties.js *****/\n\n/*!\r\n * XRegExp Unicode Properties v1.0.0\r\n * (c) 2012 Steven Levithan <http://xregexp.com/>\r\n * MIT License\r\n * Uses Unicode 6.1 <http://unicode.org/>\r\n */\n\n/**\r\n * Adds Unicode properties necessary to meet Level 1 Unicode support (detailed in UTS#18 RL1.2).\r\n * Includes code points from the Basic Multilingual Plane (U+0000-U+FFFF) only. Token names are\r\n * case insensitive, and any spaces, hyphens, and underscores are ignored.\r\n * @requires XRegExp, XRegExp Unicode Base\r\n */\n\n\n(function (XRegExp) {\n  \"use strict\";\n\n  if (!XRegExp.addUnicodePackage) {\n    throw new ReferenceError(\"Unicode Base must be loaded before Unicode Properties\");\n  }\n\n  XRegExp.install(\"extensibility\");\n  XRegExp.addUnicodePackage({\n    Alphabetic: \"0041-005A0061-007A00AA00B500BA00C0-00D600D8-00F600F8-02C102C6-02D102E0-02E402EC02EE03450370-037403760377037A-037D03860388-038A038C038E-03A103A3-03F503F7-0481048A-05270531-055605590561-058705B0-05BD05BF05C105C205C405C505C705D0-05EA05F0-05F20610-061A0620-06570659-065F066E-06D306D5-06DC06E1-06E806ED-06EF06FA-06FC06FF0710-073F074D-07B107CA-07EA07F407F507FA0800-0817081A-082C0840-085808A008A2-08AC08E4-08E908F0-08FE0900-093B093D-094C094E-09500955-09630971-09770979-097F0981-09830985-098C098F09900993-09A809AA-09B009B209B6-09B909BD-09C409C709C809CB09CC09CE09D709DC09DD09DF-09E309F009F10A01-0A030A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A3E-0A420A470A480A4B0A4C0A510A59-0A5C0A5E0A70-0A750A81-0A830A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABD-0AC50AC7-0AC90ACB0ACC0AD00AE0-0AE30B01-0B030B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3D-0B440B470B480B4B0B4C0B560B570B5C0B5D0B5F-0B630B710B820B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BBE-0BC20BC6-0BC80BCA-0BCC0BD00BD70C01-0C030C05-0C0C0C0E-0C100C12-0C280C2A-0C330C35-0C390C3D-0C440C46-0C480C4A-0C4C0C550C560C580C590C60-0C630C820C830C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBD-0CC40CC6-0CC80CCA-0CCC0CD50CD60CDE0CE0-0CE30CF10CF20D020D030D05-0D0C0D0E-0D100D12-0D3A0D3D-0D440D46-0D480D4A-0D4C0D4E0D570D60-0D630D7A-0D7F0D820D830D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60DCF-0DD40DD60DD8-0DDF0DF20DF30E01-0E3A0E40-0E460E4D0E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB90EBB-0EBD0EC0-0EC40EC60ECD0EDC-0EDF0F000F40-0F470F49-0F6C0F71-0F810F88-0F970F99-0FBC1000-10361038103B-103F1050-10621065-1068106E-1086108E109C109D10A0-10C510C710CD10D0-10FA10FC-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A135F1380-138F13A0-13F41401-166C166F-167F1681-169A16A0-16EA16EE-16F01700-170C170E-17131720-17331740-17531760-176C176E-1770177217731780-17B317B6-17C817D717DC1820-18771880-18AA18B0-18F51900-191C1920-192B1930-19381950-196D1970-19741980-19AB19B0-19C91A00-1A1B1A20-1A5E1A61-1A741AA71B00-1B331B35-1B431B45-1B4B1B80-1BA91BAC-1BAF1BBA-1BE51BE7-1BF11C00-1C351C4D-1C4F1C5A-1C7D1CE9-1CEC1CEE-1CF31CF51CF61D00-1DBF1E00-1F151F18-1F1D1F20-1F451F48-1F4D1F50-1F571F591F5B1F5D1F5F-1F7D1F80-1FB41FB6-1FBC1FBE1FC2-1FC41FC6-1FCC1FD0-1FD31FD6-1FDB1FE0-1FEC1FF2-1FF41FF6-1FFC2071207F2090-209C21022107210A-211321152119-211D212421262128212A-212D212F-2139213C-213F2145-2149214E2160-218824B6-24E92C00-2C2E2C30-2C5E2C60-2CE42CEB-2CEE2CF22CF32D00-2D252D272D2D2D30-2D672D6F2D80-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDE2DE0-2DFF2E2F3005-30073021-30293031-30353038-303C3041-3096309D-309F30A1-30FA30FC-30FF3105-312D3131-318E31A0-31BA31F0-31FF3400-4DB54E00-9FCCA000-A48CA4D0-A4FDA500-A60CA610-A61FA62AA62BA640-A66EA674-A67BA67F-A697A69F-A6EFA717-A71FA722-A788A78B-A78EA790-A793A7A0-A7AAA7F8-A801A803-A805A807-A80AA80C-A827A840-A873A880-A8C3A8F2-A8F7A8FBA90A-A92AA930-A952A960-A97CA980-A9B2A9B4-A9BFA9CFAA00-AA36AA40-AA4DAA60-AA76AA7AAA80-AABEAAC0AAC2AADB-AADDAAE0-AAEFAAF2-AAF5AB01-AB06AB09-AB0EAB11-AB16AB20-AB26AB28-AB2EABC0-ABEAAC00-D7A3D7B0-D7C6D7CB-D7FBF900-FA6DFA70-FAD9FB00-FB06FB13-FB17FB1D-FB28FB2A-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FBB1FBD3-FD3DFD50-FD8FFD92-FDC7FDF0-FDFBFE70-FE74FE76-FEFCFF21-FF3AFF41-FF5AFF66-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDC\",\n    Uppercase: \"0041-005A00C0-00D600D8-00DE01000102010401060108010A010C010E01100112011401160118011A011C011E01200122012401260128012A012C012E01300132013401360139013B013D013F0141014301450147014A014C014E01500152015401560158015A015C015E01600162016401660168016A016C016E017001720174017601780179017B017D018101820184018601870189-018B018E-0191019301940196-0198019C019D019F01A001A201A401A601A701A901AC01AE01AF01B1-01B301B501B701B801BC01C401C701CA01CD01CF01D101D301D501D701D901DB01DE01E001E201E401E601E801EA01EC01EE01F101F401F6-01F801FA01FC01FE02000202020402060208020A020C020E02100212021402160218021A021C021E02200222022402260228022A022C022E02300232023A023B023D023E02410243-02460248024A024C024E03700372037603860388-038A038C038E038F0391-03A103A3-03AB03CF03D2-03D403D803DA03DC03DE03E003E203E403E603E803EA03EC03EE03F403F703F903FA03FD-042F04600462046404660468046A046C046E04700472047404760478047A047C047E0480048A048C048E04900492049404960498049A049C049E04A004A204A404A604A804AA04AC04AE04B004B204B404B604B804BA04BC04BE04C004C104C304C504C704C904CB04CD04D004D204D404D604D804DA04DC04DE04E004E204E404E604E804EA04EC04EE04F004F204F404F604F804FA04FC04FE05000502050405060508050A050C050E05100512051405160518051A051C051E05200522052405260531-055610A0-10C510C710CD1E001E021E041E061E081E0A1E0C1E0E1E101E121E141E161E181E1A1E1C1E1E1E201E221E241E261E281E2A1E2C1E2E1E301E321E341E361E381E3A1E3C1E3E1E401E421E441E461E481E4A1E4C1E4E1E501E521E541E561E581E5A1E5C1E5E1E601E621E641E661E681E6A1E6C1E6E1E701E721E741E761E781E7A1E7C1E7E1E801E821E841E861E881E8A1E8C1E8E1E901E921E941E9E1EA01EA21EA41EA61EA81EAA1EAC1EAE1EB01EB21EB41EB61EB81EBA1EBC1EBE1EC01EC21EC41EC61EC81ECA1ECC1ECE1ED01ED21ED41ED61ED81EDA1EDC1EDE1EE01EE21EE41EE61EE81EEA1EEC1EEE1EF01EF21EF41EF61EF81EFA1EFC1EFE1F08-1F0F1F18-1F1D1F28-1F2F1F38-1F3F1F48-1F4D1F591F5B1F5D1F5F1F68-1F6F1FB8-1FBB1FC8-1FCB1FD8-1FDB1FE8-1FEC1FF8-1FFB21022107210B-210D2110-211221152119-211D212421262128212A-212D2130-2133213E213F21452160-216F218324B6-24CF2C00-2C2E2C602C62-2C642C672C692C6B2C6D-2C702C722C752C7E-2C802C822C842C862C882C8A2C8C2C8E2C902C922C942C962C982C9A2C9C2C9E2CA02CA22CA42CA62CA82CAA2CAC2CAE2CB02CB22CB42CB62CB82CBA2CBC2CBE2CC02CC22CC42CC62CC82CCA2CCC2CCE2CD02CD22CD42CD62CD82CDA2CDC2CDE2CE02CE22CEB2CED2CF2A640A642A644A646A648A64AA64CA64EA650A652A654A656A658A65AA65CA65EA660A662A664A666A668A66AA66CA680A682A684A686A688A68AA68CA68EA690A692A694A696A722A724A726A728A72AA72CA72EA732A734A736A738A73AA73CA73EA740A742A744A746A748A74AA74CA74EA750A752A754A756A758A75AA75CA75EA760A762A764A766A768A76AA76CA76EA779A77BA77DA77EA780A782A784A786A78BA78DA790A792A7A0A7A2A7A4A7A6A7A8A7AAFF21-FF3A\",\n    Lowercase: \"0061-007A00AA00B500BA00DF-00F600F8-00FF01010103010501070109010B010D010F01110113011501170119011B011D011F01210123012501270129012B012D012F01310133013501370138013A013C013E014001420144014601480149014B014D014F01510153015501570159015B015D015F01610163016501670169016B016D016F0171017301750177017A017C017E-0180018301850188018C018D019201950199-019B019E01A101A301A501A801AA01AB01AD01B001B401B601B901BA01BD-01BF01C601C901CC01CE01D001D201D401D601D801DA01DC01DD01DF01E101E301E501E701E901EB01ED01EF01F001F301F501F901FB01FD01FF02010203020502070209020B020D020F02110213021502170219021B021D021F02210223022502270229022B022D022F02310233-0239023C023F0240024202470249024B024D024F-02930295-02B802C002C102E0-02E40345037103730377037A-037D039003AC-03CE03D003D103D5-03D703D903DB03DD03DF03E103E303E503E703E903EB03ED03EF-03F303F503F803FB03FC0430-045F04610463046504670469046B046D046F04710473047504770479047B047D047F0481048B048D048F04910493049504970499049B049D049F04A104A304A504A704A904AB04AD04AF04B104B304B504B704B904BB04BD04BF04C204C404C604C804CA04CC04CE04CF04D104D304D504D704D904DB04DD04DF04E104E304E504E704E904EB04ED04EF04F104F304F504F704F904FB04FD04FF05010503050505070509050B050D050F05110513051505170519051B051D051F05210523052505270561-05871D00-1DBF1E011E031E051E071E091E0B1E0D1E0F1E111E131E151E171E191E1B1E1D1E1F1E211E231E251E271E291E2B1E2D1E2F1E311E331E351E371E391E3B1E3D1E3F1E411E431E451E471E491E4B1E4D1E4F1E511E531E551E571E591E5B1E5D1E5F1E611E631E651E671E691E6B1E6D1E6F1E711E731E751E771E791E7B1E7D1E7F1E811E831E851E871E891E8B1E8D1E8F1E911E931E95-1E9D1E9F1EA11EA31EA51EA71EA91EAB1EAD1EAF1EB11EB31EB51EB71EB91EBB1EBD1EBF1EC11EC31EC51EC71EC91ECB1ECD1ECF1ED11ED31ED51ED71ED91EDB1EDD1EDF1EE11EE31EE51EE71EE91EEB1EED1EEF1EF11EF31EF51EF71EF91EFB1EFD1EFF-1F071F10-1F151F20-1F271F30-1F371F40-1F451F50-1F571F60-1F671F70-1F7D1F80-1F871F90-1F971FA0-1FA71FB0-1FB41FB61FB71FBE1FC2-1FC41FC61FC71FD0-1FD31FD61FD71FE0-1FE71FF2-1FF41FF61FF72071207F2090-209C210A210E210F2113212F21342139213C213D2146-2149214E2170-217F218424D0-24E92C30-2C5E2C612C652C662C682C6A2C6C2C712C732C742C76-2C7D2C812C832C852C872C892C8B2C8D2C8F2C912C932C952C972C992C9B2C9D2C9F2CA12CA32CA52CA72CA92CAB2CAD2CAF2CB12CB32CB52CB72CB92CBB2CBD2CBF2CC12CC32CC52CC72CC92CCB2CCD2CCF2CD12CD32CD52CD72CD92CDB2CDD2CDF2CE12CE32CE42CEC2CEE2CF32D00-2D252D272D2DA641A643A645A647A649A64BA64DA64FA651A653A655A657A659A65BA65DA65FA661A663A665A667A669A66BA66DA681A683A685A687A689A68BA68DA68FA691A693A695A697A723A725A727A729A72BA72DA72F-A731A733A735A737A739A73BA73DA73FA741A743A745A747A749A74BA74DA74FA751A753A755A757A759A75BA75DA75FA761A763A765A767A769A76BA76DA76F-A778A77AA77CA77FA781A783A785A787A78CA78EA791A793A7A1A7A3A7A5A7A7A7A9A7F8-A7FAFB00-FB06FB13-FB17FF41-FF5A\",\n    White_Space: \"0009-000D0020008500A01680180E2000-200A20282029202F205F3000\",\n    Noncharacter_Code_Point: \"FDD0-FDEFFFFEFFFF\",\n    Default_Ignorable_Code_Point: \"00AD034F115F116017B417B5180B-180D200B-200F202A-202E2060-206F3164FE00-FE0FFEFFFFA0FFF0-FFF8\",\n    // \\p{Any} matches a code unit. To match any code point via surrogate pairs, use (?:[\\0-\\uD7FF\\uDC00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF])\n    Any: \"0000-FFFF\",\n    // \\p{^Any} compiles to [^\\u0000-\\uFFFF]; [\\p{^Any}] to []\n    Ascii: \"0000-007F\",\n    // \\p{Assigned} is equivalent to \\p{^Cn}\n    //Assigned: XRegExp(\"[\\\\p{^Cn}]\").source.replace(/[[\\]]|\\\\u/g, \"\") // Negation inside a character class triggers inversion\n    Assigned: \"0000-0377037A-037E0384-038A038C038E-03A103A3-05270531-05560559-055F0561-05870589058A058F0591-05C705D0-05EA05F0-05F40600-06040606-061B061E-070D070F-074A074D-07B107C0-07FA0800-082D0830-083E0840-085B085E08A008A2-08AC08E4-08FE0900-09770979-097F0981-09830985-098C098F09900993-09A809AA-09B009B209B6-09B909BC-09C409C709C809CB-09CE09D709DC09DD09DF-09E309E6-09FB0A01-0A030A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A3C0A3E-0A420A470A480A4B-0A4D0A510A59-0A5C0A5E0A66-0A750A81-0A830A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABC-0AC50AC7-0AC90ACB-0ACD0AD00AE0-0AE30AE6-0AF10B01-0B030B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3C-0B440B470B480B4B-0B4D0B560B570B5C0B5D0B5F-0B630B66-0B770B820B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BBE-0BC20BC6-0BC80BCA-0BCD0BD00BD70BE6-0BFA0C01-0C030C05-0C0C0C0E-0C100C12-0C280C2A-0C330C35-0C390C3D-0C440C46-0C480C4A-0C4D0C550C560C580C590C60-0C630C66-0C6F0C78-0C7F0C820C830C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBC-0CC40CC6-0CC80CCA-0CCD0CD50CD60CDE0CE0-0CE30CE6-0CEF0CF10CF20D020D030D05-0D0C0D0E-0D100D12-0D3A0D3D-0D440D46-0D480D4A-0D4E0D570D60-0D630D66-0D750D79-0D7F0D820D830D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60DCA0DCF-0DD40DD60DD8-0DDF0DF2-0DF40E01-0E3A0E3F-0E5B0E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB90EBB-0EBD0EC0-0EC40EC60EC8-0ECD0ED0-0ED90EDC-0EDF0F00-0F470F49-0F6C0F71-0F970F99-0FBC0FBE-0FCC0FCE-0FDA1000-10C510C710CD10D0-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A135D-137C1380-139913A0-13F41400-169C16A0-16F01700-170C170E-17141720-17361740-17531760-176C176E-1770177217731780-17DD17E0-17E917F0-17F91800-180E1810-18191820-18771880-18AA18B0-18F51900-191C1920-192B1930-193B19401944-196D1970-19741980-19AB19B0-19C919D0-19DA19DE-1A1B1A1E-1A5E1A60-1A7C1A7F-1A891A90-1A991AA0-1AAD1B00-1B4B1B50-1B7C1B80-1BF31BFC-1C371C3B-1C491C4D-1C7F1CC0-1CC71CD0-1CF61D00-1DE61DFC-1F151F18-1F1D1F20-1F451F48-1F4D1F50-1F571F591F5B1F5D1F5F-1F7D1F80-1FB41FB6-1FC41FC6-1FD31FD6-1FDB1FDD-1FEF1FF2-1FF41FF6-1FFE2000-2064206A-20712074-208E2090-209C20A0-20B920D0-20F02100-21892190-23F32400-24262440-244A2460-26FF2701-2B4C2B50-2B592C00-2C2E2C30-2C5E2C60-2CF32CF9-2D252D272D2D2D30-2D672D6F2D702D7F-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDE2DE0-2E3B2E80-2E992E9B-2EF32F00-2FD52FF0-2FFB3000-303F3041-30963099-30FF3105-312D3131-318E3190-31BA31C0-31E331F0-321E3220-32FE3300-4DB54DC0-9FCCA000-A48CA490-A4C6A4D0-A62BA640-A697A69F-A6F7A700-A78EA790-A793A7A0-A7AAA7F8-A82BA830-A839A840-A877A880-A8C4A8CE-A8D9A8E0-A8FBA900-A953A95F-A97CA980-A9CDA9CF-A9D9A9DEA9DFAA00-AA36AA40-AA4DAA50-AA59AA5C-AA7BAA80-AAC2AADB-AAF6AB01-AB06AB09-AB0EAB11-AB16AB20-AB26AB28-AB2EABC0-ABEDABF0-ABF9AC00-D7A3D7B0-D7C6D7CB-D7FBD800-FA6DFA70-FAD9FB00-FB06FB13-FB17FB1D-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FBC1FBD3-FD3FFD50-FD8FFD92-FDC7FDF0-FDFDFE00-FE19FE20-FE26FE30-FE52FE54-FE66FE68-FE6BFE70-FE74FE76-FEFCFEFFFF01-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDCFFE0-FFE6FFE8-FFEEFFF9-FFFD\"\n  });\n})(XRegExp);\n/***** matchrecursive.js *****/\n\n/*!\r\n * XRegExp.matchRecursive v0.2.0\r\n * (c) 2009-2012 Steven Levithan <http://xregexp.com/>\r\n * MIT License\r\n */\n\n\n(function (XRegExp) {\n  \"use strict\";\n  /**\r\n   * Returns a match detail object composed of the provided values.\r\n   * @private\r\n   */\n\n  function row(value, name, start, end) {\n    return {\n      value: value,\n      name: name,\n      start: start,\n      end: end\n    };\n  }\n  /**\r\n   * Returns an array of match strings between outermost left and right delimiters, or an array of\r\n   * objects with detailed match parts and position data. An error is thrown if delimiters are\r\n   * unbalanced within the data.\r\n   * @memberOf XRegExp\r\n   * @param {String} str String to search.\r\n   * @param {String} left Left delimiter as an XRegExp pattern.\r\n   * @param {String} right Right delimiter as an XRegExp pattern.\r\n   * @param {String} [flags] Flags for the left and right delimiters. Use any of: `gimnsxy`.\r\n   * @param {Object} [options] Lets you specify `valueNames` and `escapeChar` options.\r\n   * @returns {Array} Array of matches, or an empty array.\r\n   * @example\r\n   *\r\n   * // Basic usage\r\n   * var str = '(t((e))s)t()(ing)';\r\n   * XRegExp.matchRecursive(str, '\\\\(', '\\\\)', 'g');\r\n   * // -> ['t((e))s', '', 'ing']\r\n   *\r\n   * // Extended information mode with valueNames\r\n   * str = 'Here is <div> <div>an</div></div> example';\r\n   * XRegExp.matchRecursive(str, '<div\\\\s*>', '</div>', 'gi', {\r\n   *   valueNames: ['between', 'left', 'match', 'right']\r\n   * });\r\n   * // -> [\r\n   * // {name: 'between', value: 'Here is ',       start: 0,  end: 8},\r\n   * // {name: 'left',    value: '<div>',          start: 8,  end: 13},\r\n   * // {name: 'match',   value: ' <div>an</div>', start: 13, end: 27},\r\n   * // {name: 'right',   value: '</div>',         start: 27, end: 33},\r\n   * // {name: 'between', value: ' example',       start: 33, end: 41}\r\n   * // ]\r\n   *\r\n   * // Omitting unneeded parts with null valueNames, and using escapeChar\r\n   * str = '...{1}\\\\{{function(x,y){return y+x;}}';\r\n   * XRegExp.matchRecursive(str, '{', '}', 'g', {\r\n   *   valueNames: ['literal', null, 'value', null],\r\n   *   escapeChar: '\\\\'\r\n   * });\r\n   * // -> [\r\n   * // {name: 'literal', value: '...', start: 0, end: 3},\r\n   * // {name: 'value',   value: '1',   start: 4, end: 5},\r\n   * // {name: 'literal', value: '\\\\{', start: 6, end: 8},\r\n   * // {name: 'value',   value: 'function(x,y){return y+x;}', start: 9, end: 35}\r\n   * // ]\r\n   *\r\n   * // Sticky mode via flag y\r\n   * str = '<1><<<2>>><3>4<5>';\r\n   * XRegExp.matchRecursive(str, '<', '>', 'gy');\r\n   * // -> ['1', '<<2>>', '3']\r\n   */\n\n\n  XRegExp.matchRecursive = function (str, left, right, flags, options) {\n    flags = flags || \"\";\n    options = options || {};\n    var global = flags.indexOf(\"g\") > -1,\n        sticky = flags.indexOf(\"y\") > -1,\n        basicFlags = flags.replace(/y/g, \"\"),\n        // Flag y controlled internally\n    escapeChar = options.escapeChar,\n        vN = options.valueNames,\n        output = [],\n        openTokens = 0,\n        delimStart = 0,\n        delimEnd = 0,\n        lastOuterEnd = 0,\n        outerStart,\n        innerStart,\n        leftMatch,\n        rightMatch,\n        esc;\n    left = XRegExp(left, basicFlags);\n    right = XRegExp(right, basicFlags);\n\n    if (escapeChar) {\n      if (escapeChar.length > 1) {\n        throw new SyntaxError(\"can't use more than one escape character\");\n      }\n\n      escapeChar = XRegExp.escape(escapeChar); // Using XRegExp.union safely rewrites backreferences in `left` and `right`\n\n      esc = new RegExp(\"(?:\" + escapeChar + \"[\\\\S\\\\s]|(?:(?!\" + XRegExp.union([left, right]).source + \")[^\" + escapeChar + \"])+)+\", flags.replace(/[^im]+/g, \"\") // Flags gy not needed here; flags nsx handled by XRegExp\n      );\n    }\n\n    while (true) {\n      // If using an escape character, advance to the delimiter's next starting position,\n      // skipping any escaped characters in between\n      if (escapeChar) {\n        delimEnd += (XRegExp.exec(str, esc, delimEnd, \"sticky\") || [\"\"])[0].length;\n      }\n\n      leftMatch = XRegExp.exec(str, left, delimEnd);\n      rightMatch = XRegExp.exec(str, right, delimEnd); // Keep the leftmost match only\n\n      if (leftMatch && rightMatch) {\n        if (leftMatch.index <= rightMatch.index) {\n          rightMatch = null;\n        } else {\n          leftMatch = null;\n        }\n      }\n      /* Paths (LM:leftMatch, RM:rightMatch, OT:openTokens):\r\n      LM | RM | OT | Result\r\n      1  | 0  | 1  | loop\r\n      1  | 0  | 0  | loop\r\n      0  | 1  | 1  | loop\r\n      0  | 1  | 0  | throw\r\n      0  | 0  | 1  | throw\r\n      0  | 0  | 0  | break\r\n      * Doesn't include the sticky mode special case\r\n      * Loop ends after the first completed match if `!global` */\n\n\n      if (leftMatch || rightMatch) {\n        delimStart = (leftMatch || rightMatch).index;\n        delimEnd = delimStart + (leftMatch || rightMatch)[0].length;\n      } else if (!openTokens) {\n        break;\n      }\n\n      if (sticky && !openTokens && delimStart > lastOuterEnd) {\n        break;\n      }\n\n      if (leftMatch) {\n        if (!openTokens) {\n          outerStart = delimStart;\n          innerStart = delimEnd;\n        }\n\n        ++openTokens;\n      } else if (rightMatch && openTokens) {\n        if (! --openTokens) {\n          if (vN) {\n            if (vN[0] && outerStart > lastOuterEnd) {\n              output.push(row(vN[0], str.slice(lastOuterEnd, outerStart), lastOuterEnd, outerStart));\n            }\n\n            if (vN[1]) {\n              output.push(row(vN[1], str.slice(outerStart, innerStart), outerStart, innerStart));\n            }\n\n            if (vN[2]) {\n              output.push(row(vN[2], str.slice(innerStart, delimStart), innerStart, delimStart));\n            }\n\n            if (vN[3]) {\n              output.push(row(vN[3], str.slice(delimStart, delimEnd), delimStart, delimEnd));\n            }\n          } else {\n            output.push(str.slice(innerStart, delimStart));\n          }\n\n          lastOuterEnd = delimEnd;\n\n          if (!global) {\n            break;\n          }\n        }\n      } else {\n        throw new Error(\"string contains unbalanced delimiters\");\n      } // If the delimiter matched an empty string, avoid an infinite loop\n\n\n      if (delimStart === delimEnd) {\n        ++delimEnd;\n      }\n    }\n\n    if (global && !sticky && vN && vN[0] && str.length > lastOuterEnd) {\n      output.push(row(vN[0], str.slice(lastOuterEnd), lastOuterEnd, str.length));\n    }\n\n    return output;\n  };\n})(XRegExp);\n/***** build.js *****/\n\n/*!\r\n * XRegExp.build v0.1.0\r\n * (c) 2012 Steven Levithan <http://xregexp.com/>\r\n * MIT License\r\n * Inspired by RegExp.create by Lea Verou <http://lea.verou.me/>\r\n */\n\n\n(function (XRegExp) {\n  \"use strict\";\n\n  var subparts = /(\\()(?!\\?)|\\\\([1-9]\\d*)|\\\\[\\s\\S]|\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*]/g,\n      parts = XRegExp.union([/\\({{([\\w$]+)}}\\)|{{([\\w$]+)}}/, subparts], \"g\");\n  /**\r\n   * Strips a leading `^` and trailing unescaped `$`, if both are present.\r\n   * @private\r\n   * @param {String} pattern Pattern to process.\r\n   * @returns {String} Pattern with edge anchors removed.\r\n   */\n\n  function deanchor(pattern) {\n    var startAnchor = /^(?:\\(\\?:\\))?\\^/,\n        // Leading `^` or `(?:)^` (handles /x cruft)\n    endAnchor = /\\$(?:\\(\\?:\\))?$/; // Trailing `$` or `$(?:)` (handles /x cruft)\n\n    if (endAnchor.test(pattern.replace(/\\\\[\\s\\S]/g, \"\"))) {\n      // Ensure trailing `$` isn't escaped\n      return pattern.replace(startAnchor, \"\").replace(endAnchor, \"\");\n    }\n\n    return pattern;\n  }\n  /**\r\n   * Converts the provided value to an XRegExp.\r\n   * @private\r\n   * @param {String|RegExp} value Value to convert.\r\n   * @returns {RegExp} XRegExp object with XRegExp syntax applied.\r\n   */\n\n\n  function asXRegExp(value) {\n    return XRegExp.isRegExp(value) ? value.xregexp && !value.xregexp.isNative ? value : XRegExp(value.source) : XRegExp(value);\n  }\n  /**\r\n   * Builds regexes using named subpatterns, for readability and pattern reuse. Backreferences in the\r\n   * outer pattern and provided subpatterns are automatically renumbered to work correctly. Native\r\n   * flags used by provided subpatterns are ignored in favor of the `flags` argument.\r\n   * @memberOf XRegExp\r\n   * @param {String} pattern XRegExp pattern using `{{name}}` for embedded subpatterns. Allows\r\n   *   `({{name}})` as shorthand for `(?<name>{{name}})`. Patterns cannot be embedded within\r\n   *   character classes.\r\n   * @param {Object} subs Lookup object for named subpatterns. Values can be strings or regexes. A\r\n   *   leading `^` and trailing unescaped `$` are stripped from subpatterns, if both are present.\r\n   * @param {String} [flags] Any combination of XRegExp flags.\r\n   * @returns {RegExp} Regex with interpolated subpatterns.\r\n   * @example\r\n   *\r\n   * var time = XRegExp.build('(?x)^ {{hours}} ({{minutes}}) $', {\r\n   *   hours: XRegExp.build('{{h12}} : | {{h24}}', {\r\n   *     h12: /1[0-2]|0?[1-9]/,\r\n   *     h24: /2[0-3]|[01][0-9]/\r\n   *   }, 'x'),\r\n   *   minutes: /^[0-5][0-9]$/\r\n   * });\r\n   * time.test('10:59'); // -> true\r\n   * XRegExp.exec('10:59', time).minutes; // -> '59'\r\n   */\n\n\n  XRegExp.build = function (pattern, subs, flags) {\n    var inlineFlags = /^\\(\\?([\\w$]+)\\)/.exec(pattern),\n        data = {},\n        numCaps = 0,\n        // Caps is short for captures\n    numPriorCaps,\n        numOuterCaps = 0,\n        outerCapsMap = [0],\n        outerCapNames,\n        sub,\n        p; // Add flags within a leading mode modifier to the overall pattern's flags\n\n    if (inlineFlags) {\n      flags = flags || \"\";\n      inlineFlags[1].replace(/./g, function (flag) {\n        flags += flags.indexOf(flag) > -1 ? \"\" : flag; // Don't add duplicates\n      });\n    }\n\n    for (p in subs) {\n      if (subs.hasOwnProperty(p)) {\n        // Passing to XRegExp enables entended syntax for subpatterns provided as strings\n        // and ensures independent validity, lest an unescaped `(`, `)`, `[`, or trailing\n        // `\\` breaks the `(?:)` wrapper. For subpatterns provided as regexes, it dies on\n        // octals and adds the `xregexp` property, for simplicity\n        sub = asXRegExp(subs[p]); // Deanchoring allows embedding independently useful anchored regexes. If you\n        // really need to keep your anchors, double them (i.e., `^^...$$`)\n\n        data[p] = {\n          pattern: deanchor(sub.source),\n          names: sub.xregexp.captureNames || []\n        };\n      }\n    } // Passing to XRegExp dies on octals and ensures the outer pattern is independently valid;\n    // helps keep this simple. Named captures will be put back\n\n\n    pattern = asXRegExp(pattern);\n    outerCapNames = pattern.xregexp.captureNames || [];\n    pattern = pattern.source.replace(parts, function ($0, $1, $2, $3, $4) {\n      var subName = $1 || $2,\n          capName,\n          intro;\n\n      if (subName) {\n        // Named subpattern\n        if (!data.hasOwnProperty(subName)) {\n          throw new ReferenceError(\"undefined property \" + $0);\n        }\n\n        if ($1) {\n          // Named subpattern was wrapped in a capturing group\n          capName = outerCapNames[numOuterCaps];\n          outerCapsMap[++numOuterCaps] = ++numCaps; // If it's a named group, preserve the name. Otherwise, use the subpattern name\n          // as the capture name\n\n          intro = \"(?<\" + (capName || subName) + \">\";\n        } else {\n          intro = \"(?:\";\n        }\n\n        numPriorCaps = numCaps;\n        return intro + data[subName].pattern.replace(subparts, function (match, paren, backref) {\n          if (paren) {\n            // Capturing group\n            capName = data[subName].names[numCaps - numPriorCaps];\n            ++numCaps;\n\n            if (capName) {\n              // If the current capture has a name, preserve the name\n              return \"(?<\" + capName + \">\";\n            }\n          } else if (backref) {\n            // Backreference\n            return \"\\\\\" + (+backref + numPriorCaps); // Rewrite the backreference\n          }\n\n          return match;\n        }) + \")\";\n      }\n\n      if ($3) {\n        // Capturing group\n        capName = outerCapNames[numOuterCaps];\n        outerCapsMap[++numOuterCaps] = ++numCaps;\n\n        if (capName) {\n          // If the current capture has a name, preserve the name\n          return \"(?<\" + capName + \">\";\n        }\n      } else if ($4) {\n        // Backreference\n        return \"\\\\\" + outerCapsMap[+$4]; // Rewrite the backreference\n      }\n\n      return $0;\n    });\n    return XRegExp(pattern, flags);\n  };\n})(XRegExp);\n/***** prototypes.js *****/\n\n/*!\r\n * XRegExp Prototype Methods v1.0.0\r\n * (c) 2012 Steven Levithan <http://xregexp.com/>\r\n * MIT License\r\n */\n\n/**\r\n * Adds a collection of methods to `XRegExp.prototype`. RegExp objects copied by XRegExp are also\r\n * augmented with any `XRegExp.prototype` methods. Hence, the following work equivalently:\r\n *\r\n * XRegExp('[a-z]', 'ig').xexec('abc');\r\n * XRegExp(/[a-z]/ig).xexec('abc');\r\n * XRegExp.globalize(/[a-z]/i).xexec('abc');\r\n */\n\n\n(function (XRegExp) {\n  \"use strict\";\n  /**\r\n   * Copy properties of `b` to `a`.\r\n   * @private\r\n   * @param {Object} a Object that will receive new properties.\r\n   * @param {Object} b Object whose properties will be copied.\r\n   */\n\n  function extend(a, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        a[p] = b[p];\n      }\n    } //return a;\n\n  }\n\n  extend(XRegExp.prototype, {\n    /**\r\n     * Implicitly calls the regex's `test` method with the first value in the provided arguments array.\r\n     * @memberOf XRegExp.prototype\r\n     * @param {*} context Ignored. Accepted only for congruity with `Function.prototype.apply`.\r\n     * @param {Array} args Array with the string to search as its first value.\r\n     * @returns {Boolean} Whether the regex matched the provided value.\r\n     * @example\r\n     *\r\n     * XRegExp('[a-z]').apply(null, ['abc']); // -> true\r\n     */\n    apply: function apply(context, args) {\n      return this.test(args[0]);\n    },\n\n    /**\r\n     * Implicitly calls the regex's `test` method with the provided string.\r\n     * @memberOf XRegExp.prototype\r\n     * @param {*} context Ignored. Accepted only for congruity with `Function.prototype.call`.\r\n     * @param {String} str String to search.\r\n     * @returns {Boolean} Whether the regex matched the provided value.\r\n     * @example\r\n     *\r\n     * XRegExp('[a-z]').call(null, 'abc'); // -> true\r\n     */\n    call: function call(context, str) {\n      return this.test(str);\n    },\n\n    /**\r\n     * Implicitly calls {@link #XRegExp.forEach}.\r\n     * @memberOf XRegExp.prototype\r\n     * @example\r\n     *\r\n     * XRegExp('\\\\d').forEach('1a2345', function (match, i) {\r\n     *   if (i % 2) this.push(+match[0]);\r\n     * }, []);\r\n     * // -> [2, 4]\r\n     */\n    forEach: function forEach(str, callback, context) {\n      return XRegExp.forEach(str, this, callback, context);\n    },\n\n    /**\r\n     * Implicitly calls {@link #XRegExp.globalize}.\r\n     * @memberOf XRegExp.prototype\r\n     * @example\r\n     *\r\n     * var globalCopy = XRegExp('regex').globalize();\r\n     * globalCopy.global; // -> true\r\n     */\n    globalize: function globalize() {\n      return XRegExp.globalize(this);\n    },\n\n    /**\r\n     * Implicitly calls {@link #XRegExp.exec}.\r\n     * @memberOf XRegExp.prototype\r\n     * @example\r\n     *\r\n     * var match = XRegExp('U\\\\+(?<hex>[0-9A-F]{4})').xexec('U+2620');\r\n     * match.hex; // -> '2620'\r\n     */\n    xexec: function xexec(str, pos, sticky) {\n      return XRegExp.exec(str, this, pos, sticky);\n    },\n\n    /**\r\n     * Implicitly calls {@link #XRegExp.test}.\r\n     * @memberOf XRegExp.prototype\r\n     * @example\r\n     *\r\n     * XRegExp('c').xtest('abc'); // -> true\r\n     */\n    xtest: function xtest(str, pos, sticky) {\n      return XRegExp.test(str, this, pos, sticky);\n    }\n  });\n})(XRegExp);","map":{"version":3,"sources":["/home/yamin/My_repos/new-email-app/new-email-app/node_modules/xregexp/xregexp-all.js"],"names":["XRegExp","undef","self","addToken","add","features","natives","extensibility","nativ","exec","RegExp","prototype","test","match","String","replace","split","fixed","cache","tokens","defaultScope","classScope","nativeTokens","replacementToken","duplicateFlags","quantifier","compliantExecNpcg","call","hasNativeY","sticky","isInsideConstructor","registeredFlags","augment","regex","captureNames","isNative","p","hasOwnProperty","xregexp","getNativeFlags","global","ignoreCase","multiline","extended","copy","addFlags","removeFlags","isRegExp","TypeError","flags","source","slice","lastIndexOf","array","value","i","length","Array","isType","type","Object","toString","toLowerCase","prepareOptions","all","forEach","m","runTokens","pattern","pos","scope","context","result","t","trigger","lastIndex","index","output","handler","err","setExtensibility","on","setNatives","Error","tokenContext","hasNamedCapture","hasFlag","flag","indexOf","tokenResult","chr","SyntaxError","$0","$1","push","charAt","join","options","customFlags","off","key","escape","str","r2","callback","globalize","install","isInstalled","feature","matchChain","chain","recurseChain","values","level","item","matches","addMatch","backref","search","replacement","isRegex","search2","separator","limit","uninstall","union","patterns","parts","numCaptures","numPriorCaptures","rewrite","paren","name","version","origLastIndex","apply","arguments","args","$2","n","isNaN","lastLastIndex","lastLength","input","endIndex","exports","unicode","slug","expand","pad4","dec","hex","parseInt","invert","range","lastEnd","start","cacheInversion","addUnicodePackage","pack","aliases","L","inv","ReferenceError","Ll","Lu","Lt","Lm","Lo","M","Mn","Mc","Me","N","Nd","Nl","No","P","Pd","Ps","Pe","Pi","Pf","Pc","Po","S","Sm","Sc","Sk","So","Z","Zs","Zl","Zp","C","Cc","Cf","Co","Cs","Cn","Arabic","Armenian","Balinese","Bamum","Batak","Bengali","Bopomofo","Braille","Buginese","Buhid","Canadian_Aboriginal","Cham","Cherokee","Common","Coptic","Cyrillic","Devanagari","Ethiopic","Georgian","Glagolitic","Greek","Gujarati","Gurmukhi","Han","Hangul","Hanunoo","Hebrew","Hiragana","Inherited","Javanese","Kannada","Katakana","Kayah_Li","Khmer","Lao","Latin","Lepcha","Limbu","Lisu","Malayalam","Mandaic","Meetei_Mayek","Mongolian","Myanmar","New_Tai_Lue","Nko","Ogham","Ol_Chiki","Oriya","Phags_Pa","Rejang","Runic","Samaritan","Saurashtra","Sinhala","Sundanese","Syloti_Nagri","Syriac","Tagalog","Tagbanwa","Tai_Le","Tai_Tham","Tai_Viet","Tamil","Telugu","Thaana","Thai","Tibetan","Tifinagh","Vai","Yi","InBasic_Latin","InLatin_1_Supplement","InLatin_Extended_A","InLatin_Extended_B","InIPA_Extensions","InSpacing_Modifier_Letters","InCombining_Diacritical_Marks","InGreek_and_Coptic","InCyrillic","InCyrillic_Supplement","InArmenian","InHebrew","InArabic","InSyriac","InArabic_Supplement","InThaana","InNKo","InSamaritan","InMandaic","InArabic_Extended_A","InDevanagari","InBengali","InGurmukhi","InGujarati","InOriya","InTamil","InTelugu","InKannada","InMalayalam","InSinhala","InThai","InLao","InTibetan","InMyanmar","InGeorgian","InHangul_Jamo","InEthiopic","InEthiopic_Supplement","InCherokee","InUnified_Canadian_Aboriginal_Syllabics","InOgham","InRunic","InTagalog","InHanunoo","InBuhid","InTagbanwa","InKhmer","InMongolian","InUnified_Canadian_Aboriginal_Syllabics_Extended","InLimbu","InTai_Le","InNew_Tai_Lue","InKhmer_Symbols","InBuginese","InTai_Tham","InBalinese","InSundanese","InBatak","InLepcha","InOl_Chiki","InSundanese_Supplement","InVedic_Extensions","InPhonetic_Extensions","InPhonetic_Extensions_Supplement","InCombining_Diacritical_Marks_Supplement","InLatin_Extended_Additional","InGreek_Extended","InGeneral_Punctuation","InSuperscripts_and_Subscripts","InCurrency_Symbols","InCombining_Diacritical_Marks_for_Symbols","InLetterlike_Symbols","InNumber_Forms","InArrows","InMathematical_Operators","InMiscellaneous_Technical","InControl_Pictures","InOptical_Character_Recognition","InEnclosed_Alphanumerics","InBox_Drawing","InBlock_Elements","InGeometric_Shapes","InMiscellaneous_Symbols","InDingbats","InMiscellaneous_Mathematical_Symbols_A","InSupplemental_Arrows_A","InBraille_Patterns","InSupplemental_Arrows_B","InMiscellaneous_Mathematical_Symbols_B","InSupplemental_Mathematical_Operators","InMiscellaneous_Symbols_and_Arrows","InGlagolitic","InLatin_Extended_C","InCoptic","InGeorgian_Supplement","InTifinagh","InEthiopic_Extended","InCyrillic_Extended_A","InSupplemental_Punctuation","InCJK_Radicals_Supplement","InKangxi_Radicals","InIdeographic_Description_Characters","InCJK_Symbols_and_Punctuation","InHiragana","InKatakana","InBopomofo","InHangul_Compatibility_Jamo","InKanbun","InBopomofo_Extended","InCJK_Strokes","InKatakana_Phonetic_Extensions","InEnclosed_CJK_Letters_and_Months","InCJK_Compatibility","InCJK_Unified_Ideographs_Extension_A","InYijing_Hexagram_Symbols","InCJK_Unified_Ideographs","InYi_Syllables","InYi_Radicals","InLisu","InVai","InCyrillic_Extended_B","InBamum","InModifier_Tone_Letters","InLatin_Extended_D","InSyloti_Nagri","InCommon_Indic_Number_Forms","InPhags_pa","InSaurashtra","InDevanagari_Extended","InKayah_Li","InRejang","InHangul_Jamo_Extended_A","InJavanese","InCham","InMyanmar_Extended_A","InTai_Viet","InMeetei_Mayek_Extensions","InEthiopic_Extended_A","InMeetei_Mayek","InHangul_Syllables","InHangul_Jamo_Extended_B","InHigh_Surrogates","InHigh_Private_Use_Surrogates","InLow_Surrogates","InPrivate_Use_Area","InCJK_Compatibility_Ideographs","InAlphabetic_Presentation_Forms","InArabic_Presentation_Forms_A","InVariation_Selectors","InVertical_Forms","InCombining_Half_Marks","InCJK_Compatibility_Forms","InSmall_Form_Variants","InArabic_Presentation_Forms_B","InHalfwidth_and_Fullwidth_Forms","InSpecials","Alphabetic","Uppercase","Lowercase","White_Space","Noncharacter_Code_Point","Default_Ignorable_Code_Point","Any","Ascii","Assigned","row","end","matchRecursive","left","right","basicFlags","escapeChar","vN","valueNames","openTokens","delimStart","delimEnd","lastOuterEnd","outerStart","innerStart","leftMatch","rightMatch","esc","subparts","deanchor","startAnchor","endAnchor","asXRegExp","build","subs","inlineFlags","data","numCaps","numPriorCaps","numOuterCaps","outerCapsMap","outerCapNames","sub","names","$3","$4","subName","capName","intro","extend","a","b","xexec","xtest"],"mappings":"AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,OAAJ,C,CAEA;;AACAA,OAAO,GAAGA,OAAO,IAAK,UAAUC,KAAV,EAAiB;AACnC;AAEJ;AACA;AACA;;AAEI,MAAIC,KAAJ;AAAA,MACIC,QADJ;AAAA,MAEIC,GAFJ;AAAA,MAIJ;AACQC,EAAAA,QAAQ,GAAG;AACPC,IAAAA,OAAO,EAAE,KADF;AAEPC,IAAAA,aAAa,EAAE;AAFR,GALf;AAAA,MAUJ;AACQC,EAAAA,KAAK,GAAG;AACJC,IAAAA,IAAI,EAAEC,MAAM,CAACC,SAAP,CAAiBF,IADnB;AAEJG,IAAAA,IAAI,EAAEF,MAAM,CAACC,SAAP,CAAiBC,IAFnB;AAGJC,IAAAA,KAAK,EAAEC,MAAM,CAACH,SAAP,CAAiBE,KAHpB;AAIJE,IAAAA,OAAO,EAAED,MAAM,CAACH,SAAP,CAAiBI,OAJtB;AAKJC,IAAAA,KAAK,EAAEF,MAAM,CAACH,SAAP,CAAiBK;AALpB,GAXZ;AAAA,MAmBJ;AACQC,EAAAA,KAAK,GAAG,EApBZ;AAAA,MAsBJ;AACQC,EAAAA,KAAK,GAAG,EAvBZ;AAAA,MAyBJ;AACQC,EAAAA,MAAM,GAAG,EA1Bb;AAAA,MA4BJ;AACQC,EAAAA,YAAY,GAAG,SA7BnB;AAAA,MA8BIC,UAAU,GAAG,OA9BjB;AAAA,MAgCJ;AACQC,EAAAA,YAAY,GAAG;AACX;AACA,eAAW,0IAFA;AAGX;AACA,aAAS;AAJE,GAjCnB;AAAA,MAwCJ;AACQC,EAAAA,gBAAgB,GAAG,kCAzCvB;AAAA,MA2CJ;AACQC,EAAAA,cAAc,GAAG,wBA5CrB;AAAA,MA8CJ;AACQC,EAAAA,UAAU,GAAG,8BA/CjB;AAAA,MAiDJ;AACQC,EAAAA,iBAAiB,GAAGlB,KAAK,CAACC,IAAN,CAAWkB,IAAX,CAAgB,MAAhB,EAAwB,EAAxB,EAA4B,CAA5B,MAAmC1B,KAlD3D;AAAA,MAoDJ;AACQ2B,EAAAA,UAAU,GAAGlB,MAAM,CAACC,SAAP,CAAiBkB,MAAjB,KAA4B5B,KArD7C;AAAA,MAuDJ;AACQ6B,EAAAA,mBAAmB,GAAG,KAxD1B;AAAA,MA0DJ;AACQC,EAAAA,eAAe,GAAG,SAASH,UAAU,GAAG,GAAH,GAAS,EAA5B,CA3DtB;AA6DJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,WAASI,OAAT,CAAiBC,KAAjB,EAAwBC,YAAxB,EAAsCC,QAAtC,EAAgD;AAC5C,QAAIC,CAAJ,CAD4C,CAE5C;;AACA,SAAKA,CAAL,IAAUlC,KAAI,CAACS,SAAf,EAA0B;AACtB,UAAIT,KAAI,CAACS,SAAL,CAAe0B,cAAf,CAA8BD,CAA9B,CAAJ,EAAsC;AAClCH,QAAAA,KAAK,CAACG,CAAD,CAAL,GAAWlC,KAAI,CAACS,SAAL,CAAeyB,CAAf,CAAX;AACH;AACJ;;AACDH,IAAAA,KAAK,CAACK,OAAN,GAAgB;AAACJ,MAAAA,YAAY,EAAEA,YAAf;AAA6BC,MAAAA,QAAQ,EAAE,CAAC,CAACA;AAAzC,KAAhB;AACA,WAAOF,KAAP;AACH;AAEL;AACA;AACA;AACA;AACA;AACA;;;AACI,WAASM,cAAT,CAAwBN,KAAxB,EAA+B;AAC3B;AACA,WAAO,CAACA,KAAK,CAACO,MAAN,GAAmB,GAAnB,GAAyB,EAA1B,KACCP,KAAK,CAACQ,UAAN,GAAmB,GAAnB,GAAyB,EAD1B,KAECR,KAAK,CAACS,SAAN,GAAmB,GAAnB,GAAyB,EAF1B,KAGCT,KAAK,CAACU,QAAN,GAAmB,GAAnB,GAAyB,EAH1B,MAGgC;AAC/BV,IAAAA,KAAK,CAACJ,MAAN,GAAmB,GAAnB,GAAyB,EAJ1B,CAAP,CAF2B,CAMW;AACzC;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,WAASe,IAAT,CAAcX,KAAd,EAAqBY,QAArB,EAA+BC,WAA/B,EAA4C;AACxC,QAAI,CAAC5C,KAAI,CAAC6C,QAAL,CAAcd,KAAd,CAAL,EAA2B;AACvB,YAAM,IAAIe,SAAJ,CAAc,sBAAd,CAAN;AACH;;AACD,QAAIC,KAAK,GAAGzC,KAAK,CAACO,OAAN,CAAcY,IAAd,CAAmBY,cAAc,CAACN,KAAD,CAAd,IAAyBY,QAAQ,IAAI,EAArC,CAAnB,EAA6DrB,cAA7D,EAA6E,EAA7E,CAAZ;;AACA,QAAIsB,WAAJ,EAAiB;AACb;AACAG,MAAAA,KAAK,GAAGzC,KAAK,CAACO,OAAN,CAAcY,IAAd,CAAmBsB,KAAnB,EAA0B,IAAIvC,MAAJ,CAAW,MAAMoC,WAAN,GAAoB,IAA/B,EAAqC,GAArC,CAA1B,EAAqE,EAArE,CAAR;AACH;;AACD,QAAIb,KAAK,CAACK,OAAN,IAAiB,CAACL,KAAK,CAACK,OAAN,CAAcH,QAApC,EAA8C;AAC1C;AACAF,MAAAA,KAAK,GAAGD,OAAO,CAAC9B,KAAI,CAAC+B,KAAK,CAACiB,MAAP,EAAeD,KAAf,CAAL,EACChB,KAAK,CAACK,OAAN,CAAcJ,YAAd,GAA6BD,KAAK,CAACK,OAAN,CAAcJ,YAAd,CAA2BiB,KAA3B,CAAiC,CAAjC,CAA7B,GAAmE,IADpE,CAAf;AAEH,KAJD,MAIO;AACH;AACAlB,MAAAA,KAAK,GAAGD,OAAO,CAAC,IAAItB,MAAJ,CAAWuB,KAAK,CAACiB,MAAjB,EAAyBD,KAAzB,CAAD,EAAkC,IAAlC,EAAwC,IAAxC,CAAf;AACH;;AACD,WAAOhB,KAAP;AACH;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,WAASmB,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmC;AAC/B,QAAIC,CAAC,GAAGF,KAAK,CAACG,MAAd;;AACA,QAAIC,KAAK,CAAC9C,SAAN,CAAgByC,WAApB,EAAiC;AAC7B,aAAOC,KAAK,CAACD,WAAN,CAAkBE,KAAlB,CAAP,CAD6B,CACI;AACpC;;AACD,WAAOC,CAAC,EAAR,EAAY;AACR,UAAIF,KAAK,CAACE,CAAD,CAAL,KAAaD,KAAjB,EAAwB;AACpB,eAAOC,CAAP;AACH;AACJ;;AACD,WAAO,CAAC,CAAR;AACH;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,WAASG,MAAT,CAAgBJ,KAAhB,EAAuBK,IAAvB,EAA6B;AACzB,WAAOC,MAAM,CAACjD,SAAP,CAAiBkD,QAAjB,CAA0BlC,IAA1B,CAA+B2B,KAA/B,EAAsCQ,WAAtC,OAAwD,aAAaH,IAAb,GAAoB,GAAnF;AACH;AAEL;AACA;AACA;AACA;AACA;AACA;;;AACI,WAASI,cAAT,CAAwBT,KAAxB,EAA+B;AAC3BA,IAAAA,KAAK,GAAGA,KAAK,IAAI,EAAjB;;AACA,QAAIA,KAAK,KAAK,KAAV,IAAmBA,KAAK,CAACU,GAA7B,EAAkC;AAC9BV,MAAAA,KAAK,GAAG;AAAChD,QAAAA,OAAO,EAAE,IAAV;AAAgBC,QAAAA,aAAa,EAAE;AAA/B,OAAR;AACH,KAFD,MAEO,IAAImD,MAAM,CAACJ,KAAD,EAAQ,QAAR,CAAV,EAA6B;AAChCA,MAAAA,KAAK,GAAGpD,KAAI,CAAC+D,OAAL,CAAaX,KAAb,EAAoB,SAApB,EAA+B,UAAUY,CAAV,EAAa;AAChD,aAAKA,CAAL,IAAU,IAAV;AACH,OAFO,EAEL,EAFK,CAAR;AAGH;;AACD,WAAOZ,KAAP;AACH;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,WAASa,SAAT,CAAmBC,OAAnB,EAA4BC,GAA5B,EAAiCC,KAAjC,EAAwCC,OAAxC,EAAiD;AAC7C,QAAIhB,CAAC,GAAGpC,MAAM,CAACqC,MAAf;AAAA,QACIgB,MAAM,GAAG,IADb;AAAA,QAEI3D,KAFJ;AAAA,QAGI4D,CAHJ,CAD6C,CAK7C;;AACA3C,IAAAA,mBAAmB,GAAG,IAAtB,CAN6C,CAO7C;;AACA,QAAI;AACA,aAAOyB,CAAC,EAAR,EAAY;AAAE;AACVkB,QAAAA,CAAC,GAAGtD,MAAM,CAACoC,CAAD,CAAV;;AACA,YAAI,CAACkB,CAAC,CAACH,KAAF,KAAY,KAAZ,IAAqBG,CAAC,CAACH,KAAF,KAAYA,KAAlC,MAA6C,CAACG,CAAC,CAACC,OAAH,IAAcD,CAAC,CAACC,OAAF,CAAU/C,IAAV,CAAe4C,OAAf,CAA3D,CAAJ,EAAyF;AACrFE,UAAAA,CAAC,CAACL,OAAF,CAAUO,SAAV,GAAsBN,GAAtB;AACAxD,UAAAA,KAAK,GAAGI,KAAK,CAACR,IAAN,CAAWkB,IAAX,CAAgB8C,CAAC,CAACL,OAAlB,EAA2BA,OAA3B,CAAR,CAFqF,CAExC;;AAC7C,cAAIvD,KAAK,IAAIA,KAAK,CAAC+D,KAAN,KAAgBP,GAA7B,EAAkC;AAC9BG,YAAAA,MAAM,GAAG;AACLK,cAAAA,MAAM,EAAEJ,CAAC,CAACK,OAAF,CAAUnD,IAAV,CAAe4C,OAAf,EAAwB1D,KAAxB,EAA+ByD,KAA/B,CADH;AAELzD,cAAAA,KAAK,EAAEA;AAFF,aAAT;AAIA;AACH;AACJ;AACJ;AACJ,KAfD,CAeE,OAAOkE,GAAP,EAAY;AACV,YAAMA,GAAN;AACH,KAjBD,SAiBU;AACNjD,MAAAA,mBAAmB,GAAG,KAAtB;AACH;;AACD,WAAO0C,MAAP;AACH;AAEL;AACA;AACA;AACA;AACA;;;AACI,WAASQ,gBAAT,CAA0BC,EAA1B,EAA8B;AAC1B/E,IAAAA,KAAI,CAACC,QAAL,GAAgBA,QAAQ,CAAC8E,EAAE,GAAG,IAAH,GAAU,KAAb,CAAxB;AACA5E,IAAAA,QAAQ,CAACE,aAAT,GAAyB0E,EAAzB;AACH;AAEL;AACA;AACA;AACA;AACA;;;AACI,WAASC,UAAT,CAAoBD,EAApB,EAAwB;AACpBvE,IAAAA,MAAM,CAACC,SAAP,CAAiBF,IAAjB,GAAwB,CAACwE,EAAE,GAAGhE,KAAH,GAAWT,KAAd,EAAqBC,IAA7C;AACAC,IAAAA,MAAM,CAACC,SAAP,CAAiBC,IAAjB,GAAwB,CAACqE,EAAE,GAAGhE,KAAH,GAAWT,KAAd,EAAqBI,IAA7C;AACAE,IAAAA,MAAM,CAACH,SAAP,CAAiBE,KAAjB,GAAyB,CAACoE,EAAE,GAAGhE,KAAH,GAAWT,KAAd,EAAqBK,KAA9C;AACAC,IAAAA,MAAM,CAACH,SAAP,CAAiBI,OAAjB,GAA2B,CAACkE,EAAE,GAAGhE,KAAH,GAAWT,KAAd,EAAqBO,OAAhD;AACAD,IAAAA,MAAM,CAACH,SAAP,CAAiBK,KAAjB,GAAyB,CAACiE,EAAE,GAAGhE,KAAH,GAAWT,KAAd,EAAqBQ,KAA9C;AACAX,IAAAA,QAAQ,CAACC,OAAT,GAAmB2E,EAAnB;AACH;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI/E,EAAAA,KAAI,GAAG,cAAUkE,OAAV,EAAmBnB,KAAnB,EAA0B;AAC7B,QAAI/C,KAAI,CAAC6C,QAAL,CAAcqB,OAAd,CAAJ,EAA4B;AACxB,UAAInB,KAAK,KAAKhD,KAAd,EAAqB;AACjB,cAAM,IAAI+C,SAAJ,CAAc,8DAAd,CAAN;AACH;;AACD,aAAOJ,IAAI,CAACwB,OAAD,CAAX;AACH,KAN4B,CAO7B;AACA;;;AACA,QAAItC,mBAAJ,EAAyB;AACrB,YAAM,IAAIqD,KAAJ,CAAU,sEAAV,CAAN;AACH;;AAED,QAAIN,MAAM,GAAG,EAAb;AAAA,QACIP,KAAK,GAAGlD,YADZ;AAAA,QAEIgE,YAAY,GAAG;AACXC,MAAAA,eAAe,EAAE,KADN;AAEXnD,MAAAA,YAAY,EAAE,EAFH;AAGXoD,MAAAA,OAAO,EAAE,iBAAUC,IAAV,EAAgB;AACrB,eAAOtC,KAAK,CAACuC,OAAN,CAAcD,IAAd,IAAsB,CAAC,CAA9B;AACH;AALU,KAFnB;AAAA,QASIlB,GAAG,GAAG,CATV;AAAA,QAUIoB,WAVJ;AAAA,QAWI5E,KAXJ;AAAA,QAYI6E,GAZJ;AAaAtB,IAAAA,OAAO,GAAGA,OAAO,KAAKnE,KAAZ,GAAoB,EAApB,GAAyBa,MAAM,CAACsD,OAAD,CAAzC;AACAnB,IAAAA,KAAK,GAAGA,KAAK,KAAKhD,KAAV,GAAkB,EAAlB,GAAuBa,MAAM,CAACmC,KAAD,CAArC;;AAEA,QAAIzC,KAAK,CAACK,KAAN,CAAYc,IAAZ,CAAiBsB,KAAjB,EAAwBzB,cAAxB,CAAJ,EAA6C;AAAE;AAC3C,YAAM,IAAImE,WAAJ,CAAgB,2CAAhB,CAAN;AACH,KA/B4B,CAgC7B;;;AACAvB,IAAAA,OAAO,GAAG5D,KAAK,CAACO,OAAN,CAAcY,IAAd,CAAmByC,OAAnB,EAA4B,iBAA5B,EAA+C,UAAUwB,EAAV,EAAcC,EAAd,EAAkB;AACvE,UAAIrF,KAAK,CAACI,IAAN,CAAWe,IAAX,CAAgB,MAAhB,EAAwBkE,EAAxB,CAAJ,EAAiC;AAC7B,cAAM,IAAIF,WAAJ,CAAgB,wCAAhB,CAAN;AACH;;AACD1C,MAAAA,KAAK,GAAGzC,KAAK,CAACO,OAAN,CAAcY,IAAd,CAAmBsB,KAAK,GAAG4C,EAA3B,EAA+BrE,cAA/B,EAA+C,EAA/C,CAAR;AACA,aAAO,EAAP;AACH,KANS,CAAV;;AAOAtB,IAAAA,KAAI,CAAC+D,OAAL,CAAahB,KAAb,EAAoB,QAApB,EAA8B,UAAUiB,CAAV,EAAa;AACvC,UAAInC,eAAe,CAACyD,OAAhB,CAAwBtB,CAAC,CAAC,CAAD,CAAzB,IAAgC,CAApC,EAAuC;AACnC,cAAM,IAAIyB,WAAJ,CAAgB,qCAAqCzB,CAAC,CAAC,CAAD,CAAtD,CAAN;AACH;AACJ,KAJD;;AAMA,WAAOG,GAAG,GAAGD,OAAO,CAACZ,MAArB,EAA6B;AACzB;AACAiC,MAAAA,WAAW,GAAGtB,SAAS,CAACC,OAAD,EAAUC,GAAV,EAAeC,KAAf,EAAsBc,YAAtB,CAAvB;;AACA,UAAIK,WAAJ,EAAiB;AACbZ,QAAAA,MAAM,CAACiB,IAAP,CAAYL,WAAW,CAACZ,MAAxB;AACAR,QAAAA,GAAG,IAAKoB,WAAW,CAAC5E,KAAZ,CAAkB,CAAlB,EAAqB2C,MAArB,IAA+B,CAAvC;AACH,OAHD,MAGO;AACH;AACA3C,QAAAA,KAAK,GAAGL,KAAK,CAACC,IAAN,CAAWkB,IAAX,CAAgBL,YAAY,CAACgD,KAAD,CAA5B,EAAqCF,OAAO,CAACjB,KAAR,CAAckB,GAAd,CAArC,CAAR;;AACA,YAAIxD,KAAJ,EAAW;AACPgE,UAAAA,MAAM,CAACiB,IAAP,CAAYjF,KAAK,CAAC,CAAD,CAAjB;AACAwD,UAAAA,GAAG,IAAIxD,KAAK,CAAC,CAAD,CAAL,CAAS2C,MAAhB;AACH,SAHD,MAGO;AACHkC,UAAAA,GAAG,GAAGtB,OAAO,CAAC2B,MAAR,CAAe1B,GAAf,CAAN;;AACA,cAAIqB,GAAG,KAAK,GAAZ,EAAiB;AACbpB,YAAAA,KAAK,GAAGjD,UAAR;AACH,WAFD,MAEO,IAAIqE,GAAG,KAAK,GAAZ,EAAiB;AACpBpB,YAAAA,KAAK,GAAGlD,YAAR;AACH,WANE,CAOH;;;AACAyD,UAAAA,MAAM,CAACiB,IAAP,CAAYJ,GAAZ;AACA,YAAErB,GAAF;AACH;AACJ;AACJ;;AAED,WAAOrC,OAAO,CAAC,IAAItB,MAAJ,CAAWmE,MAAM,CAACmB,IAAP,CAAY,EAAZ,CAAX,EAA4BxF,KAAK,CAACO,OAAN,CAAcY,IAAd,CAAmBsB,KAAnB,EAA0B,WAA1B,EAAuC,EAAvC,CAA5B,CAAD,EACCmC,YAAY,CAACC,eAAb,GAA+BD,YAAY,CAAClD,YAA5C,GAA2D,IAD5D,CAAd;AAEH,GA1ED;AA4EJ;AACA;AACA;AAEA;;;AACI/B,EAAAA,QAAQ,GAAG;AACP8E,IAAAA,EAAE,EAAE,YAAUhD,KAAV,EAAiB6C,OAAjB,EAA0BmB,OAA1B,EAAmC;AACnCA,MAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AACA,UAAIhE,KAAJ,EAAW;AACPd,QAAAA,MAAM,CAAC2E,IAAP,CAAY;AACR1B,UAAAA,OAAO,EAAExB,IAAI,CAACX,KAAD,EAAQ,OAAOL,UAAU,GAAG,GAAH,GAAS,EAA1B,CAAR,CADL;AAERkD,UAAAA,OAAO,EAAEA,OAFD;AAGRR,UAAAA,KAAK,EAAE2B,OAAO,CAAC3B,KAAR,IAAiBlD,YAHhB;AAIRsD,UAAAA,OAAO,EAAEuB,OAAO,CAACvB,OAAR,IAAmB;AAJpB,SAAZ;AAMH,OATkC,CAUnC;AACA;;;AACA,UAAIuB,OAAO,CAACC,WAAZ,EAAyB;AACrBnE,QAAAA,eAAe,GAAGvB,KAAK,CAACO,OAAN,CAAcY,IAAd,CAAmBI,eAAe,GAAGkE,OAAO,CAACC,WAA7C,EAA0D1E,cAA1D,EAA0E,EAA1E,CAAlB;AACH;AACJ,KAhBM;AAiBP2E,IAAAA,GAAG,EAAE,eAAY;AACb,YAAM,IAAIhB,KAAJ,CAAU,uDAAV,CAAN;AACH;AAnBM,GAAX;AAsBJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACIjF,EAAAA,KAAI,CAACC,QAAL,GAAgBA,QAAQ,CAACgG,GAAzB;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACIjG,EAAAA,KAAI,CAACgB,KAAL,GAAa,UAAUkD,OAAV,EAAmBnB,KAAnB,EAA0B;AACnC,QAAImD,GAAG,GAAGhC,OAAO,GAAG,GAAV,IAAiBnB,KAAK,IAAI,EAA1B,CAAV;AACA,WAAO/B,KAAK,CAACkF,GAAD,CAAL,KAAelF,KAAK,CAACkF,GAAD,CAAL,GAAalG,KAAI,CAACkE,OAAD,EAAUnB,KAAV,CAAhC,CAAP;AACH,GAHD;AAKJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI/C,EAAAA,KAAI,CAACmG,MAAL,GAAc,UAAUC,GAAV,EAAe;AACzB,WAAO9F,KAAK,CAACO,OAAN,CAAcY,IAAd,CAAmB2E,GAAnB,EAAwB,0BAAxB,EAAoD,MAApD,CAAP;AACH,GAFD;AAIJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIpG,EAAAA,KAAI,CAACO,IAAL,GAAY,UAAU6F,GAAV,EAAerE,KAAf,EAAsBoC,GAAtB,EAA2BxC,MAA3B,EAAmC;AAC3C,QAAI0E,EAAE,GAAG3D,IAAI,CAACX,KAAD,EAAQ,OAAOJ,MAAM,IAAID,UAAV,GAAuB,GAAvB,GAA6B,EAApC,CAAR,EAAkDC,MAAM,KAAK,KAAX,GAAmB,GAAnB,GAAyB,EAA3E,CAAb;AAAA,QACIhB,KADJ;AAEA0F,IAAAA,EAAE,CAAC5B,SAAH,GAAeN,GAAG,GAAGA,GAAG,IAAI,CAA5B;AACAxD,IAAAA,KAAK,GAAGI,KAAK,CAACR,IAAN,CAAWkB,IAAX,CAAgB4E,EAAhB,EAAoBD,GAApB,CAAR,CAJ2C,CAIT;;AAClC,QAAIzE,MAAM,IAAIhB,KAAV,IAAmBA,KAAK,CAAC+D,KAAN,KAAgBP,GAAvC,EAA4C;AACxCxD,MAAAA,KAAK,GAAG,IAAR;AACH;;AACD,QAAIoB,KAAK,CAACO,MAAV,EAAkB;AACdP,MAAAA,KAAK,CAAC0C,SAAN,GAAkB9D,KAAK,GAAG0F,EAAE,CAAC5B,SAAN,GAAkB,CAAzC;AACH;;AACD,WAAO9D,KAAP;AACH,GAZD;AAcJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIX,EAAAA,KAAI,CAAC+D,OAAL,GAAe,UAAUqC,GAAV,EAAerE,KAAf,EAAsBuE,QAAtB,EAAgCjC,OAAhC,EAAyC;AACpD,QAAIF,GAAG,GAAG,CAAV;AAAA,QACId,CAAC,GAAG,CAAC,CADT;AAAA,QAEI1C,KAFJ;;AAGA,WAAQA,KAAK,GAAGX,KAAI,CAACO,IAAL,CAAU6F,GAAV,EAAerE,KAAf,EAAsBoC,GAAtB,CAAhB,EAA6C;AACzCmC,MAAAA,QAAQ,CAAC7E,IAAT,CAAc4C,OAAd,EAAuB1D,KAAvB,EAA8B,EAAE0C,CAAhC,EAAmC+C,GAAnC,EAAwCrE,KAAxC;AACAoC,MAAAA,GAAG,GAAGxD,KAAK,CAAC+D,KAAN,IAAe/D,KAAK,CAAC,CAAD,CAAL,CAAS2C,MAAT,IAAmB,CAAlC,CAAN;AACH;;AACD,WAAOe,OAAP;AACH,GATD;AAWJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIrE,EAAAA,KAAI,CAACuG,SAAL,GAAiB,UAAUxE,KAAV,EAAiB;AAC9B,WAAOW,IAAI,CAACX,KAAD,EAAQ,GAAR,CAAX;AACH,GAFD;AAIJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI/B,EAAAA,KAAI,CAACwG,OAAL,GAAe,UAAUT,OAAV,EAAmB;AAC9BA,IAAAA,OAAO,GAAGlC,cAAc,CAACkC,OAAD,CAAxB;;AACA,QAAI,CAAC5F,QAAQ,CAACC,OAAV,IAAqB2F,OAAO,CAAC3F,OAAjC,EAA0C;AACtC4E,MAAAA,UAAU,CAAC,IAAD,CAAV;AACH;;AACD,QAAI,CAAC7E,QAAQ,CAACE,aAAV,IAA2B0F,OAAO,CAAC1F,aAAvC,EAAsD;AAClDyE,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACH;AACJ,GARD;AAUJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI9E,EAAAA,KAAI,CAACyG,WAAL,GAAmB,UAAUC,OAAV,EAAmB;AAClC,WAAO,CAAC,CAAEvG,QAAQ,CAACuG,OAAD,CAAlB;AACH,GAFD;AAIJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI1G,EAAAA,KAAI,CAAC6C,QAAL,GAAgB,UAAUO,KAAV,EAAiB;AAC7B,WAAOI,MAAM,CAACJ,KAAD,EAAQ,QAAR,CAAb;AACH,GAFD;AAIJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIpD,EAAAA,KAAI,CAAC2G,UAAL,GAAkB,UAAUP,GAAV,EAAeQ,KAAf,EAAsB;AACpC,WAAQ,SAASC,YAAT,CAAsBC,MAAtB,EAA8BC,KAA9B,EAAqC;AACzC,UAAIC,IAAI,GAAGJ,KAAK,CAACG,KAAD,CAAL,CAAahF,KAAb,GAAqB6E,KAAK,CAACG,KAAD,CAA1B,GAAoC;AAAChF,QAAAA,KAAK,EAAE6E,KAAK,CAACG,KAAD;AAAb,OAA/C;AAAA,UACIE,OAAO,GAAG,EADd;AAAA,UAEIC,QAAQ,GAAG,SAAXA,QAAW,CAAUvG,KAAV,EAAiB;AACxBsG,QAAAA,OAAO,CAACrB,IAAR,CAAaoB,IAAI,CAACG,OAAL,GAAgBxG,KAAK,CAACqG,IAAI,CAACG,OAAN,CAAL,IAAuB,EAAvC,GAA6CxG,KAAK,CAAC,CAAD,CAA/D;AACH,OAJL;AAAA,UAKI0C,CALJ;;AAMA,WAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGyD,MAAM,CAACxD,MAAvB,EAA+B,EAAED,CAAjC,EAAoC;AAChCrD,QAAAA,KAAI,CAAC+D,OAAL,CAAa+C,MAAM,CAACzD,CAAD,CAAnB,EAAwB2D,IAAI,CAACjF,KAA7B,EAAoCmF,QAApC;AACH;;AACD,aAASH,KAAK,KAAKH,KAAK,CAACtD,MAAN,GAAe,CAA1B,IAAgC,CAAC2D,OAAO,CAAC3D,MAA1C,GACC2D,OADD,GAECJ,YAAY,CAACI,OAAD,EAAUF,KAAK,GAAG,CAAlB,CAFpB;AAGH,KAbO,CAaN,CAACX,GAAD,CAbM,EAaC,CAbD,CAAR;AAcH,GAfD;AAiBJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIpG,EAAAA,KAAI,CAACa,OAAL,GAAe,UAAUuF,GAAV,EAAegB,MAAf,EAAuBC,WAAvB,EAAoCjD,KAApC,EAA2C;AACtD,QAAIkD,OAAO,GAAGtH,KAAI,CAAC6C,QAAL,CAAcuE,MAAd,CAAd;AAAA,QACIG,OAAO,GAAGH,MADd;AAAA,QAEI9C,MAFJ;;AAGA,QAAIgD,OAAJ,EAAa;AACT,UAAIlD,KAAK,KAAKrE,KAAV,IAAmBqH,MAAM,CAAC9E,MAA9B,EAAsC;AAClC8B,QAAAA,KAAK,GAAG,KAAR,CADkC,CACnB;AAClB,OAHQ,CAIT;;;AACAmD,MAAAA,OAAO,GAAG7E,IAAI,CAAC0E,MAAD,EAAShD,KAAK,KAAK,KAAV,GAAkB,GAAlB,GAAwB,EAAjC,EAAqCA,KAAK,KAAK,KAAV,GAAkB,EAAlB,GAAuB,GAA5D,CAAd;AACH,KAND,MAMO,IAAIA,KAAK,KAAK,KAAd,EAAqB;AACxBmD,MAAAA,OAAO,GAAG,IAAI/G,MAAJ,CAAWR,KAAI,CAACmG,MAAL,CAAYvF,MAAM,CAACwG,MAAD,CAAlB,CAAX,EAAwC,GAAxC,CAAV;AACH;;AACD9C,IAAAA,MAAM,GAAGvD,KAAK,CAACF,OAAN,CAAcY,IAAd,CAAmBb,MAAM,CAACwF,GAAD,CAAzB,EAAgCmB,OAAhC,EAAyCF,WAAzC,CAAT,CAbsD,CAaU;;AAChE,QAAIC,OAAO,IAAIF,MAAM,CAAC9E,MAAtB,EAA8B;AAC1B8E,MAAAA,MAAM,CAAC3C,SAAP,GAAmB,CAAnB,CAD0B,CACJ;AACzB;;AACD,WAAOH,MAAP;AACH,GAlBD;AAoBJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACItE,EAAAA,KAAI,CAACc,KAAL,GAAa,UAAUsF,GAAV,EAAeoB,SAAf,EAA0BC,KAA1B,EAAiC;AAC1C,WAAO1G,KAAK,CAACD,KAAN,CAAYW,IAAZ,CAAiB2E,GAAjB,EAAsBoB,SAAtB,EAAiCC,KAAjC,CAAP;AACH,GAFD;AAIJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIzH,EAAAA,KAAI,CAACU,IAAL,GAAY,UAAU0F,GAAV,EAAerE,KAAf,EAAsBoC,GAAtB,EAA2BxC,MAA3B,EAAmC;AAC3C;AACA,WAAO,CAAC,CAAC3B,KAAI,CAACO,IAAL,CAAU6F,GAAV,EAAerE,KAAf,EAAsBoC,GAAtB,EAA2BxC,MAA3B,CAAT;AACH,GAHD;AAKJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI3B,EAAAA,KAAI,CAAC0H,SAAL,GAAiB,UAAU3B,OAAV,EAAmB;AAChCA,IAAAA,OAAO,GAAGlC,cAAc,CAACkC,OAAD,CAAxB;;AACA,QAAI5F,QAAQ,CAACC,OAAT,IAAoB2F,OAAO,CAAC3F,OAAhC,EAAyC;AACrC4E,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH;;AACD,QAAI7E,QAAQ,CAACE,aAAT,IAA0B0F,OAAO,CAAC1F,aAAtC,EAAqD;AACjDyE,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACH;AACJ,GARD;AAUJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI9E,EAAAA,KAAI,CAAC2H,KAAL,GAAa,UAAUC,QAAV,EAAoB7E,KAApB,EAA2B;AACpC,QAAI8E,KAAK,GAAG,4DAAZ;AAAA,QACIC,WAAW,GAAG,CADlB;AAAA,QAEIC,gBAFJ;AAAA,QAGI/F,YAHJ;AAAA,QAIIgG,OAAO,GAAG,SAAVA,OAAU,CAAUrH,KAAV,EAAiBsH,KAAjB,EAAwBd,OAAxB,EAAiC;AACvC,UAAIe,IAAI,GAAGlG,YAAY,CAAC8F,WAAW,GAAGC,gBAAf,CAAvB;;AACA,UAAIE,KAAJ,EAAW;AAAE;AACT,UAAEH,WAAF;;AACA,YAAII,IAAJ,EAAU;AAAE;AACR,iBAAO,QAAQA,IAAR,GAAe,GAAtB;AACH;AACJ,OALD,MAKO,IAAIf,OAAJ,EAAa;AAAE;AAClB,eAAO,QAAQ,CAACA,OAAD,GAAWY,gBAAnB,CAAP;AACH;;AACD,aAAOpH,KAAP;AACH,KAfL;AAAA,QAgBIgE,MAAM,GAAG,EAhBb;AAAA,QAiBIT,OAjBJ;AAAA,QAkBIb,CAlBJ;;AAmBA,QAAI,EAAEG,MAAM,CAACoE,QAAD,EAAW,OAAX,CAAN,IAA6BA,QAAQ,CAACtE,MAAxC,CAAJ,EAAqD;AACjD,YAAM,IAAIR,SAAJ,CAAc,mCAAd,CAAN;AACH;;AACD,SAAKO,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGuE,QAAQ,CAACtE,MAAzB,EAAiC,EAAED,CAAnC,EAAsC;AAClCa,MAAAA,OAAO,GAAG0D,QAAQ,CAACvE,CAAD,CAAlB;;AACA,UAAIrD,KAAI,CAAC6C,QAAL,CAAcqB,OAAd,CAAJ,EAA4B;AACxB6D,QAAAA,gBAAgB,GAAGD,WAAnB;AACA9F,QAAAA,YAAY,GAAIkC,OAAO,CAAC9B,OAAR,IAAmB8B,OAAO,CAAC9B,OAAR,CAAgBJ,YAApC,IAAqD,EAApE,CAFwB,CAGxB;AACA;;AACA2C,QAAAA,MAAM,CAACiB,IAAP,CAAY5F,KAAI,CAACkE,OAAO,CAAClB,MAAT,CAAJ,CAAqBA,MAArB,CAA4BnC,OAA5B,CAAoCgH,KAApC,EAA2CG,OAA3C,CAAZ;AACH,OAND,MAMO;AACHrD,QAAAA,MAAM,CAACiB,IAAP,CAAY5F,KAAI,CAACmG,MAAL,CAAYjC,OAAZ,CAAZ;AACH;AACJ;;AACD,WAAOlE,KAAI,CAAC2E,MAAM,CAACmB,IAAP,CAAY,GAAZ,CAAD,EAAmB/C,KAAnB,CAAX;AACH,GApCD;AAsCJ;AACA;AACA;AACA;AACA;AACA;;;AACI/C,EAAAA,KAAI,CAACmI,OAAL,GAAe,OAAf;AAEJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACIpH,EAAAA,KAAK,CAACR,IAAN,GAAa,UAAU6F,GAAV,EAAe;AACxB,QAAIzF,KAAJ,EAAWuH,IAAX,EAAiB7B,EAAjB,EAAqB+B,aAArB,EAAoC/E,CAApC;;AACA,QAAI,CAAC,KAAKf,MAAV,EAAkB;AACd8F,MAAAA,aAAa,GAAG,KAAK3D,SAArB;AACH;;AACD9D,IAAAA,KAAK,GAAGL,KAAK,CAACC,IAAN,CAAW8H,KAAX,CAAiB,IAAjB,EAAuBC,SAAvB,CAAR;;AACA,QAAI3H,KAAJ,EAAW;AACP;AACA;AACA,UAAI,CAACa,iBAAD,IAAsBb,KAAK,CAAC2C,MAAN,GAAe,CAArC,IAA0CJ,WAAW,CAACvC,KAAD,EAAQ,EAAR,CAAX,GAAyB,CAAC,CAAxE,EAA2E;AACvE0F,QAAAA,EAAE,GAAG,IAAI7F,MAAJ,CAAW,KAAKwC,MAAhB,EAAwB1C,KAAK,CAACO,OAAN,CAAcY,IAAd,CAAmBY,cAAc,CAAC,IAAD,CAAjC,EAAyC,GAAzC,EAA8C,EAA9C,CAAxB,CAAL,CADuE,CAEvE;AACA;;AACA/B,QAAAA,KAAK,CAACO,OAAN,CAAcY,IAAd,CAAmBb,MAAM,CAACwF,GAAD,CAAN,CAAYnD,KAAZ,CAAkBtC,KAAK,CAAC+D,KAAxB,CAAnB,EAAmD2B,EAAnD,EAAuD,YAAY;AAC/D,cAAIhD,CAAJ;;AACA,eAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGiF,SAAS,CAAChF,MAAV,GAAmB,CAAnC,EAAsC,EAAED,CAAxC,EAA2C;AACvC,gBAAIiF,SAAS,CAACjF,CAAD,CAAT,KAAiBtD,KAArB,EAA4B;AACxBY,cAAAA,KAAK,CAAC0C,CAAD,CAAL,GAAWtD,KAAX;AACH;AACJ;AACJ,SAPD;AAQH,OAfM,CAgBP;;;AACA,UAAI,KAAKqC,OAAL,IAAgB,KAAKA,OAAL,CAAaJ,YAAjC,EAA+C;AAC3C,aAAKqB,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG1C,KAAK,CAAC2C,MAAtB,EAA8B,EAAED,CAAhC,EAAmC;AAC/B6E,UAAAA,IAAI,GAAG,KAAK9F,OAAL,CAAaJ,YAAb,CAA0BqB,CAAC,GAAG,CAA9B,CAAP;;AACA,cAAI6E,IAAJ,EAAU;AACNvH,YAAAA,KAAK,CAACuH,IAAD,CAAL,GAAcvH,KAAK,CAAC0C,CAAD,CAAnB;AACH;AACJ;AACJ,OAxBM,CAyBP;;;AACA,UAAI,KAAKf,MAAL,IAAe,CAAC3B,KAAK,CAAC,CAAD,CAAL,CAAS2C,MAAzB,IAAoC,KAAKmB,SAAL,GAAiB9D,KAAK,CAAC+D,KAA/D,EAAuE;AACnE,aAAKD,SAAL,GAAiB9D,KAAK,CAAC+D,KAAvB;AACH;AACJ;;AACD,QAAI,CAAC,KAAKpC,MAAV,EAAkB;AACd,WAAKmC,SAAL,GAAiB2D,aAAjB,CADc,CACkB;AACnC;;AACD,WAAOzH,KAAP;AACH,GAxCD;AA0CJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACII,EAAAA,KAAK,CAACL,IAAN,GAAa,UAAU0F,GAAV,EAAe;AACxB;AACA,WAAO,CAAC,CAACrF,KAAK,CAACR,IAAN,CAAWkB,IAAX,CAAgB,IAAhB,EAAsB2E,GAAtB,CAAT;AACH,GAHD;AAKJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIrF,EAAAA,KAAK,CAACJ,KAAN,GAAc,UAAUoB,KAAV,EAAiB;AAC3B,QAAI,CAAC/B,KAAI,CAAC6C,QAAL,CAAcd,KAAd,CAAL,EAA2B;AACvBA,MAAAA,KAAK,GAAG,IAAIvB,MAAJ,CAAWuB,KAAX,CAAR,CADuB,CACI;AAC9B,KAFD,MAEO,IAAIA,KAAK,CAACO,MAAV,EAAkB;AACrB,UAAIgC,MAAM,GAAGhE,KAAK,CAACK,KAAN,CAAY0H,KAAZ,CAAkB,IAAlB,EAAwBC,SAAxB,CAAb;AACAvG,MAAAA,KAAK,CAAC0C,SAAN,GAAkB,CAAlB,CAFqB,CAEA;;AACrB,aAAOH,MAAP;AACH;;AACD,WAAOvD,KAAK,CAACR,IAAN,CAAWkB,IAAX,CAAgBM,KAAhB,EAAuB,IAAvB,CAAP;AACH,GATD;AAWJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIhB,EAAAA,KAAK,CAACF,OAAN,GAAgB,UAAUuG,MAAV,EAAkBC,WAAlB,EAA+B;AAC3C,QAAIC,OAAO,GAAGtH,KAAI,CAAC6C,QAAL,CAAcuE,MAAd,CAAd;AAAA,QAAqCpF,YAArC;AAAA,QAAmDsC,MAAnD;AAAA,QAA2D8B,GAA3D;AAAA,QAAgEgC,aAAhE;;AACA,QAAId,OAAJ,EAAa;AACT,UAAIF,MAAM,CAAChF,OAAX,EAAoB;AAChBJ,QAAAA,YAAY,GAAGoF,MAAM,CAAChF,OAAP,CAAeJ,YAA9B;AACH;;AACD,UAAI,CAACoF,MAAM,CAAC9E,MAAZ,EAAoB;AAChB8F,QAAAA,aAAa,GAAGhB,MAAM,CAAC3C,SAAvB;AACH;AACJ,KAPD,MAOO;AACH2C,MAAAA,MAAM,IAAI,EAAV;AACH;;AACD,QAAI5D,MAAM,CAAC6D,WAAD,EAAc,UAAd,CAAV,EAAqC;AACjC/C,MAAAA,MAAM,GAAGhE,KAAK,CAACO,OAAN,CAAcY,IAAd,CAAmBb,MAAM,CAAC,IAAD,CAAzB,EAAiCwG,MAAjC,EAAyC,YAAY;AAC1D,YAAImB,IAAI,GAAGD,SAAX;AAAA,YAAsBjF,CAAtB;;AACA,YAAIrB,YAAJ,EAAkB;AACd;AACAuG,UAAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAI3H,MAAJ,CAAW2H,IAAI,CAAC,CAAD,CAAf,CAAV,CAFc,CAGd;;AACA,eAAKlF,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGrB,YAAY,CAACsB,MAA7B,EAAqC,EAAED,CAAvC,EAA0C;AACtC,gBAAIrB,YAAY,CAACqB,CAAD,CAAhB,EAAqB;AACjBkF,cAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQvG,YAAY,CAACqB,CAAD,CAApB,IAA2BkF,IAAI,CAAClF,CAAC,GAAG,CAAL,CAA/B;AACH;AACJ;AACJ,SAXyD,CAY1D;AACA;;;AACA,YAAIiE,OAAO,IAAIF,MAAM,CAAC9E,MAAtB,EAA8B;AAC1B8E,UAAAA,MAAM,CAAC3C,SAAP,GAAmB8D,IAAI,CAACA,IAAI,CAACjF,MAAL,GAAc,CAAf,CAAJ,GAAwBiF,IAAI,CAAC,CAAD,CAAJ,CAAQjF,MAAnD;AACH;;AACD,eAAO+D,WAAW,CAACgB,KAAZ,CAAkB,IAAlB,EAAwBE,IAAxB,CAAP;AACH,OAlBQ,CAAT;AAmBH,KApBD,MAoBO;AACHnC,MAAAA,GAAG,GAAGxF,MAAM,CAAC,IAAD,CAAZ,CADG,CACiB;;AACpB0D,MAAAA,MAAM,GAAGhE,KAAK,CAACO,OAAN,CAAcY,IAAd,CAAmB2E,GAAnB,EAAwBgB,MAAxB,EAAgC,YAAY;AACjD,YAAImB,IAAI,GAAGD,SAAX,CADiD,CAC3B;;AACtB,eAAOhI,KAAK,CAACO,OAAN,CAAcY,IAAd,CAAmBb,MAAM,CAACyG,WAAD,CAAzB,EAAwChG,gBAAxC,EAA0D,UAAUqE,EAAV,EAAcC,EAAd,EAAkB6C,EAAlB,EAAsB;AACnF,cAAIC,CAAJ,CADmF,CAEnF;;AACA,cAAI9C,EAAJ,EAAQ;AACJ;AACxB;AACA;AACA;AACA;AACwB8C,YAAAA,CAAC,GAAG,CAAC9C,EAAL,CANI,CAMK;;AACT,gBAAI8C,CAAC,IAAIF,IAAI,CAACjF,MAAL,GAAc,CAAvB,EAA0B;AACtB,qBAAOiF,IAAI,CAACE,CAAD,CAAJ,IAAW,EAAlB;AACH;;AACDA,YAAAA,CAAC,GAAGzG,YAAY,GAAGkB,WAAW,CAAClB,YAAD,EAAe2D,EAAf,CAAd,GAAmC,CAAC,CAApD;;AACA,gBAAI8C,CAAC,GAAG,CAAR,EAAW;AACP,oBAAM,IAAIhD,WAAJ,CAAgB,sCAAsCC,EAAtD,CAAN;AACH;;AACD,mBAAO6C,IAAI,CAACE,CAAC,GAAG,CAAL,CAAJ,IAAe,EAAtB;AACH,WAlBkF,CAmBnF;;;AACA,cAAID,EAAE,KAAK,GAAX,EAAgB,OAAO,GAAP;AAChB,cAAIA,EAAE,KAAK,GAAP,IAAc,CAACA,EAAD,KAAQ,CAA1B,EAA6B,OAAOD,IAAI,CAAC,CAAD,CAAX,CArBsD,CAqBtC;;AAC7C,cAAIC,EAAE,KAAK,GAAX,EAAgB,OAAOD,IAAI,CAACA,IAAI,CAACjF,MAAL,GAAc,CAAf,CAAJ,CAAsBL,KAAtB,CAA4B,CAA5B,EAA+BsF,IAAI,CAACA,IAAI,CAACjF,MAAL,GAAc,CAAf,CAAnC,CAAP;AAChB,cAAIkF,EAAE,KAAK,GAAX,EAAgB,OAAOD,IAAI,CAACA,IAAI,CAACjF,MAAL,GAAc,CAAf,CAAJ,CAAsBL,KAAtB,CAA4BsF,IAAI,CAACA,IAAI,CAACjF,MAAL,GAAc,CAAf,CAAJ,GAAwBiF,IAAI,CAAC,CAAD,CAAJ,CAAQjF,MAA5D,CAAP,CAvBmE,CAwBnF;;AACAkF,UAAAA,EAAE,GAAG,CAACA,EAAN,CAzBmF,CAyBzE;;AACV;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACoB,cAAI,CAACE,KAAK,CAACF,EAAD,CAAV,EAAgB;AACZ,gBAAIA,EAAE,GAAGD,IAAI,CAACjF,MAAL,GAAc,CAAvB,EAA0B;AACtB,oBAAM,IAAImC,WAAJ,CAAgB,sCAAsCC,EAAtD,CAAN;AACH;;AACD,mBAAO6C,IAAI,CAACC,EAAD,CAAJ,IAAY,EAAnB;AACH;;AACD,gBAAM,IAAI/C,WAAJ,CAAgB,mBAAmBC,EAAnC,CAAN;AACH,SA9CM,CAAP;AA+CH,OAjDQ,CAAT;AAkDH;;AACD,QAAI4B,OAAJ,EAAa;AACT,UAAIF,MAAM,CAAC9E,MAAX,EAAmB;AACf8E,QAAAA,MAAM,CAAC3C,SAAP,GAAmB,CAAnB,CADe,CACO;AACzB,OAFD,MAEO;AACH2C,QAAAA,MAAM,CAAC3C,SAAP,GAAmB2D,aAAnB,CADG,CAC+B;AACrC;AACJ;;AACD,WAAO9D,MAAP;AACH,GA7FD;AA+FJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIvD,EAAAA,KAAK,CAACD,KAAN,GAAc,UAAU0G,SAAV,EAAqBC,KAArB,EAA4B;AACtC,QAAI,CAACzH,KAAI,CAAC6C,QAAL,CAAc2E,SAAd,CAAL,EAA+B;AAC3B,aAAOlH,KAAK,CAACQ,KAAN,CAAYuH,KAAZ,CAAkB,IAAlB,EAAwBC,SAAxB,CAAP,CAD2B,CACgB;AAC9C;;AACD,QAAIlC,GAAG,GAAGxF,MAAM,CAAC,IAAD,CAAhB;AAAA,QACIwH,aAAa,GAAGZ,SAAS,CAAC/C,SAD9B;AAAA,QAEIE,MAAM,GAAG,EAFb;AAAA,QAGIgE,aAAa,GAAG,CAHpB;AAAA,QAIIC,UAJJ;AAKA;AACR;AACA;AACA;AACA;AACA;AACA;;AACQnB,IAAAA,KAAK,GAAG,CAACA,KAAK,KAAK1H,KAAV,GAAkB,CAAC,CAAnB,GAAuB0H,KAAxB,MAAmC,CAA3C;;AACAzH,IAAAA,KAAI,CAAC+D,OAAL,CAAaqC,GAAb,EAAkBoB,SAAlB,EAA6B,UAAU7G,KAAV,EAAiB;AAC1C,UAAKA,KAAK,CAAC+D,KAAN,GAAc/D,KAAK,CAAC,CAAD,CAAL,CAAS2C,MAAxB,GAAkCqF,aAAtC,EAAqD;AAAE;AACnDhE,QAAAA,MAAM,CAACiB,IAAP,CAAYQ,GAAG,CAACnD,KAAJ,CAAU0F,aAAV,EAAyBhI,KAAK,CAAC+D,KAA/B,CAAZ;;AACA,YAAI/D,KAAK,CAAC2C,MAAN,GAAe,CAAf,IAAoB3C,KAAK,CAAC+D,KAAN,GAAc0B,GAAG,CAAC9C,MAA1C,EAAkD;AAC9CC,UAAAA,KAAK,CAAC9C,SAAN,CAAgBmF,IAAhB,CAAqByC,KAArB,CAA2B1D,MAA3B,EAAmChE,KAAK,CAACsC,KAAN,CAAY,CAAZ,CAAnC;AACH;;AACD2F,QAAAA,UAAU,GAAGjI,KAAK,CAAC,CAAD,CAAL,CAAS2C,MAAtB;AACAqF,QAAAA,aAAa,GAAGhI,KAAK,CAAC+D,KAAN,GAAckE,UAA9B;AACH;AACJ,KATD;;AAUA,QAAID,aAAa,KAAKvC,GAAG,CAAC9C,MAA1B,EAAkC;AAC9B,UAAI,CAAChD,KAAK,CAACI,IAAN,CAAWe,IAAX,CAAgB+F,SAAhB,EAA2B,EAA3B,CAAD,IAAmCoB,UAAvC,EAAmD;AAC/CjE,QAAAA,MAAM,CAACiB,IAAP,CAAY,EAAZ;AACH;AACJ,KAJD,MAIO;AACHjB,MAAAA,MAAM,CAACiB,IAAP,CAAYQ,GAAG,CAACnD,KAAJ,CAAU0F,aAAV,CAAZ;AACH;;AACDnB,IAAAA,SAAS,CAAC/C,SAAV,GAAsB2D,aAAtB;AACA,WAAOzD,MAAM,CAACrB,MAAP,GAAgBmE,KAAhB,GAAwB9C,MAAM,CAAC1B,KAAP,CAAa,CAAb,EAAgBwE,KAAhB,CAAxB,GAAiD9C,MAAxD;AACH,GApCD;AAsCJ;AACA;AACA;AAEA;;;AACIzE,EAAAA,GAAG,GAAGD,QAAQ,CAAC8E,EAAf;AAEJ;AACA;AACA;AACA;;AACI7E,EAAAA,GAAG,CAAC,kFAAD,EACC,UAAUS,KAAV,EAAiByD,KAAjB,EAAwB;AACpB;AACA,QAAIzD,KAAK,CAAC,CAAD,CAAL,KAAa,GAAb,IAAoByD,KAAK,KAAKlD,YAAlC,EAAgD;AAC5C,aAAOP,KAAK,CAAC,CAAD,CAAZ;AACH;;AACD,UAAM,IAAI8E,WAAJ,CAAgB,oBAAoB9E,KAAK,CAAC,CAAD,CAAzC,CAAN;AACH,GAPF,EAQC;AAACyD,IAAAA,KAAK,EAAE;AAAR,GARD,CAAH;AAUJ;AACA;AACA;AACA;;AACIlE,EAAAA,GAAG,CAAC,UAAD,EACC,UAAUS,KAAV,EAAiB;AACb;AACA;AACA,WAAOA,KAAK,CAAC,CAAD,CAAL,GAAW,UAAX,GAAwB,QAA/B;AACH,GALF,CAAH;AAOJ;AACA;AACA;;AACIT,EAAAA,GAAG,CAAC,mBAAD,EACC,UAAUS,KAAV,EAAiB;AACb;AACA,WAAOL,KAAK,CAACI,IAAN,CAAWe,IAAX,CAAgBF,UAAhB,EAA4BZ,KAAK,CAACkI,KAAN,CAAY5F,KAAZ,CAAkBtC,KAAK,CAAC+D,KAAN,GAAc/D,KAAK,CAAC,CAAD,CAAL,CAAS2C,MAAzC,CAA5B,IAAgF,EAAhF,GAAqF,MAA5F;AACH,GAJF,CAAH;AAMJ;AACA;AACA;;AACIpD,EAAAA,GAAG,CAAC,eAAD,EACC,UAAUS,KAAV,EAAiB;AACb,QAAI+D,KAAK,GAAGgE,KAAK,CAAC/H,KAAK,CAAC,CAAD,CAAN,CAAL,GAAmBuC,WAAW,CAAC,KAAKlB,YAAN,EAAoBrB,KAAK,CAAC,CAAD,CAAzB,CAAX,GAA2C,CAA9D,GAAmE,CAACA,KAAK,CAAC,CAAD,CAArF;AAAA,QACImI,QAAQ,GAAGnI,KAAK,CAAC+D,KAAN,GAAc/D,KAAK,CAAC,CAAD,CAAL,CAAS2C,MADtC;;AAEA,QAAI,CAACoB,KAAD,IAAUA,KAAK,GAAG,KAAK1C,YAAL,CAAkBsB,MAAxC,EAAgD;AAC5C,YAAM,IAAImC,WAAJ,CAAgB,sCAAsC9E,KAAK,CAAC,CAAD,CAA3D,CAAN;AACH,KALY,CAMb;;;AACA,WAAO,OAAO+D,KAAP,IACHoE,QAAQ,KAAKnI,KAAK,CAACkI,KAAN,CAAYvF,MAAzB,IAAmCoF,KAAK,CAAC/H,KAAK,CAACkI,KAAN,CAAYhD,MAAZ,CAAmBiD,QAAnB,CAAD,CAAxC,GAAyE,EAAzE,GAA8E,MAD3E,CAAP;AAGH,GAXF,CAAH;AAaJ;AACA;;AACI5I,EAAAA,GAAG,CAAC,cAAD,EACC,UAAUS,KAAV,EAAiB;AACb;AACA,WAAOL,KAAK,CAACI,IAAN,CAAWe,IAAX,CAAgBF,UAAhB,EAA4BZ,KAAK,CAACkI,KAAN,CAAY5F,KAAZ,CAAkBtC,KAAK,CAAC+D,KAAN,GAAc/D,KAAK,CAAC,CAAD,CAAL,CAAS2C,MAAzC,CAA5B,IAAgF,EAAhF,GAAqF,MAA5F;AACH,GAJF,EAKC;AACIkB,IAAAA,OAAO,EAAE,mBAAY;AACjB,aAAO,KAAKY,OAAL,CAAa,GAAb,CAAP;AACH,KAHL;AAIIY,IAAAA,WAAW,EAAE;AAJjB,GALD,CAAH;AAYJ;AACA;;AACI9F,EAAAA,GAAG,CAAC,IAAD,EACC,YAAY;AACR,WAAO,UAAP;AACH,GAHF,EAIC;AACIsE,IAAAA,OAAO,EAAE,mBAAY;AACjB,aAAO,KAAKY,OAAL,CAAa,GAAb,CAAP;AACH,KAHL;AAIIY,IAAAA,WAAW,EAAE;AAJjB,GAJD,CAAH;AAWJ;AACA;AACA;AACA;AACA;AACA;;AACI9F,EAAAA,GAAG,CAAC,kBAAD,EACC,UAAUS,KAAV,EAAiB;AACb,QAAI,CAAC+H,KAAK,CAAC/H,KAAK,CAAC,CAAD,CAAN,CAAV,EAAsB;AAClB;AACA,YAAM,IAAI8E,WAAJ,CAAgB,uCAAuC9E,KAAK,CAAC,CAAD,CAA5D,CAAN;AACH;;AACD,SAAKqB,YAAL,CAAkB4D,IAAlB,CAAuBjF,KAAK,CAAC,CAAD,CAA5B;AACA,SAAKwE,eAAL,GAAuB,IAAvB;AACA,WAAO,GAAP;AACH,GATF,CAAH;AAWJ;AACA;AACA;AACA;AACA;;AACIjF,EAAAA,GAAG,CAAC,SAAD,EACC,UAAUS,KAAV,EAAiByD,KAAjB,EAAwB;AACpB,QAAI,EAAEA,KAAK,KAAKlD,YAAV,IAA0B,SAASR,IAAT,CAAcC,KAAK,CAAC,CAAD,CAAnB,CAA1B,IAAqD,CAACA,KAAK,CAAC,CAAD,CAAN,IAAa,KAAKqB,YAAL,CAAkBsB,MAAtF,KACI3C,KAAK,CAAC,CAAD,CAAL,KAAa,GADrB,EAC0B;AACtB,YAAM,IAAI8E,WAAJ,CAAgB,gEAAgE9E,KAAK,CAAC,CAAD,CAArF,CAAN;AACH;;AACD,WAAOA,KAAK,CAAC,CAAD,CAAZ;AACH,GAPF,EAQC;AAACyD,IAAAA,KAAK,EAAE;AAAR,GARD,CAAH;AAUJ;AACA;AACA;;AACIlE,EAAAA,GAAG,CAAC,UAAD,EACC,YAAY;AACR,QAAI,KAAKkF,OAAL,CAAa,GAAb,CAAJ,EAAuB;AACnB,aAAO,KAAP;AACH;;AACD,SAAKpD,YAAL,CAAkB4D,IAAlB,CAAuB,IAAvB;AACA,WAAO,GAAP;AACH,GAPF,EAQC;AAACI,IAAAA,WAAW,EAAE;AAAd,GARD,CAAH;AAUJ;AACA;AACA;AAEA;;AACI,MAAI,OAAO+C,OAAP,KAAmB,WAAvB,EAAoC;AAChCA,IAAAA,OAAO,CAACjJ,OAAR,GAAkBE,KAAlB;AACH;;AAED,SAAOA,KAAP;AAEH,CA7tCqB,EAAtB;AAguCA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACC,WAAUF,OAAV,EAAmB;AAChB;;AAEA,MAAIkJ,OAAO,GAAG,EAAd;AAEJ;AACA;AACA;AAEA;;AACI,WAASC,IAAT,CAAcf,IAAd,EAAoB;AAChB,WAAOA,IAAI,CAACrH,OAAL,CAAa,SAAb,EAAwB,EAAxB,EAA4B+C,WAA5B,EAAP;AACH,GAZe,CAcpB;;;AACI,WAASsF,MAAT,CAAgB9C,GAAhB,EAAqB;AACjB,WAAOA,GAAG,CAACvF,OAAJ,CAAY,QAAZ,EAAsB,OAAtB,CAAP;AACH,GAjBe,CAmBpB;;;AACI,WAASsI,IAAT,CAAc/C,GAAd,EAAmB;AACf,WAAOA,GAAG,CAAC9C,MAAJ,GAAa,CAApB,EAAuB;AACnB8C,MAAAA,GAAG,GAAG,MAAMA,GAAZ;AACH;;AACD,WAAOA,GAAP;AACH,GAzBe,CA2BpB;;;AACI,WAASgD,GAAT,CAAaC,GAAb,EAAkB;AACd,WAAOC,QAAQ,CAACD,GAAD,EAAM,EAAN,CAAf;AACH,GA9Be,CAgCpB;;;AACI,WAASA,GAAT,CAAaD,GAAb,EAAkB;AACd,WAAOE,QAAQ,CAACF,GAAD,EAAM,EAAN,CAAR,CAAkBzF,QAAlB,CAA2B,EAA3B,CAAP;AACH,GAnCe,CAqCpB;;;AACI,WAAS4F,MAAT,CAAgBC,KAAhB,EAAuB;AACnB,QAAI7E,MAAM,GAAG,EAAb;AAAA,QACI8E,OAAO,GAAG,CAAC,CADf;AAAA,QAEIC,KAFJ;AAGA5J,IAAAA,OAAO,CAACiE,OAAR,CAAgByF,KAAhB,EAAuB,4BAAvB,EAAqD,UAAUxF,CAAV,EAAa;AAC9D0F,MAAAA,KAAK,GAAGN,GAAG,CAACpF,CAAC,CAAC,CAAD,CAAF,CAAX;;AACA,UAAI0F,KAAK,GAAID,OAAO,GAAG,CAAvB,EAA2B;AACvB9E,QAAAA,MAAM,CAACiB,IAAP,CAAY,QAAQuD,IAAI,CAACE,GAAG,CAACI,OAAO,GAAG,CAAX,CAAJ,CAAxB;;AACA,YAAIC,KAAK,GAAID,OAAO,GAAG,CAAvB,EAA2B;AACvB9E,UAAAA,MAAM,CAACiB,IAAP,CAAY,SAASuD,IAAI,CAACE,GAAG,CAACK,KAAK,GAAG,CAAT,CAAJ,CAAzB;AACH;AACJ;;AACDD,MAAAA,OAAO,GAAGL,GAAG,CAACpF,CAAC,CAAC,CAAD,CAAD,IAAQA,CAAC,CAAC,CAAD,CAAV,CAAb;AACH,KATD;;AAUA,QAAIyF,OAAO,GAAG,MAAd,EAAsB;AAClB9E,MAAAA,MAAM,CAACiB,IAAP,CAAY,QAAQuD,IAAI,CAACE,GAAG,CAACI,OAAO,GAAG,CAAX,CAAJ,CAAxB;;AACA,UAAIA,OAAO,GAAG,MAAd,EAAsB;AAClB9E,QAAAA,MAAM,CAACiB,IAAP,CAAY,UAAZ;AACH;AACJ;;AACD,WAAOjB,MAAM,CAACmB,IAAP,CAAY,EAAZ,CAAP;AACH,GA3De,CA6DpB;;;AACI,WAAS6D,cAAT,CAAwB3C,IAAxB,EAA8B;AAC1B,WAAOgC,OAAO,CAAC,MAAMhC,IAAP,CAAP,KAAwBgC,OAAO,CAAC,MAAMhC,IAAP,CAAP,GAAsBuC,MAAM,CAACP,OAAO,CAAChC,IAAD,CAAR,CAApD,CAAP;AACH;AAEL;AACA;AACA;;;AAEIlH,EAAAA,OAAO,CAAC0G,OAAR,CAAgB,eAAhB;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI1G,EAAAA,OAAO,CAAC8J,iBAAR,GAA4B,UAAUC,IAAV,EAAgBC,OAAhB,EAAyB;AACjD,QAAI5H,CAAJ;;AACA,QAAI,CAACpC,OAAO,CAAC2G,WAAR,CAAoB,eAApB,CAAL,EAA2C;AACvC,YAAM,IAAIxB,KAAJ,CAAU,gEAAV,CAAN;AACH;;AACD,QAAI4E,IAAJ,EAAU;AACN,WAAK3H,CAAL,IAAU2H,IAAV,EAAgB;AACZ,YAAIA,IAAI,CAAC1H,cAAL,CAAoBD,CAApB,CAAJ,EAA4B;AACxB8G,UAAAA,OAAO,CAACC,IAAI,CAAC/G,CAAD,CAAL,CAAP,GAAmBgH,MAAM,CAACW,IAAI,CAAC3H,CAAD,CAAL,CAAzB;AACH;AACJ;AACJ;;AACD,QAAI4H,OAAJ,EAAa;AACT,WAAK5H,CAAL,IAAU4H,OAAV,EAAmB;AACf,YAAIA,OAAO,CAAC3H,cAAR,CAAuBD,CAAvB,CAAJ,EAA+B;AAC3B8G,UAAAA,OAAO,CAACC,IAAI,CAACa,OAAO,CAAC5H,CAAD,CAAR,CAAL,CAAP,GAA4B8G,OAAO,CAACC,IAAI,CAAC/G,CAAD,CAAL,CAAnC;AACH;AACJ;AACJ;AACJ,GAnBD;AAqBJ;AACA;AACA;;;AACIpC,EAAAA,OAAO,CAAC8J,iBAAR,CAA0B;AACtBG,IAAAA,CAAC,EAAE;AADmB,GAA1B,EAEG;AACCA,IAAAA,CAAC,EAAE;AADJ,GAFH;AAMJ;AACA;;AACIjK,EAAAA,OAAO,CAACG,QAAR,CACI,wBADJ,EAEI,UAAUU,KAAV,EAAiByD,KAAjB,EAAwB;AACpB,QAAI4F,GAAG,GAAIrJ,KAAK,CAAC,CAAD,CAAL,KAAa,GAAb,IAAoBA,KAAK,CAAC,CAAD,CAA1B,GAAiC,GAAjC,GAAuC,EAAjD;AAAA,QACIqG,IAAI,GAAGiC,IAAI,CAACtI,KAAK,CAAC,CAAD,CAAN,CADf,CADoB,CAGpB;;AACA,QAAIA,KAAK,CAAC,CAAD,CAAL,KAAa,GAAb,IAAoBA,KAAK,CAAC,CAAD,CAA7B,EAAkC;AAC9B,YAAM,IAAI8E,WAAJ,CAAgB,+BAAhB,CAAN;AACH;;AACD,QAAI,CAACuD,OAAO,CAAC7G,cAAR,CAAuB6E,IAAvB,CAAL,EAAmC;AAC/B,YAAM,IAAIvB,WAAJ,CAAgB,yCAAyC9E,KAAK,CAAC,CAAD,CAA9D,CAAN;AACH;;AACD,WAAOyD,KAAK,KAAK,OAAV,GACE4F,GAAG,GAAGL,cAAc,CAAC3C,IAAD,CAAjB,GAA0BgC,OAAO,CAAChC,IAAD,CADtC,GAEC,MAAMgD,GAAN,GAAYhB,OAAO,CAAChC,IAAD,CAAnB,GAA4B,GAFpC;AAGH,GAfL,EAgBI;AAAC5C,IAAAA,KAAK,EAAE;AAAR,GAhBJ;AAmBH,CAxIA,EAwICtE,OAxID,CAAD;AA2IA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACC,WAAUA,OAAV,EAAmB;AAChB;;AAEA,MAAI,CAACA,OAAO,CAAC8J,iBAAb,EAAgC;AAC5B,UAAM,IAAIK,cAAJ,CAAmB,uDAAnB,CAAN;AACH;;AAEDnK,EAAAA,OAAO,CAAC0G,OAAR,CAAgB,eAAhB;AAEA1G,EAAAA,OAAO,CAAC8J,iBAAR,CAA0B;AACtB;AACAM,IAAAA,EAAE,EAAE,skFAFkB;AAGtBC,IAAAA,EAAE,EAAE,2/EAHkB;AAItBC,IAAAA,EAAE,EAAE,yDAJkB;AAKtBC,IAAAA,EAAE,EAAE,iSALkB;AAMtBC,IAAAA,EAAE,EAAE,0tEANkB;AAOtBC,IAAAA,CAAC,EAAE,o3CAPmB;AAQtBC,IAAAA,EAAE,EAAE,ozCARkB;AAStBC,IAAAA,EAAE,EAAE,ywBATkB;AAUtBC,IAAAA,EAAE,EAAE,qCAVkB;AAWtBC,IAAAA,CAAC,EAAE,6iBAXmB;AAYtBC,IAAAA,EAAE,EAAE,6TAZkB;AAatBC,IAAAA,EAAE,EAAE,4DAbkB;AActBC,IAAAA,EAAE,EAAE,oOAdkB;AAetBC,IAAAA,CAAC,EAAE,83BAfmB;AAgBtBC,IAAAA,EAAE,EAAE,+EAhBkB;AAiBtBC,IAAAA,EAAE,EAAE,kSAjBkB;AAkBtBC,IAAAA,EAAE,EAAE,8RAlBkB;AAmBtBC,IAAAA,EAAE,EAAE,kDAnBkB;AAoBtBC,IAAAA,EAAE,EAAE,0CApBkB;AAqBtBC,IAAAA,EAAE,EAAE,uCArBkB;AAsBtBC,IAAAA,EAAE,EAAE,i1BAtBkB;AAuBtBC,IAAAA,CAAC,EAAE,u+BAvBmB;AAwBtBC,IAAAA,EAAE,EAAE,yVAxBkB;AAyBtBC,IAAAA,EAAE,EAAE,4FAzBkB;AA0BtBC,IAAAA,EAAE,EAAE,oLA1BkB;AA2BtBC,IAAAA,EAAE,EAAE,qxBA3BkB;AA4BtBC,IAAAA,CAAC,EAAE,+CA5BmB;AA6BtBC,IAAAA,EAAE,EAAE,uCA7BkB;AA8BtBC,IAAAA,EAAE,EAAE,MA9BkB;AA+BtBC,IAAAA,EAAE,EAAE,MA/BkB;AAgCtBC,IAAAA,CAAC,EAAE,+hFAhCmB;AAiCtBC,IAAAA,EAAE,EAAE,oBAjCkB;AAkCtBC,IAAAA,EAAE,EAAE,wEAlCkB;AAmCtBC,IAAAA,EAAE,EAAE,WAnCkB;AAoCtBC,IAAAA,EAAE,EAAE,WApCkB;AAqCtBC,IAAAA,EAAE,EAAE;AArCkB,GAA1B,EAsCG;AACC;AACAnC,IAAAA,EAAE,EAAE,kBAFL;AAGCC,IAAAA,EAAE,EAAE,kBAHL;AAICC,IAAAA,EAAE,EAAE,kBAJL;AAKCC,IAAAA,EAAE,EAAE,iBALL;AAMCC,IAAAA,EAAE,EAAE,cANL;AAOCC,IAAAA,CAAC,EAAE,MAPJ;AAQCC,IAAAA,EAAE,EAAE,iBARL;AASCC,IAAAA,EAAE,EAAE,cATL;AAUCC,IAAAA,EAAE,EAAE,gBAVL;AAWCC,IAAAA,CAAC,EAAE,QAXJ;AAYCC,IAAAA,EAAE,EAAE,gBAZL;AAaCC,IAAAA,EAAE,EAAE,eAbL;AAcCC,IAAAA,EAAE,EAAE,cAdL;AAeCC,IAAAA,CAAC,EAAE,aAfJ;AAgBCC,IAAAA,EAAE,EAAE,kBAhBL;AAiBCC,IAAAA,EAAE,EAAE,kBAjBL;AAkBCC,IAAAA,EAAE,EAAE,mBAlBL;AAmBCC,IAAAA,EAAE,EAAE,qBAnBL;AAoBCC,IAAAA,EAAE,EAAE,mBApBL;AAqBCC,IAAAA,EAAE,EAAE,uBArBL;AAsBCC,IAAAA,EAAE,EAAE,mBAtBL;AAuBCC,IAAAA,CAAC,EAAE,QAvBJ;AAwBCC,IAAAA,EAAE,EAAE,aAxBL;AAyBCC,IAAAA,EAAE,EAAE,iBAzBL;AA0BCC,IAAAA,EAAE,EAAE,iBA1BL;AA2BCC,IAAAA,EAAE,EAAE,cA3BL;AA4BCC,IAAAA,CAAC,EAAE,WA5BJ;AA6BCC,IAAAA,EAAE,EAAE,iBA7BL;AA8BCC,IAAAA,EAAE,EAAE,gBA9BL;AA+BCC,IAAAA,EAAE,EAAE,qBA/BL;AAgCCC,IAAAA,CAAC,EAAE,OAhCJ;AAiCCC,IAAAA,EAAE,EAAE,SAjCL;AAkCCC,IAAAA,EAAE,EAAE,QAlCL;AAmCCC,IAAAA,EAAE,EAAE,aAnCL;AAoCCC,IAAAA,EAAE,EAAE,WApCL;AAqCCC,IAAAA,EAAE,EAAE;AArCL,GAtCH;AA8EH,CAvFA,EAuFCvM,OAvFD,CAAD;AA0FA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACC,WAAUA,OAAV,EAAmB;AAChB;;AAEA,MAAI,CAACA,OAAO,CAAC8J,iBAAb,EAAgC;AAC5B,UAAM,IAAIK,cAAJ,CAAmB,oDAAnB,CAAN;AACH;;AAEDnK,EAAAA,OAAO,CAAC0G,OAAR,CAAgB,eAAhB;AAEA1G,EAAAA,OAAO,CAAC8J,iBAAR,CAA0B;AACtB0C,IAAAA,MAAM,EAAE,qLADc;AAEtBC,IAAAA,QAAQ,EAAE,8CAFY;AAGtBC,IAAAA,QAAQ,EAAE,oBAHY;AAItBC,IAAAA,KAAK,EAAE,WAJe;AAKtBC,IAAAA,KAAK,EAAE,oBALe;AAMtBC,IAAAA,OAAO,EAAE,mHANa;AAOtBC,IAAAA,QAAQ,EAAE,4BAPY;AAQtBC,IAAAA,OAAO,EAAE,WARa;AAStBC,IAAAA,QAAQ,EAAE,mBATY;AAUtBC,IAAAA,KAAK,EAAE,WAVe;AAWtBC,IAAAA,mBAAmB,EAAE,oBAXC;AAYtBC,IAAAA,IAAI,EAAE,sCAZgB;AAatBC,IAAAA,QAAQ,EAAE,WAbY;AActBC,IAAAA,MAAM,EAAE,spBAdc;AAetBC,IAAAA,MAAM,EAAE,6BAfc;AAgBtBC,IAAAA,QAAQ,EAAE,kDAhBY;AAiBtBC,IAAAA,UAAU,EAAE,+CAjBU;AAkBtBC,IAAAA,QAAQ,EAAE,wRAlBY;AAmBtBC,IAAAA,QAAQ,EAAE,sDAnBY;AAoBtBC,IAAAA,UAAU,EAAE,oBApBU;AAqBtBC,IAAAA,KAAK,EAAE,iPArBe;AAsBtBC,IAAAA,QAAQ,EAAE,iHAtBY;AAuBtBC,IAAAA,QAAQ,EAAE,8HAvBY;AAwBtBC,IAAAA,GAAG,EAAE,2FAxBiB;AAyBtBC,IAAAA,MAAM,EAAE,+HAzBc;AA0BtBC,IAAAA,OAAO,EAAE,WA1Ba;AA2BtBC,IAAAA,MAAM,EAAE,4EA3Bc;AA4BtBC,IAAAA,QAAQ,EAAE,oBA5BY;AA6BtBC,IAAAA,SAAS,EAAE,qJA7BW;AA8BtBC,IAAAA,QAAQ,EAAE,4BA9BY;AA+BtBC,IAAAA,OAAO,EAAE,wHA/Ba;AAgCtBC,IAAAA,QAAQ,EAAE,iEAhCY;AAiCtBC,IAAAA,QAAQ,EAAE,WAjCY;AAkCtBC,IAAAA,KAAK,EAAE,sCAlCe;AAmCtBC,IAAAA,GAAG,EAAE,mIAnCiB;AAoCtBC,IAAAA,KAAK,EAAE,iPApCe;AAqCtBC,IAAAA,MAAM,EAAE,6BArCc;AAsCtBC,IAAAA,KAAK,EAAE,0CAtCe;AAuCtBC,IAAAA,IAAI,EAAE,WAvCgB;AAwCtBC,IAAAA,SAAS,EAAE,+FAxCW;AAyCtBC,IAAAA,OAAO,EAAE,eAzCa;AA0CtBC,IAAAA,YAAY,EAAE,6BA1CQ;AA2CtBC,IAAAA,SAAS,EAAE,kDA3CW;AA4CtBC,IAAAA,OAAO,EAAE,oBA5Ca;AA6CtBC,IAAAA,WAAW,EAAE,qCA7CS;AA8CtBC,IAAAA,GAAG,EAAE,WA9CiB;AA+CtBC,IAAAA,KAAK,EAAE,WA/Ce;AAgDtBC,IAAAA,QAAQ,EAAE,WAhDY;AAiDtBC,IAAAA,KAAK,EAAE,2HAjDe;AAkDtBC,IAAAA,QAAQ,EAAE,WAlDY;AAmDtBC,IAAAA,MAAM,EAAE,eAnDc;AAoDtBC,IAAAA,KAAK,EAAE,oBApDe;AAqDtBC,IAAAA,SAAS,EAAE,oBArDW;AAsDtBC,IAAAA,UAAU,EAAE,oBAtDU;AAuDtBC,IAAAA,OAAO,EAAE,qFAvDa;AAwDtBC,IAAAA,SAAS,EAAE,oBAxDW;AAyDtBC,IAAAA,YAAY,EAAE,WAzDQ;AA0DtBC,IAAAA,MAAM,EAAE,6BA1Dc;AA2DtBC,IAAAA,OAAO,EAAE,oBA3Da;AA4DtBC,IAAAA,QAAQ,EAAE,4BA5DY;AA6DtBC,IAAAA,MAAM,EAAE,oBA7Dc;AA8DtBC,IAAAA,QAAQ,EAAE,+CA9DY;AA+DtBC,IAAAA,QAAQ,EAAE,oBA/DY;AAgEtBC,IAAAA,KAAK,EAAE,+HAhEe;AAiEtBC,IAAAA,MAAM,EAAE,8HAjEc;AAkEtBC,IAAAA,MAAM,EAAE,WAlEc;AAmEtBC,IAAAA,IAAI,EAAE,oBAnEgB;AAoEtBC,IAAAA,OAAO,EAAE,gEApEa;AAqEtBC,IAAAA,QAAQ,EAAE,uBArEY;AAsEtBC,IAAAA,GAAG,EAAE,WAtEiB;AAuEtBC,IAAAA,EAAE,EAAE;AAvEkB,GAA1B;AA0EH,CAnFA,EAmFC9Q,OAnFD,CAAD;AAsFA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACC,WAAUA,OAAV,EAAmB;AAChB;;AAEA,MAAI,CAACA,OAAO,CAAC8J,iBAAb,EAAgC;AAC5B,UAAM,IAAIK,cAAJ,CAAmB,mDAAnB,CAAN;AACH;;AAEDnK,EAAAA,OAAO,CAAC0G,OAAR,CAAgB,eAAhB;AAEA1G,EAAAA,OAAO,CAAC8J,iBAAR,CAA0B;AACtBiH,IAAAA,aAAa,EAAE,WADO;AAEtBC,IAAAA,oBAAoB,EAAE,WAFA;AAGtBC,IAAAA,kBAAkB,EAAE,WAHE;AAItBC,IAAAA,kBAAkB,EAAE,WAJE;AAKtBC,IAAAA,gBAAgB,EAAE,WALI;AAMtBC,IAAAA,0BAA0B,EAAE,WANN;AAOtBC,IAAAA,6BAA6B,EAAE,WAPT;AAQtBC,IAAAA,kBAAkB,EAAE,WARE;AAStBC,IAAAA,UAAU,EAAE,WATU;AAUtBC,IAAAA,qBAAqB,EAAE,WAVD;AAWtBC,IAAAA,UAAU,EAAE,WAXU;AAYtBC,IAAAA,QAAQ,EAAE,WAZY;AAatBC,IAAAA,QAAQ,EAAE,WAbY;AActBC,IAAAA,QAAQ,EAAE,WAdY;AAetBC,IAAAA,mBAAmB,EAAE,WAfC;AAgBtBC,IAAAA,QAAQ,EAAE,WAhBY;AAiBtBC,IAAAA,KAAK,EAAE,WAjBe;AAkBtBC,IAAAA,WAAW,EAAE,WAlBS;AAmBtBC,IAAAA,SAAS,EAAE,WAnBW;AAoBtBC,IAAAA,mBAAmB,EAAE,WApBC;AAqBtBC,IAAAA,YAAY,EAAE,WArBQ;AAsBtBC,IAAAA,SAAS,EAAE,WAtBW;AAuBtBC,IAAAA,UAAU,EAAE,WAvBU;AAwBtBC,IAAAA,UAAU,EAAE,WAxBU;AAyBtBC,IAAAA,OAAO,EAAE,WAzBa;AA0BtBC,IAAAA,OAAO,EAAE,WA1Ba;AA2BtBC,IAAAA,QAAQ,EAAE,WA3BY;AA4BtBC,IAAAA,SAAS,EAAE,WA5BW;AA6BtBC,IAAAA,WAAW,EAAE,WA7BS;AA8BtBC,IAAAA,SAAS,EAAE,WA9BW;AA+BtBC,IAAAA,MAAM,EAAE,WA/Bc;AAgCtBC,IAAAA,KAAK,EAAE,WAhCe;AAiCtBC,IAAAA,SAAS,EAAE,WAjCW;AAkCtBC,IAAAA,SAAS,EAAE,WAlCW;AAmCtBC,IAAAA,UAAU,EAAE,WAnCU;AAoCtBC,IAAAA,aAAa,EAAE,WApCO;AAqCtBC,IAAAA,UAAU,EAAE,WArCU;AAsCtBC,IAAAA,qBAAqB,EAAE,WAtCD;AAuCtBC,IAAAA,UAAU,EAAE,WAvCU;AAwCtBC,IAAAA,uCAAuC,EAAE,WAxCnB;AAyCtBC,IAAAA,OAAO,EAAE,WAzCa;AA0CtBC,IAAAA,OAAO,EAAE,WA1Ca;AA2CtBC,IAAAA,SAAS,EAAE,WA3CW;AA4CtBC,IAAAA,SAAS,EAAE,WA5CW;AA6CtBC,IAAAA,OAAO,EAAE,WA7Ca;AA8CtBC,IAAAA,UAAU,EAAE,WA9CU;AA+CtBC,IAAAA,OAAO,EAAE,WA/Ca;AAgDtBC,IAAAA,WAAW,EAAE,WAhDS;AAiDtBC,IAAAA,gDAAgD,EAAE,WAjD5B;AAkDtBC,IAAAA,OAAO,EAAE,WAlDa;AAmDtBC,IAAAA,QAAQ,EAAE,WAnDY;AAoDtBC,IAAAA,aAAa,EAAE,WApDO;AAqDtBC,IAAAA,eAAe,EAAE,WArDK;AAsDtBC,IAAAA,UAAU,EAAE,WAtDU;AAuDtBC,IAAAA,UAAU,EAAE,WAvDU;AAwDtBC,IAAAA,UAAU,EAAE,WAxDU;AAyDtBC,IAAAA,WAAW,EAAE,WAzDS;AA0DtBC,IAAAA,OAAO,EAAE,WA1Da;AA2DtBC,IAAAA,QAAQ,EAAE,WA3DY;AA4DtBC,IAAAA,UAAU,EAAE,WA5DU;AA6DtBC,IAAAA,sBAAsB,EAAE,WA7DF;AA8DtBC,IAAAA,kBAAkB,EAAE,WA9DE;AA+DtBC,IAAAA,qBAAqB,EAAE,WA/DD;AAgEtBC,IAAAA,gCAAgC,EAAE,WAhEZ;AAiEtBC,IAAAA,wCAAwC,EAAE,WAjEpB;AAkEtBC,IAAAA,2BAA2B,EAAE,WAlEP;AAmEtBC,IAAAA,gBAAgB,EAAE,WAnEI;AAoEtBC,IAAAA,qBAAqB,EAAE,WApED;AAqEtBC,IAAAA,6BAA6B,EAAE,WArET;AAsEtBC,IAAAA,kBAAkB,EAAE,WAtEE;AAuEtBC,IAAAA,yCAAyC,EAAE,WAvErB;AAwEtBC,IAAAA,oBAAoB,EAAE,WAxEA;AAyEtBC,IAAAA,cAAc,EAAE,WAzEM;AA0EtBC,IAAAA,QAAQ,EAAE,WA1EY;AA2EtBC,IAAAA,wBAAwB,EAAE,WA3EJ;AA4EtBC,IAAAA,yBAAyB,EAAE,WA5EL;AA6EtBC,IAAAA,kBAAkB,EAAE,WA7EE;AA8EtBC,IAAAA,+BAA+B,EAAE,WA9EX;AA+EtBC,IAAAA,wBAAwB,EAAE,WA/EJ;AAgFtBC,IAAAA,aAAa,EAAE,WAhFO;AAiFtBC,IAAAA,gBAAgB,EAAE,WAjFI;AAkFtBC,IAAAA,kBAAkB,EAAE,WAlFE;AAmFtBC,IAAAA,uBAAuB,EAAE,WAnFH;AAoFtBC,IAAAA,UAAU,EAAE,WApFU;AAqFtBC,IAAAA,sCAAsC,EAAE,WArFlB;AAsFtBC,IAAAA,uBAAuB,EAAE,WAtFH;AAuFtBC,IAAAA,kBAAkB,EAAE,WAvFE;AAwFtBC,IAAAA,uBAAuB,EAAE,WAxFH;AAyFtBC,IAAAA,sCAAsC,EAAE,WAzFlB;AA0FtBC,IAAAA,qCAAqC,EAAE,WA1FjB;AA2FtBC,IAAAA,kCAAkC,EAAE,WA3Fd;AA4FtBC,IAAAA,YAAY,EAAE,WA5FQ;AA6FtBC,IAAAA,kBAAkB,EAAE,WA7FE;AA8FtBC,IAAAA,QAAQ,EAAE,WA9FY;AA+FtBC,IAAAA,qBAAqB,EAAE,WA/FD;AAgGtBC,IAAAA,UAAU,EAAE,WAhGU;AAiGtBC,IAAAA,mBAAmB,EAAE,WAjGC;AAkGtBC,IAAAA,qBAAqB,EAAE,WAlGD;AAmGtBC,IAAAA,0BAA0B,EAAE,WAnGN;AAoGtBC,IAAAA,yBAAyB,EAAE,WApGL;AAqGtBC,IAAAA,iBAAiB,EAAE,WArGG;AAsGtBC,IAAAA,oCAAoC,EAAE,WAtGhB;AAuGtBC,IAAAA,6BAA6B,EAAE,WAvGT;AAwGtBC,IAAAA,UAAU,EAAE,WAxGU;AAyGtBC,IAAAA,UAAU,EAAE,WAzGU;AA0GtBC,IAAAA,UAAU,EAAE,WA1GU;AA2GtBC,IAAAA,2BAA2B,EAAE,WA3GP;AA4GtBC,IAAAA,QAAQ,EAAE,WA5GY;AA6GtBC,IAAAA,mBAAmB,EAAE,WA7GC;AA8GtBC,IAAAA,aAAa,EAAE,WA9GO;AA+GtBC,IAAAA,8BAA8B,EAAE,WA/GV;AAgHtBC,IAAAA,iCAAiC,EAAE,WAhHb;AAiHtBC,IAAAA,mBAAmB,EAAE,WAjHC;AAkHtBC,IAAAA,oCAAoC,EAAE,WAlHhB;AAmHtBC,IAAAA,yBAAyB,EAAE,WAnHL;AAoHtBC,IAAAA,wBAAwB,EAAE,WApHJ;AAqHtBC,IAAAA,cAAc,EAAE,WArHM;AAsHtBC,IAAAA,aAAa,EAAE,WAtHO;AAuHtBC,IAAAA,MAAM,EAAE,WAvHc;AAwHtBC,IAAAA,KAAK,EAAE,WAxHe;AAyHtBC,IAAAA,qBAAqB,EAAE,WAzHD;AA0HtBC,IAAAA,OAAO,EAAE,WA1Ha;AA2HtBC,IAAAA,uBAAuB,EAAE,WA3HH;AA4HtBC,IAAAA,kBAAkB,EAAE,WA5HE;AA6HtBC,IAAAA,cAAc,EAAE,WA7HM;AA8HtBC,IAAAA,2BAA2B,EAAE,WA9HP;AA+HtBC,IAAAA,UAAU,EAAE,WA/HU;AAgItBC,IAAAA,YAAY,EAAE,WAhIQ;AAiItBC,IAAAA,qBAAqB,EAAE,WAjID;AAkItBC,IAAAA,UAAU,EAAE,WAlIU;AAmItBC,IAAAA,QAAQ,EAAE,WAnIY;AAoItBC,IAAAA,wBAAwB,EAAE,WApIJ;AAqItBC,IAAAA,UAAU,EAAE,WArIU;AAsItBC,IAAAA,MAAM,EAAE,WAtIc;AAuItBC,IAAAA,oBAAoB,EAAE,WAvIA;AAwItBC,IAAAA,UAAU,EAAE,WAxIU;AAyItBC,IAAAA,yBAAyB,EAAE,WAzIL;AA0ItBC,IAAAA,qBAAqB,EAAE,WA1ID;AA2ItBC,IAAAA,cAAc,EAAE,WA3IM;AA4ItBC,IAAAA,kBAAkB,EAAE,WA5IE;AA6ItBC,IAAAA,wBAAwB,EAAE,WA7IJ;AA8ItBC,IAAAA,iBAAiB,EAAE,WA9IG;AA+ItBC,IAAAA,6BAA6B,EAAE,WA/IT;AAgJtBC,IAAAA,gBAAgB,EAAE,WAhJI;AAiJtBC,IAAAA,kBAAkB,EAAE,WAjJE;AAkJtBC,IAAAA,8BAA8B,EAAE,WAlJV;AAmJtBC,IAAAA,+BAA+B,EAAE,WAnJX;AAoJtBC,IAAAA,6BAA6B,EAAE,WApJT;AAqJtBC,IAAAA,qBAAqB,EAAE,WArJD;AAsJtBC,IAAAA,gBAAgB,EAAE,WAtJI;AAuJtBC,IAAAA,sBAAsB,EAAE,WAvJF;AAwJtBC,IAAAA,yBAAyB,EAAE,WAxJL;AAyJtBC,IAAAA,qBAAqB,EAAE,WAzJD;AA0JtBC,IAAAA,6BAA6B,EAAE,WA1JT;AA2JtBC,IAAAA,+BAA+B,EAAE,WA3JX;AA4JtBC,IAAAA,UAAU,EAAE;AA5JU,GAA1B;AA+JH,CAxKA,EAwKC1a,OAxKD,CAAD;AA2KA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACC,WAAUA,OAAV,EAAmB;AAChB;;AAEA,MAAI,CAACA,OAAO,CAAC8J,iBAAb,EAAgC;AAC5B,UAAM,IAAIK,cAAJ,CAAmB,uDAAnB,CAAN;AACH;;AAEDnK,EAAAA,OAAO,CAAC0G,OAAR,CAAgB,eAAhB;AAEA1G,EAAAA,OAAO,CAAC8J,iBAAR,CAA0B;AACtB6Q,IAAAA,UAAU,EAAE,+zGADU;AAEtBC,IAAAA,SAAS,EAAE,6gFAFW;AAGtBC,IAAAA,SAAS,EAAE,qnFAHW;AAItBC,IAAAA,WAAW,EAAE,4DAJS;AAKtBC,IAAAA,uBAAuB,EAAE,mBALH;AAMtBC,IAAAA,4BAA4B,EAAE,4FANR;AAOtB;AACAC,IAAAA,GAAG,EAAE,WARiB;AAQJ;AAClBC,IAAAA,KAAK,EAAE,WATe;AAUtB;AACA;AACAC,IAAAA,QAAQ,EAAE;AAZY,GAA1B;AAeH,CAxBA,EAwBCnb,OAxBD,CAAD;AA2BA;;AAEA;AACA;AACA;AACA;AACA;;;AAEC,WAAUA,OAAV,EAAmB;AAChB;AAEJ;AACA;AACA;AACA;;AACI,WAASob,GAAT,CAAa9X,KAAb,EAAoB8E,IAApB,EAA0BwB,KAA1B,EAAiCyR,GAAjC,EAAsC;AAClC,WAAO;AAAC/X,MAAAA,KAAK,EAACA,KAAP;AAAc8E,MAAAA,IAAI,EAACA,IAAnB;AAAyBwB,MAAAA,KAAK,EAACA,KAA/B;AAAsCyR,MAAAA,GAAG,EAACA;AAA1C,KAAP;AACH;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIrb,EAAAA,OAAO,CAACsb,cAAR,GAAyB,UAAUhV,GAAV,EAAeiV,IAAf,EAAqBC,KAArB,EAA4BvY,KAA5B,EAAmCgD,OAAnC,EAA4C;AACjEhD,IAAAA,KAAK,GAAGA,KAAK,IAAI,EAAjB;AACAgD,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,QAAIzD,MAAM,GAAGS,KAAK,CAACuC,OAAN,CAAc,GAAd,IAAqB,CAAC,CAAnC;AAAA,QACI3D,MAAM,GAAGoB,KAAK,CAACuC,OAAN,CAAc,GAAd,IAAqB,CAAC,CADnC;AAAA,QAEIiW,UAAU,GAAGxY,KAAK,CAAClC,OAAN,CAAc,IAAd,EAAoB,EAApB,CAFjB;AAAA,QAE0C;AACtC2a,IAAAA,UAAU,GAAGzV,OAAO,CAACyV,UAHzB;AAAA,QAIIC,EAAE,GAAG1V,OAAO,CAAC2V,UAJjB;AAAA,QAKI/W,MAAM,GAAG,EALb;AAAA,QAMIgX,UAAU,GAAG,CANjB;AAAA,QAOIC,UAAU,GAAG,CAPjB;AAAA,QAQIC,QAAQ,GAAG,CARf;AAAA,QASIC,YAAY,GAAG,CATnB;AAAA,QAUIC,UAVJ;AAAA,QAWIC,UAXJ;AAAA,QAYIC,SAZJ;AAAA,QAaIC,UAbJ;AAAA,QAcIC,GAdJ;AAeAd,IAAAA,IAAI,GAAGvb,OAAO,CAACub,IAAD,EAAOE,UAAP,CAAd;AACAD,IAAAA,KAAK,GAAGxb,OAAO,CAACwb,KAAD,EAAQC,UAAR,CAAf;;AAEA,QAAIC,UAAJ,EAAgB;AACZ,UAAIA,UAAU,CAAClY,MAAX,GAAoB,CAAxB,EAA2B;AACvB,cAAM,IAAImC,WAAJ,CAAgB,0CAAhB,CAAN;AACH;;AACD+V,MAAAA,UAAU,GAAG1b,OAAO,CAACqG,MAAR,CAAeqV,UAAf,CAAb,CAJY,CAKZ;;AACAW,MAAAA,GAAG,GAAG,IAAI3b,MAAJ,CACF,QAAQgb,UAAR,GAAqB,iBAArB,GAAyC1b,OAAO,CAAC6H,KAAR,CAAc,CAAC0T,IAAD,EAAOC,KAAP,CAAd,EAA6BtY,MAAtE,GAA+E,KAA/E,GAAuFwY,UAAvF,GAAoG,OADlG,EAEFzY,KAAK,CAAClC,OAAN,CAAc,SAAd,EAAyB,EAAzB,CAFE,CAE2B;AAF3B,OAAN;AAIH;;AAED,WAAO,IAAP,EAAa;AACT;AACA;AACA,UAAI2a,UAAJ,EAAgB;AACZK,QAAAA,QAAQ,IAAI,CAAC/b,OAAO,CAACS,IAAR,CAAa6F,GAAb,EAAkB+V,GAAlB,EAAuBN,QAAvB,EAAiC,QAAjC,KAA8C,CAAC,EAAD,CAA/C,EAAqD,CAArD,EAAwDvY,MAApE;AACH;;AACD2Y,MAAAA,SAAS,GAAGnc,OAAO,CAACS,IAAR,CAAa6F,GAAb,EAAkBiV,IAAlB,EAAwBQ,QAAxB,CAAZ;AACAK,MAAAA,UAAU,GAAGpc,OAAO,CAACS,IAAR,CAAa6F,GAAb,EAAkBkV,KAAlB,EAAyBO,QAAzB,CAAb,CAPS,CAQT;;AACA,UAAII,SAAS,IAAIC,UAAjB,EAA6B;AACzB,YAAID,SAAS,CAACvX,KAAV,IAAmBwX,UAAU,CAACxX,KAAlC,EAAyC;AACrCwX,UAAAA,UAAU,GAAG,IAAb;AACH,SAFD,MAEO;AACHD,UAAAA,SAAS,GAAG,IAAZ;AACH;AACJ;AACD;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACY,UAAIA,SAAS,IAAIC,UAAjB,EAA6B;AACzBN,QAAAA,UAAU,GAAG,CAACK,SAAS,IAAIC,UAAd,EAA0BxX,KAAvC;AACAmX,QAAAA,QAAQ,GAAGD,UAAU,GAAG,CAACK,SAAS,IAAIC,UAAd,EAA0B,CAA1B,EAA6B5Y,MAArD;AACH,OAHD,MAGO,IAAI,CAACqY,UAAL,EAAiB;AACpB;AACH;;AACD,UAAIha,MAAM,IAAI,CAACga,UAAX,IAAyBC,UAAU,GAAGE,YAA1C,EAAwD;AACpD;AACH;;AACD,UAAIG,SAAJ,EAAe;AACX,YAAI,CAACN,UAAL,EAAiB;AACbI,UAAAA,UAAU,GAAGH,UAAb;AACAI,UAAAA,UAAU,GAAGH,QAAb;AACH;;AACD,UAAEF,UAAF;AACH,OAND,MAMO,IAAIO,UAAU,IAAIP,UAAlB,EAA8B;AACjC,YAAI,CAAC,GAAEA,UAAP,EAAmB;AACf,cAAIF,EAAJ,EAAQ;AACJ,gBAAIA,EAAE,CAAC,CAAD,CAAF,IAASM,UAAU,GAAGD,YAA1B,EAAwC;AACpCnX,cAAAA,MAAM,CAACiB,IAAP,CAAYsV,GAAG,CAACO,EAAE,CAAC,CAAD,CAAH,EAAQrV,GAAG,CAACnD,KAAJ,CAAU6Y,YAAV,EAAwBC,UAAxB,CAAR,EAA6CD,YAA7C,EAA2DC,UAA3D,CAAf;AACH;;AACD,gBAAIN,EAAE,CAAC,CAAD,CAAN,EAAW;AACP9W,cAAAA,MAAM,CAACiB,IAAP,CAAYsV,GAAG,CAACO,EAAE,CAAC,CAAD,CAAH,EAAQrV,GAAG,CAACnD,KAAJ,CAAU8Y,UAAV,EAAsBC,UAAtB,CAAR,EAA2CD,UAA3C,EAAuDC,UAAvD,CAAf;AACH;;AACD,gBAAIP,EAAE,CAAC,CAAD,CAAN,EAAW;AACP9W,cAAAA,MAAM,CAACiB,IAAP,CAAYsV,GAAG,CAACO,EAAE,CAAC,CAAD,CAAH,EAAQrV,GAAG,CAACnD,KAAJ,CAAU+Y,UAAV,EAAsBJ,UAAtB,CAAR,EAA2CI,UAA3C,EAAuDJ,UAAvD,CAAf;AACH;;AACD,gBAAIH,EAAE,CAAC,CAAD,CAAN,EAAW;AACP9W,cAAAA,MAAM,CAACiB,IAAP,CAAYsV,GAAG,CAACO,EAAE,CAAC,CAAD,CAAH,EAAQrV,GAAG,CAACnD,KAAJ,CAAU2Y,UAAV,EAAsBC,QAAtB,CAAR,EAAyCD,UAAzC,EAAqDC,QAArD,CAAf;AACH;AACJ,WAbD,MAaO;AACHlX,YAAAA,MAAM,CAACiB,IAAP,CAAYQ,GAAG,CAACnD,KAAJ,CAAU+Y,UAAV,EAAsBJ,UAAtB,CAAZ;AACH;;AACDE,UAAAA,YAAY,GAAGD,QAAf;;AACA,cAAI,CAACvZ,MAAL,EAAa;AACT;AACH;AACJ;AACJ,OAvBM,MAuBA;AACH,cAAM,IAAI2C,KAAJ,CAAU,uCAAV,CAAN;AACH,OAlEQ,CAmET;;;AACA,UAAI2W,UAAU,KAAKC,QAAnB,EAA6B;AACzB,UAAEA,QAAF;AACH;AACJ;;AAED,QAAIvZ,MAAM,IAAI,CAACX,MAAX,IAAqB8Z,EAArB,IAA2BA,EAAE,CAAC,CAAD,CAA7B,IAAoCrV,GAAG,CAAC9C,MAAJ,GAAawY,YAArD,EAAmE;AAC/DnX,MAAAA,MAAM,CAACiB,IAAP,CAAYsV,GAAG,CAACO,EAAE,CAAC,CAAD,CAAH,EAAQrV,GAAG,CAACnD,KAAJ,CAAU6Y,YAAV,CAAR,EAAiCA,YAAjC,EAA+C1V,GAAG,CAAC9C,MAAnD,CAAf;AACH;;AAED,WAAOqB,MAAP;AACH,GA/GD;AAiHH,CA7KA,EA6KC7E,OA7KD,CAAD;AAgLA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEC,WAAUA,OAAV,EAAmB;AAChB;;AAEA,MAAIsc,QAAQ,GAAG,4DAAf;AAAA,MACIvU,KAAK,GAAG/H,OAAO,CAAC6H,KAAR,CAAc,CAAC,+BAAD,EAAkCyU,QAAlC,CAAd,EAA2D,GAA3D,CADZ;AAGJ;AACA;AACA;AACA;AACA;AACA;;AACI,WAASC,QAAT,CAAkBnY,OAAlB,EAA2B;AACvB,QAAIoY,WAAW,GAAG,iBAAlB;AAAA,QAAqC;AACjCC,IAAAA,SAAS,GAAG,iBADhB,CADuB,CAEY;;AACnC,QAAIA,SAAS,CAAC7b,IAAV,CAAewD,OAAO,CAACrD,OAAR,CAAgB,WAAhB,EAA6B,EAA7B,CAAf,CAAJ,EAAsD;AAAE;AACpD,aAAOqD,OAAO,CAACrD,OAAR,CAAgByb,WAAhB,EAA6B,EAA7B,EAAiCzb,OAAjC,CAAyC0b,SAAzC,EAAoD,EAApD,CAAP;AACH;;AACD,WAAOrY,OAAP;AACH;AAEL;AACA;AACA;AACA;AACA;AACA;;;AACI,WAASsY,SAAT,CAAmBpZ,KAAnB,EAA0B;AACtB,WAAOtD,OAAO,CAAC+C,QAAR,CAAiBO,KAAjB,IACEA,KAAK,CAAChB,OAAN,IAAiB,CAACgB,KAAK,CAAChB,OAAN,CAAcH,QAAhC,GAA2CmB,KAA3C,GAAmDtD,OAAO,CAACsD,KAAK,CAACJ,MAAP,CAD5D,GAEClD,OAAO,CAACsD,KAAD,CAFf;AAGH;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACItD,EAAAA,OAAO,CAAC2c,KAAR,GAAgB,UAAUvY,OAAV,EAAmBwY,IAAnB,EAAyB3Z,KAAzB,EAAgC;AAC5C,QAAI4Z,WAAW,GAAG,kBAAkBpc,IAAlB,CAAuB2D,OAAvB,CAAlB;AAAA,QACI0Y,IAAI,GAAG,EADX;AAAA,QAEIC,OAAO,GAAG,CAFd;AAAA,QAEiB;AACbC,IAAAA,YAHJ;AAAA,QAIIC,YAAY,GAAG,CAJnB;AAAA,QAKIC,YAAY,GAAG,CAAC,CAAD,CALnB;AAAA,QAMIC,aANJ;AAAA,QAOIC,GAPJ;AAAA,QAQIhb,CARJ,CAD4C,CAW5C;;AACA,QAAIya,WAAJ,EAAiB;AACb5Z,MAAAA,KAAK,GAAGA,KAAK,IAAI,EAAjB;AACA4Z,MAAAA,WAAW,CAAC,CAAD,CAAX,CAAe9b,OAAf,CAAuB,IAAvB,EAA6B,UAAUwE,IAAV,EAAgB;AACzCtC,QAAAA,KAAK,IAAKA,KAAK,CAACuC,OAAN,CAAcD,IAAd,IAAsB,CAAC,CAAvB,GAA2B,EAA3B,GAAgCA,IAA1C,CADyC,CACQ;AACpD,OAFD;AAGH;;AAED,SAAKnD,CAAL,IAAUwa,IAAV,EAAgB;AACZ,UAAIA,IAAI,CAACva,cAAL,CAAoBD,CAApB,CAAJ,EAA4B;AACxB;AACA;AACA;AACA;AACAgb,QAAAA,GAAG,GAAGV,SAAS,CAACE,IAAI,CAACxa,CAAD,CAAL,CAAf,CALwB,CAMxB;AACA;;AACA0a,QAAAA,IAAI,CAAC1a,CAAD,CAAJ,GAAU;AAACgC,UAAAA,OAAO,EAAEmY,QAAQ,CAACa,GAAG,CAACla,MAAL,CAAlB;AAAgCma,UAAAA,KAAK,EAAED,GAAG,CAAC9a,OAAJ,CAAYJ,YAAZ,IAA4B;AAAnE,SAAV;AACH;AACJ,KA9B2C,CAgC5C;AACA;;;AACAkC,IAAAA,OAAO,GAAGsY,SAAS,CAACtY,OAAD,CAAnB;AACA+Y,IAAAA,aAAa,GAAG/Y,OAAO,CAAC9B,OAAR,CAAgBJ,YAAhB,IAAgC,EAAhD;AACAkC,IAAAA,OAAO,GAAGA,OAAO,CAAClB,MAAR,CAAenC,OAAf,CAAuBgH,KAAvB,EAA8B,UAAUnC,EAAV,EAAcC,EAAd,EAAkB6C,EAAlB,EAAsB4U,EAAtB,EAA0BC,EAA1B,EAA8B;AAClE,UAAIC,OAAO,GAAG3X,EAAE,IAAI6C,EAApB;AAAA,UAAwB+U,OAAxB;AAAA,UAAiCC,KAAjC;;AACA,UAAIF,OAAJ,EAAa;AAAE;AACX,YAAI,CAACV,IAAI,CAACza,cAAL,CAAoBmb,OAApB,CAAL,EAAmC;AAC/B,gBAAM,IAAIrT,cAAJ,CAAmB,wBAAwBvE,EAA3C,CAAN;AACH;;AACD,YAAIC,EAAJ,EAAQ;AAAE;AACN4X,UAAAA,OAAO,GAAGN,aAAa,CAACF,YAAD,CAAvB;AACAC,UAAAA,YAAY,CAAC,EAAED,YAAH,CAAZ,GAA+B,EAAEF,OAAjC,CAFI,CAGJ;AACA;;AACAW,UAAAA,KAAK,GAAG,SAASD,OAAO,IAAID,OAApB,IAA+B,GAAvC;AACH,SAND,MAMO;AACHE,UAAAA,KAAK,GAAG,KAAR;AACH;;AACDV,QAAAA,YAAY,GAAGD,OAAf;AACA,eAAOW,KAAK,GAAGZ,IAAI,CAACU,OAAD,CAAJ,CAAcpZ,OAAd,CAAsBrD,OAAtB,CAA8Bub,QAA9B,EAAwC,UAAUzb,KAAV,EAAiBsH,KAAjB,EAAwBd,OAAxB,EAAiC;AACpF,cAAIc,KAAJ,EAAW;AAAE;AACTsV,YAAAA,OAAO,GAAGX,IAAI,CAACU,OAAD,CAAJ,CAAcH,KAAd,CAAoBN,OAAO,GAAGC,YAA9B,CAAV;AACA,cAAED,OAAF;;AACA,gBAAIU,OAAJ,EAAa;AAAE;AACX,qBAAO,QAAQA,OAAR,GAAkB,GAAzB;AACH;AACJ,WAND,MAMO,IAAIpW,OAAJ,EAAa;AAAE;AAClB,mBAAO,QAAQ,CAACA,OAAD,GAAW2V,YAAnB,CAAP,CADgB,CACyB;AAC5C;;AACD,iBAAOnc,KAAP;AACH,SAXc,CAAR,GAWF,GAXL;AAYH;;AACD,UAAIyc,EAAJ,EAAQ;AAAE;AACNG,QAAAA,OAAO,GAAGN,aAAa,CAACF,YAAD,CAAvB;AACAC,QAAAA,YAAY,CAAC,EAAED,YAAH,CAAZ,GAA+B,EAAEF,OAAjC;;AACA,YAAIU,OAAJ,EAAa;AAAE;AACX,iBAAO,QAAQA,OAAR,GAAkB,GAAzB;AACH;AACJ,OAND,MAMO,IAAIF,EAAJ,EAAQ;AAAE;AACb,eAAO,OAAOL,YAAY,CAAC,CAACK,EAAF,CAA1B,CADW,CACsB;AACpC;;AACD,aAAO3X,EAAP;AACH,KAvCS,CAAV;AAyCA,WAAO5F,OAAO,CAACoE,OAAD,EAAUnB,KAAV,CAAd;AACH,GA9ED;AAgFH,CAzIA,EAyICjD,OAzID,CAAD;AA4IA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACC,WAAUA,OAAV,EAAmB;AAChB;AAEJ;AACA;AACA;AACA;AACA;AACA;;AACI,WAAS2d,MAAT,CAAgBC,CAAhB,EAAmBC,CAAnB,EAAsB;AAClB,SAAK,IAAIzb,CAAT,IAAcyb,CAAd,EAAiB;AACb,UAAIA,CAAC,CAACxb,cAAF,CAAiBD,CAAjB,CAAJ,EAAyB;AACrBwb,QAAAA,CAAC,CAACxb,CAAD,CAAD,GAAOyb,CAAC,CAACzb,CAAD,CAAR;AACH;AACJ,KALiB,CAMlB;;AACH;;AAEDub,EAAAA,MAAM,CAAC3d,OAAO,CAACW,SAAT,EAAoB;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ4H,IAAAA,KAAK,EAAE,eAAUhE,OAAV,EAAmBkE,IAAnB,EAAyB;AAC5B,aAAO,KAAK7H,IAAL,CAAU6H,IAAI,CAAC,CAAD,CAAd,CAAP;AACH,KAdqB;;AAgB9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ9G,IAAAA,IAAI,EAAE,cAAU4C,OAAV,EAAmB+B,GAAnB,EAAwB;AAC1B,aAAO,KAAK1F,IAAL,CAAU0F,GAAV,CAAP;AACH,KA5BqB;;AA8B9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQrC,IAAAA,OAAO,EAAE,iBAAUqC,GAAV,EAAeE,QAAf,EAAyBjC,OAAzB,EAAkC;AACvC,aAAOvE,OAAO,CAACiE,OAAR,CAAgBqC,GAAhB,EAAqB,IAArB,EAA2BE,QAA3B,EAAqCjC,OAArC,CAAP;AACH,KA1CqB;;AA4C9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQkC,IAAAA,SAAS,EAAE,qBAAY;AACnB,aAAOzG,OAAO,CAACyG,SAAR,CAAkB,IAAlB,CAAP;AACH,KAtDqB;;AAwD9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQqX,IAAAA,KAAK,EAAE,eAAUxX,GAAV,EAAejC,GAAf,EAAoBxC,MAApB,EAA4B;AAC/B,aAAO7B,OAAO,CAACS,IAAR,CAAa6F,GAAb,EAAkB,IAAlB,EAAwBjC,GAAxB,EAA6BxC,MAA7B,CAAP;AACH,KAlEqB;;AAoE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACQkc,IAAAA,KAAK,EAAE,eAAUzX,GAAV,EAAejC,GAAf,EAAoBxC,MAApB,EAA4B;AAC/B,aAAO7B,OAAO,CAACY,IAAR,CAAa0F,GAAb,EAAkB,IAAlB,EAAwBjC,GAAxB,EAA6BxC,MAA7B,CAAP;AACH;AA7EqB,GAApB,CAAN;AAiFH,CAnGA,EAmGC7B,OAnGD,CAAD","sourcesContent":["\n/***** xregexp.js *****/\n\n/*!\r\n * XRegExp v2.0.0\r\n * (c) 2007-2012 Steven Levithan <http://xregexp.com/>\r\n * MIT License\r\n */\r\n\r\n/**\r\n * XRegExp provides augmented, extensible JavaScript regular expressions. You get new syntax,\r\n * flags, and methods beyond what browsers support natively. XRegExp is also a regex utility belt\r\n * with tools to make your client-side grepping simpler and more powerful, while freeing you from\r\n * worrying about pesky cross-browser inconsistencies and the dubious `lastIndex` property. See\r\n * XRegExp's documentation (http://xregexp.com/) for more details.\r\n * @module xregexp\r\n * @requires N/A\r\n */\r\nvar XRegExp;\r\n\r\n// Avoid running twice; that would reset tokens and could break references to native globals\r\nXRegExp = XRegExp || (function (undef) {\r\n    \"use strict\";\r\n\r\n/*--------------------------------------\r\n *  Private variables\r\n *------------------------------------*/\r\n\r\n    var self,\r\n        addToken,\r\n        add,\r\n\r\n// Optional features; can be installed and uninstalled\r\n        features = {\r\n            natives: false,\r\n            extensibility: false\r\n        },\r\n\r\n// Store native methods to use and restore (\"native\" is an ES3 reserved keyword)\r\n        nativ = {\r\n            exec: RegExp.prototype.exec,\r\n            test: RegExp.prototype.test,\r\n            match: String.prototype.match,\r\n            replace: String.prototype.replace,\r\n            split: String.prototype.split\r\n        },\r\n\r\n// Storage for fixed/extended native methods\r\n        fixed = {},\r\n\r\n// Storage for cached regexes\r\n        cache = {},\r\n\r\n// Storage for addon tokens\r\n        tokens = [],\r\n\r\n// Token scopes\r\n        defaultScope = \"default\",\r\n        classScope = \"class\",\r\n\r\n// Regexes that match native regex syntax\r\n        nativeTokens = {\r\n            // Any native multicharacter token in default scope (includes octals, excludes character classes)\r\n            \"default\": /^(?:\\\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\\d*|x[\\dA-Fa-f]{2}|u[\\dA-Fa-f]{4}|c[A-Za-z]|[\\s\\S])|\\(\\?[:=!]|[?*+]\\?|{\\d+(?:,\\d*)?}\\??)/,\r\n            // Any native multicharacter token in character class scope (includes octals)\r\n            \"class\": /^(?:\\\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\\dA-Fa-f]{2}|u[\\dA-Fa-f]{4}|c[A-Za-z]|[\\s\\S]))/\r\n        },\r\n\r\n// Any backreference in replacement strings\r\n        replacementToken = /\\$(?:{([\\w$]+)}|(\\d\\d?|[\\s\\S]))/g,\r\n\r\n// Any character with a later instance in the string\r\n        duplicateFlags = /([\\s\\S])(?=[\\s\\S]*\\1)/g,\r\n\r\n// Any greedy/lazy quantifier\r\n        quantifier = /^(?:[?*+]|{\\d+(?:,\\d*)?})\\??/,\r\n\r\n// Check for correct `exec` handling of nonparticipating capturing groups\r\n        compliantExecNpcg = nativ.exec.call(/()??/, \"\")[1] === undef,\r\n\r\n// Check for flag y support (Firefox 3+)\r\n        hasNativeY = RegExp.prototype.sticky !== undef,\r\n\r\n// Used to kill infinite recursion during XRegExp construction\r\n        isInsideConstructor = false,\r\n\r\n// Storage for known flags, including addon flags\r\n        registeredFlags = \"gim\" + (hasNativeY ? \"y\" : \"\");\r\n\r\n/*--------------------------------------\r\n *  Private helper functions\r\n *------------------------------------*/\r\n\r\n/**\r\n * Attaches XRegExp.prototype properties and named capture supporting data to a regex object.\r\n * @private\r\n * @param {RegExp} regex Regex to augment.\r\n * @param {Array} captureNames Array with capture names, or null.\r\n * @param {Boolean} [isNative] Whether the regex was created by `RegExp` rather than `XRegExp`.\r\n * @returns {RegExp} Augmented regex.\r\n */\r\n    function augment(regex, captureNames, isNative) {\r\n        var p;\r\n        // Can't auto-inherit these since the XRegExp constructor returns a nonprimitive value\r\n        for (p in self.prototype) {\r\n            if (self.prototype.hasOwnProperty(p)) {\r\n                regex[p] = self.prototype[p];\r\n            }\r\n        }\r\n        regex.xregexp = {captureNames: captureNames, isNative: !!isNative};\r\n        return regex;\r\n    }\r\n\r\n/**\r\n * Returns native `RegExp` flags used by a regex object.\r\n * @private\r\n * @param {RegExp} regex Regex to check.\r\n * @returns {String} Native flags in use.\r\n */\r\n    function getNativeFlags(regex) {\r\n        //return nativ.exec.call(/\\/([a-z]*)$/i, String(regex))[1];\r\n        return (regex.global     ? \"g\" : \"\") +\r\n               (regex.ignoreCase ? \"i\" : \"\") +\r\n               (regex.multiline  ? \"m\" : \"\") +\r\n               (regex.extended   ? \"x\" : \"\") + // Proposed for ES6, included in AS3\r\n               (regex.sticky     ? \"y\" : \"\"); // Proposed for ES6, included in Firefox 3+\r\n    }\r\n\r\n/**\r\n * Copies a regex object while preserving special properties for named capture and augmenting with\r\n * `XRegExp.prototype` methods. The copy has a fresh `lastIndex` property (set to zero). Allows\r\n * adding and removing flags while copying the regex.\r\n * @private\r\n * @param {RegExp} regex Regex to copy.\r\n * @param {String} [addFlags] Flags to be added while copying the regex.\r\n * @param {String} [removeFlags] Flags to be removed while copying the regex.\r\n * @returns {RegExp} Copy of the provided regex, possibly with modified flags.\r\n */\r\n    function copy(regex, addFlags, removeFlags) {\r\n        if (!self.isRegExp(regex)) {\r\n            throw new TypeError(\"type RegExp expected\");\r\n        }\r\n        var flags = nativ.replace.call(getNativeFlags(regex) + (addFlags || \"\"), duplicateFlags, \"\");\r\n        if (removeFlags) {\r\n            // Would need to escape `removeFlags` if this was public\r\n            flags = nativ.replace.call(flags, new RegExp(\"[\" + removeFlags + \"]+\", \"g\"), \"\");\r\n        }\r\n        if (regex.xregexp && !regex.xregexp.isNative) {\r\n            // Compiling the current (rather than precompilation) source preserves the effects of nonnative source flags\r\n            regex = augment(self(regex.source, flags),\r\n                            regex.xregexp.captureNames ? regex.xregexp.captureNames.slice(0) : null);\r\n        } else {\r\n            // Augment with `XRegExp.prototype` methods, but use native `RegExp` (avoid searching for special tokens)\r\n            regex = augment(new RegExp(regex.source, flags), null, true);\r\n        }\r\n        return regex;\r\n    }\r\n\r\n/*\r\n * Returns the last index at which a given value can be found in an array, or `-1` if it's not\r\n * present. The array is searched backwards.\r\n * @private\r\n * @param {Array} array Array to search.\r\n * @param {*} value Value to locate in the array.\r\n * @returns {Number} Last zero-based index at which the item is found, or -1.\r\n */\r\n    function lastIndexOf(array, value) {\r\n        var i = array.length;\r\n        if (Array.prototype.lastIndexOf) {\r\n            return array.lastIndexOf(value); // Use the native method if available\r\n        }\r\n        while (i--) {\r\n            if (array[i] === value) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n/**\r\n * Determines whether an object is of the specified type.\r\n * @private\r\n * @param {*} value Object to check.\r\n * @param {String} type Type to check for, in lowercase.\r\n * @returns {Boolean} Whether the object matches the type.\r\n */\r\n    function isType(value, type) {\r\n        return Object.prototype.toString.call(value).toLowerCase() === \"[object \" + type + \"]\";\r\n    }\r\n\r\n/**\r\n * Prepares an options object from the given value.\r\n * @private\r\n * @param {String|Object} value Value to convert to an options object.\r\n * @returns {Object} Options object.\r\n */\r\n    function prepareOptions(value) {\r\n        value = value || {};\r\n        if (value === \"all\" || value.all) {\r\n            value = {natives: true, extensibility: true};\r\n        } else if (isType(value, \"string\")) {\r\n            value = self.forEach(value, /[^\\s,]+/, function (m) {\r\n                this[m] = true;\r\n            }, {});\r\n        }\r\n        return value;\r\n    }\r\n\r\n/**\r\n * Runs built-in/custom tokens in reverse insertion order, until a match is found.\r\n * @private\r\n * @param {String} pattern Original pattern from which an XRegExp object is being built.\r\n * @param {Number} pos Position to search for tokens within `pattern`.\r\n * @param {Number} scope Current regex scope.\r\n * @param {Object} context Context object assigned to token handler functions.\r\n * @returns {Object} Object with properties `output` (the substitution string returned by the\r\n *   successful token handler) and `match` (the token's match array), or null.\r\n */\r\n    function runTokens(pattern, pos, scope, context) {\r\n        var i = tokens.length,\r\n            result = null,\r\n            match,\r\n            t;\r\n        // Protect against constructing XRegExps within token handler and trigger functions\r\n        isInsideConstructor = true;\r\n        // Must reset `isInsideConstructor`, even if a `trigger` or `handler` throws\r\n        try {\r\n            while (i--) { // Run in reverse order\r\n                t = tokens[i];\r\n                if ((t.scope === \"all\" || t.scope === scope) && (!t.trigger || t.trigger.call(context))) {\r\n                    t.pattern.lastIndex = pos;\r\n                    match = fixed.exec.call(t.pattern, pattern); // Fixed `exec` here allows use of named backreferences, etc.\r\n                    if (match && match.index === pos) {\r\n                        result = {\r\n                            output: t.handler.call(context, match, scope),\r\n                            match: match\r\n                        };\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } catch (err) {\r\n            throw err;\r\n        } finally {\r\n            isInsideConstructor = false;\r\n        }\r\n        return result;\r\n    }\r\n\r\n/**\r\n * Enables or disables XRegExp syntax and flag extensibility.\r\n * @private\r\n * @param {Boolean} on `true` to enable; `false` to disable.\r\n */\r\n    function setExtensibility(on) {\r\n        self.addToken = addToken[on ? \"on\" : \"off\"];\r\n        features.extensibility = on;\r\n    }\r\n\r\n/**\r\n * Enables or disables native method overrides.\r\n * @private\r\n * @param {Boolean} on `true` to enable; `false` to disable.\r\n */\r\n    function setNatives(on) {\r\n        RegExp.prototype.exec = (on ? fixed : nativ).exec;\r\n        RegExp.prototype.test = (on ? fixed : nativ).test;\r\n        String.prototype.match = (on ? fixed : nativ).match;\r\n        String.prototype.replace = (on ? fixed : nativ).replace;\r\n        String.prototype.split = (on ? fixed : nativ).split;\r\n        features.natives = on;\r\n    }\r\n\r\n/*--------------------------------------\r\n *  Constructor\r\n *------------------------------------*/\r\n\r\n/**\r\n * Creates an extended regular expression object for matching text with a pattern. Differs from a\r\n * native regular expression in that additional syntax and flags are supported. The returned object\r\n * is in fact a native `RegExp` and works with all native methods.\r\n * @class XRegExp\r\n * @constructor\r\n * @param {String|RegExp} pattern Regex pattern string, or an existing `RegExp` object to copy.\r\n * @param {String} [flags] Any combination of flags:\r\n *   <li>`g` - global\r\n *   <li>`i` - ignore case\r\n *   <li>`m` - multiline anchors\r\n *   <li>`n` - explicit capture\r\n *   <li>`s` - dot matches all (aka singleline)\r\n *   <li>`x` - free-spacing and line comments (aka extended)\r\n *   <li>`y` - sticky (Firefox 3+ only)\r\n *   Flags cannot be provided when constructing one `RegExp` from another.\r\n * @returns {RegExp} Extended regular expression object.\r\n * @example\r\n *\r\n * // With named capture and flag x\r\n * date = XRegExp('(?<year>  [0-9]{4}) -?  # year  \\n\\\r\n *                 (?<month> [0-9]{2}) -?  # month \\n\\\r\n *                 (?<day>   [0-9]{2})     # day   ', 'x');\r\n *\r\n * // Passing a regex object to copy it. The copy maintains special properties for named capture,\r\n * // is augmented with `XRegExp.prototype` methods, and has a fresh `lastIndex` property (set to\r\n * // zero). Native regexes are not recompiled using XRegExp syntax.\r\n * XRegExp(/regex/);\r\n */\r\n    self = function (pattern, flags) {\r\n        if (self.isRegExp(pattern)) {\r\n            if (flags !== undef) {\r\n                throw new TypeError(\"can't supply flags when constructing one RegExp from another\");\r\n            }\r\n            return copy(pattern);\r\n        }\r\n        // Tokens become part of the regex construction process, so protect against infinite recursion\r\n        // when an XRegExp is constructed within a token handler function\r\n        if (isInsideConstructor) {\r\n            throw new Error(\"can't call the XRegExp constructor within token definition functions\");\r\n        }\r\n\r\n        var output = [],\r\n            scope = defaultScope,\r\n            tokenContext = {\r\n                hasNamedCapture: false,\r\n                captureNames: [],\r\n                hasFlag: function (flag) {\r\n                    return flags.indexOf(flag) > -1;\r\n                }\r\n            },\r\n            pos = 0,\r\n            tokenResult,\r\n            match,\r\n            chr;\r\n        pattern = pattern === undef ? \"\" : String(pattern);\r\n        flags = flags === undef ? \"\" : String(flags);\r\n\r\n        if (nativ.match.call(flags, duplicateFlags)) { // Don't use test/exec because they would update lastIndex\r\n            throw new SyntaxError(\"invalid duplicate regular expression flag\");\r\n        }\r\n        // Strip/apply leading mode modifier with any combination of flags except g or y: (?imnsx)\r\n        pattern = nativ.replace.call(pattern, /^\\(\\?([\\w$]+)\\)/, function ($0, $1) {\r\n            if (nativ.test.call(/[gy]/, $1)) {\r\n                throw new SyntaxError(\"can't use flag g or y in mode modifier\");\r\n            }\r\n            flags = nativ.replace.call(flags + $1, duplicateFlags, \"\");\r\n            return \"\";\r\n        });\r\n        self.forEach(flags, /[\\s\\S]/, function (m) {\r\n            if (registeredFlags.indexOf(m[0]) < 0) {\r\n                throw new SyntaxError(\"invalid regular expression flag \" + m[0]);\r\n            }\r\n        });\r\n\r\n        while (pos < pattern.length) {\r\n            // Check for custom tokens at the current position\r\n            tokenResult = runTokens(pattern, pos, scope, tokenContext);\r\n            if (tokenResult) {\r\n                output.push(tokenResult.output);\r\n                pos += (tokenResult.match[0].length || 1);\r\n            } else {\r\n                // Check for native tokens (except character classes) at the current position\r\n                match = nativ.exec.call(nativeTokens[scope], pattern.slice(pos));\r\n                if (match) {\r\n                    output.push(match[0]);\r\n                    pos += match[0].length;\r\n                } else {\r\n                    chr = pattern.charAt(pos);\r\n                    if (chr === \"[\") {\r\n                        scope = classScope;\r\n                    } else if (chr === \"]\") {\r\n                        scope = defaultScope;\r\n                    }\r\n                    // Advance position by one character\r\n                    output.push(chr);\r\n                    ++pos;\r\n                }\r\n            }\r\n        }\r\n\r\n        return augment(new RegExp(output.join(\"\"), nativ.replace.call(flags, /[^gimy]+/g, \"\")),\r\n                       tokenContext.hasNamedCapture ? tokenContext.captureNames : null);\r\n    };\r\n\r\n/*--------------------------------------\r\n *  Public methods/properties\r\n *------------------------------------*/\r\n\r\n// Installed and uninstalled states for `XRegExp.addToken`\r\n    addToken = {\r\n        on: function (regex, handler, options) {\r\n            options = options || {};\r\n            if (regex) {\r\n                tokens.push({\r\n                    pattern: copy(regex, \"g\" + (hasNativeY ? \"y\" : \"\")),\r\n                    handler: handler,\r\n                    scope: options.scope || defaultScope,\r\n                    trigger: options.trigger || null\r\n                });\r\n            }\r\n            // Providing `customFlags` with null `regex` and `handler` allows adding flags that do\r\n            // nothing, but don't throw an error\r\n            if (options.customFlags) {\r\n                registeredFlags = nativ.replace.call(registeredFlags + options.customFlags, duplicateFlags, \"\");\r\n            }\r\n        },\r\n        off: function () {\r\n            throw new Error(\"extensibility must be installed before using addToken\");\r\n        }\r\n    };\r\n\r\n/**\r\n * Extends or changes XRegExp syntax and allows custom flags. This is used internally and can be\r\n * used to create XRegExp addons. `XRegExp.install('extensibility')` must be run before calling\r\n * this function, or an error is thrown. If more than one token can match the same string, the last\r\n * added wins.\r\n * @memberOf XRegExp\r\n * @param {RegExp} regex Regex object that matches the new token.\r\n * @param {Function} handler Function that returns a new pattern string (using native regex syntax)\r\n *   to replace the matched token within all future XRegExp regexes. Has access to persistent\r\n *   properties of the regex being built, through `this`. Invoked with two arguments:\r\n *   <li>The match array, with named backreference properties.\r\n *   <li>The regex scope where the match was found.\r\n * @param {Object} [options] Options object with optional properties:\r\n *   <li>`scope` {String} Scopes where the token applies: 'default', 'class', or 'all'.\r\n *   <li>`trigger` {Function} Function that returns `true` when the token should be applied; e.g.,\r\n *     if a flag is set. If `false` is returned, the matched string can be matched by other tokens.\r\n *     Has access to persistent properties of the regex being built, through `this` (including\r\n *     function `this.hasFlag`).\r\n *   <li>`customFlags` {String} Nonnative flags used by the token's handler or trigger functions.\r\n *     Prevents XRegExp from throwing an invalid flag error when the specified flags are used.\r\n * @example\r\n *\r\n * // Basic usage: Adds \\a for ALERT character\r\n * XRegExp.addToken(\r\n *   /\\\\a/,\r\n *   function () {return '\\\\x07';},\r\n *   {scope: 'all'}\r\n * );\r\n * XRegExp('\\\\a[\\\\a-\\\\n]+').test('\\x07\\n\\x07'); // -> true\r\n */\r\n    self.addToken = addToken.off;\r\n\r\n/**\r\n * Caches and returns the result of calling `XRegExp(pattern, flags)`. On any subsequent call with\r\n * the same pattern and flag combination, the cached copy is returned.\r\n * @memberOf XRegExp\r\n * @param {String} pattern Regex pattern string.\r\n * @param {String} [flags] Any combination of XRegExp flags.\r\n * @returns {RegExp} Cached XRegExp object.\r\n * @example\r\n *\r\n * while (match = XRegExp.cache('.', 'gs').exec(str)) {\r\n *   // The regex is compiled once only\r\n * }\r\n */\r\n    self.cache = function (pattern, flags) {\r\n        var key = pattern + \"/\" + (flags || \"\");\r\n        return cache[key] || (cache[key] = self(pattern, flags));\r\n    };\r\n\r\n/**\r\n * Escapes any regular expression metacharacters, for use when matching literal strings. The result\r\n * can safely be used at any point within a regex that uses any flags.\r\n * @memberOf XRegExp\r\n * @param {String} str String to escape.\r\n * @returns {String} String with regex metacharacters escaped.\r\n * @example\r\n *\r\n * XRegExp.escape('Escaped? <.>');\r\n * // -> 'Escaped\\?\\ <\\.>'\r\n */\r\n    self.escape = function (str) {\r\n        return nativ.replace.call(str, /[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\r\n    };\r\n\r\n/**\r\n * Executes a regex search in a specified string. Returns a match array or `null`. If the provided\r\n * regex uses named capture, named backreference properties are included on the match array.\r\n * Optional `pos` and `sticky` arguments specify the search start position, and whether the match\r\n * must start at the specified position only. The `lastIndex` property of the provided regex is not\r\n * used, but is updated for compatibility. Also fixes browser bugs compared to the native\r\n * `RegExp.prototype.exec` and can be used reliably cross-browser.\r\n * @memberOf XRegExp\r\n * @param {String} str String to search.\r\n * @param {RegExp} regex Regex to search with.\r\n * @param {Number} [pos=0] Zero-based index at which to start the search.\r\n * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position\r\n *   only. The string `'sticky'` is accepted as an alternative to `true`.\r\n * @returns {Array} Match array with named backreference properties, or null.\r\n * @example\r\n *\r\n * // Basic use, with named backreference\r\n * var match = XRegExp.exec('U+2620', XRegExp('U\\\\+(?<hex>[0-9A-F]{4})'));\r\n * match.hex; // -> '2620'\r\n *\r\n * // With pos and sticky, in a loop\r\n * var pos = 2, result = [], match;\r\n * while (match = XRegExp.exec('<1><2><3><4>5<6>', /<(\\d)>/, pos, 'sticky')) {\r\n *   result.push(match[1]);\r\n *   pos = match.index + match[0].length;\r\n * }\r\n * // result -> ['2', '3', '4']\r\n */\r\n    self.exec = function (str, regex, pos, sticky) {\r\n        var r2 = copy(regex, \"g\" + (sticky && hasNativeY ? \"y\" : \"\"), (sticky === false ? \"y\" : \"\")),\r\n            match;\r\n        r2.lastIndex = pos = pos || 0;\r\n        match = fixed.exec.call(r2, str); // Fixed `exec` required for `lastIndex` fix, etc.\r\n        if (sticky && match && match.index !== pos) {\r\n            match = null;\r\n        }\r\n        if (regex.global) {\r\n            regex.lastIndex = match ? r2.lastIndex : 0;\r\n        }\r\n        return match;\r\n    };\r\n\r\n/**\r\n * Executes a provided function once per regex match.\r\n * @memberOf XRegExp\r\n * @param {String} str String to search.\r\n * @param {RegExp} regex Regex to search with.\r\n * @param {Function} callback Function to execute for each match. Invoked with four arguments:\r\n *   <li>The match array, with named backreference properties.\r\n *   <li>The zero-based match index.\r\n *   <li>The string being traversed.\r\n *   <li>The regex object being used to traverse the string.\r\n * @param {*} [context] Object to use as `this` when executing `callback`.\r\n * @returns {*} Provided `context` object.\r\n * @example\r\n *\r\n * // Extracts every other digit from a string\r\n * XRegExp.forEach('1a2345', /\\d/, function (match, i) {\r\n *   if (i % 2) this.push(+match[0]);\r\n * }, []);\r\n * // -> [2, 4]\r\n */\r\n    self.forEach = function (str, regex, callback, context) {\r\n        var pos = 0,\r\n            i = -1,\r\n            match;\r\n        while ((match = self.exec(str, regex, pos))) {\r\n            callback.call(context, match, ++i, str, regex);\r\n            pos = match.index + (match[0].length || 1);\r\n        }\r\n        return context;\r\n    };\r\n\r\n/**\r\n * Copies a regex object and adds flag `g`. The copy maintains special properties for named\r\n * capture, is augmented with `XRegExp.prototype` methods, and has a fresh `lastIndex` property\r\n * (set to zero). Native regexes are not recompiled using XRegExp syntax.\r\n * @memberOf XRegExp\r\n * @param {RegExp} regex Regex to globalize.\r\n * @returns {RegExp} Copy of the provided regex with flag `g` added.\r\n * @example\r\n *\r\n * var globalCopy = XRegExp.globalize(/regex/);\r\n * globalCopy.global; // -> true\r\n */\r\n    self.globalize = function (regex) {\r\n        return copy(regex, \"g\");\r\n    };\r\n\r\n/**\r\n * Installs optional features according to the specified options.\r\n * @memberOf XRegExp\r\n * @param {Object|String} options Options object or string.\r\n * @example\r\n *\r\n * // With an options object\r\n * XRegExp.install({\r\n *   // Overrides native regex methods with fixed/extended versions that support named\r\n *   // backreferences and fix numerous cross-browser bugs\r\n *   natives: true,\r\n *\r\n *   // Enables extensibility of XRegExp syntax and flags\r\n *   extensibility: true\r\n * });\r\n *\r\n * // With an options string\r\n * XRegExp.install('natives extensibility');\r\n *\r\n * // Using a shortcut to install all optional features\r\n * XRegExp.install('all');\r\n */\r\n    self.install = function (options) {\r\n        options = prepareOptions(options);\r\n        if (!features.natives && options.natives) {\r\n            setNatives(true);\r\n        }\r\n        if (!features.extensibility && options.extensibility) {\r\n            setExtensibility(true);\r\n        }\r\n    };\r\n\r\n/**\r\n * Checks whether an individual optional feature is installed.\r\n * @memberOf XRegExp\r\n * @param {String} feature Name of the feature to check. One of:\r\n *   <li>`natives`\r\n *   <li>`extensibility`\r\n * @returns {Boolean} Whether the feature is installed.\r\n * @example\r\n *\r\n * XRegExp.isInstalled('natives');\r\n */\r\n    self.isInstalled = function (feature) {\r\n        return !!(features[feature]);\r\n    };\r\n\r\n/**\r\n * Returns `true` if an object is a regex; `false` if it isn't. This works correctly for regexes\r\n * created in another frame, when `instanceof` and `constructor` checks would fail.\r\n * @memberOf XRegExp\r\n * @param {*} value Object to check.\r\n * @returns {Boolean} Whether the object is a `RegExp` object.\r\n * @example\r\n *\r\n * XRegExp.isRegExp('string'); // -> false\r\n * XRegExp.isRegExp(/regex/i); // -> true\r\n * XRegExp.isRegExp(RegExp('^', 'm')); // -> true\r\n * XRegExp.isRegExp(XRegExp('(?s).')); // -> true\r\n */\r\n    self.isRegExp = function (value) {\r\n        return isType(value, \"regexp\");\r\n    };\r\n\r\n/**\r\n * Retrieves the matches from searching a string using a chain of regexes that successively search\r\n * within previous matches. The provided `chain` array can contain regexes and objects with `regex`\r\n * and `backref` properties. When a backreference is specified, the named or numbered backreference\r\n * is passed forward to the next regex or returned.\r\n * @memberOf XRegExp\r\n * @param {String} str String to search.\r\n * @param {Array} chain Regexes that each search for matches within preceding results.\r\n * @returns {Array} Matches by the last regex in the chain, or an empty array.\r\n * @example\r\n *\r\n * // Basic usage; matches numbers within <b> tags\r\n * XRegExp.matchChain('1 <b>2</b> 3 <b>4 a 56</b>', [\r\n *   XRegExp('(?is)<b>.*?</b>'),\r\n *   /\\d+/\r\n * ]);\r\n * // -> ['2', '4', '56']\r\n *\r\n * // Passing forward and returning specific backreferences\r\n * html = '<a href=\"http://xregexp.com/api/\">XRegExp</a>\\\r\n *         <a href=\"http://www.google.com/\">Google</a>';\r\n * XRegExp.matchChain(html, [\r\n *   {regex: /<a href=\"([^\"]+)\">/i, backref: 1},\r\n *   {regex: XRegExp('(?i)^https?://(?<domain>[^/?#]+)'), backref: 'domain'}\r\n * ]);\r\n * // -> ['xregexp.com', 'www.google.com']\r\n */\r\n    self.matchChain = function (str, chain) {\r\n        return (function recurseChain(values, level) {\r\n            var item = chain[level].regex ? chain[level] : {regex: chain[level]},\r\n                matches = [],\r\n                addMatch = function (match) {\r\n                    matches.push(item.backref ? (match[item.backref] || \"\") : match[0]);\r\n                },\r\n                i;\r\n            for (i = 0; i < values.length; ++i) {\r\n                self.forEach(values[i], item.regex, addMatch);\r\n            }\r\n            return ((level === chain.length - 1) || !matches.length) ?\r\n                    matches :\r\n                    recurseChain(matches, level + 1);\r\n        }([str], 0));\r\n    };\r\n\r\n/**\r\n * Returns a new string with one or all matches of a pattern replaced. The pattern can be a string\r\n * or regex, and the replacement can be a string or a function to be called for each match. To\r\n * perform a global search and replace, use the optional `scope` argument or include flag `g` if\r\n * using a regex. Replacement strings can use `${n}` for named and numbered backreferences.\r\n * Replacement functions can use named backreferences via `arguments[0].name`. Also fixes browser\r\n * bugs compared to the native `String.prototype.replace` and can be used reliably cross-browser.\r\n * @memberOf XRegExp\r\n * @param {String} str String to search.\r\n * @param {RegExp|String} search Search pattern to be replaced.\r\n * @param {String|Function} replacement Replacement string or a function invoked to create it.\r\n *   Replacement strings can include special replacement syntax:\r\n *     <li>$$ - Inserts a literal '$'.\r\n *     <li>$&, $0 - Inserts the matched substring.\r\n *     <li>$` - Inserts the string that precedes the matched substring (left context).\r\n *     <li>$' - Inserts the string that follows the matched substring (right context).\r\n *     <li>$n, $nn - Where n/nn are digits referencing an existent capturing group, inserts\r\n *       backreference n/nn.\r\n *     <li>${n} - Where n is a name or any number of digits that reference an existent capturing\r\n *       group, inserts backreference n.\r\n *   Replacement functions are invoked with three or more arguments:\r\n *     <li>The matched substring (corresponds to $& above). Named backreferences are accessible as\r\n *       properties of this first argument.\r\n *     <li>0..n arguments, one for each backreference (corresponding to $1, $2, etc. above).\r\n *     <li>The zero-based index of the match within the total search string.\r\n *     <li>The total string being searched.\r\n * @param {String} [scope='one'] Use 'one' to replace the first match only, or 'all'. If not\r\n *   explicitly specified and using a regex with flag `g`, `scope` is 'all'.\r\n * @returns {String} New string with one or all matches replaced.\r\n * @example\r\n *\r\n * // Regex search, using named backreferences in replacement string\r\n * var name = XRegExp('(?<first>\\\\w+) (?<last>\\\\w+)');\r\n * XRegExp.replace('John Smith', name, '${last}, ${first}');\r\n * // -> 'Smith, John'\r\n *\r\n * // Regex search, using named backreferences in replacement function\r\n * XRegExp.replace('John Smith', name, function (match) {\r\n *   return match.last + ', ' + match.first;\r\n * });\r\n * // -> 'Smith, John'\r\n *\r\n * // Global string search/replacement\r\n * XRegExp.replace('RegExp builds RegExps', 'RegExp', 'XRegExp', 'all');\r\n * // -> 'XRegExp builds XRegExps'\r\n */\r\n    self.replace = function (str, search, replacement, scope) {\r\n        var isRegex = self.isRegExp(search),\r\n            search2 = search,\r\n            result;\r\n        if (isRegex) {\r\n            if (scope === undef && search.global) {\r\n                scope = \"all\"; // Follow flag g when `scope` isn't explicit\r\n            }\r\n            // Note that since a copy is used, `search`'s `lastIndex` isn't updated *during* replacement iterations\r\n            search2 = copy(search, scope === \"all\" ? \"g\" : \"\", scope === \"all\" ? \"\" : \"g\");\r\n        } else if (scope === \"all\") {\r\n            search2 = new RegExp(self.escape(String(search)), \"g\");\r\n        }\r\n        result = fixed.replace.call(String(str), search2, replacement); // Fixed `replace` required for named backreferences, etc.\r\n        if (isRegex && search.global) {\r\n            search.lastIndex = 0; // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)\r\n        }\r\n        return result;\r\n    };\r\n\r\n/**\r\n * Splits a string into an array of strings using a regex or string separator. Matches of the\r\n * separator are not included in the result array. However, if `separator` is a regex that contains\r\n * capturing groups, backreferences are spliced into the result each time `separator` is matched.\r\n * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably\r\n * cross-browser.\r\n * @memberOf XRegExp\r\n * @param {String} str String to split.\r\n * @param {RegExp|String} separator Regex or string to use for separating the string.\r\n * @param {Number} [limit] Maximum number of items to include in the result array.\r\n * @returns {Array} Array of substrings.\r\n * @example\r\n *\r\n * // Basic use\r\n * XRegExp.split('a b c', ' ');\r\n * // -> ['a', 'b', 'c']\r\n *\r\n * // With limit\r\n * XRegExp.split('a b c', ' ', 2);\r\n * // -> ['a', 'b']\r\n *\r\n * // Backreferences in result array\r\n * XRegExp.split('..word1..', /([a-z]+)(\\d+)/i);\r\n * // -> ['..', 'word', '1', '..']\r\n */\r\n    self.split = function (str, separator, limit) {\r\n        return fixed.split.call(str, separator, limit);\r\n    };\r\n\r\n/**\r\n * Executes a regex search in a specified string. Returns `true` or `false`. Optional `pos` and\r\n * `sticky` arguments specify the search start position, and whether the match must start at the\r\n * specified position only. The `lastIndex` property of the provided regex is not used, but is\r\n * updated for compatibility. Also fixes browser bugs compared to the native\r\n * `RegExp.prototype.test` and can be used reliably cross-browser.\r\n * @memberOf XRegExp\r\n * @param {String} str String to search.\r\n * @param {RegExp} regex Regex to search with.\r\n * @param {Number} [pos=0] Zero-based index at which to start the search.\r\n * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position\r\n *   only. The string `'sticky'` is accepted as an alternative to `true`.\r\n * @returns {Boolean} Whether the regex matched the provided value.\r\n * @example\r\n *\r\n * // Basic use\r\n * XRegExp.test('abc', /c/); // -> true\r\n *\r\n * // With pos and sticky\r\n * XRegExp.test('abc', /c/, 0, 'sticky'); // -> false\r\n */\r\n    self.test = function (str, regex, pos, sticky) {\r\n        // Do this the easy way :-)\r\n        return !!self.exec(str, regex, pos, sticky);\r\n    };\r\n\r\n/**\r\n * Uninstalls optional features according to the specified options.\r\n * @memberOf XRegExp\r\n * @param {Object|String} options Options object or string.\r\n * @example\r\n *\r\n * // With an options object\r\n * XRegExp.uninstall({\r\n *   // Restores native regex methods\r\n *   natives: true,\r\n *\r\n *   // Disables additional syntax and flag extensions\r\n *   extensibility: true\r\n * });\r\n *\r\n * // With an options string\r\n * XRegExp.uninstall('natives extensibility');\r\n *\r\n * // Using a shortcut to uninstall all optional features\r\n * XRegExp.uninstall('all');\r\n */\r\n    self.uninstall = function (options) {\r\n        options = prepareOptions(options);\r\n        if (features.natives && options.natives) {\r\n            setNatives(false);\r\n        }\r\n        if (features.extensibility && options.extensibility) {\r\n            setExtensibility(false);\r\n        }\r\n    };\r\n\r\n/**\r\n * Returns an XRegExp object that is the union of the given patterns. Patterns can be provided as\r\n * regex objects or strings. Metacharacters are escaped in patterns provided as strings.\r\n * Backreferences in provided regex objects are automatically renumbered to work correctly. Native\r\n * flags used by provided regexes are ignored in favor of the `flags` argument.\r\n * @memberOf XRegExp\r\n * @param {Array} patterns Regexes and strings to combine.\r\n * @param {String} [flags] Any combination of XRegExp flags.\r\n * @returns {RegExp} Union of the provided regexes and strings.\r\n * @example\r\n *\r\n * XRegExp.union(['a+b*c', /(dogs)\\1/, /(cats)\\1/], 'i');\r\n * // -> /a\\+b\\*c|(dogs)\\1|(cats)\\2/i\r\n *\r\n * XRegExp.union([XRegExp('(?<pet>dogs)\\\\k<pet>'), XRegExp('(?<pet>cats)\\\\k<pet>')]);\r\n * // -> XRegExp('(?<pet>dogs)\\\\k<pet>|(?<pet>cats)\\\\k<pet>')\r\n */\r\n    self.union = function (patterns, flags) {\r\n        var parts = /(\\()(?!\\?)|\\\\([1-9]\\d*)|\\\\[\\s\\S]|\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*]/g,\r\n            numCaptures = 0,\r\n            numPriorCaptures,\r\n            captureNames,\r\n            rewrite = function (match, paren, backref) {\r\n                var name = captureNames[numCaptures - numPriorCaptures];\r\n                if (paren) { // Capturing group\r\n                    ++numCaptures;\r\n                    if (name) { // If the current capture has a name\r\n                        return \"(?<\" + name + \">\";\r\n                    }\r\n                } else if (backref) { // Backreference\r\n                    return \"\\\\\" + (+backref + numPriorCaptures);\r\n                }\r\n                return match;\r\n            },\r\n            output = [],\r\n            pattern,\r\n            i;\r\n        if (!(isType(patterns, \"array\") && patterns.length)) {\r\n            throw new TypeError(\"patterns must be a nonempty array\");\r\n        }\r\n        for (i = 0; i < patterns.length; ++i) {\r\n            pattern = patterns[i];\r\n            if (self.isRegExp(pattern)) {\r\n                numPriorCaptures = numCaptures;\r\n                captureNames = (pattern.xregexp && pattern.xregexp.captureNames) || [];\r\n                // Rewrite backreferences. Passing to XRegExp dies on octals and ensures patterns\r\n                // are independently valid; helps keep this simple. Named captures are put back\r\n                output.push(self(pattern.source).source.replace(parts, rewrite));\r\n            } else {\r\n                output.push(self.escape(pattern));\r\n            }\r\n        }\r\n        return self(output.join(\"|\"), flags);\r\n    };\r\n\r\n/**\r\n * The XRegExp version number.\r\n * @static\r\n * @memberOf XRegExp\r\n * @type String\r\n */\r\n    self.version = \"2.0.0\";\r\n\r\n/*--------------------------------------\r\n *  Fixed/extended native methods\r\n *------------------------------------*/\r\n\r\n/**\r\n * Adds named capture support (with backreferences returned as `result.name`), and fixes browser\r\n * bugs in the native `RegExp.prototype.exec`. Calling `XRegExp.install('natives')` uses this to\r\n * override the native method. Use via `XRegExp.exec` without overriding natives.\r\n * @private\r\n * @param {String} str String to search.\r\n * @returns {Array} Match array with named backreference properties, or null.\r\n */\r\n    fixed.exec = function (str) {\r\n        var match, name, r2, origLastIndex, i;\r\n        if (!this.global) {\r\n            origLastIndex = this.lastIndex;\r\n        }\r\n        match = nativ.exec.apply(this, arguments);\r\n        if (match) {\r\n            // Fix browsers whose `exec` methods don't consistently return `undefined` for\r\n            // nonparticipating capturing groups\r\n            if (!compliantExecNpcg && match.length > 1 && lastIndexOf(match, \"\") > -1) {\r\n                r2 = new RegExp(this.source, nativ.replace.call(getNativeFlags(this), \"g\", \"\"));\r\n                // Using `str.slice(match.index)` rather than `match[0]` in case lookahead allowed\r\n                // matching due to characters outside the match\r\n                nativ.replace.call(String(str).slice(match.index), r2, function () {\r\n                    var i;\r\n                    for (i = 1; i < arguments.length - 2; ++i) {\r\n                        if (arguments[i] === undef) {\r\n                            match[i] = undef;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            // Attach named capture properties\r\n            if (this.xregexp && this.xregexp.captureNames) {\r\n                for (i = 1; i < match.length; ++i) {\r\n                    name = this.xregexp.captureNames[i - 1];\r\n                    if (name) {\r\n                        match[name] = match[i];\r\n                    }\r\n                }\r\n            }\r\n            // Fix browsers that increment `lastIndex` after zero-length matches\r\n            if (this.global && !match[0].length && (this.lastIndex > match.index)) {\r\n                this.lastIndex = match.index;\r\n            }\r\n        }\r\n        if (!this.global) {\r\n            this.lastIndex = origLastIndex; // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)\r\n        }\r\n        return match;\r\n    };\r\n\r\n/**\r\n * Fixes browser bugs in the native `RegExp.prototype.test`. Calling `XRegExp.install('natives')`\r\n * uses this to override the native method.\r\n * @private\r\n * @param {String} str String to search.\r\n * @returns {Boolean} Whether the regex matched the provided value.\r\n */\r\n    fixed.test = function (str) {\r\n        // Do this the easy way :-)\r\n        return !!fixed.exec.call(this, str);\r\n    };\r\n\r\n/**\r\n * Adds named capture support (with backreferences returned as `result.name`), and fixes browser\r\n * bugs in the native `String.prototype.match`. Calling `XRegExp.install('natives')` uses this to\r\n * override the native method.\r\n * @private\r\n * @param {RegExp} regex Regex to search with.\r\n * @returns {Array} If `regex` uses flag g, an array of match strings or null. Without flag g, the\r\n *   result of calling `regex.exec(this)`.\r\n */\r\n    fixed.match = function (regex) {\r\n        if (!self.isRegExp(regex)) {\r\n            regex = new RegExp(regex); // Use native `RegExp`\r\n        } else if (regex.global) {\r\n            var result = nativ.match.apply(this, arguments);\r\n            regex.lastIndex = 0; // Fixes IE bug\r\n            return result;\r\n        }\r\n        return fixed.exec.call(regex, this);\r\n    };\r\n\r\n/**\r\n * Adds support for `${n}` tokens for named and numbered backreferences in replacement text, and\r\n * provides named backreferences to replacement functions as `arguments[0].name`. Also fixes\r\n * browser bugs in replacement text syntax when performing a replacement using a nonregex search\r\n * value, and the value of a replacement regex's `lastIndex` property during replacement iterations\r\n * and upon completion. Note that this doesn't support SpiderMonkey's proprietary third (`flags`)\r\n * argument. Calling `XRegExp.install('natives')` uses this to override the native method. Use via\r\n * `XRegExp.replace` without overriding natives.\r\n * @private\r\n * @param {RegExp|String} search Search pattern to be replaced.\r\n * @param {String|Function} replacement Replacement string or a function invoked to create it.\r\n * @returns {String} New string with one or all matches replaced.\r\n */\r\n    fixed.replace = function (search, replacement) {\r\n        var isRegex = self.isRegExp(search), captureNames, result, str, origLastIndex;\r\n        if (isRegex) {\r\n            if (search.xregexp) {\r\n                captureNames = search.xregexp.captureNames;\r\n            }\r\n            if (!search.global) {\r\n                origLastIndex = search.lastIndex;\r\n            }\r\n        } else {\r\n            search += \"\";\r\n        }\r\n        if (isType(replacement, \"function\")) {\r\n            result = nativ.replace.call(String(this), search, function () {\r\n                var args = arguments, i;\r\n                if (captureNames) {\r\n                    // Change the `arguments[0]` string primitive to a `String` object that can store properties\r\n                    args[0] = new String(args[0]);\r\n                    // Store named backreferences on the first argument\r\n                    for (i = 0; i < captureNames.length; ++i) {\r\n                        if (captureNames[i]) {\r\n                            args[0][captureNames[i]] = args[i + 1];\r\n                        }\r\n                    }\r\n                }\r\n                // Update `lastIndex` before calling `replacement`.\r\n                // Fixes IE, Chrome, Firefox, Safari bug (last tested IE 9, Chrome 17, Firefox 11, Safari 5.1)\r\n                if (isRegex && search.global) {\r\n                    search.lastIndex = args[args.length - 2] + args[0].length;\r\n                }\r\n                return replacement.apply(null, args);\r\n            });\r\n        } else {\r\n            str = String(this); // Ensure `args[args.length - 1]` will be a string when given nonstring `this`\r\n            result = nativ.replace.call(str, search, function () {\r\n                var args = arguments; // Keep this function's `arguments` available through closure\r\n                return nativ.replace.call(String(replacement), replacementToken, function ($0, $1, $2) {\r\n                    var n;\r\n                    // Named or numbered backreference with curly brackets\r\n                    if ($1) {\r\n                        /* XRegExp behavior for `${n}`:\r\n                         * 1. Backreference to numbered capture, where `n` is 1+ digits. `0`, `00`, etc. is the entire match.\r\n                         * 2. Backreference to named capture `n`, if it exists and is not a number overridden by numbered capture.\r\n                         * 3. Otherwise, it's an error.\r\n                         */\r\n                        n = +$1; // Type-convert; drop leading zeros\r\n                        if (n <= args.length - 3) {\r\n                            return args[n] || \"\";\r\n                        }\r\n                        n = captureNames ? lastIndexOf(captureNames, $1) : -1;\r\n                        if (n < 0) {\r\n                            throw new SyntaxError(\"backreference to undefined group \" + $0);\r\n                        }\r\n                        return args[n + 1] || \"\";\r\n                    }\r\n                    // Else, special variable or numbered backreference (without curly brackets)\r\n                    if ($2 === \"$\") return \"$\";\r\n                    if ($2 === \"&\" || +$2 === 0) return args[0]; // $&, $0 (not followed by 1-9), $00\r\n                    if ($2 === \"`\") return args[args.length - 1].slice(0, args[args.length - 2]);\r\n                    if ($2 === \"'\") return args[args.length - 1].slice(args[args.length - 2] + args[0].length);\r\n                    // Else, numbered backreference (without curly brackets)\r\n                    $2 = +$2; // Type-convert; drop leading zero\r\n                    /* XRegExp behavior:\r\n                     * - Backreferences without curly brackets end after 1 or 2 digits. Use `${..}` for more digits.\r\n                     * - `$1` is an error if there are no capturing groups.\r\n                     * - `$10` is an error if there are less than 10 capturing groups. Use `${1}0` instead.\r\n                     * - `$01` is equivalent to `$1` if a capturing group exists, otherwise it's an error.\r\n                     * - `$0` (not followed by 1-9), `$00`, and `$&` are the entire match.\r\n                     * Native behavior, for comparison:\r\n                     * - Backreferences end after 1 or 2 digits. Cannot use backreference to capturing group 100+.\r\n                     * - `$1` is a literal `$1` if there are no capturing groups.\r\n                     * - `$10` is `$1` followed by a literal `0` if there are less than 10 capturing groups.\r\n                     * - `$01` is equivalent to `$1` if a capturing group exists, otherwise it's a literal `$01`.\r\n                     * - `$0` is a literal `$0`. `$&` is the entire match.\r\n                     */\r\n                    if (!isNaN($2)) {\r\n                        if ($2 > args.length - 3) {\r\n                            throw new SyntaxError(\"backreference to undefined group \" + $0);\r\n                        }\r\n                        return args[$2] || \"\";\r\n                    }\r\n                    throw new SyntaxError(\"invalid token \" + $0);\r\n                });\r\n            });\r\n        }\r\n        if (isRegex) {\r\n            if (search.global) {\r\n                search.lastIndex = 0; // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)\r\n            } else {\r\n                search.lastIndex = origLastIndex; // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n\r\n/**\r\n * Fixes browser bugs in the native `String.prototype.split`. Calling `XRegExp.install('natives')`\r\n * uses this to override the native method. Use via `XRegExp.split` without overriding natives.\r\n * @private\r\n * @param {RegExp|String} separator Regex or string to use for separating the string.\r\n * @param {Number} [limit] Maximum number of items to include in the result array.\r\n * @returns {Array} Array of substrings.\r\n */\r\n    fixed.split = function (separator, limit) {\r\n        if (!self.isRegExp(separator)) {\r\n            return nativ.split.apply(this, arguments); // use faster native method\r\n        }\r\n        var str = String(this),\r\n            origLastIndex = separator.lastIndex,\r\n            output = [],\r\n            lastLastIndex = 0,\r\n            lastLength;\r\n        /* Values for `limit`, per the spec:\r\n         * If undefined: pow(2,32) - 1\r\n         * If 0, Infinity, or NaN: 0\r\n         * If positive number: limit = floor(limit); if (limit >= pow(2,32)) limit -= pow(2,32);\r\n         * If negative number: pow(2,32) - floor(abs(limit))\r\n         * If other: Type-convert, then use the above rules\r\n         */\r\n        limit = (limit === undef ? -1 : limit) >>> 0;\r\n        self.forEach(str, separator, function (match) {\r\n            if ((match.index + match[0].length) > lastLastIndex) { // != `if (match[0].length)`\r\n                output.push(str.slice(lastLastIndex, match.index));\r\n                if (match.length > 1 && match.index < str.length) {\r\n                    Array.prototype.push.apply(output, match.slice(1));\r\n                }\r\n                lastLength = match[0].length;\r\n                lastLastIndex = match.index + lastLength;\r\n            }\r\n        });\r\n        if (lastLastIndex === str.length) {\r\n            if (!nativ.test.call(separator, \"\") || lastLength) {\r\n                output.push(\"\");\r\n            }\r\n        } else {\r\n            output.push(str.slice(lastLastIndex));\r\n        }\r\n        separator.lastIndex = origLastIndex;\r\n        return output.length > limit ? output.slice(0, limit) : output;\r\n    };\r\n\r\n/*--------------------------------------\r\n *  Built-in tokens\r\n *------------------------------------*/\r\n\r\n// Shortcut\r\n    add = addToken.on;\r\n\r\n/* Letter identity escapes that natively match literal characters: \\p, \\P, etc.\r\n * Should be SyntaxErrors but are allowed in web reality. XRegExp makes them errors for cross-\r\n * browser consistency and to reserve their syntax, but lets them be superseded by XRegExp addons.\r\n */\r\n    add(/\\\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\\dA-Fa-f]{4})|x(?![\\dA-Fa-f]{2}))/,\r\n        function (match, scope) {\r\n            // \\B is allowed in default scope only\r\n            if (match[1] === \"B\" && scope === defaultScope) {\r\n                return match[0];\r\n            }\r\n            throw new SyntaxError(\"invalid escape \" + match[0]);\r\n        },\r\n        {scope: \"all\"});\r\n\r\n/* Empty character class: [] or [^]\r\n * Fixes a critical cross-browser syntax inconsistency. Unless this is standardized (per the spec),\r\n * regex syntax can't be accurately parsed because character class endings can't be determined.\r\n */\r\n    add(/\\[(\\^?)]/,\r\n        function (match) {\r\n            // For cross-browser compatibility with ES3, convert [] to \\b\\B and [^] to [\\s\\S].\r\n            // (?!) should work like \\b\\B, but is unreliable in Firefox\r\n            return match[1] ? \"[\\\\s\\\\S]\" : \"\\\\b\\\\B\";\r\n        });\r\n\r\n/* Comment pattern: (?# )\r\n * Inline comments are an alternative to the line comments allowed in free-spacing mode (flag x).\r\n */\r\n    add(/(?:\\(\\?#[^)]*\\))+/,\r\n        function (match) {\r\n            // Keep tokens separated unless the following token is a quantifier\r\n            return nativ.test.call(quantifier, match.input.slice(match.index + match[0].length)) ? \"\" : \"(?:)\";\r\n        });\r\n\r\n/* Named backreference: \\k<name>\r\n * Backreference names can use the characters A-Z, a-z, 0-9, _, and $ only.\r\n */\r\n    add(/\\\\k<([\\w$]+)>/,\r\n        function (match) {\r\n            var index = isNaN(match[1]) ? (lastIndexOf(this.captureNames, match[1]) + 1) : +match[1],\r\n                endIndex = match.index + match[0].length;\r\n            if (!index || index > this.captureNames.length) {\r\n                throw new SyntaxError(\"backreference to undefined group \" + match[0]);\r\n            }\r\n            // Keep backreferences separate from subsequent literal numbers\r\n            return \"\\\\\" + index + (\r\n                endIndex === match.input.length || isNaN(match.input.charAt(endIndex)) ? \"\" : \"(?:)\"\r\n            );\r\n        });\r\n\r\n/* Whitespace and line comments, in free-spacing mode (aka extended mode, flag x) only.\r\n */\r\n    add(/(?:\\s+|#.*)+/,\r\n        function (match) {\r\n            // Keep tokens separated unless the following token is a quantifier\r\n            return nativ.test.call(quantifier, match.input.slice(match.index + match[0].length)) ? \"\" : \"(?:)\";\r\n        },\r\n        {\r\n            trigger: function () {\r\n                return this.hasFlag(\"x\");\r\n            },\r\n            customFlags: \"x\"\r\n        });\r\n\r\n/* Dot, in dotall mode (aka singleline mode, flag s) only.\r\n */\r\n    add(/\\./,\r\n        function () {\r\n            return \"[\\\\s\\\\S]\";\r\n        },\r\n        {\r\n            trigger: function () {\r\n                return this.hasFlag(\"s\");\r\n            },\r\n            customFlags: \"s\"\r\n        });\r\n\r\n/* Named capturing group; match the opening delimiter only: (?<name>\r\n * Capture names can use the characters A-Z, a-z, 0-9, _, and $ only. Names can't be integers.\r\n * Supports Python-style (?P<name> as an alternate syntax to avoid issues in recent Opera (which\r\n * natively supports the Python-style syntax). Otherwise, XRegExp might treat numbered\r\n * backreferences to Python-style named capture as octals.\r\n */\r\n    add(/\\(\\?P?<([\\w$]+)>/,\r\n        function (match) {\r\n            if (!isNaN(match[1])) {\r\n                // Avoid incorrect lookups, since named backreferences are added to match arrays\r\n                throw new SyntaxError(\"can't use integer as capture name \" + match[0]);\r\n            }\r\n            this.captureNames.push(match[1]);\r\n            this.hasNamedCapture = true;\r\n            return \"(\";\r\n        });\r\n\r\n/* Numbered backreference or octal, plus any following digits: \\0, \\11, etc.\r\n * Octals except \\0 not followed by 0-9 and backreferences to unopened capture groups throw an\r\n * error. Other matches are returned unaltered. IE <= 8 doesn't support backreferences greater than\r\n * \\99 in regex syntax.\r\n */\r\n    add(/\\\\(\\d+)/,\r\n        function (match, scope) {\r\n            if (!(scope === defaultScope && /^[1-9]/.test(match[1]) && +match[1] <= this.captureNames.length) &&\r\n                    match[1] !== \"0\") {\r\n                throw new SyntaxError(\"can't use octal escape or backreference to undefined group \" + match[0]);\r\n            }\r\n            return match[0];\r\n        },\r\n        {scope: \"all\"});\r\n\r\n/* Capturing group; match the opening parenthesis only.\r\n * Required for support of named capturing groups. Also adds explicit capture mode (flag n).\r\n */\r\n    add(/\\((?!\\?)/,\r\n        function () {\r\n            if (this.hasFlag(\"n\")) {\r\n                return \"(?:\";\r\n            }\r\n            this.captureNames.push(null);\r\n            return \"(\";\r\n        },\r\n        {customFlags: \"n\"});\r\n\r\n/*--------------------------------------\r\n *  Expose XRegExp\r\n *------------------------------------*/\r\n\r\n// For CommonJS enviroments\r\n    if (typeof exports !== \"undefined\") {\r\n        exports.XRegExp = self;\r\n    }\r\n\r\n    return self;\r\n\r\n}());\r\n\r\n\n/***** unicode-base.js *****/\n\n/*!\r\n * XRegExp Unicode Base v1.0.0\r\n * (c) 2008-2012 Steven Levithan <http://xregexp.com/>\r\n * MIT License\r\n * Uses Unicode 6.1 <http://unicode.org/>\r\n */\r\n\r\n/**\r\n * Adds support for the `\\p{L}` or `\\p{Letter}` Unicode category. Addon packages for other Unicode\r\n * categories, scripts, blocks, and properties are available separately. All Unicode tokens can be\r\n * inverted using `\\P{..}` or `\\p{^..}`. Token names are case insensitive, and any spaces, hyphens,\r\n * and underscores are ignored.\r\n * @requires XRegExp\r\n */\r\n(function (XRegExp) {\r\n    \"use strict\";\r\n\r\n    var unicode = {};\r\n\r\n/*--------------------------------------\r\n *  Private helper functions\r\n *------------------------------------*/\r\n\r\n// Generates a standardized token name (lowercase, with hyphens, spaces, and underscores removed)\r\n    function slug(name) {\r\n        return name.replace(/[- _]+/g, \"\").toLowerCase();\r\n    }\r\n\r\n// Expands a list of Unicode code points and ranges to be usable in a regex character class\r\n    function expand(str) {\r\n        return str.replace(/\\w{4}/g, \"\\\\u$&\");\r\n    }\r\n\r\n// Adds leading zeros if shorter than four characters\r\n    function pad4(str) {\r\n        while (str.length < 4) {\r\n            str = \"0\" + str;\r\n        }\r\n        return str;\r\n    }\r\n\r\n// Converts a hexadecimal number to decimal\r\n    function dec(hex) {\r\n        return parseInt(hex, 16);\r\n    }\r\n\r\n// Converts a decimal number to hexadecimal\r\n    function hex(dec) {\r\n        return parseInt(dec, 10).toString(16);\r\n    }\r\n\r\n// Inverts a list of Unicode code points and ranges\r\n    function invert(range) {\r\n        var output = [],\r\n            lastEnd = -1,\r\n            start;\r\n        XRegExp.forEach(range, /\\\\u(\\w{4})(?:-\\\\u(\\w{4}))?/, function (m) {\r\n            start = dec(m[1]);\r\n            if (start > (lastEnd + 1)) {\r\n                output.push(\"\\\\u\" + pad4(hex(lastEnd + 1)));\r\n                if (start > (lastEnd + 2)) {\r\n                    output.push(\"-\\\\u\" + pad4(hex(start - 1)));\r\n                }\r\n            }\r\n            lastEnd = dec(m[2] || m[1]);\r\n        });\r\n        if (lastEnd < 0xFFFF) {\r\n            output.push(\"\\\\u\" + pad4(hex(lastEnd + 1)));\r\n            if (lastEnd < 0xFFFE) {\r\n                output.push(\"-\\\\uFFFF\");\r\n            }\r\n        }\r\n        return output.join(\"\");\r\n    }\r\n\r\n// Generates an inverted token on first use\r\n    function cacheInversion(item) {\r\n        return unicode[\"^\" + item] || (unicode[\"^\" + item] = invert(unicode[item]));\r\n    }\r\n\r\n/*--------------------------------------\r\n *  Core functionality\r\n *------------------------------------*/\r\n\r\n    XRegExp.install(\"extensibility\");\r\n\r\n/**\r\n * Adds to the list of Unicode properties that XRegExp regexes can match via \\p{..} or \\P{..}.\r\n * @memberOf XRegExp\r\n * @param {Object} pack Named sets of Unicode code points and ranges.\r\n * @param {Object} [aliases] Aliases for the primary token names.\r\n * @example\r\n *\r\n * XRegExp.addUnicodePackage({\r\n *   XDigit: '0030-00390041-00460061-0066' // 0-9A-Fa-f\r\n * }, {\r\n *   XDigit: 'Hexadecimal'\r\n * });\r\n */\r\n    XRegExp.addUnicodePackage = function (pack, aliases) {\r\n        var p;\r\n        if (!XRegExp.isInstalled(\"extensibility\")) {\r\n            throw new Error(\"extensibility must be installed before adding Unicode packages\");\r\n        }\r\n        if (pack) {\r\n            for (p in pack) {\r\n                if (pack.hasOwnProperty(p)) {\r\n                    unicode[slug(p)] = expand(pack[p]);\r\n                }\r\n            }\r\n        }\r\n        if (aliases) {\r\n            for (p in aliases) {\r\n                if (aliases.hasOwnProperty(p)) {\r\n                    unicode[slug(aliases[p])] = unicode[slug(p)];\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n/* Adds data for the Unicode `Letter` category. Addon packages include other categories, scripts,\r\n * blocks, and properties.\r\n */\r\n    XRegExp.addUnicodePackage({\r\n        L: \"0041-005A0061-007A00AA00B500BA00C0-00D600D8-00F600F8-02C102C6-02D102E0-02E402EC02EE0370-037403760377037A-037D03860388-038A038C038E-03A103A3-03F503F7-0481048A-05270531-055605590561-058705D0-05EA05F0-05F20620-064A066E066F0671-06D306D506E506E606EE06EF06FA-06FC06FF07100712-072F074D-07A507B107CA-07EA07F407F507FA0800-0815081A082408280840-085808A008A2-08AC0904-0939093D09500958-09610971-09770979-097F0985-098C098F09900993-09A809AA-09B009B209B6-09B909BD09CE09DC09DD09DF-09E109F009F10A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A59-0A5C0A5E0A72-0A740A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABD0AD00AE00AE10B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3D0B5C0B5D0B5F-0B610B710B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BD00C05-0C0C0C0E-0C100C12-0C280C2A-0C330C35-0C390C3D0C580C590C600C610C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBD0CDE0CE00CE10CF10CF20D05-0D0C0D0E-0D100D12-0D3A0D3D0D4E0D600D610D7A-0D7F0D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60E01-0E300E320E330E40-0E460E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB00EB20EB30EBD0EC0-0EC40EC60EDC-0EDF0F000F40-0F470F49-0F6C0F88-0F8C1000-102A103F1050-1055105A-105D106110651066106E-10701075-1081108E10A0-10C510C710CD10D0-10FA10FC-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A1380-138F13A0-13F41401-166C166F-167F1681-169A16A0-16EA1700-170C170E-17111720-17311740-17511760-176C176E-17701780-17B317D717DC1820-18771880-18A818AA18B0-18F51900-191C1950-196D1970-19741980-19AB19C1-19C71A00-1A161A20-1A541AA71B05-1B331B45-1B4B1B83-1BA01BAE1BAF1BBA-1BE51C00-1C231C4D-1C4F1C5A-1C7D1CE9-1CEC1CEE-1CF11CF51CF61D00-1DBF1E00-1F151F18-1F1D1F20-1F451F48-1F4D1F50-1F571F591F5B1F5D1F5F-1F7D1F80-1FB41FB6-1FBC1FBE1FC2-1FC41FC6-1FCC1FD0-1FD31FD6-1FDB1FE0-1FEC1FF2-1FF41FF6-1FFC2071207F2090-209C21022107210A-211321152119-211D212421262128212A-212D212F-2139213C-213F2145-2149214E218321842C00-2C2E2C30-2C5E2C60-2CE42CEB-2CEE2CF22CF32D00-2D252D272D2D2D30-2D672D6F2D80-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDE2E2F300530063031-3035303B303C3041-3096309D-309F30A1-30FA30FC-30FF3105-312D3131-318E31A0-31BA31F0-31FF3400-4DB54E00-9FCCA000-A48CA4D0-A4FDA500-A60CA610-A61FA62AA62BA640-A66EA67F-A697A6A0-A6E5A717-A71FA722-A788A78B-A78EA790-A793A7A0-A7AAA7F8-A801A803-A805A807-A80AA80C-A822A840-A873A882-A8B3A8F2-A8F7A8FBA90A-A925A930-A946A960-A97CA984-A9B2A9CFAA00-AA28AA40-AA42AA44-AA4BAA60-AA76AA7AAA80-AAAFAAB1AAB5AAB6AAB9-AABDAAC0AAC2AADB-AADDAAE0-AAEAAAF2-AAF4AB01-AB06AB09-AB0EAB11-AB16AB20-AB26AB28-AB2EABC0-ABE2AC00-D7A3D7B0-D7C6D7CB-D7FBF900-FA6DFA70-FAD9FB00-FB06FB13-FB17FB1DFB1F-FB28FB2A-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FBB1FBD3-FD3DFD50-FD8FFD92-FDC7FDF0-FDFBFE70-FE74FE76-FEFCFF21-FF3AFF41-FF5AFF66-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDC\"\r\n    }, {\r\n        L: \"Letter\"\r\n    });\r\n\r\n/* Adds Unicode property syntax to XRegExp: \\p{..}, \\P{..}, \\p{^..}\r\n */\r\n    XRegExp.addToken(\r\n        /\\\\([pP]){(\\^?)([^}]*)}/,\r\n        function (match, scope) {\r\n            var inv = (match[1] === \"P\" || match[2]) ? \"^\" : \"\",\r\n                item = slug(match[3]);\r\n            // The double negative \\P{^..} is invalid\r\n            if (match[1] === \"P\" && match[2]) {\r\n                throw new SyntaxError(\"invalid double negation \\\\P{^\");\r\n            }\r\n            if (!unicode.hasOwnProperty(item)) {\r\n                throw new SyntaxError(\"invalid or unknown Unicode property \" + match[0]);\r\n            }\r\n            return scope === \"class\" ?\r\n                    (inv ? cacheInversion(item) : unicode[item]) :\r\n                    \"[\" + inv + unicode[item] + \"]\";\r\n        },\r\n        {scope: \"all\"}\r\n    );\r\n\r\n}(XRegExp));\r\n\r\n\n/***** unicode-categories.js *****/\n\n/*!\r\n * XRegExp Unicode Categories v1.2.0\r\n * (c) 2010-2012 Steven Levithan <http://xregexp.com/>\r\n * MIT License\r\n * Uses Unicode 6.1 <http://unicode.org/>\r\n */\r\n\r\n/**\r\n * Adds support for all Unicode categories (aka properties) E.g., `\\p{Lu}` or\r\n * `\\p{Uppercase Letter}`. Token names are case insensitive, and any spaces, hyphens, and\r\n * underscores are ignored.\r\n * @requires XRegExp, XRegExp Unicode Base\r\n */\r\n(function (XRegExp) {\r\n    \"use strict\";\r\n\r\n    if (!XRegExp.addUnicodePackage) {\r\n        throw new ReferenceError(\"Unicode Base must be loaded before Unicode Categories\");\r\n    }\r\n\r\n    XRegExp.install(\"extensibility\");\r\n\r\n    XRegExp.addUnicodePackage({\r\n        //L: \"\", // Included in the Unicode Base addon\r\n        Ll: \"0061-007A00B500DF-00F600F8-00FF01010103010501070109010B010D010F01110113011501170119011B011D011F01210123012501270129012B012D012F01310133013501370138013A013C013E014001420144014601480149014B014D014F01510153015501570159015B015D015F01610163016501670169016B016D016F0171017301750177017A017C017E-0180018301850188018C018D019201950199-019B019E01A101A301A501A801AA01AB01AD01B001B401B601B901BA01BD-01BF01C601C901CC01CE01D001D201D401D601D801DA01DC01DD01DF01E101E301E501E701E901EB01ED01EF01F001F301F501F901FB01FD01FF02010203020502070209020B020D020F02110213021502170219021B021D021F02210223022502270229022B022D022F02310233-0239023C023F0240024202470249024B024D024F-02930295-02AF037103730377037B-037D039003AC-03CE03D003D103D5-03D703D903DB03DD03DF03E103E303E503E703E903EB03ED03EF-03F303F503F803FB03FC0430-045F04610463046504670469046B046D046F04710473047504770479047B047D047F0481048B048D048F04910493049504970499049B049D049F04A104A304A504A704A904AB04AD04AF04B104B304B504B704B904BB04BD04BF04C204C404C604C804CA04CC04CE04CF04D104D304D504D704D904DB04DD04DF04E104E304E504E704E904EB04ED04EF04F104F304F504F704F904FB04FD04FF05010503050505070509050B050D050F05110513051505170519051B051D051F05210523052505270561-05871D00-1D2B1D6B-1D771D79-1D9A1E011E031E051E071E091E0B1E0D1E0F1E111E131E151E171E191E1B1E1D1E1F1E211E231E251E271E291E2B1E2D1E2F1E311E331E351E371E391E3B1E3D1E3F1E411E431E451E471E491E4B1E4D1E4F1E511E531E551E571E591E5B1E5D1E5F1E611E631E651E671E691E6B1E6D1E6F1E711E731E751E771E791E7B1E7D1E7F1E811E831E851E871E891E8B1E8D1E8F1E911E931E95-1E9D1E9F1EA11EA31EA51EA71EA91EAB1EAD1EAF1EB11EB31EB51EB71EB91EBB1EBD1EBF1EC11EC31EC51EC71EC91ECB1ECD1ECF1ED11ED31ED51ED71ED91EDB1EDD1EDF1EE11EE31EE51EE71EE91EEB1EED1EEF1EF11EF31EF51EF71EF91EFB1EFD1EFF-1F071F10-1F151F20-1F271F30-1F371F40-1F451F50-1F571F60-1F671F70-1F7D1F80-1F871F90-1F971FA0-1FA71FB0-1FB41FB61FB71FBE1FC2-1FC41FC61FC71FD0-1FD31FD61FD71FE0-1FE71FF2-1FF41FF61FF7210A210E210F2113212F21342139213C213D2146-2149214E21842C30-2C5E2C612C652C662C682C6A2C6C2C712C732C742C76-2C7B2C812C832C852C872C892C8B2C8D2C8F2C912C932C952C972C992C9B2C9D2C9F2CA12CA32CA52CA72CA92CAB2CAD2CAF2CB12CB32CB52CB72CB92CBB2CBD2CBF2CC12CC32CC52CC72CC92CCB2CCD2CCF2CD12CD32CD52CD72CD92CDB2CDD2CDF2CE12CE32CE42CEC2CEE2CF32D00-2D252D272D2DA641A643A645A647A649A64BA64DA64FA651A653A655A657A659A65BA65DA65FA661A663A665A667A669A66BA66DA681A683A685A687A689A68BA68DA68FA691A693A695A697A723A725A727A729A72BA72DA72F-A731A733A735A737A739A73BA73DA73FA741A743A745A747A749A74BA74DA74FA751A753A755A757A759A75BA75DA75FA761A763A765A767A769A76BA76DA76FA771-A778A77AA77CA77FA781A783A785A787A78CA78EA791A793A7A1A7A3A7A5A7A7A7A9A7FAFB00-FB06FB13-FB17FF41-FF5A\",\r\n        Lu: \"0041-005A00C0-00D600D8-00DE01000102010401060108010A010C010E01100112011401160118011A011C011E01200122012401260128012A012C012E01300132013401360139013B013D013F0141014301450147014A014C014E01500152015401560158015A015C015E01600162016401660168016A016C016E017001720174017601780179017B017D018101820184018601870189-018B018E-0191019301940196-0198019C019D019F01A001A201A401A601A701A901AC01AE01AF01B1-01B301B501B701B801BC01C401C701CA01CD01CF01D101D301D501D701D901DB01DE01E001E201E401E601E801EA01EC01EE01F101F401F6-01F801FA01FC01FE02000202020402060208020A020C020E02100212021402160218021A021C021E02200222022402260228022A022C022E02300232023A023B023D023E02410243-02460248024A024C024E03700372037603860388-038A038C038E038F0391-03A103A3-03AB03CF03D2-03D403D803DA03DC03DE03E003E203E403E603E803EA03EC03EE03F403F703F903FA03FD-042F04600462046404660468046A046C046E04700472047404760478047A047C047E0480048A048C048E04900492049404960498049A049C049E04A004A204A404A604A804AA04AC04AE04B004B204B404B604B804BA04BC04BE04C004C104C304C504C704C904CB04CD04D004D204D404D604D804DA04DC04DE04E004E204E404E604E804EA04EC04EE04F004F204F404F604F804FA04FC04FE05000502050405060508050A050C050E05100512051405160518051A051C051E05200522052405260531-055610A0-10C510C710CD1E001E021E041E061E081E0A1E0C1E0E1E101E121E141E161E181E1A1E1C1E1E1E201E221E241E261E281E2A1E2C1E2E1E301E321E341E361E381E3A1E3C1E3E1E401E421E441E461E481E4A1E4C1E4E1E501E521E541E561E581E5A1E5C1E5E1E601E621E641E661E681E6A1E6C1E6E1E701E721E741E761E781E7A1E7C1E7E1E801E821E841E861E881E8A1E8C1E8E1E901E921E941E9E1EA01EA21EA41EA61EA81EAA1EAC1EAE1EB01EB21EB41EB61EB81EBA1EBC1EBE1EC01EC21EC41EC61EC81ECA1ECC1ECE1ED01ED21ED41ED61ED81EDA1EDC1EDE1EE01EE21EE41EE61EE81EEA1EEC1EEE1EF01EF21EF41EF61EF81EFA1EFC1EFE1F08-1F0F1F18-1F1D1F28-1F2F1F38-1F3F1F48-1F4D1F591F5B1F5D1F5F1F68-1F6F1FB8-1FBB1FC8-1FCB1FD8-1FDB1FE8-1FEC1FF8-1FFB21022107210B-210D2110-211221152119-211D212421262128212A-212D2130-2133213E213F214521832C00-2C2E2C602C62-2C642C672C692C6B2C6D-2C702C722C752C7E-2C802C822C842C862C882C8A2C8C2C8E2C902C922C942C962C982C9A2C9C2C9E2CA02CA22CA42CA62CA82CAA2CAC2CAE2CB02CB22CB42CB62CB82CBA2CBC2CBE2CC02CC22CC42CC62CC82CCA2CCC2CCE2CD02CD22CD42CD62CD82CDA2CDC2CDE2CE02CE22CEB2CED2CF2A640A642A644A646A648A64AA64CA64EA650A652A654A656A658A65AA65CA65EA660A662A664A666A668A66AA66CA680A682A684A686A688A68AA68CA68EA690A692A694A696A722A724A726A728A72AA72CA72EA732A734A736A738A73AA73CA73EA740A742A744A746A748A74AA74CA74EA750A752A754A756A758A75AA75CA75EA760A762A764A766A768A76AA76CA76EA779A77BA77DA77EA780A782A784A786A78BA78DA790A792A7A0A7A2A7A4A7A6A7A8A7AAFF21-FF3A\",\r\n        Lt: \"01C501C801CB01F21F88-1F8F1F98-1F9F1FA8-1FAF1FBC1FCC1FFC\",\r\n        Lm: \"02B0-02C102C6-02D102E0-02E402EC02EE0374037A0559064006E506E607F407F507FA081A0824082809710E460EC610FC17D718431AA71C78-1C7D1D2C-1D6A1D781D9B-1DBF2071207F2090-209C2C7C2C7D2D6F2E2F30053031-3035303B309D309E30FC-30FEA015A4F8-A4FDA60CA67FA717-A71FA770A788A7F8A7F9A9CFAA70AADDAAF3AAF4FF70FF9EFF9F\",\r\n        Lo: \"00AA00BA01BB01C0-01C3029405D0-05EA05F0-05F20620-063F0641-064A066E066F0671-06D306D506EE06EF06FA-06FC06FF07100712-072F074D-07A507B107CA-07EA0800-08150840-085808A008A2-08AC0904-0939093D09500958-09610972-09770979-097F0985-098C098F09900993-09A809AA-09B009B209B6-09B909BD09CE09DC09DD09DF-09E109F009F10A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A59-0A5C0A5E0A72-0A740A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABD0AD00AE00AE10B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3D0B5C0B5D0B5F-0B610B710B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BD00C05-0C0C0C0E-0C100C12-0C280C2A-0C330C35-0C390C3D0C580C590C600C610C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBD0CDE0CE00CE10CF10CF20D05-0D0C0D0E-0D100D12-0D3A0D3D0D4E0D600D610D7A-0D7F0D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60E01-0E300E320E330E40-0E450E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB00EB20EB30EBD0EC0-0EC40EDC-0EDF0F000F40-0F470F49-0F6C0F88-0F8C1000-102A103F1050-1055105A-105D106110651066106E-10701075-1081108E10D0-10FA10FD-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A1380-138F13A0-13F41401-166C166F-167F1681-169A16A0-16EA1700-170C170E-17111720-17311740-17511760-176C176E-17701780-17B317DC1820-18421844-18771880-18A818AA18B0-18F51900-191C1950-196D1970-19741980-19AB19C1-19C71A00-1A161A20-1A541B05-1B331B45-1B4B1B83-1BA01BAE1BAF1BBA-1BE51C00-1C231C4D-1C4F1C5A-1C771CE9-1CEC1CEE-1CF11CF51CF62135-21382D30-2D672D80-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDE3006303C3041-3096309F30A1-30FA30FF3105-312D3131-318E31A0-31BA31F0-31FF3400-4DB54E00-9FCCA000-A014A016-A48CA4D0-A4F7A500-A60BA610-A61FA62AA62BA66EA6A0-A6E5A7FB-A801A803-A805A807-A80AA80C-A822A840-A873A882-A8B3A8F2-A8F7A8FBA90A-A925A930-A946A960-A97CA984-A9B2AA00-AA28AA40-AA42AA44-AA4BAA60-AA6FAA71-AA76AA7AAA80-AAAFAAB1AAB5AAB6AAB9-AABDAAC0AAC2AADBAADCAAE0-AAEAAAF2AB01-AB06AB09-AB0EAB11-AB16AB20-AB26AB28-AB2EABC0-ABE2AC00-D7A3D7B0-D7C6D7CB-D7FBF900-FA6DFA70-FAD9FB1DFB1F-FB28FB2A-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FBB1FBD3-FD3DFD50-FD8FFD92-FDC7FDF0-FDFBFE70-FE74FE76-FEFCFF66-FF6FFF71-FF9DFFA0-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDC\",\r\n        M: \"0300-036F0483-04890591-05BD05BF05C105C205C405C505C70610-061A064B-065F067006D6-06DC06DF-06E406E706E806EA-06ED07110730-074A07A6-07B007EB-07F30816-0819081B-08230825-08270829-082D0859-085B08E4-08FE0900-0903093A-093C093E-094F0951-0957096209630981-098309BC09BE-09C409C709C809CB-09CD09D709E209E30A01-0A030A3C0A3E-0A420A470A480A4B-0A4D0A510A700A710A750A81-0A830ABC0ABE-0AC50AC7-0AC90ACB-0ACD0AE20AE30B01-0B030B3C0B3E-0B440B470B480B4B-0B4D0B560B570B620B630B820BBE-0BC20BC6-0BC80BCA-0BCD0BD70C01-0C030C3E-0C440C46-0C480C4A-0C4D0C550C560C620C630C820C830CBC0CBE-0CC40CC6-0CC80CCA-0CCD0CD50CD60CE20CE30D020D030D3E-0D440D46-0D480D4A-0D4D0D570D620D630D820D830DCA0DCF-0DD40DD60DD8-0DDF0DF20DF30E310E34-0E3A0E47-0E4E0EB10EB4-0EB90EBB0EBC0EC8-0ECD0F180F190F350F370F390F3E0F3F0F71-0F840F860F870F8D-0F970F99-0FBC0FC6102B-103E1056-1059105E-10601062-10641067-106D1071-10741082-108D108F109A-109D135D-135F1712-17141732-1734175217531772177317B4-17D317DD180B-180D18A91920-192B1930-193B19B0-19C019C819C91A17-1A1B1A55-1A5E1A60-1A7C1A7F1B00-1B041B34-1B441B6B-1B731B80-1B821BA1-1BAD1BE6-1BF31C24-1C371CD0-1CD21CD4-1CE81CED1CF2-1CF41DC0-1DE61DFC-1DFF20D0-20F02CEF-2CF12D7F2DE0-2DFF302A-302F3099309AA66F-A672A674-A67DA69FA6F0A6F1A802A806A80BA823-A827A880A881A8B4-A8C4A8E0-A8F1A926-A92DA947-A953A980-A983A9B3-A9C0AA29-AA36AA43AA4CAA4DAA7BAAB0AAB2-AAB4AAB7AAB8AABEAABFAAC1AAEB-AAEFAAF5AAF6ABE3-ABEAABECABEDFB1EFE00-FE0FFE20-FE26\",\r\n        Mn: \"0300-036F0483-04870591-05BD05BF05C105C205C405C505C70610-061A064B-065F067006D6-06DC06DF-06E406E706E806EA-06ED07110730-074A07A6-07B007EB-07F30816-0819081B-08230825-08270829-082D0859-085B08E4-08FE0900-0902093A093C0941-0948094D0951-095709620963098109BC09C1-09C409CD09E209E30A010A020A3C0A410A420A470A480A4B-0A4D0A510A700A710A750A810A820ABC0AC1-0AC50AC70AC80ACD0AE20AE30B010B3C0B3F0B41-0B440B4D0B560B620B630B820BC00BCD0C3E-0C400C46-0C480C4A-0C4D0C550C560C620C630CBC0CBF0CC60CCC0CCD0CE20CE30D41-0D440D4D0D620D630DCA0DD2-0DD40DD60E310E34-0E3A0E47-0E4E0EB10EB4-0EB90EBB0EBC0EC8-0ECD0F180F190F350F370F390F71-0F7E0F80-0F840F860F870F8D-0F970F99-0FBC0FC6102D-10301032-10371039103A103D103E10581059105E-10601071-1074108210851086108D109D135D-135F1712-17141732-1734175217531772177317B417B517B7-17BD17C617C9-17D317DD180B-180D18A91920-19221927192819321939-193B1A171A181A561A58-1A5E1A601A621A65-1A6C1A73-1A7C1A7F1B00-1B031B341B36-1B3A1B3C1B421B6B-1B731B801B811BA2-1BA51BA81BA91BAB1BE61BE81BE91BED1BEF-1BF11C2C-1C331C361C371CD0-1CD21CD4-1CE01CE2-1CE81CED1CF41DC0-1DE61DFC-1DFF20D0-20DC20E120E5-20F02CEF-2CF12D7F2DE0-2DFF302A-302D3099309AA66FA674-A67DA69FA6F0A6F1A802A806A80BA825A826A8C4A8E0-A8F1A926-A92DA947-A951A980-A982A9B3A9B6-A9B9A9BCAA29-AA2EAA31AA32AA35AA36AA43AA4CAAB0AAB2-AAB4AAB7AAB8AABEAABFAAC1AAECAAEDAAF6ABE5ABE8ABEDFB1EFE00-FE0FFE20-FE26\",\r\n        Mc: \"0903093B093E-09400949-094C094E094F0982098309BE-09C009C709C809CB09CC09D70A030A3E-0A400A830ABE-0AC00AC90ACB0ACC0B020B030B3E0B400B470B480B4B0B4C0B570BBE0BBF0BC10BC20BC6-0BC80BCA-0BCC0BD70C01-0C030C41-0C440C820C830CBE0CC0-0CC40CC70CC80CCA0CCB0CD50CD60D020D030D3E-0D400D46-0D480D4A-0D4C0D570D820D830DCF-0DD10DD8-0DDF0DF20DF30F3E0F3F0F7F102B102C10311038103B103C105610571062-10641067-106D108310841087-108C108F109A-109C17B617BE-17C517C717C81923-19261929-192B193019311933-193819B0-19C019C819C91A19-1A1B1A551A571A611A631A641A6D-1A721B041B351B3B1B3D-1B411B431B441B821BA11BA61BA71BAA1BAC1BAD1BE71BEA-1BEC1BEE1BF21BF31C24-1C2B1C341C351CE11CF21CF3302E302FA823A824A827A880A881A8B4-A8C3A952A953A983A9B4A9B5A9BAA9BBA9BD-A9C0AA2FAA30AA33AA34AA4DAA7BAAEBAAEEAAEFAAF5ABE3ABE4ABE6ABE7ABE9ABEAABEC\",\r\n        Me: \"0488048920DD-20E020E2-20E4A670-A672\",\r\n        N: \"0030-003900B200B300B900BC-00BE0660-066906F0-06F907C0-07C90966-096F09E6-09EF09F4-09F90A66-0A6F0AE6-0AEF0B66-0B6F0B72-0B770BE6-0BF20C66-0C6F0C78-0C7E0CE6-0CEF0D66-0D750E50-0E590ED0-0ED90F20-0F331040-10491090-10991369-137C16EE-16F017E0-17E917F0-17F91810-18191946-194F19D0-19DA1A80-1A891A90-1A991B50-1B591BB0-1BB91C40-1C491C50-1C5920702074-20792080-20892150-21822185-21892460-249B24EA-24FF2776-27932CFD30073021-30293038-303A3192-31953220-32293248-324F3251-325F3280-328932B1-32BFA620-A629A6E6-A6EFA830-A835A8D0-A8D9A900-A909A9D0-A9D9AA50-AA59ABF0-ABF9FF10-FF19\",\r\n        Nd: \"0030-00390660-066906F0-06F907C0-07C90966-096F09E6-09EF0A66-0A6F0AE6-0AEF0B66-0B6F0BE6-0BEF0C66-0C6F0CE6-0CEF0D66-0D6F0E50-0E590ED0-0ED90F20-0F291040-10491090-109917E0-17E91810-18191946-194F19D0-19D91A80-1A891A90-1A991B50-1B591BB0-1BB91C40-1C491C50-1C59A620-A629A8D0-A8D9A900-A909A9D0-A9D9AA50-AA59ABF0-ABF9FF10-FF19\",\r\n        Nl: \"16EE-16F02160-21822185-218830073021-30293038-303AA6E6-A6EF\",\r\n        No: \"00B200B300B900BC-00BE09F4-09F90B72-0B770BF0-0BF20C78-0C7E0D70-0D750F2A-0F331369-137C17F0-17F919DA20702074-20792080-20892150-215F21892460-249B24EA-24FF2776-27932CFD3192-31953220-32293248-324F3251-325F3280-328932B1-32BFA830-A835\",\r\n        P: \"0021-00230025-002A002C-002F003A003B003F0040005B-005D005F007B007D00A100A700AB00B600B700BB00BF037E0387055A-055F0589058A05BE05C005C305C605F305F40609060A060C060D061B061E061F066A-066D06D40700-070D07F7-07F90830-083E085E0964096509700AF00DF40E4F0E5A0E5B0F04-0F120F140F3A-0F3D0F850FD0-0FD40FD90FDA104A-104F10FB1360-13681400166D166E169B169C16EB-16ED1735173617D4-17D617D8-17DA1800-180A194419451A1E1A1F1AA0-1AA61AA8-1AAD1B5A-1B601BFC-1BFF1C3B-1C3F1C7E1C7F1CC0-1CC71CD32010-20272030-20432045-20512053-205E207D207E208D208E2329232A2768-277527C527C627E6-27EF2983-299829D8-29DB29FC29FD2CF9-2CFC2CFE2CFF2D702E00-2E2E2E30-2E3B3001-30033008-30113014-301F3030303D30A030FBA4FEA4FFA60D-A60FA673A67EA6F2-A6F7A874-A877A8CEA8CFA8F8-A8FAA92EA92FA95FA9C1-A9CDA9DEA9DFAA5C-AA5FAADEAADFAAF0AAF1ABEBFD3EFD3FFE10-FE19FE30-FE52FE54-FE61FE63FE68FE6AFE6BFF01-FF03FF05-FF0AFF0C-FF0FFF1AFF1BFF1FFF20FF3B-FF3DFF3FFF5BFF5DFF5F-FF65\",\r\n        Pd: \"002D058A05BE140018062010-20152E172E1A2E3A2E3B301C303030A0FE31FE32FE58FE63FF0D\",\r\n        Ps: \"0028005B007B0F3A0F3C169B201A201E2045207D208D23292768276A276C276E27702772277427C527E627E827EA27EC27EE2983298529872989298B298D298F299129932995299729D829DA29FC2E222E242E262E283008300A300C300E3010301430163018301A301DFD3EFE17FE35FE37FE39FE3BFE3DFE3FFE41FE43FE47FE59FE5BFE5DFF08FF3BFF5BFF5FFF62\",\r\n        Pe: \"0029005D007D0F3B0F3D169C2046207E208E232A2769276B276D276F27712773277527C627E727E927EB27ED27EF298429862988298A298C298E2990299229942996299829D929DB29FD2E232E252E272E293009300B300D300F3011301530173019301B301E301FFD3FFE18FE36FE38FE3AFE3CFE3EFE40FE42FE44FE48FE5AFE5CFE5EFF09FF3DFF5DFF60FF63\",\r\n        Pi: \"00AB2018201B201C201F20392E022E042E092E0C2E1C2E20\",\r\n        Pf: \"00BB2019201D203A2E032E052E0A2E0D2E1D2E21\",\r\n        Pc: \"005F203F20402054FE33FE34FE4D-FE4FFF3F\",\r\n        Po: \"0021-00230025-0027002A002C002E002F003A003B003F0040005C00A100A700B600B700BF037E0387055A-055F058905C005C305C605F305F40609060A060C060D061B061E061F066A-066D06D40700-070D07F7-07F90830-083E085E0964096509700AF00DF40E4F0E5A0E5B0F04-0F120F140F850FD0-0FD40FD90FDA104A-104F10FB1360-1368166D166E16EB-16ED1735173617D4-17D617D8-17DA1800-18051807-180A194419451A1E1A1F1AA0-1AA61AA8-1AAD1B5A-1B601BFC-1BFF1C3B-1C3F1C7E1C7F1CC0-1CC71CD3201620172020-20272030-2038203B-203E2041-20432047-205120532055-205E2CF9-2CFC2CFE2CFF2D702E002E012E06-2E082E0B2E0E-2E162E182E192E1B2E1E2E1F2E2A-2E2E2E30-2E393001-3003303D30FBA4FEA4FFA60D-A60FA673A67EA6F2-A6F7A874-A877A8CEA8CFA8F8-A8FAA92EA92FA95FA9C1-A9CDA9DEA9DFAA5C-AA5FAADEAADFAAF0AAF1ABEBFE10-FE16FE19FE30FE45FE46FE49-FE4CFE50-FE52FE54-FE57FE5F-FE61FE68FE6AFE6BFF01-FF03FF05-FF07FF0AFF0CFF0EFF0FFF1AFF1BFF1FFF20FF3CFF61FF64FF65\",\r\n        S: \"0024002B003C-003E005E0060007C007E00A2-00A600A800A900AC00AE-00B100B400B800D700F702C2-02C502D2-02DF02E5-02EB02ED02EF-02FF03750384038503F60482058F0606-0608060B060E060F06DE06E906FD06FE07F609F209F309FA09FB0AF10B700BF3-0BFA0C7F0D790E3F0F01-0F030F130F15-0F170F1A-0F1F0F340F360F380FBE-0FC50FC7-0FCC0FCE0FCF0FD5-0FD8109E109F1390-139917DB194019DE-19FF1B61-1B6A1B74-1B7C1FBD1FBF-1FC11FCD-1FCF1FDD-1FDF1FED-1FEF1FFD1FFE20442052207A-207C208A-208C20A0-20B9210021012103-21062108210921142116-2118211E-2123212521272129212E213A213B2140-2144214A-214D214F2190-2328232B-23F32400-24262440-244A249C-24E92500-26FF2701-27672794-27C427C7-27E527F0-29822999-29D729DC-29FB29FE-2B4C2B50-2B592CE5-2CEA2E80-2E992E9B-2EF32F00-2FD52FF0-2FFB300430123013302030363037303E303F309B309C319031913196-319F31C0-31E33200-321E322A-324732503260-327F328A-32B032C0-32FE3300-33FF4DC0-4DFFA490-A4C6A700-A716A720A721A789A78AA828-A82BA836-A839AA77-AA79FB29FBB2-FBC1FDFCFDFDFE62FE64-FE66FE69FF04FF0BFF1C-FF1EFF3EFF40FF5CFF5EFFE0-FFE6FFE8-FFEEFFFCFFFD\",\r\n        Sm: \"002B003C-003E007C007E00AC00B100D700F703F60606-060820442052207A-207C208A-208C21182140-2144214B2190-2194219A219B21A021A321A621AE21CE21CF21D221D421F4-22FF2308-230B23202321237C239B-23B323DC-23E125B725C125F8-25FF266F27C0-27C427C7-27E527F0-27FF2900-29822999-29D729DC-29FB29FE-2AFF2B30-2B442B47-2B4CFB29FE62FE64-FE66FF0BFF1C-FF1EFF5CFF5EFFE2FFE9-FFEC\",\r\n        Sc: \"002400A2-00A5058F060B09F209F309FB0AF10BF90E3F17DB20A0-20B9A838FDFCFE69FF04FFE0FFE1FFE5FFE6\",\r\n        Sk: \"005E006000A800AF00B400B802C2-02C502D2-02DF02E5-02EB02ED02EF-02FF0375038403851FBD1FBF-1FC11FCD-1FCF1FDD-1FDF1FED-1FEF1FFD1FFE309B309CA700-A716A720A721A789A78AFBB2-FBC1FF3EFF40FFE3\",\r\n        So: \"00A600A900AE00B00482060E060F06DE06E906FD06FE07F609FA0B700BF3-0BF80BFA0C7F0D790F01-0F030F130F15-0F170F1A-0F1F0F340F360F380FBE-0FC50FC7-0FCC0FCE0FCF0FD5-0FD8109E109F1390-1399194019DE-19FF1B61-1B6A1B74-1B7C210021012103-210621082109211421162117211E-2123212521272129212E213A213B214A214C214D214F2195-2199219C-219F21A121A221A421A521A7-21AD21AF-21CD21D021D121D321D5-21F32300-2307230C-231F2322-2328232B-237B237D-239A23B4-23DB23E2-23F32400-24262440-244A249C-24E92500-25B625B8-25C025C2-25F72600-266E2670-26FF2701-27672794-27BF2800-28FF2B00-2B2F2B452B462B50-2B592CE5-2CEA2E80-2E992E9B-2EF32F00-2FD52FF0-2FFB300430123013302030363037303E303F319031913196-319F31C0-31E33200-321E322A-324732503260-327F328A-32B032C0-32FE3300-33FF4DC0-4DFFA490-A4C6A828-A82BA836A837A839AA77-AA79FDFDFFE4FFE8FFEDFFEEFFFCFFFD\",\r\n        Z: \"002000A01680180E2000-200A20282029202F205F3000\",\r\n        Zs: \"002000A01680180E2000-200A202F205F3000\",\r\n        Zl: \"2028\",\r\n        Zp: \"2029\",\r\n        C: \"0000-001F007F-009F00AD03780379037F-0383038B038D03A20528-05300557055805600588058B-058E059005C8-05CF05EB-05EF05F5-0605061C061D06DD070E070F074B074C07B2-07BF07FB-07FF082E082F083F085C085D085F-089F08A108AD-08E308FF097809800984098D098E0991099209A909B109B3-09B509BA09BB09C509C609C909CA09CF-09D609D8-09DB09DE09E409E509FC-0A000A040A0B-0A0E0A110A120A290A310A340A370A3A0A3B0A3D0A43-0A460A490A4A0A4E-0A500A52-0A580A5D0A5F-0A650A76-0A800A840A8E0A920AA90AB10AB40ABA0ABB0AC60ACA0ACE0ACF0AD1-0ADF0AE40AE50AF2-0B000B040B0D0B0E0B110B120B290B310B340B3A0B3B0B450B460B490B4A0B4E-0B550B58-0B5B0B5E0B640B650B78-0B810B840B8B-0B8D0B910B96-0B980B9B0B9D0BA0-0BA20BA5-0BA70BAB-0BAD0BBA-0BBD0BC3-0BC50BC90BCE0BCF0BD1-0BD60BD8-0BE50BFB-0C000C040C0D0C110C290C340C3A-0C3C0C450C490C4E-0C540C570C5A-0C5F0C640C650C70-0C770C800C810C840C8D0C910CA90CB40CBA0CBB0CC50CC90CCE-0CD40CD7-0CDD0CDF0CE40CE50CF00CF3-0D010D040D0D0D110D3B0D3C0D450D490D4F-0D560D58-0D5F0D640D650D76-0D780D800D810D840D97-0D990DB20DBC0DBE0DBF0DC7-0DC90DCB-0DCE0DD50DD70DE0-0DF10DF5-0E000E3B-0E3E0E5C-0E800E830E850E860E890E8B0E8C0E8E-0E930E980EA00EA40EA60EA80EA90EAC0EBA0EBE0EBF0EC50EC70ECE0ECF0EDA0EDB0EE0-0EFF0F480F6D-0F700F980FBD0FCD0FDB-0FFF10C610C8-10CC10CE10CF1249124E124F12571259125E125F1289128E128F12B112B612B712BF12C112C612C712D7131113161317135B135C137D-137F139A-139F13F5-13FF169D-169F16F1-16FF170D1715-171F1737-173F1754-175F176D17711774-177F17DE17DF17EA-17EF17FA-17FF180F181A-181F1878-187F18AB-18AF18F6-18FF191D-191F192C-192F193C-193F1941-1943196E196F1975-197F19AC-19AF19CA-19CF19DB-19DD1A1C1A1D1A5F1A7D1A7E1A8A-1A8F1A9A-1A9F1AAE-1AFF1B4C-1B4F1B7D-1B7F1BF4-1BFB1C38-1C3A1C4A-1C4C1C80-1CBF1CC8-1CCF1CF7-1CFF1DE7-1DFB1F161F171F1E1F1F1F461F471F4E1F4F1F581F5A1F5C1F5E1F7E1F7F1FB51FC51FD41FD51FDC1FF01FF11FF51FFF200B-200F202A-202E2060-206F20722073208F209D-209F20BA-20CF20F1-20FF218A-218F23F4-23FF2427-243F244B-245F27002B4D-2B4F2B5A-2BFF2C2F2C5F2CF4-2CF82D262D28-2D2C2D2E2D2F2D68-2D6E2D71-2D7E2D97-2D9F2DA72DAF2DB72DBF2DC72DCF2DD72DDF2E3C-2E7F2E9A2EF4-2EFF2FD6-2FEF2FFC-2FFF3040309730983100-3104312E-3130318F31BB-31BF31E4-31EF321F32FF4DB6-4DBF9FCD-9FFFA48D-A48FA4C7-A4CFA62C-A63FA698-A69EA6F8-A6FFA78FA794-A79FA7AB-A7F7A82C-A82FA83A-A83FA878-A87FA8C5-A8CDA8DA-A8DFA8FC-A8FFA954-A95EA97D-A97FA9CEA9DA-A9DDA9E0-A9FFAA37-AA3FAA4EAA4FAA5AAA5BAA7C-AA7FAAC3-AADAAAF7-AB00AB07AB08AB0FAB10AB17-AB1FAB27AB2F-ABBFABEEABEFABFA-ABFFD7A4-D7AFD7C7-D7CAD7FC-F8FFFA6EFA6FFADA-FAFFFB07-FB12FB18-FB1CFB37FB3DFB3FFB42FB45FBC2-FBD2FD40-FD4FFD90FD91FDC8-FDEFFDFEFDFFFE1A-FE1FFE27-FE2FFE53FE67FE6C-FE6FFE75FEFD-FF00FFBF-FFC1FFC8FFC9FFD0FFD1FFD8FFD9FFDD-FFDFFFE7FFEF-FFFBFFFEFFFF\",\r\n        Cc: \"0000-001F007F-009F\",\r\n        Cf: \"00AD0600-060406DD070F200B-200F202A-202E2060-2064206A-206FFEFFFFF9-FFFB\",\r\n        Co: \"E000-F8FF\",\r\n        Cs: \"D800-DFFF\",\r\n        Cn: \"03780379037F-0383038B038D03A20528-05300557055805600588058B-058E059005C8-05CF05EB-05EF05F5-05FF0605061C061D070E074B074C07B2-07BF07FB-07FF082E082F083F085C085D085F-089F08A108AD-08E308FF097809800984098D098E0991099209A909B109B3-09B509BA09BB09C509C609C909CA09CF-09D609D8-09DB09DE09E409E509FC-0A000A040A0B-0A0E0A110A120A290A310A340A370A3A0A3B0A3D0A43-0A460A490A4A0A4E-0A500A52-0A580A5D0A5F-0A650A76-0A800A840A8E0A920AA90AB10AB40ABA0ABB0AC60ACA0ACE0ACF0AD1-0ADF0AE40AE50AF2-0B000B040B0D0B0E0B110B120B290B310B340B3A0B3B0B450B460B490B4A0B4E-0B550B58-0B5B0B5E0B640B650B78-0B810B840B8B-0B8D0B910B96-0B980B9B0B9D0BA0-0BA20BA5-0BA70BAB-0BAD0BBA-0BBD0BC3-0BC50BC90BCE0BCF0BD1-0BD60BD8-0BE50BFB-0C000C040C0D0C110C290C340C3A-0C3C0C450C490C4E-0C540C570C5A-0C5F0C640C650C70-0C770C800C810C840C8D0C910CA90CB40CBA0CBB0CC50CC90CCE-0CD40CD7-0CDD0CDF0CE40CE50CF00CF3-0D010D040D0D0D110D3B0D3C0D450D490D4F-0D560D58-0D5F0D640D650D76-0D780D800D810D840D97-0D990DB20DBC0DBE0DBF0DC7-0DC90DCB-0DCE0DD50DD70DE0-0DF10DF5-0E000E3B-0E3E0E5C-0E800E830E850E860E890E8B0E8C0E8E-0E930E980EA00EA40EA60EA80EA90EAC0EBA0EBE0EBF0EC50EC70ECE0ECF0EDA0EDB0EE0-0EFF0F480F6D-0F700F980FBD0FCD0FDB-0FFF10C610C8-10CC10CE10CF1249124E124F12571259125E125F1289128E128F12B112B612B712BF12C112C612C712D7131113161317135B135C137D-137F139A-139F13F5-13FF169D-169F16F1-16FF170D1715-171F1737-173F1754-175F176D17711774-177F17DE17DF17EA-17EF17FA-17FF180F181A-181F1878-187F18AB-18AF18F6-18FF191D-191F192C-192F193C-193F1941-1943196E196F1975-197F19AC-19AF19CA-19CF19DB-19DD1A1C1A1D1A5F1A7D1A7E1A8A-1A8F1A9A-1A9F1AAE-1AFF1B4C-1B4F1B7D-1B7F1BF4-1BFB1C38-1C3A1C4A-1C4C1C80-1CBF1CC8-1CCF1CF7-1CFF1DE7-1DFB1F161F171F1E1F1F1F461F471F4E1F4F1F581F5A1F5C1F5E1F7E1F7F1FB51FC51FD41FD51FDC1FF01FF11FF51FFF2065-206920722073208F209D-209F20BA-20CF20F1-20FF218A-218F23F4-23FF2427-243F244B-245F27002B4D-2B4F2B5A-2BFF2C2F2C5F2CF4-2CF82D262D28-2D2C2D2E2D2F2D68-2D6E2D71-2D7E2D97-2D9F2DA72DAF2DB72DBF2DC72DCF2DD72DDF2E3C-2E7F2E9A2EF4-2EFF2FD6-2FEF2FFC-2FFF3040309730983100-3104312E-3130318F31BB-31BF31E4-31EF321F32FF4DB6-4DBF9FCD-9FFFA48D-A48FA4C7-A4CFA62C-A63FA698-A69EA6F8-A6FFA78FA794-A79FA7AB-A7F7A82C-A82FA83A-A83FA878-A87FA8C5-A8CDA8DA-A8DFA8FC-A8FFA954-A95EA97D-A97FA9CEA9DA-A9DDA9E0-A9FFAA37-AA3FAA4EAA4FAA5AAA5BAA7C-AA7FAAC3-AADAAAF7-AB00AB07AB08AB0FAB10AB17-AB1FAB27AB2F-ABBFABEEABEFABFA-ABFFD7A4-D7AFD7C7-D7CAD7FC-D7FFFA6EFA6FFADA-FAFFFB07-FB12FB18-FB1CFB37FB3DFB3FFB42FB45FBC2-FBD2FD40-FD4FFD90FD91FDC8-FDEFFDFEFDFFFE1A-FE1FFE27-FE2FFE53FE67FE6C-FE6FFE75FEFDFEFEFF00FFBF-FFC1FFC8FFC9FFD0FFD1FFD8FFD9FFDD-FFDFFFE7FFEF-FFF8FFFEFFFF\"\r\n    }, {\r\n        //L: \"Letter\", // Included in the Unicode Base addon\r\n        Ll: \"Lowercase_Letter\",\r\n        Lu: \"Uppercase_Letter\",\r\n        Lt: \"Titlecase_Letter\",\r\n        Lm: \"Modifier_Letter\",\r\n        Lo: \"Other_Letter\",\r\n        M: \"Mark\",\r\n        Mn: \"Nonspacing_Mark\",\r\n        Mc: \"Spacing_Mark\",\r\n        Me: \"Enclosing_Mark\",\r\n        N: \"Number\",\r\n        Nd: \"Decimal_Number\",\r\n        Nl: \"Letter_Number\",\r\n        No: \"Other_Number\",\r\n        P: \"Punctuation\",\r\n        Pd: \"Dash_Punctuation\",\r\n        Ps: \"Open_Punctuation\",\r\n        Pe: \"Close_Punctuation\",\r\n        Pi: \"Initial_Punctuation\",\r\n        Pf: \"Final_Punctuation\",\r\n        Pc: \"Connector_Punctuation\",\r\n        Po: \"Other_Punctuation\",\r\n        S: \"Symbol\",\r\n        Sm: \"Math_Symbol\",\r\n        Sc: \"Currency_Symbol\",\r\n        Sk: \"Modifier_Symbol\",\r\n        So: \"Other_Symbol\",\r\n        Z: \"Separator\",\r\n        Zs: \"Space_Separator\",\r\n        Zl: \"Line_Separator\",\r\n        Zp: \"Paragraph_Separator\",\r\n        C: \"Other\",\r\n        Cc: \"Control\",\r\n        Cf: \"Format\",\r\n        Co: \"Private_Use\",\r\n        Cs: \"Surrogate\",\r\n        Cn: \"Unassigned\"\r\n    });\r\n\r\n}(XRegExp));\r\n\r\n\n/***** unicode-scripts.js *****/\n\n/*!\r\n * XRegExp Unicode Scripts v1.2.0\r\n * (c) 2010-2012 Steven Levithan <http://xregexp.com/>\r\n * MIT License\r\n * Uses Unicode 6.1 <http://unicode.org/>\r\n */\r\n\r\n/**\r\n * Adds support for all Unicode scripts in the Basic Multilingual Plane (U+0000-U+FFFF).\r\n * E.g., `\\p{Latin}`. Token names are case insensitive, and any spaces, hyphens, and underscores\r\n * are ignored.\r\n * @requires XRegExp, XRegExp Unicode Base\r\n */\r\n(function (XRegExp) {\r\n    \"use strict\";\r\n\r\n    if (!XRegExp.addUnicodePackage) {\r\n        throw new ReferenceError(\"Unicode Base must be loaded before Unicode Scripts\");\r\n    }\r\n\r\n    XRegExp.install(\"extensibility\");\r\n\r\n    XRegExp.addUnicodePackage({\r\n        Arabic: \"0600-06040606-060B060D-061A061E0620-063F0641-064A0656-065E066A-066F0671-06DC06DE-06FF0750-077F08A008A2-08AC08E4-08FEFB50-FBC1FBD3-FD3DFD50-FD8FFD92-FDC7FDF0-FDFCFE70-FE74FE76-FEFC\",\r\n        Armenian: \"0531-05560559-055F0561-0587058A058FFB13-FB17\",\r\n        Balinese: \"1B00-1B4B1B50-1B7C\",\r\n        Bamum: \"A6A0-A6F7\",\r\n        Batak: \"1BC0-1BF31BFC-1BFF\",\r\n        Bengali: \"0981-09830985-098C098F09900993-09A809AA-09B009B209B6-09B909BC-09C409C709C809CB-09CE09D709DC09DD09DF-09E309E6-09FB\",\r\n        Bopomofo: \"02EA02EB3105-312D31A0-31BA\",\r\n        Braille: \"2800-28FF\",\r\n        Buginese: \"1A00-1A1B1A1E1A1F\",\r\n        Buhid: \"1740-1753\",\r\n        Canadian_Aboriginal: \"1400-167F18B0-18F5\",\r\n        Cham: \"AA00-AA36AA40-AA4DAA50-AA59AA5C-AA5F\",\r\n        Cherokee: \"13A0-13F4\",\r\n        Common: \"0000-0040005B-0060007B-00A900AB-00B900BB-00BF00D700F702B9-02DF02E5-02E902EC-02FF0374037E038503870589060C061B061F06400660-066906DD096409650E3F0FD5-0FD810FB16EB-16ED173517361802180318051CD31CE11CE9-1CEC1CEE-1CF31CF51CF62000-200B200E-2064206A-20702074-207E2080-208E20A0-20B92100-21252127-2129212C-21312133-214D214F-215F21892190-23F32400-24262440-244A2460-26FF2701-27FF2900-2B4C2B50-2B592E00-2E3B2FF0-2FFB3000-300430063008-30203030-3037303C-303F309B309C30A030FB30FC3190-319F31C0-31E33220-325F327F-32CF3358-33FF4DC0-4DFFA700-A721A788-A78AA830-A839FD3EFD3FFDFDFE10-FE19FE30-FE52FE54-FE66FE68-FE6BFEFFFF01-FF20FF3B-FF40FF5B-FF65FF70FF9EFF9FFFE0-FFE6FFE8-FFEEFFF9-FFFD\",\r\n        Coptic: \"03E2-03EF2C80-2CF32CF9-2CFF\",\r\n        Cyrillic: \"0400-04840487-05271D2B1D782DE0-2DFFA640-A697A69F\",\r\n        Devanagari: \"0900-09500953-09630966-09770979-097FA8E0-A8FB\",\r\n        Ethiopic: \"1200-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A135D-137C1380-13992D80-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDEAB01-AB06AB09-AB0EAB11-AB16AB20-AB26AB28-AB2E\",\r\n        Georgian: \"10A0-10C510C710CD10D0-10FA10FC-10FF2D00-2D252D272D2D\",\r\n        Glagolitic: \"2C00-2C2E2C30-2C5E\",\r\n        Greek: \"0370-03730375-0377037A-037D038403860388-038A038C038E-03A103A3-03E103F0-03FF1D26-1D2A1D5D-1D611D66-1D6A1DBF1F00-1F151F18-1F1D1F20-1F451F48-1F4D1F50-1F571F591F5B1F5D1F5F-1F7D1F80-1FB41FB6-1FC41FC6-1FD31FD6-1FDB1FDD-1FEF1FF2-1FF41FF6-1FFE2126\",\r\n        Gujarati: \"0A81-0A830A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABC-0AC50AC7-0AC90ACB-0ACD0AD00AE0-0AE30AE6-0AF1\",\r\n        Gurmukhi: \"0A01-0A030A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A3C0A3E-0A420A470A480A4B-0A4D0A510A59-0A5C0A5E0A66-0A75\",\r\n        Han: \"2E80-2E992E9B-2EF32F00-2FD5300530073021-30293038-303B3400-4DB54E00-9FCCF900-FA6DFA70-FAD9\",\r\n        Hangul: \"1100-11FF302E302F3131-318E3200-321E3260-327EA960-A97CAC00-D7A3D7B0-D7C6D7CB-D7FBFFA0-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDC\",\r\n        Hanunoo: \"1720-1734\",\r\n        Hebrew: \"0591-05C705D0-05EA05F0-05F4FB1D-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FB4F\",\r\n        Hiragana: \"3041-3096309D-309F\",\r\n        Inherited: \"0300-036F04850486064B-0655065F0670095109521CD0-1CD21CD4-1CE01CE2-1CE81CED1CF41DC0-1DE61DFC-1DFF200C200D20D0-20F0302A-302D3099309AFE00-FE0FFE20-FE26\",\r\n        Javanese: \"A980-A9CDA9CF-A9D9A9DEA9DF\",\r\n        Kannada: \"0C820C830C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBC-0CC40CC6-0CC80CCA-0CCD0CD50CD60CDE0CE0-0CE30CE6-0CEF0CF10CF2\",\r\n        Katakana: \"30A1-30FA30FD-30FF31F0-31FF32D0-32FE3300-3357FF66-FF6FFF71-FF9D\",\r\n        Kayah_Li: \"A900-A92F\",\r\n        Khmer: \"1780-17DD17E0-17E917F0-17F919E0-19FF\",\r\n        Lao: \"0E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB90EBB-0EBD0EC0-0EC40EC60EC8-0ECD0ED0-0ED90EDC-0EDF\",\r\n        Latin: \"0041-005A0061-007A00AA00BA00C0-00D600D8-00F600F8-02B802E0-02E41D00-1D251D2C-1D5C1D62-1D651D6B-1D771D79-1DBE1E00-1EFF2071207F2090-209C212A212B2132214E2160-21882C60-2C7FA722-A787A78B-A78EA790-A793A7A0-A7AAA7F8-A7FFFB00-FB06FF21-FF3AFF41-FF5A\",\r\n        Lepcha: \"1C00-1C371C3B-1C491C4D-1C4F\",\r\n        Limbu: \"1900-191C1920-192B1930-193B19401944-194F\",\r\n        Lisu: \"A4D0-A4FF\",\r\n        Malayalam: \"0D020D030D05-0D0C0D0E-0D100D12-0D3A0D3D-0D440D46-0D480D4A-0D4E0D570D60-0D630D66-0D750D79-0D7F\",\r\n        Mandaic: \"0840-085B085E\",\r\n        Meetei_Mayek: \"AAE0-AAF6ABC0-ABEDABF0-ABF9\",\r\n        Mongolian: \"1800180118041806-180E1810-18191820-18771880-18AA\",\r\n        Myanmar: \"1000-109FAA60-AA7B\",\r\n        New_Tai_Lue: \"1980-19AB19B0-19C919D0-19DA19DE19DF\",\r\n        Nko: \"07C0-07FA\",\r\n        Ogham: \"1680-169C\",\r\n        Ol_Chiki: \"1C50-1C7F\",\r\n        Oriya: \"0B01-0B030B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3C-0B440B470B480B4B-0B4D0B560B570B5C0B5D0B5F-0B630B66-0B77\",\r\n        Phags_Pa: \"A840-A877\",\r\n        Rejang: \"A930-A953A95F\",\r\n        Runic: \"16A0-16EA16EE-16F0\",\r\n        Samaritan: \"0800-082D0830-083E\",\r\n        Saurashtra: \"A880-A8C4A8CE-A8D9\",\r\n        Sinhala: \"0D820D830D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60DCA0DCF-0DD40DD60DD8-0DDF0DF2-0DF4\",\r\n        Sundanese: \"1B80-1BBF1CC0-1CC7\",\r\n        Syloti_Nagri: \"A800-A82B\",\r\n        Syriac: \"0700-070D070F-074A074D-074F\",\r\n        Tagalog: \"1700-170C170E-1714\",\r\n        Tagbanwa: \"1760-176C176E-177017721773\",\r\n        Tai_Le: \"1950-196D1970-1974\",\r\n        Tai_Tham: \"1A20-1A5E1A60-1A7C1A7F-1A891A90-1A991AA0-1AAD\",\r\n        Tai_Viet: \"AA80-AAC2AADB-AADF\",\r\n        Tamil: \"0B820B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BBE-0BC20BC6-0BC80BCA-0BCD0BD00BD70BE6-0BFA\",\r\n        Telugu: \"0C01-0C030C05-0C0C0C0E-0C100C12-0C280C2A-0C330C35-0C390C3D-0C440C46-0C480C4A-0C4D0C550C560C580C590C60-0C630C66-0C6F0C78-0C7F\",\r\n        Thaana: \"0780-07B1\",\r\n        Thai: \"0E01-0E3A0E40-0E5B\",\r\n        Tibetan: \"0F00-0F470F49-0F6C0F71-0F970F99-0FBC0FBE-0FCC0FCE-0FD40FD90FDA\",\r\n        Tifinagh: \"2D30-2D672D6F2D702D7F\",\r\n        Vai: \"A500-A62B\",\r\n        Yi: \"A000-A48CA490-A4C6\"\r\n    });\r\n\r\n}(XRegExp));\r\n\r\n\n/***** unicode-blocks.js *****/\n\n/*!\r\n * XRegExp Unicode Blocks v1.2.0\r\n * (c) 2010-2012 Steven Levithan <http://xregexp.com/>\r\n * MIT License\r\n * Uses Unicode 6.1 <http://unicode.org/>\r\n */\r\n\r\n/**\r\n * Adds support for all Unicode blocks in the Basic Multilingual Plane (U+0000-U+FFFF). Unicode\r\n * blocks use the prefix \"In\". E.g., `\\p{InBasicLatin}`. Token names are case insensitive, and any\r\n * spaces, hyphens, and underscores are ignored.\r\n * @requires XRegExp, XRegExp Unicode Base\r\n */\r\n(function (XRegExp) {\r\n    \"use strict\";\r\n\r\n    if (!XRegExp.addUnicodePackage) {\r\n        throw new ReferenceError(\"Unicode Base must be loaded before Unicode Blocks\");\r\n    }\r\n\r\n    XRegExp.install(\"extensibility\");\r\n\r\n    XRegExp.addUnicodePackage({\r\n        InBasic_Latin: \"0000-007F\",\r\n        InLatin_1_Supplement: \"0080-00FF\",\r\n        InLatin_Extended_A: \"0100-017F\",\r\n        InLatin_Extended_B: \"0180-024F\",\r\n        InIPA_Extensions: \"0250-02AF\",\r\n        InSpacing_Modifier_Letters: \"02B0-02FF\",\r\n        InCombining_Diacritical_Marks: \"0300-036F\",\r\n        InGreek_and_Coptic: \"0370-03FF\",\r\n        InCyrillic: \"0400-04FF\",\r\n        InCyrillic_Supplement: \"0500-052F\",\r\n        InArmenian: \"0530-058F\",\r\n        InHebrew: \"0590-05FF\",\r\n        InArabic: \"0600-06FF\",\r\n        InSyriac: \"0700-074F\",\r\n        InArabic_Supplement: \"0750-077F\",\r\n        InThaana: \"0780-07BF\",\r\n        InNKo: \"07C0-07FF\",\r\n        InSamaritan: \"0800-083F\",\r\n        InMandaic: \"0840-085F\",\r\n        InArabic_Extended_A: \"08A0-08FF\",\r\n        InDevanagari: \"0900-097F\",\r\n        InBengali: \"0980-09FF\",\r\n        InGurmukhi: \"0A00-0A7F\",\r\n        InGujarati: \"0A80-0AFF\",\r\n        InOriya: \"0B00-0B7F\",\r\n        InTamil: \"0B80-0BFF\",\r\n        InTelugu: \"0C00-0C7F\",\r\n        InKannada: \"0C80-0CFF\",\r\n        InMalayalam: \"0D00-0D7F\",\r\n        InSinhala: \"0D80-0DFF\",\r\n        InThai: \"0E00-0E7F\",\r\n        InLao: \"0E80-0EFF\",\r\n        InTibetan: \"0F00-0FFF\",\r\n        InMyanmar: \"1000-109F\",\r\n        InGeorgian: \"10A0-10FF\",\r\n        InHangul_Jamo: \"1100-11FF\",\r\n        InEthiopic: \"1200-137F\",\r\n        InEthiopic_Supplement: \"1380-139F\",\r\n        InCherokee: \"13A0-13FF\",\r\n        InUnified_Canadian_Aboriginal_Syllabics: \"1400-167F\",\r\n        InOgham: \"1680-169F\",\r\n        InRunic: \"16A0-16FF\",\r\n        InTagalog: \"1700-171F\",\r\n        InHanunoo: \"1720-173F\",\r\n        InBuhid: \"1740-175F\",\r\n        InTagbanwa: \"1760-177F\",\r\n        InKhmer: \"1780-17FF\",\r\n        InMongolian: \"1800-18AF\",\r\n        InUnified_Canadian_Aboriginal_Syllabics_Extended: \"18B0-18FF\",\r\n        InLimbu: \"1900-194F\",\r\n        InTai_Le: \"1950-197F\",\r\n        InNew_Tai_Lue: \"1980-19DF\",\r\n        InKhmer_Symbols: \"19E0-19FF\",\r\n        InBuginese: \"1A00-1A1F\",\r\n        InTai_Tham: \"1A20-1AAF\",\r\n        InBalinese: \"1B00-1B7F\",\r\n        InSundanese: \"1B80-1BBF\",\r\n        InBatak: \"1BC0-1BFF\",\r\n        InLepcha: \"1C00-1C4F\",\r\n        InOl_Chiki: \"1C50-1C7F\",\r\n        InSundanese_Supplement: \"1CC0-1CCF\",\r\n        InVedic_Extensions: \"1CD0-1CFF\",\r\n        InPhonetic_Extensions: \"1D00-1D7F\",\r\n        InPhonetic_Extensions_Supplement: \"1D80-1DBF\",\r\n        InCombining_Diacritical_Marks_Supplement: \"1DC0-1DFF\",\r\n        InLatin_Extended_Additional: \"1E00-1EFF\",\r\n        InGreek_Extended: \"1F00-1FFF\",\r\n        InGeneral_Punctuation: \"2000-206F\",\r\n        InSuperscripts_and_Subscripts: \"2070-209F\",\r\n        InCurrency_Symbols: \"20A0-20CF\",\r\n        InCombining_Diacritical_Marks_for_Symbols: \"20D0-20FF\",\r\n        InLetterlike_Symbols: \"2100-214F\",\r\n        InNumber_Forms: \"2150-218F\",\r\n        InArrows: \"2190-21FF\",\r\n        InMathematical_Operators: \"2200-22FF\",\r\n        InMiscellaneous_Technical: \"2300-23FF\",\r\n        InControl_Pictures: \"2400-243F\",\r\n        InOptical_Character_Recognition: \"2440-245F\",\r\n        InEnclosed_Alphanumerics: \"2460-24FF\",\r\n        InBox_Drawing: \"2500-257F\",\r\n        InBlock_Elements: \"2580-259F\",\r\n        InGeometric_Shapes: \"25A0-25FF\",\r\n        InMiscellaneous_Symbols: \"2600-26FF\",\r\n        InDingbats: \"2700-27BF\",\r\n        InMiscellaneous_Mathematical_Symbols_A: \"27C0-27EF\",\r\n        InSupplemental_Arrows_A: \"27F0-27FF\",\r\n        InBraille_Patterns: \"2800-28FF\",\r\n        InSupplemental_Arrows_B: \"2900-297F\",\r\n        InMiscellaneous_Mathematical_Symbols_B: \"2980-29FF\",\r\n        InSupplemental_Mathematical_Operators: \"2A00-2AFF\",\r\n        InMiscellaneous_Symbols_and_Arrows: \"2B00-2BFF\",\r\n        InGlagolitic: \"2C00-2C5F\",\r\n        InLatin_Extended_C: \"2C60-2C7F\",\r\n        InCoptic: \"2C80-2CFF\",\r\n        InGeorgian_Supplement: \"2D00-2D2F\",\r\n        InTifinagh: \"2D30-2D7F\",\r\n        InEthiopic_Extended: \"2D80-2DDF\",\r\n        InCyrillic_Extended_A: \"2DE0-2DFF\",\r\n        InSupplemental_Punctuation: \"2E00-2E7F\",\r\n        InCJK_Radicals_Supplement: \"2E80-2EFF\",\r\n        InKangxi_Radicals: \"2F00-2FDF\",\r\n        InIdeographic_Description_Characters: \"2FF0-2FFF\",\r\n        InCJK_Symbols_and_Punctuation: \"3000-303F\",\r\n        InHiragana: \"3040-309F\",\r\n        InKatakana: \"30A0-30FF\",\r\n        InBopomofo: \"3100-312F\",\r\n        InHangul_Compatibility_Jamo: \"3130-318F\",\r\n        InKanbun: \"3190-319F\",\r\n        InBopomofo_Extended: \"31A0-31BF\",\r\n        InCJK_Strokes: \"31C0-31EF\",\r\n        InKatakana_Phonetic_Extensions: \"31F0-31FF\",\r\n        InEnclosed_CJK_Letters_and_Months: \"3200-32FF\",\r\n        InCJK_Compatibility: \"3300-33FF\",\r\n        InCJK_Unified_Ideographs_Extension_A: \"3400-4DBF\",\r\n        InYijing_Hexagram_Symbols: \"4DC0-4DFF\",\r\n        InCJK_Unified_Ideographs: \"4E00-9FFF\",\r\n        InYi_Syllables: \"A000-A48F\",\r\n        InYi_Radicals: \"A490-A4CF\",\r\n        InLisu: \"A4D0-A4FF\",\r\n        InVai: \"A500-A63F\",\r\n        InCyrillic_Extended_B: \"A640-A69F\",\r\n        InBamum: \"A6A0-A6FF\",\r\n        InModifier_Tone_Letters: \"A700-A71F\",\r\n        InLatin_Extended_D: \"A720-A7FF\",\r\n        InSyloti_Nagri: \"A800-A82F\",\r\n        InCommon_Indic_Number_Forms: \"A830-A83F\",\r\n        InPhags_pa: \"A840-A87F\",\r\n        InSaurashtra: \"A880-A8DF\",\r\n        InDevanagari_Extended: \"A8E0-A8FF\",\r\n        InKayah_Li: \"A900-A92F\",\r\n        InRejang: \"A930-A95F\",\r\n        InHangul_Jamo_Extended_A: \"A960-A97F\",\r\n        InJavanese: \"A980-A9DF\",\r\n        InCham: \"AA00-AA5F\",\r\n        InMyanmar_Extended_A: \"AA60-AA7F\",\r\n        InTai_Viet: \"AA80-AADF\",\r\n        InMeetei_Mayek_Extensions: \"AAE0-AAFF\",\r\n        InEthiopic_Extended_A: \"AB00-AB2F\",\r\n        InMeetei_Mayek: \"ABC0-ABFF\",\r\n        InHangul_Syllables: \"AC00-D7AF\",\r\n        InHangul_Jamo_Extended_B: \"D7B0-D7FF\",\r\n        InHigh_Surrogates: \"D800-DB7F\",\r\n        InHigh_Private_Use_Surrogates: \"DB80-DBFF\",\r\n        InLow_Surrogates: \"DC00-DFFF\",\r\n        InPrivate_Use_Area: \"E000-F8FF\",\r\n        InCJK_Compatibility_Ideographs: \"F900-FAFF\",\r\n        InAlphabetic_Presentation_Forms: \"FB00-FB4F\",\r\n        InArabic_Presentation_Forms_A: \"FB50-FDFF\",\r\n        InVariation_Selectors: \"FE00-FE0F\",\r\n        InVertical_Forms: \"FE10-FE1F\",\r\n        InCombining_Half_Marks: \"FE20-FE2F\",\r\n        InCJK_Compatibility_Forms: \"FE30-FE4F\",\r\n        InSmall_Form_Variants: \"FE50-FE6F\",\r\n        InArabic_Presentation_Forms_B: \"FE70-FEFF\",\r\n        InHalfwidth_and_Fullwidth_Forms: \"FF00-FFEF\",\r\n        InSpecials: \"FFF0-FFFF\"\r\n    });\r\n\r\n}(XRegExp));\r\n\r\n\n/***** unicode-properties.js *****/\n\n/*!\r\n * XRegExp Unicode Properties v1.0.0\r\n * (c) 2012 Steven Levithan <http://xregexp.com/>\r\n * MIT License\r\n * Uses Unicode 6.1 <http://unicode.org/>\r\n */\r\n\r\n/**\r\n * Adds Unicode properties necessary to meet Level 1 Unicode support (detailed in UTS#18 RL1.2).\r\n * Includes code points from the Basic Multilingual Plane (U+0000-U+FFFF) only. Token names are\r\n * case insensitive, and any spaces, hyphens, and underscores are ignored.\r\n * @requires XRegExp, XRegExp Unicode Base\r\n */\r\n(function (XRegExp) {\r\n    \"use strict\";\r\n\r\n    if (!XRegExp.addUnicodePackage) {\r\n        throw new ReferenceError(\"Unicode Base must be loaded before Unicode Properties\");\r\n    }\r\n\r\n    XRegExp.install(\"extensibility\");\r\n\r\n    XRegExp.addUnicodePackage({\r\n        Alphabetic: \"0041-005A0061-007A00AA00B500BA00C0-00D600D8-00F600F8-02C102C6-02D102E0-02E402EC02EE03450370-037403760377037A-037D03860388-038A038C038E-03A103A3-03F503F7-0481048A-05270531-055605590561-058705B0-05BD05BF05C105C205C405C505C705D0-05EA05F0-05F20610-061A0620-06570659-065F066E-06D306D5-06DC06E1-06E806ED-06EF06FA-06FC06FF0710-073F074D-07B107CA-07EA07F407F507FA0800-0817081A-082C0840-085808A008A2-08AC08E4-08E908F0-08FE0900-093B093D-094C094E-09500955-09630971-09770979-097F0981-09830985-098C098F09900993-09A809AA-09B009B209B6-09B909BD-09C409C709C809CB09CC09CE09D709DC09DD09DF-09E309F009F10A01-0A030A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A3E-0A420A470A480A4B0A4C0A510A59-0A5C0A5E0A70-0A750A81-0A830A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABD-0AC50AC7-0AC90ACB0ACC0AD00AE0-0AE30B01-0B030B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3D-0B440B470B480B4B0B4C0B560B570B5C0B5D0B5F-0B630B710B820B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BBE-0BC20BC6-0BC80BCA-0BCC0BD00BD70C01-0C030C05-0C0C0C0E-0C100C12-0C280C2A-0C330C35-0C390C3D-0C440C46-0C480C4A-0C4C0C550C560C580C590C60-0C630C820C830C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBD-0CC40CC6-0CC80CCA-0CCC0CD50CD60CDE0CE0-0CE30CF10CF20D020D030D05-0D0C0D0E-0D100D12-0D3A0D3D-0D440D46-0D480D4A-0D4C0D4E0D570D60-0D630D7A-0D7F0D820D830D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60DCF-0DD40DD60DD8-0DDF0DF20DF30E01-0E3A0E40-0E460E4D0E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB90EBB-0EBD0EC0-0EC40EC60ECD0EDC-0EDF0F000F40-0F470F49-0F6C0F71-0F810F88-0F970F99-0FBC1000-10361038103B-103F1050-10621065-1068106E-1086108E109C109D10A0-10C510C710CD10D0-10FA10FC-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A135F1380-138F13A0-13F41401-166C166F-167F1681-169A16A0-16EA16EE-16F01700-170C170E-17131720-17331740-17531760-176C176E-1770177217731780-17B317B6-17C817D717DC1820-18771880-18AA18B0-18F51900-191C1920-192B1930-19381950-196D1970-19741980-19AB19B0-19C91A00-1A1B1A20-1A5E1A61-1A741AA71B00-1B331B35-1B431B45-1B4B1B80-1BA91BAC-1BAF1BBA-1BE51BE7-1BF11C00-1C351C4D-1C4F1C5A-1C7D1CE9-1CEC1CEE-1CF31CF51CF61D00-1DBF1E00-1F151F18-1F1D1F20-1F451F48-1F4D1F50-1F571F591F5B1F5D1F5F-1F7D1F80-1FB41FB6-1FBC1FBE1FC2-1FC41FC6-1FCC1FD0-1FD31FD6-1FDB1FE0-1FEC1FF2-1FF41FF6-1FFC2071207F2090-209C21022107210A-211321152119-211D212421262128212A-212D212F-2139213C-213F2145-2149214E2160-218824B6-24E92C00-2C2E2C30-2C5E2C60-2CE42CEB-2CEE2CF22CF32D00-2D252D272D2D2D30-2D672D6F2D80-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDE2DE0-2DFF2E2F3005-30073021-30293031-30353038-303C3041-3096309D-309F30A1-30FA30FC-30FF3105-312D3131-318E31A0-31BA31F0-31FF3400-4DB54E00-9FCCA000-A48CA4D0-A4FDA500-A60CA610-A61FA62AA62BA640-A66EA674-A67BA67F-A697A69F-A6EFA717-A71FA722-A788A78B-A78EA790-A793A7A0-A7AAA7F8-A801A803-A805A807-A80AA80C-A827A840-A873A880-A8C3A8F2-A8F7A8FBA90A-A92AA930-A952A960-A97CA980-A9B2A9B4-A9BFA9CFAA00-AA36AA40-AA4DAA60-AA76AA7AAA80-AABEAAC0AAC2AADB-AADDAAE0-AAEFAAF2-AAF5AB01-AB06AB09-AB0EAB11-AB16AB20-AB26AB28-AB2EABC0-ABEAAC00-D7A3D7B0-D7C6D7CB-D7FBF900-FA6DFA70-FAD9FB00-FB06FB13-FB17FB1D-FB28FB2A-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FBB1FBD3-FD3DFD50-FD8FFD92-FDC7FDF0-FDFBFE70-FE74FE76-FEFCFF21-FF3AFF41-FF5AFF66-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDC\",\r\n        Uppercase: \"0041-005A00C0-00D600D8-00DE01000102010401060108010A010C010E01100112011401160118011A011C011E01200122012401260128012A012C012E01300132013401360139013B013D013F0141014301450147014A014C014E01500152015401560158015A015C015E01600162016401660168016A016C016E017001720174017601780179017B017D018101820184018601870189-018B018E-0191019301940196-0198019C019D019F01A001A201A401A601A701A901AC01AE01AF01B1-01B301B501B701B801BC01C401C701CA01CD01CF01D101D301D501D701D901DB01DE01E001E201E401E601E801EA01EC01EE01F101F401F6-01F801FA01FC01FE02000202020402060208020A020C020E02100212021402160218021A021C021E02200222022402260228022A022C022E02300232023A023B023D023E02410243-02460248024A024C024E03700372037603860388-038A038C038E038F0391-03A103A3-03AB03CF03D2-03D403D803DA03DC03DE03E003E203E403E603E803EA03EC03EE03F403F703F903FA03FD-042F04600462046404660468046A046C046E04700472047404760478047A047C047E0480048A048C048E04900492049404960498049A049C049E04A004A204A404A604A804AA04AC04AE04B004B204B404B604B804BA04BC04BE04C004C104C304C504C704C904CB04CD04D004D204D404D604D804DA04DC04DE04E004E204E404E604E804EA04EC04EE04F004F204F404F604F804FA04FC04FE05000502050405060508050A050C050E05100512051405160518051A051C051E05200522052405260531-055610A0-10C510C710CD1E001E021E041E061E081E0A1E0C1E0E1E101E121E141E161E181E1A1E1C1E1E1E201E221E241E261E281E2A1E2C1E2E1E301E321E341E361E381E3A1E3C1E3E1E401E421E441E461E481E4A1E4C1E4E1E501E521E541E561E581E5A1E5C1E5E1E601E621E641E661E681E6A1E6C1E6E1E701E721E741E761E781E7A1E7C1E7E1E801E821E841E861E881E8A1E8C1E8E1E901E921E941E9E1EA01EA21EA41EA61EA81EAA1EAC1EAE1EB01EB21EB41EB61EB81EBA1EBC1EBE1EC01EC21EC41EC61EC81ECA1ECC1ECE1ED01ED21ED41ED61ED81EDA1EDC1EDE1EE01EE21EE41EE61EE81EEA1EEC1EEE1EF01EF21EF41EF61EF81EFA1EFC1EFE1F08-1F0F1F18-1F1D1F28-1F2F1F38-1F3F1F48-1F4D1F591F5B1F5D1F5F1F68-1F6F1FB8-1FBB1FC8-1FCB1FD8-1FDB1FE8-1FEC1FF8-1FFB21022107210B-210D2110-211221152119-211D212421262128212A-212D2130-2133213E213F21452160-216F218324B6-24CF2C00-2C2E2C602C62-2C642C672C692C6B2C6D-2C702C722C752C7E-2C802C822C842C862C882C8A2C8C2C8E2C902C922C942C962C982C9A2C9C2C9E2CA02CA22CA42CA62CA82CAA2CAC2CAE2CB02CB22CB42CB62CB82CBA2CBC2CBE2CC02CC22CC42CC62CC82CCA2CCC2CCE2CD02CD22CD42CD62CD82CDA2CDC2CDE2CE02CE22CEB2CED2CF2A640A642A644A646A648A64AA64CA64EA650A652A654A656A658A65AA65CA65EA660A662A664A666A668A66AA66CA680A682A684A686A688A68AA68CA68EA690A692A694A696A722A724A726A728A72AA72CA72EA732A734A736A738A73AA73CA73EA740A742A744A746A748A74AA74CA74EA750A752A754A756A758A75AA75CA75EA760A762A764A766A768A76AA76CA76EA779A77BA77DA77EA780A782A784A786A78BA78DA790A792A7A0A7A2A7A4A7A6A7A8A7AAFF21-FF3A\",\r\n        Lowercase: \"0061-007A00AA00B500BA00DF-00F600F8-00FF01010103010501070109010B010D010F01110113011501170119011B011D011F01210123012501270129012B012D012F01310133013501370138013A013C013E014001420144014601480149014B014D014F01510153015501570159015B015D015F01610163016501670169016B016D016F0171017301750177017A017C017E-0180018301850188018C018D019201950199-019B019E01A101A301A501A801AA01AB01AD01B001B401B601B901BA01BD-01BF01C601C901CC01CE01D001D201D401D601D801DA01DC01DD01DF01E101E301E501E701E901EB01ED01EF01F001F301F501F901FB01FD01FF02010203020502070209020B020D020F02110213021502170219021B021D021F02210223022502270229022B022D022F02310233-0239023C023F0240024202470249024B024D024F-02930295-02B802C002C102E0-02E40345037103730377037A-037D039003AC-03CE03D003D103D5-03D703D903DB03DD03DF03E103E303E503E703E903EB03ED03EF-03F303F503F803FB03FC0430-045F04610463046504670469046B046D046F04710473047504770479047B047D047F0481048B048D048F04910493049504970499049B049D049F04A104A304A504A704A904AB04AD04AF04B104B304B504B704B904BB04BD04BF04C204C404C604C804CA04CC04CE04CF04D104D304D504D704D904DB04DD04DF04E104E304E504E704E904EB04ED04EF04F104F304F504F704F904FB04FD04FF05010503050505070509050B050D050F05110513051505170519051B051D051F05210523052505270561-05871D00-1DBF1E011E031E051E071E091E0B1E0D1E0F1E111E131E151E171E191E1B1E1D1E1F1E211E231E251E271E291E2B1E2D1E2F1E311E331E351E371E391E3B1E3D1E3F1E411E431E451E471E491E4B1E4D1E4F1E511E531E551E571E591E5B1E5D1E5F1E611E631E651E671E691E6B1E6D1E6F1E711E731E751E771E791E7B1E7D1E7F1E811E831E851E871E891E8B1E8D1E8F1E911E931E95-1E9D1E9F1EA11EA31EA51EA71EA91EAB1EAD1EAF1EB11EB31EB51EB71EB91EBB1EBD1EBF1EC11EC31EC51EC71EC91ECB1ECD1ECF1ED11ED31ED51ED71ED91EDB1EDD1EDF1EE11EE31EE51EE71EE91EEB1EED1EEF1EF11EF31EF51EF71EF91EFB1EFD1EFF-1F071F10-1F151F20-1F271F30-1F371F40-1F451F50-1F571F60-1F671F70-1F7D1F80-1F871F90-1F971FA0-1FA71FB0-1FB41FB61FB71FBE1FC2-1FC41FC61FC71FD0-1FD31FD61FD71FE0-1FE71FF2-1FF41FF61FF72071207F2090-209C210A210E210F2113212F21342139213C213D2146-2149214E2170-217F218424D0-24E92C30-2C5E2C612C652C662C682C6A2C6C2C712C732C742C76-2C7D2C812C832C852C872C892C8B2C8D2C8F2C912C932C952C972C992C9B2C9D2C9F2CA12CA32CA52CA72CA92CAB2CAD2CAF2CB12CB32CB52CB72CB92CBB2CBD2CBF2CC12CC32CC52CC72CC92CCB2CCD2CCF2CD12CD32CD52CD72CD92CDB2CDD2CDF2CE12CE32CE42CEC2CEE2CF32D00-2D252D272D2DA641A643A645A647A649A64BA64DA64FA651A653A655A657A659A65BA65DA65FA661A663A665A667A669A66BA66DA681A683A685A687A689A68BA68DA68FA691A693A695A697A723A725A727A729A72BA72DA72F-A731A733A735A737A739A73BA73DA73FA741A743A745A747A749A74BA74DA74FA751A753A755A757A759A75BA75DA75FA761A763A765A767A769A76BA76DA76F-A778A77AA77CA77FA781A783A785A787A78CA78EA791A793A7A1A7A3A7A5A7A7A7A9A7F8-A7FAFB00-FB06FB13-FB17FF41-FF5A\",\r\n        White_Space: \"0009-000D0020008500A01680180E2000-200A20282029202F205F3000\",\r\n        Noncharacter_Code_Point: \"FDD0-FDEFFFFEFFFF\",\r\n        Default_Ignorable_Code_Point: \"00AD034F115F116017B417B5180B-180D200B-200F202A-202E2060-206F3164FE00-FE0FFEFFFFA0FFF0-FFF8\",\r\n        // \\p{Any} matches a code unit. To match any code point via surrogate pairs, use (?:[\\0-\\uD7FF\\uDC00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF])\r\n        Any: \"0000-FFFF\", // \\p{^Any} compiles to [^\\u0000-\\uFFFF]; [\\p{^Any}] to []\r\n        Ascii: \"0000-007F\",\r\n        // \\p{Assigned} is equivalent to \\p{^Cn}\r\n        //Assigned: XRegExp(\"[\\\\p{^Cn}]\").source.replace(/[[\\]]|\\\\u/g, \"\") // Negation inside a character class triggers inversion\r\n        Assigned: \"0000-0377037A-037E0384-038A038C038E-03A103A3-05270531-05560559-055F0561-05870589058A058F0591-05C705D0-05EA05F0-05F40600-06040606-061B061E-070D070F-074A074D-07B107C0-07FA0800-082D0830-083E0840-085B085E08A008A2-08AC08E4-08FE0900-09770979-097F0981-09830985-098C098F09900993-09A809AA-09B009B209B6-09B909BC-09C409C709C809CB-09CE09D709DC09DD09DF-09E309E6-09FB0A01-0A030A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A3C0A3E-0A420A470A480A4B-0A4D0A510A59-0A5C0A5E0A66-0A750A81-0A830A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABC-0AC50AC7-0AC90ACB-0ACD0AD00AE0-0AE30AE6-0AF10B01-0B030B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3C-0B440B470B480B4B-0B4D0B560B570B5C0B5D0B5F-0B630B66-0B770B820B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BBE-0BC20BC6-0BC80BCA-0BCD0BD00BD70BE6-0BFA0C01-0C030C05-0C0C0C0E-0C100C12-0C280C2A-0C330C35-0C390C3D-0C440C46-0C480C4A-0C4D0C550C560C580C590C60-0C630C66-0C6F0C78-0C7F0C820C830C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBC-0CC40CC6-0CC80CCA-0CCD0CD50CD60CDE0CE0-0CE30CE6-0CEF0CF10CF20D020D030D05-0D0C0D0E-0D100D12-0D3A0D3D-0D440D46-0D480D4A-0D4E0D570D60-0D630D66-0D750D79-0D7F0D820D830D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60DCA0DCF-0DD40DD60DD8-0DDF0DF2-0DF40E01-0E3A0E3F-0E5B0E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB90EBB-0EBD0EC0-0EC40EC60EC8-0ECD0ED0-0ED90EDC-0EDF0F00-0F470F49-0F6C0F71-0F970F99-0FBC0FBE-0FCC0FCE-0FDA1000-10C510C710CD10D0-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A135D-137C1380-139913A0-13F41400-169C16A0-16F01700-170C170E-17141720-17361740-17531760-176C176E-1770177217731780-17DD17E0-17E917F0-17F91800-180E1810-18191820-18771880-18AA18B0-18F51900-191C1920-192B1930-193B19401944-196D1970-19741980-19AB19B0-19C919D0-19DA19DE-1A1B1A1E-1A5E1A60-1A7C1A7F-1A891A90-1A991AA0-1AAD1B00-1B4B1B50-1B7C1B80-1BF31BFC-1C371C3B-1C491C4D-1C7F1CC0-1CC71CD0-1CF61D00-1DE61DFC-1F151F18-1F1D1F20-1F451F48-1F4D1F50-1F571F591F5B1F5D1F5F-1F7D1F80-1FB41FB6-1FC41FC6-1FD31FD6-1FDB1FDD-1FEF1FF2-1FF41FF6-1FFE2000-2064206A-20712074-208E2090-209C20A0-20B920D0-20F02100-21892190-23F32400-24262440-244A2460-26FF2701-2B4C2B50-2B592C00-2C2E2C30-2C5E2C60-2CF32CF9-2D252D272D2D2D30-2D672D6F2D702D7F-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDE2DE0-2E3B2E80-2E992E9B-2EF32F00-2FD52FF0-2FFB3000-303F3041-30963099-30FF3105-312D3131-318E3190-31BA31C0-31E331F0-321E3220-32FE3300-4DB54DC0-9FCCA000-A48CA490-A4C6A4D0-A62BA640-A697A69F-A6F7A700-A78EA790-A793A7A0-A7AAA7F8-A82BA830-A839A840-A877A880-A8C4A8CE-A8D9A8E0-A8FBA900-A953A95F-A97CA980-A9CDA9CF-A9D9A9DEA9DFAA00-AA36AA40-AA4DAA50-AA59AA5C-AA7BAA80-AAC2AADB-AAF6AB01-AB06AB09-AB0EAB11-AB16AB20-AB26AB28-AB2EABC0-ABEDABF0-ABF9AC00-D7A3D7B0-D7C6D7CB-D7FBD800-FA6DFA70-FAD9FB00-FB06FB13-FB17FB1D-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FBC1FBD3-FD3FFD50-FD8FFD92-FDC7FDF0-FDFDFE00-FE19FE20-FE26FE30-FE52FE54-FE66FE68-FE6BFE70-FE74FE76-FEFCFEFFFF01-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDCFFE0-FFE6FFE8-FFEEFFF9-FFFD\"\r\n    });\r\n\r\n}(XRegExp));\r\n\r\n\n/***** matchrecursive.js *****/\n\n/*!\r\n * XRegExp.matchRecursive v0.2.0\r\n * (c) 2009-2012 Steven Levithan <http://xregexp.com/>\r\n * MIT License\r\n */\r\n\r\n(function (XRegExp) {\r\n    \"use strict\";\r\n\r\n/**\r\n * Returns a match detail object composed of the provided values.\r\n * @private\r\n */\r\n    function row(value, name, start, end) {\r\n        return {value:value, name:name, start:start, end:end};\r\n    }\r\n\r\n/**\r\n * Returns an array of match strings between outermost left and right delimiters, or an array of\r\n * objects with detailed match parts and position data. An error is thrown if delimiters are\r\n * unbalanced within the data.\r\n * @memberOf XRegExp\r\n * @param {String} str String to search.\r\n * @param {String} left Left delimiter as an XRegExp pattern.\r\n * @param {String} right Right delimiter as an XRegExp pattern.\r\n * @param {String} [flags] Flags for the left and right delimiters. Use any of: `gimnsxy`.\r\n * @param {Object} [options] Lets you specify `valueNames` and `escapeChar` options.\r\n * @returns {Array} Array of matches, or an empty array.\r\n * @example\r\n *\r\n * // Basic usage\r\n * var str = '(t((e))s)t()(ing)';\r\n * XRegExp.matchRecursive(str, '\\\\(', '\\\\)', 'g');\r\n * // -> ['t((e))s', '', 'ing']\r\n *\r\n * // Extended information mode with valueNames\r\n * str = 'Here is <div> <div>an</div></div> example';\r\n * XRegExp.matchRecursive(str, '<div\\\\s*>', '</div>', 'gi', {\r\n *   valueNames: ['between', 'left', 'match', 'right']\r\n * });\r\n * // -> [\r\n * // {name: 'between', value: 'Here is ',       start: 0,  end: 8},\r\n * // {name: 'left',    value: '<div>',          start: 8,  end: 13},\r\n * // {name: 'match',   value: ' <div>an</div>', start: 13, end: 27},\r\n * // {name: 'right',   value: '</div>',         start: 27, end: 33},\r\n * // {name: 'between', value: ' example',       start: 33, end: 41}\r\n * // ]\r\n *\r\n * // Omitting unneeded parts with null valueNames, and using escapeChar\r\n * str = '...{1}\\\\{{function(x,y){return y+x;}}';\r\n * XRegExp.matchRecursive(str, '{', '}', 'g', {\r\n *   valueNames: ['literal', null, 'value', null],\r\n *   escapeChar: '\\\\'\r\n * });\r\n * // -> [\r\n * // {name: 'literal', value: '...', start: 0, end: 3},\r\n * // {name: 'value',   value: '1',   start: 4, end: 5},\r\n * // {name: 'literal', value: '\\\\{', start: 6, end: 8},\r\n * // {name: 'value',   value: 'function(x,y){return y+x;}', start: 9, end: 35}\r\n * // ]\r\n *\r\n * // Sticky mode via flag y\r\n * str = '<1><<<2>>><3>4<5>';\r\n * XRegExp.matchRecursive(str, '<', '>', 'gy');\r\n * // -> ['1', '<<2>>', '3']\r\n */\r\n    XRegExp.matchRecursive = function (str, left, right, flags, options) {\r\n        flags = flags || \"\";\r\n        options = options || {};\r\n        var global = flags.indexOf(\"g\") > -1,\r\n            sticky = flags.indexOf(\"y\") > -1,\r\n            basicFlags = flags.replace(/y/g, \"\"), // Flag y controlled internally\r\n            escapeChar = options.escapeChar,\r\n            vN = options.valueNames,\r\n            output = [],\r\n            openTokens = 0,\r\n            delimStart = 0,\r\n            delimEnd = 0,\r\n            lastOuterEnd = 0,\r\n            outerStart,\r\n            innerStart,\r\n            leftMatch,\r\n            rightMatch,\r\n            esc;\r\n        left = XRegExp(left, basicFlags);\r\n        right = XRegExp(right, basicFlags);\r\n\r\n        if (escapeChar) {\r\n            if (escapeChar.length > 1) {\r\n                throw new SyntaxError(\"can't use more than one escape character\");\r\n            }\r\n            escapeChar = XRegExp.escape(escapeChar);\r\n            // Using XRegExp.union safely rewrites backreferences in `left` and `right`\r\n            esc = new RegExp(\r\n                \"(?:\" + escapeChar + \"[\\\\S\\\\s]|(?:(?!\" + XRegExp.union([left, right]).source + \")[^\" + escapeChar + \"])+)+\",\r\n                flags.replace(/[^im]+/g, \"\") // Flags gy not needed here; flags nsx handled by XRegExp\r\n            );\r\n        }\r\n\r\n        while (true) {\r\n            // If using an escape character, advance to the delimiter's next starting position,\r\n            // skipping any escaped characters in between\r\n            if (escapeChar) {\r\n                delimEnd += (XRegExp.exec(str, esc, delimEnd, \"sticky\") || [\"\"])[0].length;\r\n            }\r\n            leftMatch = XRegExp.exec(str, left, delimEnd);\r\n            rightMatch = XRegExp.exec(str, right, delimEnd);\r\n            // Keep the leftmost match only\r\n            if (leftMatch && rightMatch) {\r\n                if (leftMatch.index <= rightMatch.index) {\r\n                    rightMatch = null;\r\n                } else {\r\n                    leftMatch = null;\r\n                }\r\n            }\r\n            /* Paths (LM:leftMatch, RM:rightMatch, OT:openTokens):\r\n            LM | RM | OT | Result\r\n            1  | 0  | 1  | loop\r\n            1  | 0  | 0  | loop\r\n            0  | 1  | 1  | loop\r\n            0  | 1  | 0  | throw\r\n            0  | 0  | 1  | throw\r\n            0  | 0  | 0  | break\r\n            * Doesn't include the sticky mode special case\r\n            * Loop ends after the first completed match if `!global` */\r\n            if (leftMatch || rightMatch) {\r\n                delimStart = (leftMatch || rightMatch).index;\r\n                delimEnd = delimStart + (leftMatch || rightMatch)[0].length;\r\n            } else if (!openTokens) {\r\n                break;\r\n            }\r\n            if (sticky && !openTokens && delimStart > lastOuterEnd) {\r\n                break;\r\n            }\r\n            if (leftMatch) {\r\n                if (!openTokens) {\r\n                    outerStart = delimStart;\r\n                    innerStart = delimEnd;\r\n                }\r\n                ++openTokens;\r\n            } else if (rightMatch && openTokens) {\r\n                if (!--openTokens) {\r\n                    if (vN) {\r\n                        if (vN[0] && outerStart > lastOuterEnd) {\r\n                            output.push(row(vN[0], str.slice(lastOuterEnd, outerStart), lastOuterEnd, outerStart));\r\n                        }\r\n                        if (vN[1]) {\r\n                            output.push(row(vN[1], str.slice(outerStart, innerStart), outerStart, innerStart));\r\n                        }\r\n                        if (vN[2]) {\r\n                            output.push(row(vN[2], str.slice(innerStart, delimStart), innerStart, delimStart));\r\n                        }\r\n                        if (vN[3]) {\r\n                            output.push(row(vN[3], str.slice(delimStart, delimEnd), delimStart, delimEnd));\r\n                        }\r\n                    } else {\r\n                        output.push(str.slice(innerStart, delimStart));\r\n                    }\r\n                    lastOuterEnd = delimEnd;\r\n                    if (!global) {\r\n                        break;\r\n                    }\r\n                }\r\n            } else {\r\n                throw new Error(\"string contains unbalanced delimiters\");\r\n            }\r\n            // If the delimiter matched an empty string, avoid an infinite loop\r\n            if (delimStart === delimEnd) {\r\n                ++delimEnd;\r\n            }\r\n        }\r\n\r\n        if (global && !sticky && vN && vN[0] && str.length > lastOuterEnd) {\r\n            output.push(row(vN[0], str.slice(lastOuterEnd), lastOuterEnd, str.length));\r\n        }\r\n\r\n        return output;\r\n    };\r\n\r\n}(XRegExp));\r\n\r\n\n/***** build.js *****/\n\n/*!\r\n * XRegExp.build v0.1.0\r\n * (c) 2012 Steven Levithan <http://xregexp.com/>\r\n * MIT License\r\n * Inspired by RegExp.create by Lea Verou <http://lea.verou.me/>\r\n */\r\n\r\n(function (XRegExp) {\r\n    \"use strict\";\r\n\r\n    var subparts = /(\\()(?!\\?)|\\\\([1-9]\\d*)|\\\\[\\s\\S]|\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*]/g,\r\n        parts = XRegExp.union([/\\({{([\\w$]+)}}\\)|{{([\\w$]+)}}/, subparts], \"g\");\r\n\r\n/**\r\n * Strips a leading `^` and trailing unescaped `$`, if both are present.\r\n * @private\r\n * @param {String} pattern Pattern to process.\r\n * @returns {String} Pattern with edge anchors removed.\r\n */\r\n    function deanchor(pattern) {\r\n        var startAnchor = /^(?:\\(\\?:\\))?\\^/, // Leading `^` or `(?:)^` (handles /x cruft)\r\n            endAnchor = /\\$(?:\\(\\?:\\))?$/; // Trailing `$` or `$(?:)` (handles /x cruft)\r\n        if (endAnchor.test(pattern.replace(/\\\\[\\s\\S]/g, \"\"))) { // Ensure trailing `$` isn't escaped\r\n            return pattern.replace(startAnchor, \"\").replace(endAnchor, \"\");\r\n        }\r\n        return pattern;\r\n    }\r\n\r\n/**\r\n * Converts the provided value to an XRegExp.\r\n * @private\r\n * @param {String|RegExp} value Value to convert.\r\n * @returns {RegExp} XRegExp object with XRegExp syntax applied.\r\n */\r\n    function asXRegExp(value) {\r\n        return XRegExp.isRegExp(value) ?\r\n                (value.xregexp && !value.xregexp.isNative ? value : XRegExp(value.source)) :\r\n                XRegExp(value);\r\n    }\r\n\r\n/**\r\n * Builds regexes using named subpatterns, for readability and pattern reuse. Backreferences in the\r\n * outer pattern and provided subpatterns are automatically renumbered to work correctly. Native\r\n * flags used by provided subpatterns are ignored in favor of the `flags` argument.\r\n * @memberOf XRegExp\r\n * @param {String} pattern XRegExp pattern using `{{name}}` for embedded subpatterns. Allows\r\n *   `({{name}})` as shorthand for `(?<name>{{name}})`. Patterns cannot be embedded within\r\n *   character classes.\r\n * @param {Object} subs Lookup object for named subpatterns. Values can be strings or regexes. A\r\n *   leading `^` and trailing unescaped `$` are stripped from subpatterns, if both are present.\r\n * @param {String} [flags] Any combination of XRegExp flags.\r\n * @returns {RegExp} Regex with interpolated subpatterns.\r\n * @example\r\n *\r\n * var time = XRegExp.build('(?x)^ {{hours}} ({{minutes}}) $', {\r\n *   hours: XRegExp.build('{{h12}} : | {{h24}}', {\r\n *     h12: /1[0-2]|0?[1-9]/,\r\n *     h24: /2[0-3]|[01][0-9]/\r\n *   }, 'x'),\r\n *   minutes: /^[0-5][0-9]$/\r\n * });\r\n * time.test('10:59'); // -> true\r\n * XRegExp.exec('10:59', time).minutes; // -> '59'\r\n */\r\n    XRegExp.build = function (pattern, subs, flags) {\r\n        var inlineFlags = /^\\(\\?([\\w$]+)\\)/.exec(pattern),\r\n            data = {},\r\n            numCaps = 0, // Caps is short for captures\r\n            numPriorCaps,\r\n            numOuterCaps = 0,\r\n            outerCapsMap = [0],\r\n            outerCapNames,\r\n            sub,\r\n            p;\r\n\r\n        // Add flags within a leading mode modifier to the overall pattern's flags\r\n        if (inlineFlags) {\r\n            flags = flags || \"\";\r\n            inlineFlags[1].replace(/./g, function (flag) {\r\n                flags += (flags.indexOf(flag) > -1 ? \"\" : flag); // Don't add duplicates\r\n            });\r\n        }\r\n\r\n        for (p in subs) {\r\n            if (subs.hasOwnProperty(p)) {\r\n                // Passing to XRegExp enables entended syntax for subpatterns provided as strings\r\n                // and ensures independent validity, lest an unescaped `(`, `)`, `[`, or trailing\r\n                // `\\` breaks the `(?:)` wrapper. For subpatterns provided as regexes, it dies on\r\n                // octals and adds the `xregexp` property, for simplicity\r\n                sub = asXRegExp(subs[p]);\r\n                // Deanchoring allows embedding independently useful anchored regexes. If you\r\n                // really need to keep your anchors, double them (i.e., `^^...$$`)\r\n                data[p] = {pattern: deanchor(sub.source), names: sub.xregexp.captureNames || []};\r\n            }\r\n        }\r\n\r\n        // Passing to XRegExp dies on octals and ensures the outer pattern is independently valid;\r\n        // helps keep this simple. Named captures will be put back\r\n        pattern = asXRegExp(pattern);\r\n        outerCapNames = pattern.xregexp.captureNames || [];\r\n        pattern = pattern.source.replace(parts, function ($0, $1, $2, $3, $4) {\r\n            var subName = $1 || $2, capName, intro;\r\n            if (subName) { // Named subpattern\r\n                if (!data.hasOwnProperty(subName)) {\r\n                    throw new ReferenceError(\"undefined property \" + $0);\r\n                }\r\n                if ($1) { // Named subpattern was wrapped in a capturing group\r\n                    capName = outerCapNames[numOuterCaps];\r\n                    outerCapsMap[++numOuterCaps] = ++numCaps;\r\n                    // If it's a named group, preserve the name. Otherwise, use the subpattern name\r\n                    // as the capture name\r\n                    intro = \"(?<\" + (capName || subName) + \">\";\r\n                } else {\r\n                    intro = \"(?:\";\r\n                }\r\n                numPriorCaps = numCaps;\r\n                return intro + data[subName].pattern.replace(subparts, function (match, paren, backref) {\r\n                    if (paren) { // Capturing group\r\n                        capName = data[subName].names[numCaps - numPriorCaps];\r\n                        ++numCaps;\r\n                        if (capName) { // If the current capture has a name, preserve the name\r\n                            return \"(?<\" + capName + \">\";\r\n                        }\r\n                    } else if (backref) { // Backreference\r\n                        return \"\\\\\" + (+backref + numPriorCaps); // Rewrite the backreference\r\n                    }\r\n                    return match;\r\n                }) + \")\";\r\n            }\r\n            if ($3) { // Capturing group\r\n                capName = outerCapNames[numOuterCaps];\r\n                outerCapsMap[++numOuterCaps] = ++numCaps;\r\n                if (capName) { // If the current capture has a name, preserve the name\r\n                    return \"(?<\" + capName + \">\";\r\n                }\r\n            } else if ($4) { // Backreference\r\n                return \"\\\\\" + outerCapsMap[+$4]; // Rewrite the backreference\r\n            }\r\n            return $0;\r\n        });\r\n\r\n        return XRegExp(pattern, flags);\r\n    };\r\n\r\n}(XRegExp));\r\n\r\n\n/***** prototypes.js *****/\n\n/*!\r\n * XRegExp Prototype Methods v1.0.0\r\n * (c) 2012 Steven Levithan <http://xregexp.com/>\r\n * MIT License\r\n */\r\n\r\n/**\r\n * Adds a collection of methods to `XRegExp.prototype`. RegExp objects copied by XRegExp are also\r\n * augmented with any `XRegExp.prototype` methods. Hence, the following work equivalently:\r\n *\r\n * XRegExp('[a-z]', 'ig').xexec('abc');\r\n * XRegExp(/[a-z]/ig).xexec('abc');\r\n * XRegExp.globalize(/[a-z]/i).xexec('abc');\r\n */\r\n(function (XRegExp) {\r\n    \"use strict\";\r\n\r\n/**\r\n * Copy properties of `b` to `a`.\r\n * @private\r\n * @param {Object} a Object that will receive new properties.\r\n * @param {Object} b Object whose properties will be copied.\r\n */\r\n    function extend(a, b) {\r\n        for (var p in b) {\r\n            if (b.hasOwnProperty(p)) {\r\n                a[p] = b[p];\r\n            }\r\n        }\r\n        //return a;\r\n    }\r\n\r\n    extend(XRegExp.prototype, {\r\n\r\n/**\r\n * Implicitly calls the regex's `test` method with the first value in the provided arguments array.\r\n * @memberOf XRegExp.prototype\r\n * @param {*} context Ignored. Accepted only for congruity with `Function.prototype.apply`.\r\n * @param {Array} args Array with the string to search as its first value.\r\n * @returns {Boolean} Whether the regex matched the provided value.\r\n * @example\r\n *\r\n * XRegExp('[a-z]').apply(null, ['abc']); // -> true\r\n */\r\n        apply: function (context, args) {\r\n            return this.test(args[0]);\r\n        },\r\n\r\n/**\r\n * Implicitly calls the regex's `test` method with the provided string.\r\n * @memberOf XRegExp.prototype\r\n * @param {*} context Ignored. Accepted only for congruity with `Function.prototype.call`.\r\n * @param {String} str String to search.\r\n * @returns {Boolean} Whether the regex matched the provided value.\r\n * @example\r\n *\r\n * XRegExp('[a-z]').call(null, 'abc'); // -> true\r\n */\r\n        call: function (context, str) {\r\n            return this.test(str);\r\n        },\r\n\r\n/**\r\n * Implicitly calls {@link #XRegExp.forEach}.\r\n * @memberOf XRegExp.prototype\r\n * @example\r\n *\r\n * XRegExp('\\\\d').forEach('1a2345', function (match, i) {\r\n *   if (i % 2) this.push(+match[0]);\r\n * }, []);\r\n * // -> [2, 4]\r\n */\r\n        forEach: function (str, callback, context) {\r\n            return XRegExp.forEach(str, this, callback, context);\r\n        },\r\n\r\n/**\r\n * Implicitly calls {@link #XRegExp.globalize}.\r\n * @memberOf XRegExp.prototype\r\n * @example\r\n *\r\n * var globalCopy = XRegExp('regex').globalize();\r\n * globalCopy.global; // -> true\r\n */\r\n        globalize: function () {\r\n            return XRegExp.globalize(this);\r\n        },\r\n\r\n/**\r\n * Implicitly calls {@link #XRegExp.exec}.\r\n * @memberOf XRegExp.prototype\r\n * @example\r\n *\r\n * var match = XRegExp('U\\\\+(?<hex>[0-9A-F]{4})').xexec('U+2620');\r\n * match.hex; // -> '2620'\r\n */\r\n        xexec: function (str, pos, sticky) {\r\n            return XRegExp.exec(str, this, pos, sticky);\r\n        },\r\n\r\n/**\r\n * Implicitly calls {@link #XRegExp.test}.\r\n * @memberOf XRegExp.prototype\r\n * @example\r\n *\r\n * XRegExp('c').xtest('abc'); // -> true\r\n */\r\n        xtest: function (str, pos, sticky) {\r\n            return XRegExp.test(str, this, pos, sticky);\r\n        }\r\n\r\n    });\r\n\r\n}(XRegExp));\r\n\r\n"]},"metadata":{},"sourceType":"script"}