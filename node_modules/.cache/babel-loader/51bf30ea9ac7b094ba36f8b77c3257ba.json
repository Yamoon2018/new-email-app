{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar net = require('net');\n\nvar ip = require('ip');\n/**\n * Module exports.\n */\n\n\nmodule.exports = myIpAddress;\nmyIpAddress.async = true;\n/**\n * Returns the IP address of the host that the Navigator is running on, as\n * a string in the dot-separated integer format.\n *\n * Example:\n *\n * ``` js\n * myIpAddress()\n *   // would return the string \"198.95.249.79\" if you were running the\n *   // Navigator on that host.\n * ```\n *\n * @return {String} external IP address\n */\n\nfunction myIpAddress(fn) {\n  // 8.8.8.8:53 is \"Google Public DNS\":\n  // https://developers.google.com/speed/public-dns/\n  var socket = net.connect({\n    host: '8.8.8.8',\n    port: 53\n  });\n  socket.once('error', function (err) {\n    // if we fail to access Google DNS (as in firewall blocks access), \n    // fallback to querying IP locally\n    fn(null, ip.address());\n  });\n  socket.once('connect', function () {\n    socket.removeListener('error', fn);\n    var ip = socket.address().address;\n    socket.destroy();\n    fn(null, ip);\n  });\n}","map":{"version":3,"sources":["/home/yamin/My_repos/new-email-app/new-email-app/node_modules/pac-resolver/myIpAddress.js"],"names":["net","require","ip","module","exports","myIpAddress","async","fn","socket","connect","host","port","once","err","address","removeListener","destroy"],"mappings":"AACA;AACA;AACA;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAjB;;AACA,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAhB;AAEA;AACA;AACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiBC,WAAjB;AAEAA,WAAW,CAACC,KAAZ,GAAoB,IAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASD,WAAT,CAAsBE,EAAtB,EAA0B;AACxB;AACA;AACA,MAAIC,MAAM,GAAGR,GAAG,CAACS,OAAJ,CAAY;AAAEC,IAAAA,IAAI,EAAE,SAAR;AAAmBC,IAAAA,IAAI,EAAE;AAAzB,GAAZ,CAAb;AACAH,EAAAA,MAAM,CAACI,IAAP,CAAY,OAAZ,EAAqB,UAASC,GAAT,EAAc;AACjC;AACA;AACAN,IAAAA,EAAE,CAAC,IAAD,EAAOL,EAAE,CAACY,OAAH,EAAP,CAAF;AACD,GAJD;AAKAN,EAAAA,MAAM,CAACI,IAAP,CAAY,SAAZ,EAAuB,YAAY;AACjCJ,IAAAA,MAAM,CAACO,cAAP,CAAsB,OAAtB,EAA+BR,EAA/B;AACA,QAAIL,EAAE,GAAGM,MAAM,CAACM,OAAP,GAAiBA,OAA1B;AACAN,IAAAA,MAAM,CAACQ,OAAP;AACAT,IAAAA,EAAE,CAAC,IAAD,EAAOL,EAAP,CAAF;AACD,GALD;AAMD","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar net = require('net');\nvar ip = require('ip');\n\n/**\n * Module exports.\n */\n\nmodule.exports = myIpAddress;\n\nmyIpAddress.async = true;\n\n/**\n * Returns the IP address of the host that the Navigator is running on, as\n * a string in the dot-separated integer format.\n *\n * Example:\n *\n * ``` js\n * myIpAddress()\n *   // would return the string \"198.95.249.79\" if you were running the\n *   // Navigator on that host.\n * ```\n *\n * @return {String} external IP address\n */\n\nfunction myIpAddress (fn) {\n  // 8.8.8.8:53 is \"Google Public DNS\":\n  // https://developers.google.com/speed/public-dns/\n  var socket = net.connect({ host: '8.8.8.8', port: 53 });\n  socket.once('error', function(err) {\n    // if we fail to access Google DNS (as in firewall blocks access), \n    // fallback to querying IP locally\n    fn(null, ip.address());\n  });\n  socket.once('connect', function () {\n    socket.removeListener('error', fn);\n    var ip = socket.address().address;\n    socket.destroy();\n    fn(null, ip);\n  });\n}\n"]},"metadata":{},"sourceType":"script"}