{"ast":null,"code":"module.exports = {\n  'definitions': {\n    'message': {\n      'description': 'This API allows you to send, access, and delete mesages programmatically.',\n      'links': [{\n        'description': 'Returns a single message in JSON format. To get full MIME message set MIME to true',\n        'href': '/messages/{message}',\n        'method': 'GET',\n        'title': 'info',\n        'properties': {\n          'MIME': {\n            'type': 'boolean'\n          }\n        }\n      }, {\n        'description': 'Sends a message by assembling it from the components.',\n        'href': '/messages',\n        'method': 'POST',\n        'title': 'send',\n        'properties': {\n          'from': {\n            'type': 'string'\n          }\n        },\n        'required': ['from']\n      }, {\n        'description': 'Sends a message in MIME format.',\n        'href': '/messages.mime',\n        'method': 'POST',\n        'title': 'send-mime',\n        'properties': {\n          'message': {\n            'type': ['string', 'object']\n          }\n        }\n      }, {\n        'description': 'To delete an inbound message that has been stored via the store() action.',\n        'href': '/messages/{message}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }]\n    },\n    'domain': {\n      'description': 'This API allows you to create, access, and validate domains programmatically.',\n      'links': [{\n        'description': 'Returns a list of domains under your account in JSON.',\n        'href': '/domains',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      }, {\n        'description': 'Returns a single domain, including credentials and DNS records.',\n        'href': '/domains/{domain}',\n        'method': 'GET',\n        'title': 'info'\n      }, {\n        'description': 'Create a new domain.',\n        'href': '/domains',\n        'method': 'POST',\n        'title': 'create',\n        'properties': {\n          'name': {\n            'type': 'string'\n          },\n          'wildcard': {\n            'type': 'boolean'\n          }\n        },\n        'required': ['name']\n      }, {\n        'description': 'Delete a domain from your account.',\n        'href': '/domains/{domain}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }, {\n        'description': 'Verifies and returns a single domain, including credentials and DNS records.',\n        'href': '/domains/{domain}/verify',\n        'method': 'PUT',\n        'title': 'verify'\n      }]\n    },\n    'credentials': {\n      'description': 'Programmatically get and modify domain credentials.',\n      'links': [{\n        'description': 'Returns a list of SMTP credentials for the defined domain.',\n        'href': '/domains/{domain}/credentials',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      }, {\n        'description': 'Creates a new set of SMTP credentials for the defined domain.',\n        'href': '/domains/{domain}/credentials',\n        'method': 'POST',\n        'title': 'create',\n        'properties': {\n          'login': {\n            'type': 'string'\n          },\n          'password': {\n            'type': 'string'\n          }\n        },\n        'required': ['login', 'password']\n      }, {\n        'description': 'Updates the specified SMTP credentials. Currently only the password can be changed.',\n        'href': '/domains/{domain}/credentials/{login}',\n        'method': 'PUT',\n        'title': 'update',\n        'properties': {\n          'password': {\n            'type': 'string'\n          }\n        },\n        'required': ['password']\n      }, {\n        'description': 'Deletes the defined SMTP credentials.',\n        'href': '/domains/{domain}/credentials/{login}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }]\n    },\n    'complaints': {\n      'description': 'This API allows you to programmatically download the list of users who have complained, add a complaint, or delete a complaint.',\n      'links': [{\n        'description': 'Fetches the list of complaints.',\n        'href': '/complaints',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      }, {\n        'description': 'Adds an address to the complaints table.',\n        'href': '/complaints',\n        'method': 'POST',\n        'title': 'create',\n        'properties': {\n          'address': {\n            'type': 'string'\n          }\n        },\n        'required': ['address']\n      }, {\n        'description': 'Fetches a single spam complaint by a given email address.',\n        'href': '/complaints/{address}',\n        'method': 'GET',\n        'title': 'info'\n      }, {\n        'description': 'Removes a given spam complaint.',\n        'href': '/complaints/{address}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }]\n    },\n    'unsubscribes': {\n      'description': 'This API allows you to programmatically download the list of recipients who have unsubscribed from your emails. You can also programmatically “clear” the unsubscribe event.',\n      'links': [{\n        'description': 'Fetches the list of unsubscribes.',\n        'href': '/unsubscribes',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      }, {\n        'description': 'Retreives a single unsubscribe record.',\n        'href': '/unsubscribes/{address}',\n        'method': 'GET',\n        'title': 'info'\n      }, {\n        'description': 'Removes an address from the unsubscribes table.',\n        'href': '/unsubscribes/{address}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }, {\n        'description': 'Adds address to unsubscribed table.',\n        'href': '/unsubscribes',\n        'method': 'POST',\n        'title': 'create'\n      }]\n    },\n    'bounces': {\n      'description': 'Mailgun automatically handles bounced emails. The list of bounced addresses can be accessed programmatically.',\n      'links': [{\n        'description': 'Fetches the list of bounces.',\n        'href': '/bounces',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      }, {\n        'description': 'Fetches a single bounce event by a given email address.',\n        'href': '/bounces/{address}',\n        'method': 'GET',\n        'title': 'info'\n      }, {\n        'description': 'Clears a given bounce event.',\n        'href': '/bounces/{address}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }, {\n        'description': 'Adds a permanent bounce to the bounces table. Updates the existing record if already here.',\n        'href': '/bounces',\n        'method': 'POST',\n        'title': 'create',\n        'properties': {\n          'address': {\n            'type': 'string'\n          },\n          'code': {\n            'type': 'number'\n          },\n          'error': {\n            'type': 'string'\n          }\n        },\n        'required': ['address']\n      }]\n    },\n    'routes': {\n      'description': 'Mailgun Routes are a powerful way to handle the incoming traffic. This API allows you to work with routes programmatically.',\n      'links': [{\n        'description': 'Fetches the list of routes.',\n        'href': '/routes',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      }, {\n        'description': 'Returns a single route object based on its ID.',\n        'href': '/routes/{id}',\n        'method': 'GET',\n        'title': 'info'\n      }, {\n        'description': 'Creates a new route.',\n        'href': '/routes',\n        'method': 'POST',\n        'title': 'create',\n        'properties': {\n          'limit': {\n            'priority': 'number'\n          },\n          'description': {\n            'type': 'string'\n          },\n          'expression': {\n            'type': 'string'\n          }\n        },\n        'required': ['expression']\n      }, {\n        'description': 'Updates a given route by ID.',\n        'href': '/routes/{id}',\n        'method': 'PUT',\n        'title': 'update',\n        'properties': {\n          'limit': {\n            'priority': 'number'\n          },\n          'description': {\n            'type': 'string'\n          },\n          'expression': {\n            'type': 'string'\n          }\n        }\n      }, {\n        'description': 'Deletes a route based on the id.',\n        'href': '/routes/{id}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }]\n    },\n    'list': {\n      'description': 'You can programmatically work with mailing lists and mailing list members using Mailgun Mailing List API.',\n      'links': [{\n        'description': 'Returns a list of mailing lists under your account.',\n        'href': '/lists',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'address': {\n            'type': 'string'\n          },\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      }, {\n        'description': 'Returns a single mailing list by a given address.',\n        'href': '/lists/{address}',\n        'method': 'GET',\n        'title': 'info'\n      }, {\n        'description': 'Creates a new mailing list.',\n        'href': '/lists',\n        'method': 'POST',\n        'title': 'create',\n        'properties': {\n          'address': {\n            'type': 'string'\n          },\n          'name': {\n            'type': 'string'\n          },\n          'description': {\n            'type': 'string'\n          },\n          'access_level': {\n            'type': 'string'\n          }\n        },\n        'required': ['address']\n      }, {\n        'description': 'Update mailing list properties, such as address, description or name.',\n        'href': '/lists/{address}',\n        'method': 'PUT',\n        'title': 'update',\n        'properties': {\n          'address': {\n            'type': 'string'\n          },\n          'name': {\n            'type': 'string'\n          },\n          'description': {\n            'type': 'string'\n          },\n          'access_level': {\n            'type': 'string'\n          }\n        }\n      }, {\n        'description': 'Deletes a mailing list.',\n        'href': '/lists/{address}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }]\n    },\n    'members': {\n      'description': 'Programatically work with mailing lists members.',\n      'links': [{\n        'description': 'Fetches the list of mailing list members.',\n        'href': '/lists/{address}/members',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'subscribed': {\n            'type': 'boolean'\n          },\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      }, {\n        'description': 'Paginate over list members in the given mailing list',\n        'href': '/lists/{address}/members/pages',\n        'method': 'GET',\n        'title': 'page',\n        'properties': {\n          'subscribed': {\n            'type': 'boolean'\n          },\n          'limit': {\n            'type': 'number'\n          },\n          'page': {\n            'type': 'string'\n          },\n          'address': {\n            'type': 'string'\n          }\n        }\n      }, {\n        'description': 'Retrieves a mailing list member.',\n        'href': '/lists/{address}/members/{member_address}',\n        'method': 'GET',\n        'title': 'info'\n      }, {\n        'description': 'Adds a member to the mailing list.',\n        'href': '/lists/{address}/members',\n        'method': 'POST',\n        'title': 'create',\n        'properties': {\n          'address': {\n            'type': 'string'\n          },\n          'name': {\n            'type': 'string'\n          },\n          'vars': {\n            'type': 'object'\n          },\n          'subscribed': {\n            'type': 'boolean'\n          },\n          'upsert': {\n            'type': 'string'\n          }\n        },\n        'required': ['address']\n      }, {\n        'description': 'Adds multiple members, up to 1,000 per call, to a Mailing List.',\n        'href': '/lists/{address}/members.json',\n        'method': 'POST',\n        'title': 'add',\n        'properties': {\n          'members': {\n            'type': 'array'\n          },\n          'upsert': {\n            'type': 'boolean'\n          }\n        },\n        'required': ['members']\n      }, {\n        'description': 'Updates a mailing list member with given properties.',\n        'href': '/lists/{address}/members/{member_address}',\n        'method': 'PUT',\n        'title': 'update',\n        'properties': {\n          'address': {\n            'type': 'string'\n          },\n          'name': {\n            'type': 'string'\n          },\n          'vars': {\n            'type': 'object'\n          },\n          'subscribed': {\n            'type': 'boolean'\n          }\n        }\n      }, {\n        'description': 'Delete a mailing list member.',\n        'href': '/lists/{address}/members/{member_address}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }]\n    },\n    'stats': {\n      'description': 'Various data and event statistics for you mailgun account. See http://documentation.mailgun.com/api-stats.html',\n      'links': [{\n        'description': 'Returns a list of event stat items. Each record represents counts for one event per one day.',\n        'href': '/stats',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          },\n          'start-date': {\n            'type': 'string'\n          }\n        }\n      }]\n    },\n    'tags': {\n      'description': 'Deletes all counters for particular tag and the tag itself. See http://documentation.mailgun.com/api-stats.html',\n      'links': [{\n        'description': 'List all tags.',\n        'href': '/tags',\n        'method': 'GET',\n        'title': 'list'\n      }, {\n        'description': 'Gets a specific tag.',\n        'href': '/tags/{tag}',\n        'method': 'GET',\n        'title': 'info'\n      }, {\n        'description': 'Returns statistics for a given tag.',\n        'href': '/tags/{tag}/stats',\n        'method': 'GET',\n        'title': 'info',\n        'properties': {\n          'event': {\n            'type': 'array'\n          },\n          'start': {\n            'type': 'string'\n          },\n          'end': {\n            'type': 'string'\n          },\n          'resolution': {\n            'type': 'string'\n          },\n          'duration': {\n            'type': 'string'\n          }\n        },\n        'required': ['event']\n      }, {\n        'description': 'Returns a list of countries of origin for a given domain for different event types.',\n        'href': '/tags/{tag}/stats/aggregates/countries',\n        'method': 'GET',\n        'title': 'list'\n      }, {\n        'description': 'Returns a list of email providers for a given domain for different event types.',\n        'href': '/tags/{tag}/stats/aggregates/providers',\n        'method': 'GET',\n        'title': 'list'\n      }, {\n        'description': 'Returns a list of devices for a given domain that have triggered event types.',\n        'href': '/tags/{tag}/stats/aggregates/devices',\n        'method': 'GET',\n        'title': 'list'\n      }, {\n        'description': 'Deletes all counters for particular tag and the tag itself.',\n        'href': '/tags/{tag}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }]\n    },\n    'events': {\n      'description': 'Query events that happen to your emails. See http://documentation.mailgun.com/api-events.html',\n      'links': [{\n        'description': 'Queries event records.',\n        'href': '/events',\n        'method': 'GET',\n        'title': 'get',\n        'properties': {\n          'begin': {\n            'type': 'string'\n          },\n          'end': {\n            'type': 'string'\n          },\n          'ascending': {\n            'type': 'string'\n          },\n          'limit': {\n            'type': 'number'\n          },\n          'pretty': {\n            'type': 'string'\n          }\n        }\n      }]\n    },\n    'tracking': {\n      'description': 'Programmatically get and modify domain tracking settings.',\n      'links': [{\n        'description': 'Returns tracking settings for a domain.',\n        'href': '/domains/{domain}/tracking',\n        'method': 'GET',\n        'title': 'info'\n      }, {\n        'description': 'Updates the open tracking settings for a domain.',\n        'href': '/domains/{domain}/tracking/open',\n        'method': 'PUT',\n        'title': 'update',\n        'properties': {\n          'active': {\n            'type': ['string', 'boolean']\n          }\n        },\n        'required': ['active']\n      }, {\n        'description': 'Updates the click tracking settings for a domain.',\n        'href': '/domains/{domain}/tracking/click',\n        'method': 'PUT',\n        'title': 'update',\n        'properties': {\n          'active': {\n            'type': ['string', 'boolean']\n          }\n        },\n        'required': ['active']\n      }, {\n        'description': 'Updates the unsubscribe tracking settings for a domain.',\n        'href': '/domains/{domain}/tracking/unsubscribe',\n        'method': 'PUT',\n        'title': 'update',\n        'properties': {\n          'active': {\n            'type': 'boolean'\n          },\n          'html_footer': {\n            'type': 'string'\n          },\n          'text_footer': {\n            'type': 'string'\n          }\n        },\n        'required': ['active']\n      }]\n    }\n  }\n};","map":{"version":3,"sources":["/home/yamin/My_repos/new-email-app/new-email-app/node_modules/mailgun-js/lib/schema.js"],"names":["module","exports"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB;AACf,iBAAe;AACb,eAAW;AACT,qBAAe,2EADN;AAET,eAAS,CAAC;AACR,uBAAe,oFADP;AAER,gBAAQ,qBAFA;AAGR,kBAAU,KAHF;AAIR,iBAAS,MAJD;AAKR,sBAAc;AACZ,kBAAQ;AACN,oBAAQ;AADF;AADI;AALN,OAAD,EAWT;AACE,uBAAe,uDADjB;AAEE,gBAAQ,WAFV;AAGE,kBAAU,MAHZ;AAIE,iBAAS,MAJX;AAKE,sBAAc;AACZ,kBAAQ;AACN,oBAAQ;AADF;AADI,SALhB;AAUE,oBAAY,CAAC,MAAD;AAVd,OAXS,EAuBT;AACE,uBAAe,iCADjB;AAEE,gBAAQ,gBAFV;AAGE,kBAAU,MAHZ;AAIE,iBAAS,WAJX;AAKE,sBAAc;AACZ,qBAAW;AACT,oBAAQ,CAAC,QAAD,EAAW,QAAX;AADC;AADC;AALhB,OAvBS,EAkCT;AACE,uBAAe,2EADjB;AAEE,gBAAQ,qBAFV;AAGE,kBAAU,QAHZ;AAIE,iBAAS;AAJX,OAlCS;AAFA,KADE;AA6Cb,cAAU;AACR,qBAAe,+EADP;AAER,eAAS,CAAC;AACR,uBAAe,uDADP;AAER,gBAAQ,UAFA;AAGR,kBAAU,KAHF;AAIR,iBAAS,MAJD;AAKR,sBAAc;AACZ,mBAAS;AACP,oBAAQ;AADD,WADG;AAIZ,kBAAQ;AACN,oBAAQ;AADF;AAJI;AALN,OAAD,EAcT;AACE,uBAAe,iEADjB;AAEE,gBAAQ,mBAFV;AAGE,kBAAU,KAHZ;AAIE,iBAAS;AAJX,OAdS,EAoBT;AACE,uBAAe,sBADjB;AAEE,gBAAQ,UAFV;AAGE,kBAAU,MAHZ;AAIE,iBAAS,QAJX;AAKE,sBAAc;AACZ,kBAAQ;AACN,oBAAQ;AADF,WADI;AAIZ,sBAAY;AACV,oBAAQ;AADE;AAJA,SALhB;AAaE,oBAAY,CAAC,MAAD;AAbd,OApBS,EAmCT;AACE,uBAAe,oCADjB;AAEE,gBAAQ,mBAFV;AAGE,kBAAU,QAHZ;AAIE,iBAAS;AAJX,OAnCS,EAyCT;AACE,uBAAe,8EADjB;AAEE,gBAAQ,0BAFV;AAGE,kBAAU,KAHZ;AAIE,iBAAS;AAJX,OAzCS;AAFD,KA7CG;AAgGb,mBAAe;AACb,qBAAe,qDADF;AAEb,eAAS,CAAC;AACR,uBAAe,4DADP;AAER,gBAAQ,+BAFA;AAGR,kBAAU,KAHF;AAIR,iBAAS,MAJD;AAKR,sBAAc;AACZ,mBAAS;AACP,oBAAQ;AADD,WADG;AAIZ,kBAAQ;AACN,oBAAQ;AADF;AAJI;AALN,OAAD,EAcT;AACE,uBAAe,+DADjB;AAEE,gBAAQ,+BAFV;AAGE,kBAAU,MAHZ;AAIE,iBAAS,QAJX;AAKE,sBAAc;AACZ,mBAAS;AACP,oBAAQ;AADD,WADG;AAIZ,sBAAY;AACV,oBAAQ;AADE;AAJA,SALhB;AAaE,oBAAY,CAAC,OAAD,EAAU,UAAV;AAbd,OAdS,EA6BT;AACE,uBAAe,qFADjB;AAEE,gBAAQ,uCAFV;AAGE,kBAAU,KAHZ;AAIE,iBAAS,QAJX;AAKE,sBAAc;AACZ,sBAAY;AACV,oBAAQ;AADE;AADA,SALhB;AAUE,oBAAY,CAAC,UAAD;AAVd,OA7BS,EAyCT;AACE,uBAAe,uCADjB;AAEE,gBAAQ,uCAFV;AAGE,kBAAU,QAHZ;AAIE,iBAAS;AAJX,OAzCS;AAFI,KAhGF;AAmJb,kBAAc;AACZ,qBAAe,iIADH;AAEZ,eAAS,CAAC;AACR,uBAAe,iCADP;AAER,gBAAQ,aAFA;AAGR,kBAAU,KAHF;AAIR,iBAAS,MAJD;AAKR,sBAAc;AACZ,mBAAS;AACP,oBAAQ;AADD,WADG;AAIZ,kBAAQ;AACN,oBAAQ;AADF;AAJI;AALN,OAAD,EAcT;AACE,uBAAe,0CADjB;AAEE,gBAAQ,aAFV;AAGE,kBAAU,MAHZ;AAIE,iBAAS,QAJX;AAKE,sBAAc;AACZ,qBAAW;AACT,oBAAQ;AADC;AADC,SALhB;AAUE,oBAAY,CAAC,SAAD;AAVd,OAdS,EA0BT;AACE,uBAAe,2DADjB;AAEE,gBAAQ,uBAFV;AAGE,kBAAU,KAHZ;AAIE,iBAAS;AAJX,OA1BS,EAgCT;AACE,uBAAe,iCADjB;AAEE,gBAAQ,uBAFV;AAGE,kBAAU,QAHZ;AAIE,iBAAS;AAJX,OAhCS;AAFG,KAnJD;AA6Lb,oBAAgB;AACd,qBAAe,8KADD;AAEd,eAAS,CAAC;AACR,uBAAe,mCADP;AAER,gBAAQ,eAFA;AAGR,kBAAU,KAHF;AAIR,iBAAS,MAJD;AAKR,sBAAc;AACZ,mBAAS;AACP,oBAAQ;AADD,WADG;AAIZ,kBAAQ;AACN,oBAAQ;AADF;AAJI;AALN,OAAD,EAcT;AACE,uBAAe,wCADjB;AAEE,gBAAQ,yBAFV;AAGE,kBAAU,KAHZ;AAIE,iBAAS;AAJX,OAdS,EAoBT;AACE,uBAAe,iDADjB;AAEE,gBAAQ,yBAFV;AAGE,kBAAU,QAHZ;AAIE,iBAAS;AAJX,OApBS,EA0BT;AACE,uBAAe,qCADjB;AAEE,gBAAQ,eAFV;AAGE,kBAAU,MAHZ;AAIE,iBAAS;AAJX,OA1BS;AAFK,KA7LH;AAiOb,eAAW;AACT,qBAAe,+GADN;AAET,eAAS,CAAC;AACR,uBAAe,8BADP;AAER,gBAAQ,UAFA;AAGR,kBAAU,KAHF;AAIR,iBAAS,MAJD;AAKR,sBAAc;AACZ,mBAAS;AACP,oBAAQ;AADD,WADG;AAIZ,kBAAQ;AACN,oBAAQ;AADF;AAJI;AALN,OAAD,EAcT;AACE,uBAAe,yDADjB;AAEE,gBAAQ,oBAFV;AAGE,kBAAU,KAHZ;AAIE,iBAAS;AAJX,OAdS,EAoBT;AACE,uBAAe,8BADjB;AAEE,gBAAQ,oBAFV;AAGE,kBAAU,QAHZ;AAIE,iBAAS;AAJX,OApBS,EA0BT;AACE,uBAAe,4FADjB;AAEE,gBAAQ,UAFV;AAGE,kBAAU,MAHZ;AAIE,iBAAS,QAJX;AAKE,sBAAc;AACZ,qBAAW;AACT,oBAAQ;AADC,WADC;AAIZ,kBAAQ;AACN,oBAAQ;AADF,WAJI;AAOZ,mBAAS;AACP,oBAAQ;AADD;AAPG,SALhB;AAgBE,oBAAY,CAAC,SAAD;AAhBd,OA1BS;AAFA,KAjOE;AAiRb,cAAU;AACR,qBAAe,6HADP;AAER,eAAS,CAAC;AACR,uBAAe,6BADP;AAER,gBAAQ,SAFA;AAGR,kBAAU,KAHF;AAIR,iBAAS,MAJD;AAKR,sBAAc;AACZ,mBAAS;AACP,oBAAQ;AADD,WADG;AAIZ,kBAAQ;AACN,oBAAQ;AADF;AAJI;AALN,OAAD,EAcT;AACE,uBAAe,gDADjB;AAEE,gBAAQ,cAFV;AAGE,kBAAU,KAHZ;AAIE,iBAAS;AAJX,OAdS,EAoBT;AACE,uBAAe,sBADjB;AAEE,gBAAQ,SAFV;AAGE,kBAAU,MAHZ;AAIE,iBAAS,QAJX;AAKE,sBAAc;AACZ,mBAAS;AACP,wBAAY;AADL,WADG;AAIZ,yBAAe;AACb,oBAAQ;AADK,WAJH;AAOZ,wBAAc;AACZ,oBAAQ;AADI;AAPF,SALhB;AAgBE,oBAAY,CAAC,YAAD;AAhBd,OApBS,EAsCT;AACE,uBAAe,8BADjB;AAEE,gBAAQ,cAFV;AAGE,kBAAU,KAHZ;AAIE,iBAAS,QAJX;AAKE,sBAAc;AACZ,mBAAS;AACP,wBAAY;AADL,WADG;AAIZ,yBAAe;AACb,oBAAQ;AADK,WAJH;AAOZ,wBAAc;AACZ,oBAAQ;AADI;AAPF;AALhB,OAtCS,EAuDT;AACE,uBAAe,kCADjB;AAEE,gBAAQ,cAFV;AAGE,kBAAU,QAHZ;AAIE,iBAAS;AAJX,OAvDS;AAFD,KAjRG;AAkVb,YAAQ;AACN,qBAAe,2GADT;AAEN,eAAS,CAAC;AACR,uBAAe,qDADP;AAER,gBAAQ,QAFA;AAGR,kBAAU,KAHF;AAIR,iBAAS,MAJD;AAKR,sBAAc;AACZ,qBAAW;AACT,oBAAQ;AADC,WADC;AAIZ,mBAAS;AACP,oBAAQ;AADD,WAJG;AAOZ,kBAAQ;AACN,oBAAQ;AADF;AAPI;AALN,OAAD,EAiBT;AACE,uBAAe,mDADjB;AAEE,gBAAQ,kBAFV;AAGE,kBAAU,KAHZ;AAIE,iBAAS;AAJX,OAjBS,EAuBT;AACE,uBAAe,6BADjB;AAEE,gBAAQ,QAFV;AAGE,kBAAU,MAHZ;AAIE,iBAAS,QAJX;AAKE,sBAAc;AACZ,qBAAW;AACT,oBAAQ;AADC,WADC;AAIZ,kBAAQ;AACN,oBAAQ;AADF,WAJI;AAOZ,yBAAe;AACb,oBAAQ;AADK,WAPH;AAUZ,0BAAgB;AACd,oBAAQ;AADM;AAVJ,SALhB;AAmBE,oBAAY,CAAC,SAAD;AAnBd,OAvBS,EA4CT;AACE,uBAAe,uEADjB;AAEE,gBAAQ,kBAFV;AAGE,kBAAU,KAHZ;AAIE,iBAAS,QAJX;AAKE,sBAAc;AACZ,qBAAW;AACT,oBAAQ;AADC,WADC;AAIZ,kBAAQ;AACN,oBAAQ;AADF,WAJI;AAOZ,yBAAe;AACb,oBAAQ;AADK,WAPH;AAUZ,0BAAgB;AACd,oBAAQ;AADM;AAVJ;AALhB,OA5CS,EAgET;AACE,uBAAe,yBADjB;AAEE,gBAAQ,kBAFV;AAGE,kBAAU,QAHZ;AAIE,iBAAS;AAJX,OAhES;AAFH,KAlVK;AA4Zb,eAAW;AACT,qBAAe,kDADN;AAET,eAAS,CAAC;AACR,uBAAe,2CADP;AAER,gBAAQ,0BAFA;AAGR,kBAAU,KAHF;AAIR,iBAAS,MAJD;AAKR,sBAAc;AACZ,wBAAc;AACZ,oBAAQ;AADI,WADF;AAIZ,mBAAS;AACP,oBAAQ;AADD,WAJG;AAOZ,kBAAQ;AACN,oBAAQ;AADF;AAPI;AALN,OAAD,EAiBT;AACE,uBAAe,sDADjB;AAEE,gBAAQ,gCAFV;AAGE,kBAAU,KAHZ;AAIE,iBAAS,MAJX;AAKE,sBAAc;AACZ,wBAAc;AACZ,oBAAQ;AADI,WADF;AAIZ,mBAAS;AACP,oBAAQ;AADD,WAJG;AAOZ,kBAAQ;AACN,oBAAQ;AADF,WAPI;AAUZ,qBAAW;AACT,oBAAQ;AADC;AAVC;AALhB,OAjBS,EAqCT;AACE,uBAAe,kCADjB;AAEE,gBAAQ,2CAFV;AAGE,kBAAU,KAHZ;AAIE,iBAAS;AAJX,OArCS,EA2CT;AACE,uBAAe,oCADjB;AAEE,gBAAQ,0BAFV;AAGE,kBAAU,MAHZ;AAIE,iBAAS,QAJX;AAKE,sBAAc;AACZ,qBAAW;AACT,oBAAQ;AADC,WADC;AAIZ,kBAAQ;AACN,oBAAQ;AADF,WAJI;AAOZ,kBAAQ;AACN,oBAAQ;AADF,WAPI;AAUZ,wBAAc;AACZ,oBAAQ;AADI,WAVF;AAaZ,oBAAU;AACR,oBAAQ;AADA;AAbE,SALhB;AAsBE,oBAAY,CAAC,SAAD;AAtBd,OA3CS,EAmET;AACE,uBAAe,iEADjB;AAEE,gBAAQ,+BAFV;AAGE,kBAAU,MAHZ;AAIE,iBAAS,KAJX;AAKE,sBAAc;AACZ,qBAAW;AACT,oBAAQ;AADC,WADC;AAIZ,oBAAU;AACR,oBAAQ;AADA;AAJE,SALhB;AAaE,oBAAY,CAAC,SAAD;AAbd,OAnES,EAkFT;AACE,uBAAe,sDADjB;AAEE,gBAAQ,2CAFV;AAGE,kBAAU,KAHZ;AAIE,iBAAS,QAJX;AAKE,sBAAc;AACZ,qBAAW;AACT,oBAAQ;AADC,WADC;AAIZ,kBAAQ;AACN,oBAAQ;AADF,WAJI;AAOZ,kBAAQ;AACN,oBAAQ;AADF,WAPI;AAUZ,wBAAc;AACZ,oBAAQ;AADI;AAVF;AALhB,OAlFS,EAsGT;AACE,uBAAe,+BADjB;AAEE,gBAAQ,2CAFV;AAGE,kBAAU,QAHZ;AAIE,iBAAS;AAJX,OAtGS;AAFA,KA5ZE;AA4gBb,aAAS;AACP,qBAAe,gHADR;AAEP,eAAS,CAAC;AACR,uBAAe,8FADP;AAER,gBAAQ,QAFA;AAGR,kBAAU,KAHF;AAIR,iBAAS,MAJD;AAKR,sBAAc;AACZ,mBAAS;AACP,oBAAQ;AADD,WADG;AAIZ,kBAAQ;AACN,oBAAQ;AADF,WAJI;AAOZ,wBAAc;AACZ,oBAAQ;AADI;AAPF;AALN,OAAD;AAFF,KA5gBI;AAgiBb,YAAQ;AACN,qBAAe,iHADT;AAEN,eAAS,CAAC;AACR,uBAAe,gBADP;AAER,gBAAQ,OAFA;AAGR,kBAAU,KAHF;AAIR,iBAAS;AAJD,OAAD,EAMT;AACE,uBAAe,sBADjB;AAEE,gBAAQ,aAFV;AAGE,kBAAU,KAHZ;AAIE,iBAAS;AAJX,OANS,EAYT;AACE,uBAAe,qCADjB;AAEE,gBAAQ,mBAFV;AAGE,kBAAU,KAHZ;AAIE,iBAAS,MAJX;AAKE,sBAAc;AACZ,mBAAS;AACP,oBAAQ;AADD,WADG;AAIZ,mBAAS;AACP,oBAAQ;AADD,WAJG;AAOZ,iBAAO;AACL,oBAAQ;AADH,WAPK;AAUZ,wBAAc;AACZ,oBAAQ;AADI,WAVF;AAaZ,sBAAY;AACV,oBAAQ;AADE;AAbA,SALhB;AAsBE,oBAAY,CAAC,OAAD;AAtBd,OAZS,EAoCT;AACE,uBAAe,qFADjB;AAEE,gBAAQ,wCAFV;AAGE,kBAAU,KAHZ;AAIE,iBAAS;AAJX,OApCS,EA0CT;AACE,uBAAe,iFADjB;AAEE,gBAAQ,wCAFV;AAGE,kBAAU,KAHZ;AAIE,iBAAS;AAJX,OA1CS,EAgDT;AACE,uBAAe,+EADjB;AAEE,gBAAQ,sCAFV;AAGE,kBAAU,KAHZ;AAIE,iBAAS;AAJX,OAhDS,EAsDT;AACE,uBAAe,6DADjB;AAEE,gBAAQ,aAFV;AAGE,kBAAU,QAHZ;AAIE,iBAAS;AAJX,OAtDS;AAFH,KAhiBK;AAgmBb,cAAU;AACR,qBAAe,+FADP;AAER,eAAS,CAAC;AACR,uBAAe,wBADP;AAER,gBAAQ,SAFA;AAGR,kBAAU,KAHF;AAIR,iBAAS,KAJD;AAKR,sBAAc;AACZ,mBAAS;AACP,oBAAQ;AADD,WADG;AAIZ,iBAAO;AACL,oBAAQ;AADH,WAJK;AAOZ,uBAAa;AACX,oBAAQ;AADG,WAPD;AAUZ,mBAAS;AACP,oBAAQ;AADD,WAVG;AAaZ,oBAAU;AACR,oBAAQ;AADA;AAbE;AALN,OAAD;AAFD,KAhmBG;AA0nBb,gBAAY;AACV,qBAAe,2DADL;AAEV,eAAS,CAAC;AACR,uBAAe,yCADP;AAER,gBAAQ,4BAFA;AAGR,kBAAU,KAHF;AAIR,iBAAS;AAJD,OAAD,EAMT;AACE,uBAAe,kDADjB;AAEE,gBAAQ,iCAFV;AAGE,kBAAU,KAHZ;AAIE,iBAAS,QAJX;AAKE,sBAAc;AACZ,oBAAU;AACR,oBAAQ,CAAC,QAAD,EAAW,SAAX;AADA;AADE,SALhB;AAUE,oBAAY,CAAC,QAAD;AAVd,OANS,EAkBT;AACE,uBAAe,mDADjB;AAEE,gBAAQ,kCAFV;AAGE,kBAAU,KAHZ;AAIE,iBAAS,QAJX;AAKE,sBAAc;AACZ,oBAAU;AACR,oBAAQ,CAAC,QAAD,EAAW,SAAX;AADA;AADE,SALhB;AAUE,oBAAY,CAAC,QAAD;AAVd,OAlBS,EA8BT;AACE,uBAAe,yDADjB;AAEE,gBAAQ,wCAFV;AAGE,kBAAU,KAHZ;AAIE,iBAAS,QAJX;AAKE,sBAAc;AACZ,oBAAU;AACR,oBAAQ;AADA,WADE;AAIZ,yBAAe;AACb,oBAAQ;AADK,WAJH;AAOZ,yBAAe;AACb,oBAAQ;AADK;AAPH,SALhB;AAgBE,oBAAY,CAAC,QAAD;AAhBd,OA9BS;AAFC;AA1nBC;AADA,CAAjB","sourcesContent":["module.exports = {\n  'definitions': {\n    'message': {\n      'description': 'This API allows you to send, access, and delete mesages programmatically.',\n      'links': [{\n        'description': 'Returns a single message in JSON format. To get full MIME message set MIME to true',\n        'href': '/messages/{message}',\n        'method': 'GET',\n        'title': 'info',\n        'properties': {\n          'MIME': {\n            'type': 'boolean'\n          }\n        }\n      },\n      {\n        'description': 'Sends a message by assembling it from the components.',\n        'href': '/messages',\n        'method': 'POST',\n        'title': 'send',\n        'properties': {\n          'from': {\n            'type': 'string'\n          }\n        },\n        'required': ['from']\n      },\n      {\n        'description': 'Sends a message in MIME format.',\n        'href': '/messages.mime',\n        'method': 'POST',\n        'title': 'send-mime',\n        'properties': {\n          'message': {\n            'type': ['string', 'object']\n          }\n        }\n      },\n      {\n        'description': 'To delete an inbound message that has been stored via the store() action.',\n        'href': '/messages/{message}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }\n      ]\n    },\n    'domain': {\n      'description': 'This API allows you to create, access, and validate domains programmatically.',\n      'links': [{\n        'description': 'Returns a list of domains under your account in JSON.',\n        'href': '/domains',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      },\n      {\n        'description': 'Returns a single domain, including credentials and DNS records.',\n        'href': '/domains/{domain}',\n        'method': 'GET',\n        'title': 'info'\n      },\n      {\n        'description': 'Create a new domain.',\n        'href': '/domains',\n        'method': 'POST',\n        'title': 'create',\n        'properties': {\n          'name': {\n            'type': 'string'\n          },\n          'wildcard': {\n            'type': 'boolean'\n          }\n        },\n        'required': ['name']\n      },\n      {\n        'description': 'Delete a domain from your account.',\n        'href': '/domains/{domain}',\n        'method': 'DELETE',\n        'title': 'delete'\n      },\n      {\n        'description': 'Verifies and returns a single domain, including credentials and DNS records.',\n        'href': '/domains/{domain}/verify',\n        'method': 'PUT',\n        'title': 'verify'\n      }\n      ]\n    },\n    'credentials': {\n      'description': 'Programmatically get and modify domain credentials.',\n      'links': [{\n        'description': 'Returns a list of SMTP credentials for the defined domain.',\n        'href': '/domains/{domain}/credentials',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      },\n      {\n        'description': 'Creates a new set of SMTP credentials for the defined domain.',\n        'href': '/domains/{domain}/credentials',\n        'method': 'POST',\n        'title': 'create',\n        'properties': {\n          'login': {\n            'type': 'string'\n          },\n          'password': {\n            'type': 'string'\n          }\n        },\n        'required': ['login', 'password']\n      },\n      {\n        'description': 'Updates the specified SMTP credentials. Currently only the password can be changed.',\n        'href': '/domains/{domain}/credentials/{login}',\n        'method': 'PUT',\n        'title': 'update',\n        'properties': {\n          'password': {\n            'type': 'string'\n          }\n        },\n        'required': ['password']\n      },\n      {\n        'description': 'Deletes the defined SMTP credentials.',\n        'href': '/domains/{domain}/credentials/{login}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }\n      ]\n    },\n    'complaints': {\n      'description': 'This API allows you to programmatically download the list of users who have complained, add a complaint, or delete a complaint.',\n      'links': [{\n        'description': 'Fetches the list of complaints.',\n        'href': '/complaints',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      },\n      {\n        'description': 'Adds an address to the complaints table.',\n        'href': '/complaints',\n        'method': 'POST',\n        'title': 'create',\n        'properties': {\n          'address': {\n            'type': 'string'\n          }\n        },\n        'required': ['address']\n      },\n      {\n        'description': 'Fetches a single spam complaint by a given email address.',\n        'href': '/complaints/{address}',\n        'method': 'GET',\n        'title': 'info'\n      },\n      {\n        'description': 'Removes a given spam complaint.',\n        'href': '/complaints/{address}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }\n      ]\n    },\n    'unsubscribes': {\n      'description': 'This API allows you to programmatically download the list of recipients who have unsubscribed from your emails. You can also programmatically “clear” the unsubscribe event.',\n      'links': [{\n        'description': 'Fetches the list of unsubscribes.',\n        'href': '/unsubscribes',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      },\n      {\n        'description': 'Retreives a single unsubscribe record.',\n        'href': '/unsubscribes/{address}',\n        'method': 'GET',\n        'title': 'info'\n      },\n      {\n        'description': 'Removes an address from the unsubscribes table.',\n        'href': '/unsubscribes/{address}',\n        'method': 'DELETE',\n        'title': 'delete'\n      },\n      {\n        'description': 'Adds address to unsubscribed table.',\n        'href': '/unsubscribes',\n        'method': 'POST',\n        'title': 'create'\n      }\n      ]\n    },\n    'bounces': {\n      'description': 'Mailgun automatically handles bounced emails. The list of bounced addresses can be accessed programmatically.',\n      'links': [{\n        'description': 'Fetches the list of bounces.',\n        'href': '/bounces',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      },\n      {\n        'description': 'Fetches a single bounce event by a given email address.',\n        'href': '/bounces/{address}',\n        'method': 'GET',\n        'title': 'info'\n      },\n      {\n        'description': 'Clears a given bounce event.',\n        'href': '/bounces/{address}',\n        'method': 'DELETE',\n        'title': 'delete'\n      },\n      {\n        'description': 'Adds a permanent bounce to the bounces table. Updates the existing record if already here.',\n        'href': '/bounces',\n        'method': 'POST',\n        'title': 'create',\n        'properties': {\n          'address': {\n            'type': 'string'\n          },\n          'code': {\n            'type': 'number'\n          },\n          'error': {\n            'type': 'string'\n          }\n        },\n        'required': ['address']\n      }\n      ]\n    },\n    'routes': {\n      'description': 'Mailgun Routes are a powerful way to handle the incoming traffic. This API allows you to work with routes programmatically.',\n      'links': [{\n        'description': 'Fetches the list of routes.',\n        'href': '/routes',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      },\n      {\n        'description': 'Returns a single route object based on its ID.',\n        'href': '/routes/{id}',\n        'method': 'GET',\n        'title': 'info'\n      },\n      {\n        'description': 'Creates a new route.',\n        'href': '/routes',\n        'method': 'POST',\n        'title': 'create',\n        'properties': {\n          'limit': {\n            'priority': 'number'\n          },\n          'description': {\n            'type': 'string'\n          },\n          'expression': {\n            'type': 'string'\n          }\n        },\n        'required': ['expression']\n      },\n      {\n        'description': 'Updates a given route by ID.',\n        'href': '/routes/{id}',\n        'method': 'PUT',\n        'title': 'update',\n        'properties': {\n          'limit': {\n            'priority': 'number'\n          },\n          'description': {\n            'type': 'string'\n          },\n          'expression': {\n            'type': 'string'\n          }\n        }\n      },\n      {\n        'description': 'Deletes a route based on the id.',\n        'href': '/routes/{id}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }\n      ]\n    },\n    'list': {\n      'description': 'You can programmatically work with mailing lists and mailing list members using Mailgun Mailing List API.',\n      'links': [{\n        'description': 'Returns a list of mailing lists under your account.',\n        'href': '/lists',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'address': {\n            'type': 'string'\n          },\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      },\n      {\n        'description': 'Returns a single mailing list by a given address.',\n        'href': '/lists/{address}',\n        'method': 'GET',\n        'title': 'info'\n      },\n      {\n        'description': 'Creates a new mailing list.',\n        'href': '/lists',\n        'method': 'POST',\n        'title': 'create',\n        'properties': {\n          'address': {\n            'type': 'string'\n          },\n          'name': {\n            'type': 'string'\n          },\n          'description': {\n            'type': 'string'\n          },\n          'access_level': {\n            'type': 'string'\n          }\n        },\n        'required': ['address']\n      },\n      {\n        'description': 'Update mailing list properties, such as address, description or name.',\n        'href': '/lists/{address}',\n        'method': 'PUT',\n        'title': 'update',\n        'properties': {\n          'address': {\n            'type': 'string'\n          },\n          'name': {\n            'type': 'string'\n          },\n          'description': {\n            'type': 'string'\n          },\n          'access_level': {\n            'type': 'string'\n          }\n        }\n      },\n      {\n        'description': 'Deletes a mailing list.',\n        'href': '/lists/{address}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }\n      ]\n    },\n    'members': {\n      'description': 'Programatically work with mailing lists members.',\n      'links': [{\n        'description': 'Fetches the list of mailing list members.',\n        'href': '/lists/{address}/members',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'subscribed': {\n            'type': 'boolean'\n          },\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      },\n      {\n        'description': 'Paginate over list members in the given mailing list',\n        'href': '/lists/{address}/members/pages',\n        'method': 'GET',\n        'title': 'page',\n        'properties': {\n          'subscribed': {\n            'type': 'boolean'\n          },\n          'limit': {\n            'type': 'number'\n          },\n          'page': {\n            'type': 'string'\n          },\n          'address': {\n            'type': 'string'\n          }\n        }\n      },\n      {\n        'description': 'Retrieves a mailing list member.',\n        'href': '/lists/{address}/members/{member_address}',\n        'method': 'GET',\n        'title': 'info'\n      },\n      {\n        'description': 'Adds a member to the mailing list.',\n        'href': '/lists/{address}/members',\n        'method': 'POST',\n        'title': 'create',\n        'properties': {\n          'address': {\n            'type': 'string'\n          },\n          'name': {\n            'type': 'string'\n          },\n          'vars': {\n            'type': 'object'\n          },\n          'subscribed': {\n            'type': 'boolean'\n          },\n          'upsert': {\n            'type': 'string'\n          }\n        },\n        'required': ['address']\n      },\n      {\n        'description': 'Adds multiple members, up to 1,000 per call, to a Mailing List.',\n        'href': '/lists/{address}/members.json',\n        'method': 'POST',\n        'title': 'add',\n        'properties': {\n          'members': {\n            'type': 'array'\n          },\n          'upsert': {\n            'type': 'boolean'\n          }\n        },\n        'required': ['members']\n      },\n      {\n        'description': 'Updates a mailing list member with given properties.',\n        'href': '/lists/{address}/members/{member_address}',\n        'method': 'PUT',\n        'title': 'update',\n        'properties': {\n          'address': {\n            'type': 'string'\n          },\n          'name': {\n            'type': 'string'\n          },\n          'vars': {\n            'type': 'object'\n          },\n          'subscribed': {\n            'type': 'boolean'\n          }\n        }\n      },\n      {\n        'description': 'Delete a mailing list member.',\n        'href': '/lists/{address}/members/{member_address}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }\n      ]\n    },\n    'stats': {\n      'description': 'Various data and event statistics for you mailgun account. See http://documentation.mailgun.com/api-stats.html',\n      'links': [{\n        'description': 'Returns a list of event stat items. Each record represents counts for one event per one day.',\n        'href': '/stats',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          },\n          'start-date': {\n            'type': 'string'\n          }\n        }\n      }]\n    },\n    'tags': {\n      'description': 'Deletes all counters for particular tag and the tag itself. See http://documentation.mailgun.com/api-stats.html',\n      'links': [{\n        'description': 'List all tags.',\n        'href': '/tags',\n        'method': 'GET',\n        'title': 'list'\n      },\n      {\n        'description': 'Gets a specific tag.',\n        'href': '/tags/{tag}',\n        'method': 'GET',\n        'title': 'info'\n      },\n      {\n        'description': 'Returns statistics for a given tag.',\n        'href': '/tags/{tag}/stats',\n        'method': 'GET',\n        'title': 'info',\n        'properties': {\n          'event': {\n            'type': 'array'\n          },\n          'start': {\n            'type': 'string'\n          },\n          'end': {\n            'type': 'string'\n          },\n          'resolution': {\n            'type': 'string'\n          },\n          'duration': {\n            'type': 'string'\n          }\n        },\n        'required': ['event']\n      },\n      {\n        'description': 'Returns a list of countries of origin for a given domain for different event types.',\n        'href': '/tags/{tag}/stats/aggregates/countries',\n        'method': 'GET',\n        'title': 'list'\n      },\n      {\n        'description': 'Returns a list of email providers for a given domain for different event types.',\n        'href': '/tags/{tag}/stats/aggregates/providers',\n        'method': 'GET',\n        'title': 'list'\n      },\n      {\n        'description': 'Returns a list of devices for a given domain that have triggered event types.',\n        'href': '/tags/{tag}/stats/aggregates/devices',\n        'method': 'GET',\n        'title': 'list'\n      },\n      {\n        'description': 'Deletes all counters for particular tag and the tag itself.',\n        'href': '/tags/{tag}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }\n      ]\n    },\n    'events': {\n      'description': 'Query events that happen to your emails. See http://documentation.mailgun.com/api-events.html',\n      'links': [{\n        'description': 'Queries event records.',\n        'href': '/events',\n        'method': 'GET',\n        'title': 'get',\n        'properties': {\n          'begin': {\n            'type': 'string'\n          },\n          'end': {\n            'type': 'string'\n          },\n          'ascending': {\n            'type': 'string'\n          },\n          'limit': {\n            'type': 'number'\n          },\n          'pretty': {\n            'type': 'string'\n          }\n        }\n      }]\n    },\n    'tracking': {\n      'description': 'Programmatically get and modify domain tracking settings.',\n      'links': [{\n        'description': 'Returns tracking settings for a domain.',\n        'href': '/domains/{domain}/tracking',\n        'method': 'GET',\n        'title': 'info'\n      },\n      {\n        'description': 'Updates the open tracking settings for a domain.',\n        'href': '/domains/{domain}/tracking/open',\n        'method': 'PUT',\n        'title': 'update',\n        'properties': {\n          'active': {\n            'type': ['string', 'boolean']\n          }\n        },\n        'required': ['active']\n      },\n      {\n        'description': 'Updates the click tracking settings for a domain.',\n        'href': '/domains/{domain}/tracking/click',\n        'method': 'PUT',\n        'title': 'update',\n        'properties': {\n          'active': {\n            'type': ['string', 'boolean']\n          }\n        },\n        'required': ['active']\n      },\n      {\n        'description': 'Updates the unsubscribe tracking settings for a domain.',\n        'href': '/domains/{domain}/tracking/unsubscribe',\n        'method': 'PUT',\n        'title': 'update',\n        'properties': {\n          'active': {\n            'type': 'boolean'\n          },\n          'html_footer': {\n            'type': 'string'\n          },\n          'text_footer': {\n            'type': 'string'\n          }\n        },\n        'required': ['active']\n      }\n      ]\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}