{"ast":null,"code":"'use strict'; // streams through a message body and calculates relaxed body hash\n\nvar _classCallCheck = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Transform = require('stream').Transform;\n\nvar crypto = require('crypto');\n\nvar RelaxedBody = /*#__PURE__*/function (_Transform) {\n  _inherits(RelaxedBody, _Transform);\n\n  var _super = _createSuper(RelaxedBody);\n\n  function RelaxedBody(options) {\n    var _this;\n\n    _classCallCheck(this, RelaxedBody);\n\n    _this = _super.call(this);\n    options = options || {};\n    _this.chunkBuffer = [];\n    _this.chunkBufferLen = 0;\n    _this.bodyHash = crypto.createHash(options.hashAlgo || 'sha1');\n    _this.remainder = '';\n    _this.byteLength = 0;\n    _this.debug = options.debug;\n    _this._debugBody = options.debug ? [] : false;\n    return _this;\n  }\n\n  _createClass(RelaxedBody, [{\n    key: \"updateHash\",\n    value: function updateHash(chunk) {\n      var bodyStr; // find next remainder\n\n      var nextRemainder = ''; // This crux finds and removes the spaces from the last line and the newline characters after the last non-empty line\n      // If we get another chunk that does not match this description then we can restore the previously processed data\n\n      var state = 'file';\n\n      for (var i = chunk.length - 1; i >= 0; i--) {\n        var c = chunk[i];\n\n        if (state === 'file' && (c === 0x0a || c === 0x0d)) {// do nothing, found \\n or \\r at the end of chunk, stil end of file\n        } else if (state === 'file' && (c === 0x09 || c === 0x20)) {\n          // switch to line ending mode, this is the last non-empty line\n          state = 'line';\n        } else if (state === 'line' && (c === 0x09 || c === 0x20)) {// do nothing, found ' ' or \\t at the end of line, keep processing the last non-empty line\n        } else if (state === 'file' || state === 'line') {\n          // non line/file ending character found, switch to body mode\n          state = 'body';\n\n          if (i === chunk.length - 1) {\n            // final char is not part of line end or file end, so do nothing\n            break;\n          }\n        }\n\n        if (i === 0) {\n          // reached to the beginning of the chunk, check if it is still about the ending\n          // and if the remainder also matches\n          if (state === 'file' && (!this.remainder || /[\\r\\n]$/.test(this.remainder)) || state === 'line' && (!this.remainder || /[ \\t]$/.test(this.remainder))) {\n            // keep everything\n            this.remainder += chunk.toString('binary');\n            return;\n          } else if (state === 'line' || state === 'file') {\n            // process existing remainder as normal line but store the current chunk\n            nextRemainder = chunk.toString('binary');\n            chunk = false;\n            break;\n          }\n        }\n\n        if (state !== 'body') {\n          continue;\n        } // reached first non ending byte\n\n\n        nextRemainder = chunk.slice(i + 1).toString('binary');\n        chunk = chunk.slice(0, i + 1);\n        break;\n      }\n\n      var needsFixing = !!this.remainder;\n\n      if (chunk && !needsFixing) {\n        // check if we even need to change anything\n        for (var _i = 0, len = chunk.length; _i < len; _i++) {\n          if (_i && chunk[_i] === 0x0a && chunk[_i - 1] !== 0x0d) {\n            // missing \\r before \\n\n            needsFixing = true;\n            break;\n          } else if (_i && chunk[_i] === 0x0d && chunk[_i - 1] === 0x20) {\n            // trailing WSP found\n            needsFixing = true;\n            break;\n          } else if (_i && chunk[_i] === 0x20 && chunk[_i - 1] === 0x20) {\n            // multiple spaces found, needs to be replaced with just one\n            needsFixing = true;\n            break;\n          } else if (chunk[_i] === 0x09) {\n            // TAB found, needs to be replaced with a space\n            needsFixing = true;\n            break;\n          }\n        }\n      }\n\n      if (needsFixing) {\n        bodyStr = this.remainder + (chunk ? chunk.toString('binary') : '');\n        this.remainder = nextRemainder;\n        bodyStr = bodyStr.replace(/\\r?\\n/g, '\\n') // use js line endings\n        .replace(/[ \\t]*$/gm, '') // remove line endings, rtrim\n        .replace(/[ \\t]+/gm, ' ') // single spaces\n        .replace(/\\n/g, '\\r\\n'); // restore rfc822 line endings\n\n        chunk = Buffer.from(bodyStr, 'binary');\n      } else if (nextRemainder) {\n        this.remainder = nextRemainder;\n      }\n\n      if (this.debug) {\n        this._debugBody.push(chunk);\n      }\n\n      this.bodyHash.update(chunk);\n    }\n  }, {\n    key: \"_transform\",\n    value: function _transform(chunk, encoding, callback) {\n      if (!chunk || !chunk.length) {\n        return callback();\n      }\n\n      if (typeof chunk === 'string') {\n        chunk = Buffer.from(chunk, encoding);\n      }\n\n      this.updateHash(chunk);\n      this.byteLength += chunk.length;\n      this.push(chunk);\n      callback();\n    }\n  }, {\n    key: \"_flush\",\n    value: function _flush(callback) {\n      // generate final hash and emit it\n      if (/[\\r\\n]$/.test(this.remainder) && this.byteLength > 2) {\n        // add terminating line end\n        this.bodyHash.update(Buffer.from('\\r\\n'));\n      }\n\n      if (!this.byteLength) {\n        // emit empty line buffer to keep the stream flowing\n        this.push(Buffer.from('\\r\\n')); // this.bodyHash.update(Buffer.from('\\r\\n'));\n      }\n\n      this.emit('hash', this.bodyHash.digest('base64'), this.debug ? Buffer.concat(this._debugBody) : false);\n      callback();\n    }\n  }]);\n\n  return RelaxedBody;\n}(Transform);\n\nmodule.exports = RelaxedBody;","map":{"version":3,"sources":["/home/yamin/My_repos/new-email-app/new-email-app/node_modules/nodemailer/lib/dkim/relaxed-body.js"],"names":["Transform","require","crypto","RelaxedBody","options","chunkBuffer","chunkBufferLen","bodyHash","createHash","hashAlgo","remainder","byteLength","debug","_debugBody","chunk","bodyStr","nextRemainder","state","i","length","c","test","toString","slice","needsFixing","len","replace","Buffer","from","push","update","encoding","callback","updateHash","emit","digest","concat","module","exports"],"mappings":"AAAA,a,CAEA;;;;;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,SAApC;;AACA,IAAME,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;IAEME,W;;;;;AACF,uBAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACjB;AACAA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,UAAKC,WAAL,GAAmB,EAAnB;AACA,UAAKC,cAAL,GAAsB,CAAtB;AACA,UAAKC,QAAL,GAAgBL,MAAM,CAACM,UAAP,CAAkBJ,OAAO,CAACK,QAAR,IAAoB,MAAtC,CAAhB;AACA,UAAKC,SAAL,GAAiB,EAAjB;AACA,UAAKC,UAAL,GAAkB,CAAlB;AAEA,UAAKC,KAAL,GAAaR,OAAO,CAACQ,KAArB;AACA,UAAKC,UAAL,GAAkBT,OAAO,CAACQ,KAAR,GAAgB,EAAhB,GAAqB,KAAvC;AAViB;AAWpB;;;;+BAEUE,K,EAAO;AACd,UAAIC,OAAJ,CADc,CAGd;;AACA,UAAIC,aAAa,GAAG,EAApB,CAJc,CAMd;AACA;;AACA,UAAIC,KAAK,GAAG,MAAZ;;AACA,WAAK,IAAIC,CAAC,GAAGJ,KAAK,CAACK,MAAN,GAAe,CAA5B,EAA+BD,CAAC,IAAI,CAApC,EAAuCA,CAAC,EAAxC,EAA4C;AACxC,YAAIE,CAAC,GAAGN,KAAK,CAACI,CAAD,CAAb;;AAEA,YAAID,KAAK,KAAK,MAAV,KAAqBG,CAAC,KAAK,IAAN,IAAcA,CAAC,KAAK,IAAzC,CAAJ,EAAoD,CAChD;AACH,SAFD,MAEO,IAAIH,KAAK,KAAK,MAAV,KAAqBG,CAAC,KAAK,IAAN,IAAcA,CAAC,KAAK,IAAzC,CAAJ,EAAoD;AACvD;AACAH,UAAAA,KAAK,GAAG,MAAR;AACH,SAHM,MAGA,IAAIA,KAAK,KAAK,MAAV,KAAqBG,CAAC,KAAK,IAAN,IAAcA,CAAC,KAAK,IAAzC,CAAJ,EAAoD,CACvD;AACH,SAFM,MAEA,IAAIH,KAAK,KAAK,MAAV,IAAoBA,KAAK,KAAK,MAAlC,EAA0C;AAC7C;AACAA,UAAAA,KAAK,GAAG,MAAR;;AACA,cAAIC,CAAC,KAAKJ,KAAK,CAACK,MAAN,GAAe,CAAzB,EAA4B;AACxB;AACA;AACH;AACJ;;AAED,YAAID,CAAC,KAAK,CAAV,EAAa;AACT;AACA;AACA,cACKD,KAAK,KAAK,MAAV,KAAqB,CAAC,KAAKP,SAAN,IAAmB,UAAUW,IAAV,CAAe,KAAKX,SAApB,CAAxC,CAAD,IACCO,KAAK,KAAK,MAAV,KAAqB,CAAC,KAAKP,SAAN,IAAmB,SAASW,IAAT,CAAc,KAAKX,SAAnB,CAAxC,CAFL,EAGE;AACE;AACA,iBAAKA,SAAL,IAAkBI,KAAK,CAACQ,QAAN,CAAe,QAAf,CAAlB;AACA;AACH,WAPD,MAOO,IAAIL,KAAK,KAAK,MAAV,IAAoBA,KAAK,KAAK,MAAlC,EAA0C;AAC7C;AACAD,YAAAA,aAAa,GAAGF,KAAK,CAACQ,QAAN,CAAe,QAAf,CAAhB;AACAR,YAAAA,KAAK,GAAG,KAAR;AACA;AACH;AACJ;;AAED,YAAIG,KAAK,KAAK,MAAd,EAAsB;AAClB;AACH,SAvCuC,CAyCxC;;;AACAD,QAAAA,aAAa,GAAGF,KAAK,CAACS,KAAN,CAAYL,CAAC,GAAG,CAAhB,EAAmBI,QAAnB,CAA4B,QAA5B,CAAhB;AACAR,QAAAA,KAAK,GAAGA,KAAK,CAACS,KAAN,CAAY,CAAZ,EAAeL,CAAC,GAAG,CAAnB,CAAR;AACA;AACH;;AAED,UAAIM,WAAW,GAAG,CAAC,CAAC,KAAKd,SAAzB;;AACA,UAAII,KAAK,IAAI,CAACU,WAAd,EAA2B;AACvB;AACA,aAAK,IAAIN,EAAC,GAAG,CAAR,EAAWO,GAAG,GAAGX,KAAK,CAACK,MAA5B,EAAoCD,EAAC,GAAGO,GAAxC,EAA6CP,EAAC,EAA9C,EAAkD;AAC9C,cAAIA,EAAC,IAAIJ,KAAK,CAACI,EAAD,CAAL,KAAa,IAAlB,IAA0BJ,KAAK,CAACI,EAAC,GAAG,CAAL,CAAL,KAAiB,IAA/C,EAAqD;AACjD;AACAM,YAAAA,WAAW,GAAG,IAAd;AACA;AACH,WAJD,MAIO,IAAIN,EAAC,IAAIJ,KAAK,CAACI,EAAD,CAAL,KAAa,IAAlB,IAA0BJ,KAAK,CAACI,EAAC,GAAG,CAAL,CAAL,KAAiB,IAA/C,EAAqD;AACxD;AACAM,YAAAA,WAAW,GAAG,IAAd;AACA;AACH,WAJM,MAIA,IAAIN,EAAC,IAAIJ,KAAK,CAACI,EAAD,CAAL,KAAa,IAAlB,IAA0BJ,KAAK,CAACI,EAAC,GAAG,CAAL,CAAL,KAAiB,IAA/C,EAAqD;AACxD;AACAM,YAAAA,WAAW,GAAG,IAAd;AACA;AACH,WAJM,MAIA,IAAIV,KAAK,CAACI,EAAD,CAAL,KAAa,IAAjB,EAAuB;AAC1B;AACAM,YAAAA,WAAW,GAAG,IAAd;AACA;AACH;AACJ;AACJ;;AAED,UAAIA,WAAJ,EAAiB;AACbT,QAAAA,OAAO,GAAG,KAAKL,SAAL,IAAkBI,KAAK,GAAGA,KAAK,CAACQ,QAAN,CAAe,QAAf,CAAH,GAA8B,EAArD,CAAV;AACA,aAAKZ,SAAL,GAAiBM,aAAjB;AACAD,QAAAA,OAAO,GAAGA,OAAO,CACZW,OADK,CACG,QADH,EACa,IADb,EACmB;AADnB,SAELA,OAFK,CAEG,WAFH,EAEgB,EAFhB,EAEoB;AAFpB,SAGLA,OAHK,CAGG,UAHH,EAGe,GAHf,EAGoB;AAHpB,SAILA,OAJK,CAIG,KAJH,EAIU,MAJV,CAAV,CAHa,CAOgB;;AAC7BZ,QAAAA,KAAK,GAAGa,MAAM,CAACC,IAAP,CAAYb,OAAZ,EAAqB,QAArB,CAAR;AACH,OATD,MASO,IAAIC,aAAJ,EAAmB;AACtB,aAAKN,SAAL,GAAiBM,aAAjB;AACH;;AAED,UAAI,KAAKJ,KAAT,EAAgB;AACZ,aAAKC,UAAL,CAAgBgB,IAAhB,CAAqBf,KAArB;AACH;;AACD,WAAKP,QAAL,CAAcuB,MAAd,CAAqBhB,KAArB;AACH;;;+BAEUA,K,EAAOiB,Q,EAAUC,Q,EAAU;AAClC,UAAI,CAAClB,KAAD,IAAU,CAACA,KAAK,CAACK,MAArB,EAA6B;AACzB,eAAOa,QAAQ,EAAf;AACH;;AAED,UAAI,OAAOlB,KAAP,KAAiB,QAArB,EAA+B;AAC3BA,QAAAA,KAAK,GAAGa,MAAM,CAACC,IAAP,CAAYd,KAAZ,EAAmBiB,QAAnB,CAAR;AACH;;AAED,WAAKE,UAAL,CAAgBnB,KAAhB;AAEA,WAAKH,UAAL,IAAmBG,KAAK,CAACK,MAAzB;AACA,WAAKU,IAAL,CAAUf,KAAV;AACAkB,MAAAA,QAAQ;AACX;;;2BAEMA,Q,EAAU;AACb;AACA,UAAI,UAAUX,IAAV,CAAe,KAAKX,SAApB,KAAkC,KAAKC,UAAL,GAAkB,CAAxD,EAA2D;AACvD;AACA,aAAKJ,QAAL,CAAcuB,MAAd,CAAqBH,MAAM,CAACC,IAAP,CAAY,MAAZ,CAArB;AACH;;AACD,UAAI,CAAC,KAAKjB,UAAV,EAAsB;AAClB;AACA,aAAKkB,IAAL,CAAUF,MAAM,CAACC,IAAP,CAAY,MAAZ,CAAV,EAFkB,CAGlB;AACH;;AAED,WAAKM,IAAL,CAAU,MAAV,EAAkB,KAAK3B,QAAL,CAAc4B,MAAd,CAAqB,QAArB,CAAlB,EAAkD,KAAKvB,KAAL,GAAae,MAAM,CAACS,MAAP,CAAc,KAAKvB,UAAnB,CAAb,GAA8C,KAAhG;AACAmB,MAAAA,QAAQ;AACX;;;;EA/IqBhC,S;;AAkJ1BqC,MAAM,CAACC,OAAP,GAAiBnC,WAAjB","sourcesContent":["'use strict';\n\n// streams through a message body and calculates relaxed body hash\n\nconst Transform = require('stream').Transform;\nconst crypto = require('crypto');\n\nclass RelaxedBody extends Transform {\n    constructor(options) {\n        super();\n        options = options || {};\n        this.chunkBuffer = [];\n        this.chunkBufferLen = 0;\n        this.bodyHash = crypto.createHash(options.hashAlgo || 'sha1');\n        this.remainder = '';\n        this.byteLength = 0;\n\n        this.debug = options.debug;\n        this._debugBody = options.debug ? [] : false;\n    }\n\n    updateHash(chunk) {\n        let bodyStr;\n\n        // find next remainder\n        let nextRemainder = '';\n\n        // This crux finds and removes the spaces from the last line and the newline characters after the last non-empty line\n        // If we get another chunk that does not match this description then we can restore the previously processed data\n        let state = 'file';\n        for (let i = chunk.length - 1; i >= 0; i--) {\n            let c = chunk[i];\n\n            if (state === 'file' && (c === 0x0a || c === 0x0d)) {\n                // do nothing, found \\n or \\r at the end of chunk, stil end of file\n            } else if (state === 'file' && (c === 0x09 || c === 0x20)) {\n                // switch to line ending mode, this is the last non-empty line\n                state = 'line';\n            } else if (state === 'line' && (c === 0x09 || c === 0x20)) {\n                // do nothing, found ' ' or \\t at the end of line, keep processing the last non-empty line\n            } else if (state === 'file' || state === 'line') {\n                // non line/file ending character found, switch to body mode\n                state = 'body';\n                if (i === chunk.length - 1) {\n                    // final char is not part of line end or file end, so do nothing\n                    break;\n                }\n            }\n\n            if (i === 0) {\n                // reached to the beginning of the chunk, check if it is still about the ending\n                // and if the remainder also matches\n                if (\n                    (state === 'file' && (!this.remainder || /[\\r\\n]$/.test(this.remainder))) ||\n                    (state === 'line' && (!this.remainder || /[ \\t]$/.test(this.remainder)))\n                ) {\n                    // keep everything\n                    this.remainder += chunk.toString('binary');\n                    return;\n                } else if (state === 'line' || state === 'file') {\n                    // process existing remainder as normal line but store the current chunk\n                    nextRemainder = chunk.toString('binary');\n                    chunk = false;\n                    break;\n                }\n            }\n\n            if (state !== 'body') {\n                continue;\n            }\n\n            // reached first non ending byte\n            nextRemainder = chunk.slice(i + 1).toString('binary');\n            chunk = chunk.slice(0, i + 1);\n            break;\n        }\n\n        let needsFixing = !!this.remainder;\n        if (chunk && !needsFixing) {\n            // check if we even need to change anything\n            for (let i = 0, len = chunk.length; i < len; i++) {\n                if (i && chunk[i] === 0x0a && chunk[i - 1] !== 0x0d) {\n                    // missing \\r before \\n\n                    needsFixing = true;\n                    break;\n                } else if (i && chunk[i] === 0x0d && chunk[i - 1] === 0x20) {\n                    // trailing WSP found\n                    needsFixing = true;\n                    break;\n                } else if (i && chunk[i] === 0x20 && chunk[i - 1] === 0x20) {\n                    // multiple spaces found, needs to be replaced with just one\n                    needsFixing = true;\n                    break;\n                } else if (chunk[i] === 0x09) {\n                    // TAB found, needs to be replaced with a space\n                    needsFixing = true;\n                    break;\n                }\n            }\n        }\n\n        if (needsFixing) {\n            bodyStr = this.remainder + (chunk ? chunk.toString('binary') : '');\n            this.remainder = nextRemainder;\n            bodyStr = bodyStr\n                .replace(/\\r?\\n/g, '\\n') // use js line endings\n                .replace(/[ \\t]*$/gm, '') // remove line endings, rtrim\n                .replace(/[ \\t]+/gm, ' ') // single spaces\n                .replace(/\\n/g, '\\r\\n'); // restore rfc822 line endings\n            chunk = Buffer.from(bodyStr, 'binary');\n        } else if (nextRemainder) {\n            this.remainder = nextRemainder;\n        }\n\n        if (this.debug) {\n            this._debugBody.push(chunk);\n        }\n        this.bodyHash.update(chunk);\n    }\n\n    _transform(chunk, encoding, callback) {\n        if (!chunk || !chunk.length) {\n            return callback();\n        }\n\n        if (typeof chunk === 'string') {\n            chunk = Buffer.from(chunk, encoding);\n        }\n\n        this.updateHash(chunk);\n\n        this.byteLength += chunk.length;\n        this.push(chunk);\n        callback();\n    }\n\n    _flush(callback) {\n        // generate final hash and emit it\n        if (/[\\r\\n]$/.test(this.remainder) && this.byteLength > 2) {\n            // add terminating line end\n            this.bodyHash.update(Buffer.from('\\r\\n'));\n        }\n        if (!this.byteLength) {\n            // emit empty line buffer to keep the stream flowing\n            this.push(Buffer.from('\\r\\n'));\n            // this.bodyHash.update(Buffer.from('\\r\\n'));\n        }\n\n        this.emit('hash', this.bodyHash.digest('base64'), this.debug ? Buffer.concat(this._debugBody) : false);\n        callback();\n    }\n}\n\nmodule.exports = RelaxedBody;\n"]},"metadata":{},"sourceType":"script"}