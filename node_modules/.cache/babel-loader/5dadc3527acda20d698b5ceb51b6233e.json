{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar packageInfo = require('../../package.json');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar net = require('net');\n\nvar tls = require('tls');\n\nvar os = require('os');\n\nvar crypto = require('crypto');\n\nvar DataStream = require('./data-stream');\n\nvar PassThrough = require('stream').PassThrough;\n\nvar shared = require('../shared'); // default timeout values in ms\n\n\nvar CONNECTION_TIMEOUT = 2 * 60 * 1000; // how much to wait for the connection to be established\n\nvar SOCKET_TIMEOUT = 10 * 60 * 1000; // how much to wait for socket inactivity before disconnecting the client\n\nvar GREETING_TIMEOUT = 30 * 1000; // how much to wait after connection is established but SMTP greeting is not receieved\n\n/**\n * Generates a SMTP connection object\n *\n * Optional options object takes the following possible properties:\n *\n *  * **port** - is the port to connect to (defaults to 587 or 465)\n *  * **host** - is the hostname or IP address to connect to (defaults to 'localhost')\n *  * **secure** - use SSL\n *  * **ignoreTLS** - ignore server support for STARTTLS\n *  * **requireTLS** - forces the client to use STARTTLS\n *  * **name** - the name of the client server\n *  * **localAddress** - outbound address to bind to (see: http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener)\n *  * **greetingTimeout** - Time to wait in ms until greeting message is received from the server (defaults to 10000)\n *  * **connectionTimeout** - how many milliseconds to wait for the connection to establish\n *  * **socketTimeout** - Time of inactivity until the connection is closed (defaults to 1 hour)\n *  * **lmtp** - if true, uses LMTP instead of SMTP protocol\n *  * **logger** - bunyan compatible logger interface\n *  * **debug** - if true pass SMTP traffic to the logger\n *  * **tls** - options for createCredentials\n *  * **socket** - existing socket to use instead of creating a new one (see: http://nodejs.org/api/net.html#net_class_net_socket)\n *  * **secured** - boolean indicates that the provided socket has already been upgraded to tls\n *\n * @constructor\n * @namespace SMTP Client module\n * @param {Object} [options] Option properties\n */\n\nvar SMTPConnection = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(SMTPConnection, _EventEmitter);\n\n  var _super = _createSuper(SMTPConnection);\n\n  function SMTPConnection(options) {\n    var _this;\n\n    _classCallCheck(this, SMTPConnection);\n\n    _this = _super.call(this, options);\n    _this.id = crypto.randomBytes(8).toString('base64').replace(/\\W/g, '');\n    _this.stage = 'init';\n    _this.options = options || {};\n    _this.secureConnection = !!_this.options.secure;\n    _this.alreadySecured = !!_this.options.secured;\n    _this.port = Number(_this.options.port) || (_this.secureConnection ? 465 : 587);\n    _this.host = _this.options.host || 'localhost';\n\n    if (typeof _this.options.secure === 'undefined' && _this.port === 465) {\n      // if secure option is not set but port is 465, then default to secure\n      _this.secureConnection = true;\n    }\n\n    _this.name = _this.options.name || _this._getHostname();\n    _this.logger = shared.getLogger(_this.options, {\n      component: _this.options.component || 'smtp-connection',\n      sid: _this.id\n    });\n    _this.customAuth = new Map();\n    Object.keys(_this.options.customAuth || {}).forEach(function (key) {\n      var mapKey = (key || '').toString().trim().toUpperCase();\n\n      if (!mapKey) {\n        return;\n      }\n\n      _this.customAuth.set(mapKey, _this.options.customAuth[key]);\n    });\n    /**\n     * Expose version nr, just for the reference\n     * @type {String}\n     */\n\n    _this.version = packageInfo.version;\n    /**\n     * If true, then the user is authenticated\n     * @type {Boolean}\n     */\n\n    _this.authenticated = false;\n    /**\n     * If set to true, this instance is no longer active\n     * @private\n     */\n\n    _this.destroyed = false;\n    /**\n     * Defines if the current connection is secure or not. If not,\n     * STARTTLS can be used if available\n     * @private\n     */\n\n    _this.secure = !!_this.secureConnection;\n    /**\n     * Store incomplete messages coming from the server\n     * @private\n     */\n\n    _this._remainder = '';\n    /**\n     * Unprocessed responses from the server\n     * @type {Array}\n     */\n\n    _this._responseQueue = [];\n    _this.lastServerResponse = false;\n    /**\n     * The socket connecting to the server\n     * @publick\n     */\n\n    _this._socket = false;\n    /**\n     * Lists supported auth mechanisms\n     * @private\n     */\n\n    _this._supportedAuth = [];\n    /**\n     * Set to true, if EHLO response includes \"AUTH\".\n     * If false then authentication is not tried\n     */\n\n    _this.allowsAuth = false;\n    /**\n     * Includes current envelope (from, to)\n     * @private\n     */\n\n    _this._envelope = false;\n    /**\n     * Lists supported extensions\n     * @private\n     */\n\n    _this._supportedExtensions = [];\n    /**\n     * Defines the maximum allowed size for a single message\n     * @private\n     */\n\n    _this._maxAllowedSize = 0;\n    /**\n     * Function queue to run if a data chunk comes from the server\n     * @private\n     */\n\n    _this._responseActions = [];\n    _this._recipientQueue = [];\n    /**\n     * Timeout variable for waiting the greeting\n     * @private\n     */\n\n    _this._greetingTimeout = false;\n    /**\n     * Timeout variable for waiting the connection to start\n     * @private\n     */\n\n    _this._connectionTimeout = false;\n    /**\n     * If the socket is deemed already closed\n     * @private\n     */\n\n    _this._destroyed = false;\n    /**\n     * If the socket is already being closed\n     * @private\n     */\n\n    _this._closing = false;\n    /**\n     * Callbacks for socket's listeners\n     */\n\n    _this._onSocketData = function (chunk) {\n      return _this._onData(chunk);\n    };\n\n    _this._onSocketError = function (error) {\n      return _this._onError(error, 'ESOCKET', false, 'CONN');\n    };\n\n    _this._onSocketClose = function () {\n      return _this._onClose();\n    };\n\n    _this._onSocketEnd = function () {\n      return _this._onEnd();\n    };\n\n    _this._onSocketTimeout = function () {\n      return _this._onTimeout();\n    };\n\n    return _this;\n  }\n  /**\n   * Creates a connection to a SMTP server and sets up connection\n   * listener\n   */\n\n\n  _createClass(SMTPConnection, [{\n    key: \"connect\",\n    value: function connect(connectCallback) {\n      var _this2 = this;\n\n      if (typeof connectCallback === 'function') {\n        this.once('connect', function () {\n          _this2.logger.debug({\n            tnx: 'smtp'\n          }, 'SMTP handshake finished');\n\n          connectCallback();\n        });\n\n        var isDestroyedMessage = this._isDestroyedMessage('connect');\n\n        if (isDestroyedMessage) {\n          return connectCallback(this._formatError(isDestroyedMessage, 'ECONNECTION', false, 'CONN'));\n        }\n      }\n\n      var opts = {\n        port: this.port,\n        host: this.host\n      };\n\n      if (this.options.localAddress) {\n        opts.localAddress = this.options.localAddress;\n      }\n\n      var setupConnectionHandlers = function setupConnectionHandlers() {\n        _this2._connectionTimeout = setTimeout(function () {\n          _this2._onError('Connection timeout', 'ETIMEDOUT', false, 'CONN');\n        }, _this2.options.connectionTimeout || CONNECTION_TIMEOUT);\n\n        _this2._socket.on('error', _this2._onSocketError);\n      };\n\n      if (this.options.connection) {\n        // connection is already opened\n        this._socket = this.options.connection;\n\n        if (this.secureConnection && !this.alreadySecured) {\n          setImmediate(function () {\n            return _this2._upgradeConnection(function (err) {\n              if (err) {\n                _this2._onError(new Error('Error initiating TLS - ' + (err.message || err)), 'ETLS', false, 'CONN');\n\n                return;\n              }\n\n              _this2._onConnect();\n            });\n          });\n        } else {\n          setImmediate(function () {\n            return _this2._onConnect();\n          });\n        }\n\n        return;\n      } else if (this.options.socket) {\n        // socket object is set up but not yet connected\n        this._socket = this.options.socket;\n        return shared.resolveHostname(opts, function (err, resolved) {\n          if (err) {\n            return setImmediate(function () {\n              return _this2._onError(err, 'EDNS', false, 'CONN');\n            });\n          }\n\n          _this2.logger.debug({\n            tnx: 'dns',\n            source: opts.host,\n            resolved: resolved.host,\n            cached: !!resolved._cached\n          }, 'Resolved %s as %s [cache %s]', opts.host, resolved.host, resolved._cached ? 'hit' : 'miss');\n\n          Object.keys(resolved).forEach(function (key) {\n            if (key.charAt(0) !== '_' && resolved[key]) {\n              opts[key] = resolved[key];\n            }\n          });\n\n          try {\n            _this2._socket.connect(_this2.port, _this2.host, function () {\n              _this2._socket.setKeepAlive(true);\n\n              _this2._onConnect();\n            });\n\n            setupConnectionHandlers();\n          } catch (E) {\n            return setImmediate(function () {\n              return _this2._onError(E, 'ECONNECTION', false, 'CONN');\n            });\n          }\n        });\n      } else if (this.secureConnection) {\n        // connect using tls\n        if (this.options.tls) {\n          Object.keys(this.options.tls).forEach(function (key) {\n            opts[key] = _this2.options.tls[key];\n          });\n        }\n\n        return shared.resolveHostname(opts, function (err, resolved) {\n          if (err) {\n            return setImmediate(function () {\n              return _this2._onError(err, 'EDNS', false, 'CONN');\n            });\n          }\n\n          _this2.logger.debug({\n            tnx: 'dns',\n            source: opts.host,\n            resolved: resolved.host,\n            cached: !!resolved._cached\n          }, 'Resolved %s as %s [cache %s]', opts.host, resolved.host, resolved._cached ? 'hit' : 'miss');\n\n          Object.keys(resolved).forEach(function (key) {\n            if (key.charAt(0) !== '_' && resolved[key]) {\n              opts[key] = resolved[key];\n            }\n          });\n\n          try {\n            _this2._socket = tls.connect(opts, function () {\n              _this2._socket.setKeepAlive(true);\n\n              _this2._onConnect();\n            });\n            setupConnectionHandlers();\n          } catch (E) {\n            return setImmediate(function () {\n              return _this2._onError(E, 'ECONNECTION', false, 'CONN');\n            });\n          }\n        });\n      } else {\n        // connect using plaintext\n        return shared.resolveHostname(opts, function (err, resolved) {\n          if (err) {\n            return setImmediate(function () {\n              return _this2._onError(err, 'EDNS', false, 'CONN');\n            });\n          }\n\n          _this2.logger.debug({\n            tnx: 'dns',\n            source: opts.host,\n            resolved: resolved.host,\n            cached: !!resolved._cached\n          }, 'Resolved %s as %s [cache %s]', opts.host, resolved.host, resolved._cached ? 'hit' : 'miss');\n\n          Object.keys(resolved).forEach(function (key) {\n            if (key.charAt(0) !== '_' && resolved[key]) {\n              opts[key] = resolved[key];\n            }\n          });\n\n          try {\n            _this2._socket = net.connect(opts, function () {\n              _this2._socket.setKeepAlive(true);\n\n              _this2._onConnect();\n            });\n            setupConnectionHandlers();\n          } catch (E) {\n            return setImmediate(function () {\n              return _this2._onError(E, 'ECONNECTION', false, 'CONN');\n            });\n          }\n        });\n      }\n    }\n    /**\n     * Sends QUIT\n     */\n\n  }, {\n    key: \"quit\",\n    value: function quit() {\n      this._sendCommand('QUIT');\n\n      this._responseActions.push(this.close);\n    }\n    /**\n     * Closes the connection to the server\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      clearTimeout(this._connectionTimeout);\n      clearTimeout(this._greetingTimeout);\n      this._responseActions = []; // allow to run this function only once\n\n      if (this._closing) {\n        return;\n      }\n\n      this._closing = true;\n      var closeMethod = 'end';\n\n      if (this.stage === 'init') {\n        // Close the socket immediately when connection timed out\n        closeMethod = 'destroy';\n      }\n\n      this.logger.debug({\n        tnx: 'smtp'\n      }, 'Closing connection to the server using \"%s\"', closeMethod);\n      var socket = this._socket && this._socket.socket || this._socket;\n\n      if (socket && !socket.destroyed) {\n        try {\n          this._socket[closeMethod]();\n        } catch (E) {// just ignore\n        }\n      }\n\n      this._destroy();\n    }\n    /**\n     * Authenticate user\n     */\n\n  }, {\n    key: \"login\",\n    value: function login(authData, callback) {\n      var _this3 = this;\n\n      var isDestroyedMessage = this._isDestroyedMessage('login');\n\n      if (isDestroyedMessage) {\n        return callback(this._formatError(isDestroyedMessage, 'ECONNECTION', false, 'API'));\n      }\n\n      this._auth = authData || {}; // Select SASL authentication method\n\n      this._authMethod = (this._auth.method || '').toString().trim().toUpperCase() || false;\n\n      if (!this._authMethod && this._auth.oauth2 && !this._auth.credentials) {\n        this._authMethod = 'XOAUTH2';\n      } else if (!this._authMethod || this._authMethod === 'XOAUTH2' && !this._auth.oauth2) {\n        // use first supported\n        this._authMethod = (this._supportedAuth[0] || 'PLAIN').toUpperCase().trim();\n      }\n\n      if (this._authMethod !== 'XOAUTH2' && (!this._auth.credentials || !this._auth.credentials.user || !this._auth.credentials.pass)) {\n        if (this._auth.user && this._auth.pass) {\n          this._auth.credentials = {\n            user: this._auth.user,\n            pass: this._auth.pass,\n            options: this._auth.options\n          };\n        } else {\n          return callback(this._formatError('Missing credentials for \"' + this._authMethod + '\"', 'EAUTH', false, 'API'));\n        }\n      }\n\n      if (this.customAuth.has(this._authMethod)) {\n        var handler = this.customAuth.get(this._authMethod);\n        var lastResponse;\n        var returned = false;\n\n        var resolve = function resolve() {\n          if (returned) {\n            return;\n          }\n\n          returned = true;\n\n          _this3.logger.info({\n            tnx: 'smtp',\n            username: _this3._auth.user,\n            action: 'authenticated',\n            method: _this3._authMethod\n          }, 'User %s authenticated', JSON.stringify(_this3._auth.user));\n\n          _this3.authenticated = true;\n          callback(null, true);\n        };\n\n        var reject = function reject(err) {\n          if (returned) {\n            return;\n          }\n\n          returned = true;\n          callback(_this3._formatError(err, 'EAUTH', lastResponse, 'AUTH ' + _this3._authMethod));\n        };\n\n        var handlerResponse = handler({\n          auth: this._auth,\n          method: this._authMethod,\n          extensions: [].concat(this._supportedExtensions),\n          authMethods: [].concat(this._supportedAuth),\n          maxAllowedSize: this._maxAllowedSize || false,\n          sendCommand: function sendCommand(cmd, done) {\n            var promise;\n\n            if (!done) {\n              promise = new Promise(function (resolve, reject) {\n                done = shared.callbackPromise(resolve, reject);\n              });\n            }\n\n            _this3._responseActions.push(function (str) {\n              lastResponse = str;\n              var codes = str.match(/^(\\d+)(?:\\s(\\d+\\.\\d+\\.\\d+))?\\s/);\n              var data = {\n                command: cmd,\n                response: str\n              };\n\n              if (codes) {\n                data.status = Number(codes[1]) || 0;\n\n                if (codes[2]) {\n                  data.code = codes[2];\n                }\n\n                data.text = str.substr(codes[0].length);\n              } else {\n                data.text = str;\n                data.status = 0; // just in case we need to perform numeric comparisons\n              }\n\n              done(null, data);\n            });\n\n            setImmediate(function () {\n              return _this3._sendCommand(cmd);\n            });\n            return promise;\n          },\n          resolve: resolve,\n          reject: reject\n        });\n\n        if (handlerResponse && typeof handlerResponse.catch === 'function') {\n          // a promise was returned\n          handlerResponse.then(resolve).catch(reject);\n        }\n\n        return;\n      }\n\n      switch (this._authMethod) {\n        case 'XOAUTH2':\n          this._handleXOauth2Token(false, callback);\n\n          return;\n\n        case 'LOGIN':\n          this._responseActions.push(function (str) {\n            _this3._actionAUTH_LOGIN_USER(str, callback);\n          });\n\n          this._sendCommand('AUTH LOGIN');\n\n          return;\n\n        case 'PLAIN':\n          this._responseActions.push(function (str) {\n            _this3._actionAUTHComplete(str, callback);\n          });\n\n          this._sendCommand('AUTH PLAIN ' + Buffer.from( //this._auth.user+'\\u0000'+\n          \"\\0\" + // skip authorization identity as it causes problems with some servers\n          this._auth.credentials.user + \"\\0\" + this._auth.credentials.pass, 'utf-8').toString('base64'));\n\n          return;\n\n        case 'CRAM-MD5':\n          this._responseActions.push(function (str) {\n            _this3._actionAUTH_CRAM_MD5(str, callback);\n          });\n\n          this._sendCommand('AUTH CRAM-MD5');\n\n          return;\n      }\n\n      return callback(this._formatError('Unknown authentication method \"' + this._authMethod + '\"', 'EAUTH', false, 'API'));\n    }\n    /**\n     * Sends a message\n     *\n     * @param {Object} envelope Envelope object, {from: addr, to: [addr]}\n     * @param {Object} message String, Buffer or a Stream\n     * @param {Function} callback Callback to return once sending is completed\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(envelope, message, done) {\n      var _this4 = this;\n\n      if (!message) {\n        return done(this._formatError('Empty message', 'EMESSAGE', false, 'API'));\n      }\n\n      var isDestroyedMessage = this._isDestroyedMessage('send message');\n\n      if (isDestroyedMessage) {\n        return done(this._formatError(isDestroyedMessage, 'ECONNECTION', false, 'API'));\n      } // reject larger messages than allowed\n\n\n      if (this._maxAllowedSize && envelope.size > this._maxAllowedSize) {\n        return setImmediate(function () {\n          done(_this4._formatError('Message size larger than allowed ' + _this4._maxAllowedSize, 'EMESSAGE', false, 'MAIL FROM'));\n        });\n      } // ensure that callback is only called once\n\n\n      var returned = false;\n\n      var callback = function callback() {\n        if (returned) {\n          return;\n        }\n\n        returned = true;\n        done.apply(void 0, arguments);\n      };\n\n      if (typeof message.on === 'function') {\n        message.on('error', function (err) {\n          return callback(_this4._formatError(err, 'ESTREAM', false, 'API'));\n        });\n      }\n\n      var startTime = Date.now();\n\n      this._setEnvelope(envelope, function (err, info) {\n        if (err) {\n          return callback(err);\n        }\n\n        var envelopeTime = Date.now();\n\n        var stream = _this4._createSendStream(function (err, str) {\n          if (err) {\n            return callback(err);\n          }\n\n          info.envelopeTime = envelopeTime - startTime;\n          info.messageTime = Date.now() - envelopeTime;\n          info.messageSize = stream.outByteCount;\n          info.response = str;\n          return callback(null, info);\n        });\n\n        if (typeof message.pipe === 'function') {\n          message.pipe(stream);\n        } else {\n          stream.write(message);\n          stream.end();\n        }\n      });\n    }\n    /**\n     * Resets connection state\n     *\n     * @param {Function} callback Callback to return once connection is reset\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset(callback) {\n      var _this5 = this;\n\n      this._sendCommand('RSET');\n\n      this._responseActions.push(function (str) {\n        if (str.charAt(0) !== '2') {\n          return callback(_this5._formatError('Could not reset session state. response=' + str, 'EPROTOCOL', str, 'RSET'));\n        }\n\n        _this5._envelope = false;\n        return callback(null, true);\n      });\n    }\n    /**\n     * Connection listener that is run when the connection to\n     * the server is opened\n     *\n     * @event\n     */\n\n  }, {\n    key: \"_onConnect\",\n    value: function _onConnect() {\n      var _this6 = this;\n\n      clearTimeout(this._connectionTimeout);\n      this.logger.info({\n        tnx: 'network',\n        localAddress: this._socket.localAddress,\n        localPort: this._socket.localPort,\n        remoteAddress: this._socket.remoteAddress,\n        remotePort: this._socket.remotePort\n      }, '%s established to %s:%s', this.secure ? 'Secure connection' : 'Connection', this._socket.remoteAddress, this._socket.remotePort);\n\n      if (this._destroyed) {\n        // Connection was established after we already had canceled it\n        this.close();\n        return;\n      }\n\n      this.stage = 'connected'; // clear existing listeners for the socket\n\n      this._socket.removeListener('data', this._onSocketData);\n\n      this._socket.removeListener('timeout', this._onSocketTimeout);\n\n      this._socket.removeListener('close', this._onSocketClose);\n\n      this._socket.removeListener('end', this._onSocketEnd);\n\n      this._socket.on('data', this._onSocketData);\n\n      this._socket.once('close', this._onSocketClose);\n\n      this._socket.once('end', this._onSocketEnd);\n\n      this._socket.setTimeout(this.options.socketTimeout || SOCKET_TIMEOUT);\n\n      this._socket.on('timeout', this._onSocketTimeout);\n\n      this._greetingTimeout = setTimeout(function () {\n        // if still waiting for greeting, give up\n        if (_this6._socket && !_this6._destroyed && _this6._responseActions[0] === _this6._actionGreeting) {\n          _this6._onError('Greeting never received', 'ETIMEDOUT', false, 'CONN');\n        }\n      }, this.options.greetingTimeout || GREETING_TIMEOUT);\n\n      this._responseActions.push(this._actionGreeting); // we have a 'data' listener set up so resume socket if it was paused\n\n\n      this._socket.resume();\n    }\n    /**\n     * 'data' listener for data coming from the server\n     *\n     * @event\n     * @param {Buffer} chunk Data chunk coming from the server\n     */\n\n  }, {\n    key: \"_onData\",\n    value: function _onData(chunk) {\n      if (this._destroyed || !chunk || !chunk.length) {\n        return;\n      }\n\n      var data = (chunk || '').toString('binary');\n      var lines = (this._remainder + data).split(/\\r?\\n/);\n      var lastline;\n      this._remainder = lines.pop();\n\n      for (var i = 0, len = lines.length; i < len; i++) {\n        if (this._responseQueue.length) {\n          lastline = this._responseQueue[this._responseQueue.length - 1];\n\n          if (/^\\d+-/.test(lastline.split('\\n').pop())) {\n            this._responseQueue[this._responseQueue.length - 1] += '\\n' + lines[i];\n            continue;\n          }\n        }\n\n        this._responseQueue.push(lines[i]);\n      }\n\n      if (this._responseQueue.length) {\n        lastline = this._responseQueue[this._responseQueue.length - 1];\n\n        if (/^\\d+-/.test(lastline.split('\\n').pop())) {\n          return;\n        }\n      }\n\n      this._processResponse();\n    }\n    /**\n     * 'error' listener for the socket\n     *\n     * @event\n     * @param {Error} err Error object\n     * @param {String} type Error name\n     */\n\n  }, {\n    key: \"_onError\",\n    value: function _onError(err, type, data, command) {\n      clearTimeout(this._connectionTimeout);\n      clearTimeout(this._greetingTimeout);\n\n      if (this._destroyed) {\n        // just ignore, already closed\n        // this might happen when a socket is canceled because of reached timeout\n        // but the socket timeout error itself receives only after\n        return;\n      }\n\n      err = this._formatError(err, type, data, command);\n      this.logger.error(data, err.message);\n      this.emit('error', err);\n      this.close();\n    }\n  }, {\n    key: \"_formatError\",\n    value: function _formatError(message, type, response, command) {\n      var err;\n\n      if (/Error\\]$/i.test(Object.prototype.toString.call(message))) {\n        err = message;\n      } else {\n        err = new Error(message);\n      }\n\n      if (type && type !== 'Error') {\n        err.code = type;\n      }\n\n      if (response) {\n        err.response = response;\n        err.message += ': ' + response;\n      }\n\n      var responseCode = typeof response === 'string' && Number((response.match(/^\\d+/) || [])[0]) || false;\n\n      if (responseCode) {\n        err.responseCode = responseCode;\n      }\n\n      if (command) {\n        err.command = command;\n      }\n\n      return err;\n    }\n    /**\n     * 'close' listener for the socket\n     *\n     * @event\n     */\n\n  }, {\n    key: \"_onClose\",\n    value: function _onClose() {\n      this.logger.info({\n        tnx: 'network'\n      }, 'Connection closed');\n\n      if (this.upgrading && !this._destroyed) {\n        return this._onError(new Error('Connection closed unexpectedly'), 'ETLS', false, 'CONN');\n      } else if (![this._actionGreeting, this.close].includes(this._responseActions[0]) && !this._destroyed) {\n        return this._onError(new Error('Connection closed unexpectedly'), 'ECONNECTION', false, 'CONN');\n      }\n\n      this._destroy();\n    }\n    /**\n     * 'end' listener for the socket\n     *\n     * @event\n     */\n\n  }, {\n    key: \"_onEnd\",\n    value: function _onEnd() {\n      if (this._socket && !this._socket.destroyed) {\n        this._socket.destroy();\n      }\n    }\n    /**\n     * 'timeout' listener for the socket\n     *\n     * @event\n     */\n\n  }, {\n    key: \"_onTimeout\",\n    value: function _onTimeout() {\n      return this._onError(new Error('Timeout'), 'ETIMEDOUT', false, 'CONN');\n    }\n    /**\n     * Destroys the client, emits 'end'\n     */\n\n  }, {\n    key: \"_destroy\",\n    value: function _destroy() {\n      if (this._destroyed) {\n        return;\n      }\n\n      this._destroyed = true;\n      this.emit('end');\n    }\n    /**\n     * Upgrades the connection to TLS\n     *\n     * @param {Function} callback Callback function to run when the connection\n     *        has been secured\n     */\n\n  }, {\n    key: \"_upgradeConnection\",\n    value: function _upgradeConnection(callback) {\n      var _this7 = this;\n\n      // do not remove all listeners or it breaks node v0.10 as there's\n      // apparently a 'finish' event set that would be cleared as well\n      // we can safely keep 'error', 'end', 'close' etc. events\n      this._socket.removeListener('data', this._onSocketData); // incoming data is going to be gibberish from this point onwards\n\n\n      this._socket.removeListener('timeout', this._onSocketTimeout); // timeout will be re-set for the new socket object\n\n\n      var socketPlain = this._socket;\n      var opts = {\n        socket: this._socket,\n        host: this.host\n      };\n      Object.keys(this.options.tls || {}).forEach(function (key) {\n        opts[key] = _this7.options.tls[key];\n      });\n      this.upgrading = true;\n      this._socket = tls.connect(opts, function () {\n        _this7.secure = true;\n        _this7.upgrading = false;\n\n        _this7._socket.on('data', _this7._onSocketData);\n\n        socketPlain.removeListener('close', _this7._onSocketClose);\n        socketPlain.removeListener('end', _this7._onSocketEnd);\n        return callback(null, true);\n      });\n\n      this._socket.on('error', this._onSocketError);\n\n      this._socket.once('close', this._onSocketClose);\n\n      this._socket.once('end', this._onSocketEnd);\n\n      this._socket.setTimeout(this.options.socketTimeout || SOCKET_TIMEOUT); // 10 min.\n\n\n      this._socket.on('timeout', this._onSocketTimeout); // resume in case the socket was paused\n\n\n      socketPlain.resume();\n    }\n    /**\n     * Processes queued responses from the server\n     *\n     * @param {Boolean} force If true, ignores _processing flag\n     */\n\n  }, {\n    key: \"_processResponse\",\n    value: function _processResponse() {\n      var _this8 = this;\n\n      if (!this._responseQueue.length) {\n        return false;\n      }\n\n      var str = this.lastServerResponse = (this._responseQueue.shift() || '').toString();\n\n      if (/^\\d+-/.test(str.split('\\n').pop())) {\n        // keep waiting for the final part of multiline response\n        return;\n      }\n\n      if (this.options.debug || this.options.transactionLog) {\n        this.logger.debug({\n          tnx: 'server'\n        }, str.replace(/\\r?\\n$/, ''));\n      }\n\n      if (!str.trim()) {\n        // skip unexpected empty lines\n        setImmediate(function () {\n          return _this8._processResponse(true);\n        });\n      }\n\n      var action = this._responseActions.shift();\n\n      if (typeof action === 'function') {\n        action.call(this, str);\n        setImmediate(function () {\n          return _this8._processResponse(true);\n        });\n      } else {\n        return this._onError(new Error('Unexpected Response'), 'EPROTOCOL', str, 'CONN');\n      }\n    }\n    /**\n     * Send a command to the server, append \\r\\n\n     *\n     * @param {String} str String to be sent to the server\n     */\n\n  }, {\n    key: \"_sendCommand\",\n    value: function _sendCommand(str) {\n      if (this._destroyed) {\n        // Connection already closed, can't send any more data\n        return;\n      }\n\n      if (this._socket.destroyed) {\n        return this.close();\n      }\n\n      if (this.options.debug || this.options.transactionLog) {\n        this.logger.debug({\n          tnx: 'client'\n        }, (str || '').toString().replace(/\\r?\\n$/, ''));\n      }\n\n      this._socket.write(Buffer.from(str + '\\r\\n', 'utf-8'));\n    }\n    /**\n     * Initiates a new message by submitting envelope data, starting with\n     * MAIL FROM: command\n     *\n     * @param {Object} envelope Envelope object in the form of\n     *        {from:'...', to:['...']}\n     *        or\n     *        {from:{address:'...',name:'...'}, to:[address:'...',name:'...']}\n     */\n\n  }, {\n    key: \"_setEnvelope\",\n    value: function _setEnvelope(envelope, callback) {\n      var _this9 = this;\n\n      var args = [];\n      var useSmtpUtf8 = false;\n      this._envelope = envelope || {};\n      this._envelope.from = (this._envelope.from && this._envelope.from.address || this._envelope.from || '').toString().trim();\n      this._envelope.to = [].concat(this._envelope.to || []).map(function (to) {\n        return (to && to.address || to || '').toString().trim();\n      });\n\n      if (!this._envelope.to.length) {\n        return callback(this._formatError('No recipients defined', 'EENVELOPE', false, 'API'));\n      }\n\n      if (this._envelope.from && /[\\r\\n<>]/.test(this._envelope.from)) {\n        return callback(this._formatError('Invalid sender ' + JSON.stringify(this._envelope.from), 'EENVELOPE', false, 'API'));\n      } // check if the sender address uses only ASCII characters,\n      // otherwise require usage of SMTPUTF8 extension\n\n\n      if (/[\\x80-\\uFFFF]/.test(this._envelope.from)) {\n        useSmtpUtf8 = true;\n      }\n\n      for (var i = 0, len = this._envelope.to.length; i < len; i++) {\n        if (!this._envelope.to[i] || /[\\r\\n<>]/.test(this._envelope.to[i])) {\n          return callback(this._formatError('Invalid recipient ' + JSON.stringify(this._envelope.to[i]), 'EENVELOPE', false, 'API'));\n        } // check if the recipients addresses use only ASCII characters,\n        // otherwise require usage of SMTPUTF8 extension\n\n\n        if (/[\\x80-\\uFFFF]/.test(this._envelope.to[i])) {\n          useSmtpUtf8 = true;\n        }\n      } // clone the recipients array for latter manipulation\n\n\n      this._envelope.rcptQueue = JSON.parse(JSON.stringify(this._envelope.to || []));\n      this._envelope.rejected = [];\n      this._envelope.rejectedErrors = [];\n      this._envelope.accepted = [];\n\n      if (this._envelope.dsn) {\n        try {\n          this._envelope.dsn = this._setDsnEnvelope(this._envelope.dsn);\n        } catch (err) {\n          return callback(this._formatError('Invalid DSN ' + err.message, 'EENVELOPE', false, 'API'));\n        }\n      }\n\n      this._responseActions.push(function (str) {\n        _this9._actionMAIL(str, callback);\n      }); // If the server supports SMTPUTF8 and the envelope includes an internationalized\n      // email address then append SMTPUTF8 keyword to the MAIL FROM command\n\n\n      if (useSmtpUtf8 && this._supportedExtensions.includes('SMTPUTF8')) {\n        args.push('SMTPUTF8');\n        this._usingSmtpUtf8 = true;\n      } // If the server supports 8BITMIME and the message might contain non-ascii bytes\n      // then append the 8BITMIME keyword to the MAIL FROM command\n\n\n      if (this._envelope.use8BitMime && this._supportedExtensions.includes('8BITMIME')) {\n        args.push('BODY=8BITMIME');\n        this._using8BitMime = true;\n      }\n\n      if (this._envelope.size && this._supportedExtensions.includes('SIZE')) {\n        args.push('SIZE=' + this._envelope.size);\n      } // If the server supports DSN and the envelope includes an DSN prop\n      // then append DSN params to the MAIL FROM command\n\n\n      if (this._envelope.dsn && this._supportedExtensions.includes('DSN')) {\n        if (this._envelope.dsn.ret) {\n          args.push('RET=' + shared.encodeXText(this._envelope.dsn.ret));\n        }\n\n        if (this._envelope.dsn.envid) {\n          args.push('ENVID=' + shared.encodeXText(this._envelope.dsn.envid));\n        }\n      }\n\n      this._sendCommand('MAIL FROM:<' + this._envelope.from + '>' + (args.length ? ' ' + args.join(' ') : ''));\n    }\n  }, {\n    key: \"_setDsnEnvelope\",\n    value: function _setDsnEnvelope(params) {\n      var ret = (params.ret || params.return || '').toString().toUpperCase() || null;\n\n      if (ret) {\n        switch (ret) {\n          case 'HDRS':\n          case 'HEADERS':\n            ret = 'HDRS';\n            break;\n\n          case 'FULL':\n          case 'BODY':\n            ret = 'FULL';\n            break;\n        }\n      }\n\n      if (ret && !['FULL', 'HDRS'].includes(ret)) {\n        throw new Error('ret: ' + JSON.stringify(ret));\n      }\n\n      var envid = (params.envid || params.id || '').toString() || null;\n      var notify = params.notify || null;\n\n      if (notify) {\n        if (typeof notify === 'string') {\n          notify = notify.split(',');\n        }\n\n        notify = notify.map(function (n) {\n          return n.trim().toUpperCase();\n        });\n        var validNotify = ['NEVER', 'SUCCESS', 'FAILURE', 'DELAY'];\n        var invaliNotify = notify.filter(function (n) {\n          return !validNotify.includes(n);\n        });\n\n        if (invaliNotify.length || notify.length > 1 && notify.includes('NEVER')) {\n          throw new Error('notify: ' + JSON.stringify(notify.join(',')));\n        }\n\n        notify = notify.join(',');\n      }\n\n      var orcpt = (params.orcpt || params.recipient || '').toString() || null;\n\n      if (orcpt && orcpt.indexOf(';') < 0) {\n        orcpt = 'rfc822;' + orcpt;\n      }\n\n      return {\n        ret: ret,\n        envid: envid,\n        notify: notify,\n        orcpt: orcpt\n      };\n    }\n  }, {\n    key: \"_getDsnRcptToArgs\",\n    value: function _getDsnRcptToArgs() {\n      var args = []; // If the server supports DSN and the envelope includes an DSN prop\n      // then append DSN params to the RCPT TO command\n\n      if (this._envelope.dsn && this._supportedExtensions.includes('DSN')) {\n        if (this._envelope.dsn.notify) {\n          args.push('NOTIFY=' + shared.encodeXText(this._envelope.dsn.notify));\n        }\n\n        if (this._envelope.dsn.orcpt) {\n          args.push('ORCPT=' + shared.encodeXText(this._envelope.dsn.orcpt));\n        }\n      }\n\n      return args.length ? ' ' + args.join(' ') : '';\n    }\n  }, {\n    key: \"_createSendStream\",\n    value: function _createSendStream(callback) {\n      var _this10 = this;\n\n      var dataStream = new DataStream();\n      var logStream;\n\n      if (this.options.lmtp) {\n        this._envelope.accepted.forEach(function (recipient, i) {\n          var final = i === _this10._envelope.accepted.length - 1;\n\n          _this10._responseActions.push(function (str) {\n            _this10._actionLMTPStream(recipient, final, str, callback);\n          });\n        });\n      } else {\n        this._responseActions.push(function (str) {\n          _this10._actionSMTPStream(str, callback);\n        });\n      }\n\n      dataStream.pipe(this._socket, {\n        end: false\n      });\n\n      if (this.options.debug) {\n        logStream = new PassThrough();\n        logStream.on('readable', function () {\n          var chunk;\n\n          while (chunk = logStream.read()) {\n            _this10.logger.debug({\n              tnx: 'message'\n            }, chunk.toString('binary').replace(/\\r?\\n$/, ''));\n          }\n        });\n        dataStream.pipe(logStream);\n      }\n\n      dataStream.once('end', function () {\n        _this10.logger.info({\n          tnx: 'message',\n          inByteCount: dataStream.inByteCount,\n          outByteCount: dataStream.outByteCount\n        }, '<%s bytes encoded mime message (source size %s bytes)>', dataStream.outByteCount, dataStream.inByteCount);\n      });\n      return dataStream;\n    }\n    /** ACTIONS **/\n\n    /**\n     * Will be run after the connection is created and the server sends\n     * a greeting. If the incoming message starts with 220 initiate\n     * SMTP session by sending EHLO command\n     *\n     * @param {String} str Message from the server\n     */\n\n  }, {\n    key: \"_actionGreeting\",\n    value: function _actionGreeting(str) {\n      clearTimeout(this._greetingTimeout);\n\n      if (str.substr(0, 3) !== '220') {\n        this._onError(new Error('Invalid greeting. response=' + str), 'EPROTOCOL', str, 'CONN');\n\n        return;\n      }\n\n      if (this.options.lmtp) {\n        this._responseActions.push(this._actionLHLO);\n\n        this._sendCommand('LHLO ' + this.name);\n      } else {\n        this._responseActions.push(this._actionEHLO);\n\n        this._sendCommand('EHLO ' + this.name);\n      }\n    }\n    /**\n     * Handles server response for LHLO command. If it yielded in\n     * error, emit 'error', otherwise treat this as an EHLO response\n     *\n     * @param {String} str Message from the server\n     */\n\n  }, {\n    key: \"_actionLHLO\",\n    value: function _actionLHLO(str) {\n      if (str.charAt(0) !== '2') {\n        this._onError(new Error('Invalid LHLO. response=' + str), 'EPROTOCOL', str, 'LHLO');\n\n        return;\n      }\n\n      this._actionEHLO(str);\n    }\n    /**\n     * Handles server response for EHLO command. If it yielded in\n     * error, try HELO instead, otherwise initiate TLS negotiation\n     * if STARTTLS is supported by the server or move into the\n     * authentication phase.\n     *\n     * @param {String} str Message from the server\n     */\n\n  }, {\n    key: \"_actionEHLO\",\n    value: function _actionEHLO(str) {\n      var match;\n\n      if (str.substr(0, 3) === '421') {\n        this._onError(new Error('Server terminates connection. response=' + str), 'ECONNECTION', str, 'EHLO');\n\n        return;\n      }\n\n      if (str.charAt(0) !== '2') {\n        if (this.options.requireTLS) {\n          this._onError(new Error('EHLO failed but HELO does not support required STARTTLS. response=' + str), 'ECONNECTION', str, 'EHLO');\n\n          return;\n        } // Try HELO instead\n\n\n        this._responseActions.push(this._actionHELO);\n\n        this._sendCommand('HELO ' + this.name);\n\n        return;\n      } // Detect if the server supports STARTTLS\n\n\n      if (!this.secure && !this.options.ignoreTLS && (/[ -]STARTTLS\\b/im.test(str) || this.options.requireTLS)) {\n        this._sendCommand('STARTTLS');\n\n        this._responseActions.push(this._actionSTARTTLS);\n\n        return;\n      } // Detect if the server supports SMTPUTF8\n\n\n      if (/[ -]SMTPUTF8\\b/im.test(str)) {\n        this._supportedExtensions.push('SMTPUTF8');\n      } // Detect if the server supports DSN\n\n\n      if (/[ -]DSN\\b/im.test(str)) {\n        this._supportedExtensions.push('DSN');\n      } // Detect if the server supports 8BITMIME\n\n\n      if (/[ -]8BITMIME\\b/im.test(str)) {\n        this._supportedExtensions.push('8BITMIME');\n      } // Detect if the server supports PIPELINING\n\n\n      if (/[ -]PIPELINING\\b/im.test(str)) {\n        this._supportedExtensions.push('PIPELINING');\n      } // Detect if the server supports AUTH\n\n\n      if (/[ -]AUTH\\b/i.test(str)) {\n        this.allowsAuth = true;\n      } // Detect if the server supports PLAIN auth\n\n\n      if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)PLAIN/i.test(str)) {\n        this._supportedAuth.push('PLAIN');\n      } // Detect if the server supports LOGIN auth\n\n\n      if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)LOGIN/i.test(str)) {\n        this._supportedAuth.push('LOGIN');\n      } // Detect if the server supports CRAM-MD5 auth\n\n\n      if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)CRAM-MD5/i.test(str)) {\n        this._supportedAuth.push('CRAM-MD5');\n      } // Detect if the server supports XOAUTH2 auth\n\n\n      if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)XOAUTH2/i.test(str)) {\n        this._supportedAuth.push('XOAUTH2');\n      } // Detect if the server supports SIZE extensions (and the max allowed size)\n\n\n      if (match = str.match(/[ -]SIZE(?:[ \\t]+(\\d+))?/im)) {\n        this._supportedExtensions.push('SIZE');\n\n        this._maxAllowedSize = Number(match[1]) || 0;\n      }\n\n      this.emit('connect');\n    }\n    /**\n     * Handles server response for HELO command. If it yielded in\n     * error, emit 'error', otherwise move into the authentication phase.\n     *\n     * @param {String} str Message from the server\n     */\n\n  }, {\n    key: \"_actionHELO\",\n    value: function _actionHELO(str) {\n      if (str.charAt(0) !== '2') {\n        this._onError(new Error('Invalid HELO. response=' + str), 'EPROTOCOL', str, 'HELO');\n\n        return;\n      } // assume that authentication is enabled (most probably is not though)\n\n\n      this.allowsAuth = true;\n      this.emit('connect');\n    }\n    /**\n     * Handles server response for STARTTLS command. If there's an error\n     * try HELO instead, otherwise initiate TLS upgrade. If the upgrade\n     * succeedes restart the EHLO\n     *\n     * @param {String} str Message from the server\n     */\n\n  }, {\n    key: \"_actionSTARTTLS\",\n    value: function _actionSTARTTLS(str) {\n      var _this11 = this;\n\n      if (str.charAt(0) !== '2') {\n        if (this.options.opportunisticTLS) {\n          this.logger.info({\n            tnx: 'smtp'\n          }, 'Failed STARTTLS upgrade, continuing unencrypted');\n          return this.emit('connect');\n        }\n\n        this._onError(new Error('Error upgrading connection with STARTTLS'), 'ETLS', str, 'STARTTLS');\n\n        return;\n      }\n\n      this._upgradeConnection(function (err, secured) {\n        if (err) {\n          _this11._onError(new Error('Error initiating TLS - ' + (err.message || err)), 'ETLS', false, 'STARTTLS');\n\n          return;\n        }\n\n        _this11.logger.info({\n          tnx: 'smtp'\n        }, 'Connection upgraded with STARTTLS');\n\n        if (secured) {\n          // restart session\n          if (_this11.options.lmtp) {\n            _this11._responseActions.push(_this11._actionLHLO);\n\n            _this11._sendCommand('LHLO ' + _this11.name);\n          } else {\n            _this11._responseActions.push(_this11._actionEHLO);\n\n            _this11._sendCommand('EHLO ' + _this11.name);\n          }\n        } else {\n          _this11.emit('connect');\n        }\n      });\n    }\n    /**\n     * Handle the response for AUTH LOGIN command. We are expecting\n     * '334 VXNlcm5hbWU6' (base64 for 'Username:'). Data to be sent as\n     * response needs to be base64 encoded username. We do not need\n     * exact match but settle with 334 response in general as some\n     * hosts invalidly use a longer message than VXNlcm5hbWU6\n     *\n     * @param {String} str Message from the server\n     */\n\n  }, {\n    key: \"_actionAUTH_LOGIN_USER\",\n    value: function _actionAUTH_LOGIN_USER(str, callback) {\n      var _this12 = this;\n\n      if (!/^334[ -]/.test(str)) {\n        // expecting '334 VXNlcm5hbWU6'\n        callback(this._formatError('Invalid login sequence while waiting for \"334 VXNlcm5hbWU6\"', 'EAUTH', str, 'AUTH LOGIN'));\n        return;\n      }\n\n      this._responseActions.push(function (str) {\n        _this12._actionAUTH_LOGIN_PASS(str, callback);\n      });\n\n      this._sendCommand(Buffer.from(this._auth.credentials.user + '', 'utf-8').toString('base64'));\n    }\n    /**\n     * Handle the response for AUTH CRAM-MD5 command. We are expecting\n     * '334 <challenge string>'. Data to be sent as response needs to be\n     * base64 decoded challenge string, MD5 hashed using the password as\n     * a HMAC key, prefixed by the username and a space, and finally all\n     * base64 encoded again.\n     *\n     * @param {String} str Message from the server\n     */\n\n  }, {\n    key: \"_actionAUTH_CRAM_MD5\",\n    value: function _actionAUTH_CRAM_MD5(str, callback) {\n      var _this13 = this;\n\n      var challengeMatch = str.match(/^334\\s+(.+)$/);\n      var challengeString = '';\n\n      if (!challengeMatch) {\n        return callback(this._formatError('Invalid login sequence while waiting for server challenge string', 'EAUTH', str, 'AUTH CRAM-MD5'));\n      } else {\n        challengeString = challengeMatch[1];\n      } // Decode from base64\n\n\n      var base64decoded = Buffer.from(challengeString, 'base64').toString('ascii'),\n          hmac_md5 = crypto.createHmac('md5', this._auth.credentials.pass);\n      hmac_md5.update(base64decoded);\n      var hex_hmac = hmac_md5.digest('hex');\n      var prepended = this._auth.credentials.user + ' ' + hex_hmac;\n\n      this._responseActions.push(function (str) {\n        _this13._actionAUTH_CRAM_MD5_PASS(str, callback);\n      });\n\n      this._sendCommand(Buffer.from(prepended).toString('base64'));\n    }\n    /**\n     * Handles the response to CRAM-MD5 authentication, if there's no error,\n     * the user can be considered logged in. Start waiting for a message to send\n     *\n     * @param {String} str Message from the server\n     */\n\n  }, {\n    key: \"_actionAUTH_CRAM_MD5_PASS\",\n    value: function _actionAUTH_CRAM_MD5_PASS(str, callback) {\n      if (!str.match(/^235\\s+/)) {\n        return callback(this._formatError('Invalid login sequence while waiting for \"235\"', 'EAUTH', str, 'AUTH CRAM-MD5'));\n      }\n\n      this.logger.info({\n        tnx: 'smtp',\n        username: this._auth.user,\n        action: 'authenticated',\n        method: this._authMethod\n      }, 'User %s authenticated', JSON.stringify(this._auth.user));\n      this.authenticated = true;\n      callback(null, true);\n    }\n    /**\n     * Handle the response for AUTH LOGIN command. We are expecting\n     * '334 UGFzc3dvcmQ6' (base64 for 'Password:'). Data to be sent as\n     * response needs to be base64 encoded password.\n     *\n     * @param {String} str Message from the server\n     */\n\n  }, {\n    key: \"_actionAUTH_LOGIN_PASS\",\n    value: function _actionAUTH_LOGIN_PASS(str, callback) {\n      var _this14 = this;\n\n      if (!/^334[ -]/.test(str)) {\n        // expecting '334 UGFzc3dvcmQ6'\n        return callback(this._formatError('Invalid login sequence while waiting for \"334 UGFzc3dvcmQ6\"', 'EAUTH', str, 'AUTH LOGIN'));\n      }\n\n      this._responseActions.push(function (str) {\n        _this14._actionAUTHComplete(str, callback);\n      });\n\n      this._sendCommand(Buffer.from(this._auth.credentials.pass + '', 'utf-8').toString('base64'));\n    }\n    /**\n     * Handles the response for authentication, if there's no error,\n     * the user can be considered logged in. Start waiting for a message to send\n     *\n     * @param {String} str Message from the server\n     */\n\n  }, {\n    key: \"_actionAUTHComplete\",\n    value: function _actionAUTHComplete(str, isRetry, callback) {\n      var _this15 = this;\n\n      if (!callback && typeof isRetry === 'function') {\n        callback = isRetry;\n        isRetry = false;\n      }\n\n      if (str.substr(0, 3) === '334') {\n        this._responseActions.push(function (str) {\n          if (isRetry || _this15._authMethod !== 'XOAUTH2') {\n            _this15._actionAUTHComplete(str, true, callback);\n          } else {\n            // fetch a new OAuth2 access token\n            setImmediate(function () {\n              return _this15._handleXOauth2Token(true, callback);\n            });\n          }\n        });\n\n        this._sendCommand('');\n\n        return;\n      }\n\n      if (str.charAt(0) !== '2') {\n        this.logger.info({\n          tnx: 'smtp',\n          username: this._auth.user,\n          action: 'authfail',\n          method: this._authMethod\n        }, 'User %s failed to authenticate', JSON.stringify(this._auth.user));\n        return callback(this._formatError('Invalid login', 'EAUTH', str, 'AUTH ' + this._authMethod));\n      }\n\n      this.logger.info({\n        tnx: 'smtp',\n        username: this._auth.user,\n        action: 'authenticated',\n        method: this._authMethod\n      }, 'User %s authenticated', JSON.stringify(this._auth.user));\n      this.authenticated = true;\n      callback(null, true);\n    }\n    /**\n     * Handle response for a MAIL FROM: command\n     *\n     * @param {String} str Message from the server\n     */\n\n  }, {\n    key: \"_actionMAIL\",\n    value: function _actionMAIL(str, callback) {\n      var _this16 = this;\n\n      var message, curRecipient;\n\n      if (Number(str.charAt(0)) !== 2) {\n        if (this._usingSmtpUtf8 && /^550 /.test(str) && /[\\x80-\\uFFFF]/.test(this._envelope.from)) {\n          message = 'Internationalized mailbox name not allowed';\n        } else {\n          message = 'Mail command failed';\n        }\n\n        return callback(this._formatError(message, 'EENVELOPE', str, 'MAIL FROM'));\n      }\n\n      if (!this._envelope.rcptQueue.length) {\n        return callback(this._formatError('Can\\x27t send mail - no recipients defined', 'EENVELOPE', false, 'API'));\n      } else {\n        this._recipientQueue = [];\n\n        if (this._supportedExtensions.includes('PIPELINING')) {\n          while (this._envelope.rcptQueue.length) {\n            curRecipient = this._envelope.rcptQueue.shift();\n\n            this._recipientQueue.push(curRecipient);\n\n            this._responseActions.push(function (str) {\n              _this16._actionRCPT(str, callback);\n            });\n\n            this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());\n          }\n        } else {\n          curRecipient = this._envelope.rcptQueue.shift();\n\n          this._recipientQueue.push(curRecipient);\n\n          this._responseActions.push(function (str) {\n            _this16._actionRCPT(str, callback);\n          });\n\n          this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());\n        }\n      }\n    }\n    /**\n     * Handle response for a RCPT TO: command\n     *\n     * @param {String} str Message from the server\n     */\n\n  }, {\n    key: \"_actionRCPT\",\n    value: function _actionRCPT(str, callback) {\n      var _this17 = this;\n\n      var message,\n          err,\n          curRecipient = this._recipientQueue.shift();\n\n      if (Number(str.charAt(0)) !== 2) {\n        // this is a soft error\n        if (this._usingSmtpUtf8 && /^553 /.test(str) && /[\\x80-\\uFFFF]/.test(curRecipient)) {\n          message = 'Internationalized mailbox name not allowed';\n        } else {\n          message = 'Recipient command failed';\n        }\n\n        this._envelope.rejected.push(curRecipient); // store error for the failed recipient\n\n\n        err = this._formatError(message, 'EENVELOPE', str, 'RCPT TO');\n        err.recipient = curRecipient;\n\n        this._envelope.rejectedErrors.push(err);\n      } else {\n        this._envelope.accepted.push(curRecipient);\n      }\n\n      if (!this._envelope.rcptQueue.length && !this._recipientQueue.length) {\n        if (this._envelope.rejected.length < this._envelope.to.length) {\n          this._responseActions.push(function (str) {\n            _this17._actionDATA(str, callback);\n          });\n\n          this._sendCommand('DATA');\n        } else {\n          err = this._formatError('Can\\x27t send mail - all recipients were rejected', 'EENVELOPE', str, 'RCPT TO');\n          err.rejected = this._envelope.rejected;\n          err.rejectedErrors = this._envelope.rejectedErrors;\n          return callback(err);\n        }\n      } else if (this._envelope.rcptQueue.length) {\n        curRecipient = this._envelope.rcptQueue.shift();\n\n        this._recipientQueue.push(curRecipient);\n\n        this._responseActions.push(function (str) {\n          _this17._actionRCPT(str, callback);\n        });\n\n        this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());\n      }\n    }\n    /**\n     * Handle response for a DATA command\n     *\n     * @param {String} str Message from the server\n     */\n\n  }, {\n    key: \"_actionDATA\",\n    value: function _actionDATA(str, callback) {\n      // response should be 354 but according to this issue https://github.com/eleith/emailjs/issues/24\n      // some servers might use 250 instead, so lets check for 2 or 3 as the first digit\n      if (!/^[23]/.test(str)) {\n        return callback(this._formatError('Data command failed', 'EENVELOPE', str, 'DATA'));\n      }\n\n      var response = {\n        accepted: this._envelope.accepted,\n        rejected: this._envelope.rejected\n      };\n\n      if (this._envelope.rejectedErrors.length) {\n        response.rejectedErrors = this._envelope.rejectedErrors;\n      }\n\n      callback(null, response);\n    }\n    /**\n     * Handle response for a DATA stream when using SMTP\n     * We expect a single response that defines if the sending succeeded or failed\n     *\n     * @param {String} str Message from the server\n     */\n\n  }, {\n    key: \"_actionSMTPStream\",\n    value: function _actionSMTPStream(str, callback) {\n      if (Number(str.charAt(0)) !== 2) {\n        // Message failed\n        return callback(this._formatError('Message failed', 'EMESSAGE', str, 'DATA'));\n      } else {\n        // Message sent succesfully\n        return callback(null, str);\n      }\n    }\n    /**\n     * Handle response for a DATA stream\n     * We expect a separate response for every recipient. All recipients can either\n     * succeed or fail separately\n     *\n     * @param {String} recipient The recipient this response applies to\n     * @param {Boolean} final Is this the final recipient?\n     * @param {String} str Message from the server\n     */\n\n  }, {\n    key: \"_actionLMTPStream\",\n    value: function _actionLMTPStream(recipient, final, str, callback) {\n      var err;\n\n      if (Number(str.charAt(0)) !== 2) {\n        // Message failed\n        err = this._formatError('Message failed for recipient ' + recipient, 'EMESSAGE', str, 'DATA');\n        err.recipient = recipient;\n\n        this._envelope.rejected.push(recipient);\n\n        this._envelope.rejectedErrors.push(err);\n\n        for (var i = 0, len = this._envelope.accepted.length; i < len; i++) {\n          if (this._envelope.accepted[i] === recipient) {\n            this._envelope.accepted.splice(i, 1);\n          }\n        }\n      }\n\n      if (final) {\n        return callback(null, str);\n      }\n    }\n  }, {\n    key: \"_handleXOauth2Token\",\n    value: function _handleXOauth2Token(isRetry, callback) {\n      var _this18 = this;\n\n      this._auth.oauth2.getToken(isRetry, function (err, accessToken) {\n        if (err) {\n          _this18.logger.info({\n            tnx: 'smtp',\n            username: _this18._auth.user,\n            action: 'authfail',\n            method: _this18._authMethod\n          }, 'User %s failed to authenticate', JSON.stringify(_this18._auth.user));\n\n          return callback(_this18._formatError(err, 'EAUTH', false, 'AUTH XOAUTH2'));\n        }\n\n        _this18._responseActions.push(function (str) {\n          _this18._actionAUTHComplete(str, isRetry, callback);\n        });\n\n        _this18._sendCommand('AUTH XOAUTH2 ' + _this18._auth.oauth2.buildXOAuth2Token(accessToken));\n      });\n    }\n    /**\n     *\n     * @param {string} command\n     * @private\n     */\n\n  }, {\n    key: \"_isDestroyedMessage\",\n    value: function _isDestroyedMessage(command) {\n      if (this._destroyed) {\n        return 'Cannot ' + command + ' - smtp connection is already destroyed.';\n      }\n\n      if (this._socket) {\n        if (this._socket.destroyed) {\n          return 'Cannot ' + command + ' - smtp connection socket is already destroyed.';\n        }\n\n        if (!this._socket.writable) {\n          return 'Cannot ' + command + ' - smtp connection socket is already half-closed.';\n        }\n      }\n    }\n  }, {\n    key: \"_getHostname\",\n    value: function _getHostname() {\n      // defaul hostname is machine hostname or [IP]\n      var defaultHostname = os.hostname() || ''; // ignore if not FQDN\n\n      if (defaultHostname.indexOf('.') < 0) {\n        defaultHostname = '[127.0.0.1]';\n      } // IP should be enclosed in []\n\n\n      if (defaultHostname.match(/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/)) {\n        defaultHostname = '[' + defaultHostname + ']';\n      }\n\n      return defaultHostname;\n    }\n  }]);\n\n  return SMTPConnection;\n}(EventEmitter);\n\nmodule.exports = SMTPConnection;","map":{"version":3,"sources":["/home/yamin/My_repos/new-email-app/new-email-app/node_modules/nodemailer/lib/smtp-connection/index.js"],"names":["packageInfo","require","EventEmitter","net","tls","os","crypto","DataStream","PassThrough","shared","CONNECTION_TIMEOUT","SOCKET_TIMEOUT","GREETING_TIMEOUT","SMTPConnection","options","id","randomBytes","toString","replace","stage","secureConnection","secure","alreadySecured","secured","port","Number","host","name","_getHostname","logger","getLogger","component","sid","customAuth","Map","Object","keys","forEach","key","mapKey","trim","toUpperCase","set","version","authenticated","destroyed","_remainder","_responseQueue","lastServerResponse","_socket","_supportedAuth","allowsAuth","_envelope","_supportedExtensions","_maxAllowedSize","_responseActions","_recipientQueue","_greetingTimeout","_connectionTimeout","_destroyed","_closing","_onSocketData","chunk","_onData","_onSocketError","error","_onError","_onSocketClose","_onClose","_onSocketEnd","_onEnd","_onSocketTimeout","_onTimeout","connectCallback","once","debug","tnx","isDestroyedMessage","_isDestroyedMessage","_formatError","opts","localAddress","setupConnectionHandlers","setTimeout","connectionTimeout","on","connection","setImmediate","_upgradeConnection","err","Error","message","_onConnect","socket","resolveHostname","resolved","source","cached","_cached","charAt","connect","setKeepAlive","E","_sendCommand","push","close","clearTimeout","closeMethod","_destroy","authData","callback","_auth","_authMethod","method","oauth2","credentials","user","pass","has","handler","get","lastResponse","returned","resolve","info","username","action","JSON","stringify","reject","handlerResponse","auth","extensions","concat","authMethods","maxAllowedSize","sendCommand","cmd","done","promise","Promise","callbackPromise","str","codes","match","data","command","response","status","code","text","substr","length","catch","then","_handleXOauth2Token","_actionAUTH_LOGIN_USER","_actionAUTHComplete","Buffer","from","_actionAUTH_CRAM_MD5","envelope","size","arguments","startTime","Date","now","_setEnvelope","envelopeTime","stream","_createSendStream","messageTime","messageSize","outByteCount","pipe","write","end","localPort","remoteAddress","remotePort","removeListener","socketTimeout","_actionGreeting","greetingTimeout","resume","lines","split","lastline","pop","i","len","test","_processResponse","type","emit","prototype","call","responseCode","upgrading","includes","destroy","socketPlain","shift","transactionLog","args","useSmtpUtf8","address","to","map","rcptQueue","parse","rejected","rejectedErrors","accepted","dsn","_setDsnEnvelope","_actionMAIL","_usingSmtpUtf8","use8BitMime","_using8BitMime","ret","encodeXText","envid","join","params","return","notify","n","validNotify","invaliNotify","filter","orcpt","recipient","indexOf","dataStream","logStream","lmtp","final","_actionLMTPStream","_actionSMTPStream","read","inByteCount","_actionLHLO","_actionEHLO","requireTLS","_actionHELO","ignoreTLS","_actionSTARTTLS","opportunisticTLS","_actionAUTH_LOGIN_PASS","challengeMatch","challengeString","base64decoded","hmac_md5","createHmac","update","hex_hmac","digest","prepended","_actionAUTH_CRAM_MD5_PASS","isRetry","curRecipient","_actionRCPT","_getDsnRcptToArgs","_actionDATA","splice","getToken","accessToken","buildXOAuth2Token","writable","defaultHostname","hostname","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst packageInfo = require('../../package.json');\nconst EventEmitter = require('events').EventEmitter;\nconst net = require('net');\nconst tls = require('tls');\nconst os = require('os');\nconst crypto = require('crypto');\nconst DataStream = require('./data-stream');\nconst PassThrough = require('stream').PassThrough;\nconst shared = require('../shared');\n\n// default timeout values in ms\nconst CONNECTION_TIMEOUT = 2 * 60 * 1000; // how much to wait for the connection to be established\nconst SOCKET_TIMEOUT = 10 * 60 * 1000; // how much to wait for socket inactivity before disconnecting the client\nconst GREETING_TIMEOUT = 30 * 1000; // how much to wait after connection is established but SMTP greeting is not receieved\n\n/**\n * Generates a SMTP connection object\n *\n * Optional options object takes the following possible properties:\n *\n *  * **port** - is the port to connect to (defaults to 587 or 465)\n *  * **host** - is the hostname or IP address to connect to (defaults to 'localhost')\n *  * **secure** - use SSL\n *  * **ignoreTLS** - ignore server support for STARTTLS\n *  * **requireTLS** - forces the client to use STARTTLS\n *  * **name** - the name of the client server\n *  * **localAddress** - outbound address to bind to (see: http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener)\n *  * **greetingTimeout** - Time to wait in ms until greeting message is received from the server (defaults to 10000)\n *  * **connectionTimeout** - how many milliseconds to wait for the connection to establish\n *  * **socketTimeout** - Time of inactivity until the connection is closed (defaults to 1 hour)\n *  * **lmtp** - if true, uses LMTP instead of SMTP protocol\n *  * **logger** - bunyan compatible logger interface\n *  * **debug** - if true pass SMTP traffic to the logger\n *  * **tls** - options for createCredentials\n *  * **socket** - existing socket to use instead of creating a new one (see: http://nodejs.org/api/net.html#net_class_net_socket)\n *  * **secured** - boolean indicates that the provided socket has already been upgraded to tls\n *\n * @constructor\n * @namespace SMTP Client module\n * @param {Object} [options] Option properties\n */\nclass SMTPConnection extends EventEmitter {\n    constructor(options) {\n        super(options);\n\n        this.id = crypto.randomBytes(8).toString('base64').replace(/\\W/g, '');\n        this.stage = 'init';\n\n        this.options = options || {};\n\n        this.secureConnection = !!this.options.secure;\n        this.alreadySecured = !!this.options.secured;\n\n        this.port = Number(this.options.port) || (this.secureConnection ? 465 : 587);\n        this.host = this.options.host || 'localhost';\n\n        if (typeof this.options.secure === 'undefined' && this.port === 465) {\n            // if secure option is not set but port is 465, then default to secure\n            this.secureConnection = true;\n        }\n\n        this.name = this.options.name || this._getHostname();\n\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || 'smtp-connection',\n            sid: this.id\n        });\n\n        this.customAuth = new Map();\n        Object.keys(this.options.customAuth || {}).forEach(key => {\n            let mapKey = (key || '').toString().trim().toUpperCase();\n            if (!mapKey) {\n                return;\n            }\n            this.customAuth.set(mapKey, this.options.customAuth[key]);\n        });\n\n        /**\n         * Expose version nr, just for the reference\n         * @type {String}\n         */\n        this.version = packageInfo.version;\n\n        /**\n         * If true, then the user is authenticated\n         * @type {Boolean}\n         */\n        this.authenticated = false;\n\n        /**\n         * If set to true, this instance is no longer active\n         * @private\n         */\n        this.destroyed = false;\n\n        /**\n         * Defines if the current connection is secure or not. If not,\n         * STARTTLS can be used if available\n         * @private\n         */\n        this.secure = !!this.secureConnection;\n\n        /**\n         * Store incomplete messages coming from the server\n         * @private\n         */\n        this._remainder = '';\n\n        /**\n         * Unprocessed responses from the server\n         * @type {Array}\n         */\n        this._responseQueue = [];\n\n        this.lastServerResponse = false;\n\n        /**\n         * The socket connecting to the server\n         * @publick\n         */\n        this._socket = false;\n\n        /**\n         * Lists supported auth mechanisms\n         * @private\n         */\n        this._supportedAuth = [];\n\n        /**\n         * Set to true, if EHLO response includes \"AUTH\".\n         * If false then authentication is not tried\n         */\n        this.allowsAuth = false;\n\n        /**\n         * Includes current envelope (from, to)\n         * @private\n         */\n        this._envelope = false;\n\n        /**\n         * Lists supported extensions\n         * @private\n         */\n        this._supportedExtensions = [];\n\n        /**\n         * Defines the maximum allowed size for a single message\n         * @private\n         */\n        this._maxAllowedSize = 0;\n\n        /**\n         * Function queue to run if a data chunk comes from the server\n         * @private\n         */\n        this._responseActions = [];\n        this._recipientQueue = [];\n\n        /**\n         * Timeout variable for waiting the greeting\n         * @private\n         */\n        this._greetingTimeout = false;\n\n        /**\n         * Timeout variable for waiting the connection to start\n         * @private\n         */\n        this._connectionTimeout = false;\n\n        /**\n         * If the socket is deemed already closed\n         * @private\n         */\n        this._destroyed = false;\n\n        /**\n         * If the socket is already being closed\n         * @private\n         */\n        this._closing = false;\n\n        /**\n         * Callbacks for socket's listeners\n         */\n        this._onSocketData = chunk => this._onData(chunk);\n        this._onSocketError = error => this._onError(error, 'ESOCKET', false, 'CONN');\n        this._onSocketClose = () => this._onClose();\n        this._onSocketEnd = () => this._onEnd();\n        this._onSocketTimeout = () => this._onTimeout();\n    }\n\n    /**\n     * Creates a connection to a SMTP server and sets up connection\n     * listener\n     */\n    connect(connectCallback) {\n        if (typeof connectCallback === 'function') {\n            this.once('connect', () => {\n                this.logger.debug(\n                    {\n                        tnx: 'smtp'\n                    },\n                    'SMTP handshake finished'\n                );\n                connectCallback();\n            });\n\n            const isDestroyedMessage = this._isDestroyedMessage('connect');\n            if (isDestroyedMessage) {\n                return connectCallback(this._formatError(isDestroyedMessage, 'ECONNECTION', false, 'CONN'));\n            }\n        }\n\n        let opts = {\n            port: this.port,\n            host: this.host\n        };\n\n        if (this.options.localAddress) {\n            opts.localAddress = this.options.localAddress;\n        }\n\n        let setupConnectionHandlers = () => {\n            this._connectionTimeout = setTimeout(() => {\n                this._onError('Connection timeout', 'ETIMEDOUT', false, 'CONN');\n            }, this.options.connectionTimeout || CONNECTION_TIMEOUT);\n\n            this._socket.on('error', this._onSocketError);\n        };\n\n        if (this.options.connection) {\n            // connection is already opened\n            this._socket = this.options.connection;\n            if (this.secureConnection && !this.alreadySecured) {\n                setImmediate(() =>\n                    this._upgradeConnection(err => {\n                        if (err) {\n                            this._onError(new Error('Error initiating TLS - ' + (err.message || err)), 'ETLS', false, 'CONN');\n                            return;\n                        }\n                        this._onConnect();\n                    })\n                );\n            } else {\n                setImmediate(() => this._onConnect());\n            }\n            return;\n        } else if (this.options.socket) {\n            // socket object is set up but not yet connected\n            this._socket = this.options.socket;\n            return shared.resolveHostname(opts, (err, resolved) => {\n                if (err) {\n                    return setImmediate(() => this._onError(err, 'EDNS', false, 'CONN'));\n                }\n                this.logger.debug(\n                    {\n                        tnx: 'dns',\n                        source: opts.host,\n                        resolved: resolved.host,\n                        cached: !!resolved._cached\n                    },\n                    'Resolved %s as %s [cache %s]',\n                    opts.host,\n                    resolved.host,\n                    resolved._cached ? 'hit' : 'miss'\n                );\n                Object.keys(resolved).forEach(key => {\n                    if (key.charAt(0) !== '_' && resolved[key]) {\n                        opts[key] = resolved[key];\n                    }\n                });\n                try {\n                    this._socket.connect(this.port, this.host, () => {\n                        this._socket.setKeepAlive(true);\n                        this._onConnect();\n                    });\n                    setupConnectionHandlers();\n                } catch (E) {\n                    return setImmediate(() => this._onError(E, 'ECONNECTION', false, 'CONN'));\n                }\n            });\n        } else if (this.secureConnection) {\n            // connect using tls\n            if (this.options.tls) {\n                Object.keys(this.options.tls).forEach(key => {\n                    opts[key] = this.options.tls[key];\n                });\n            }\n            return shared.resolveHostname(opts, (err, resolved) => {\n                if (err) {\n                    return setImmediate(() => this._onError(err, 'EDNS', false, 'CONN'));\n                }\n                this.logger.debug(\n                    {\n                        tnx: 'dns',\n                        source: opts.host,\n                        resolved: resolved.host,\n                        cached: !!resolved._cached\n                    },\n                    'Resolved %s as %s [cache %s]',\n                    opts.host,\n                    resolved.host,\n                    resolved._cached ? 'hit' : 'miss'\n                );\n                Object.keys(resolved).forEach(key => {\n                    if (key.charAt(0) !== '_' && resolved[key]) {\n                        opts[key] = resolved[key];\n                    }\n                });\n                try {\n                    this._socket = tls.connect(opts, () => {\n                        this._socket.setKeepAlive(true);\n                        this._onConnect();\n                    });\n                    setupConnectionHandlers();\n                } catch (E) {\n                    return setImmediate(() => this._onError(E, 'ECONNECTION', false, 'CONN'));\n                }\n            });\n        } else {\n            // connect using plaintext\n            return shared.resolveHostname(opts, (err, resolved) => {\n                if (err) {\n                    return setImmediate(() => this._onError(err, 'EDNS', false, 'CONN'));\n                }\n                this.logger.debug(\n                    {\n                        tnx: 'dns',\n                        source: opts.host,\n                        resolved: resolved.host,\n                        cached: !!resolved._cached\n                    },\n                    'Resolved %s as %s [cache %s]',\n                    opts.host,\n                    resolved.host,\n                    resolved._cached ? 'hit' : 'miss'\n                );\n                Object.keys(resolved).forEach(key => {\n                    if (key.charAt(0) !== '_' && resolved[key]) {\n                        opts[key] = resolved[key];\n                    }\n                });\n                try {\n                    this._socket = net.connect(opts, () => {\n                        this._socket.setKeepAlive(true);\n                        this._onConnect();\n                    });\n                    setupConnectionHandlers();\n                } catch (E) {\n                    return setImmediate(() => this._onError(E, 'ECONNECTION', false, 'CONN'));\n                }\n            });\n        }\n    }\n\n    /**\n     * Sends QUIT\n     */\n    quit() {\n        this._sendCommand('QUIT');\n        this._responseActions.push(this.close);\n    }\n\n    /**\n     * Closes the connection to the server\n     */\n    close() {\n        clearTimeout(this._connectionTimeout);\n        clearTimeout(this._greetingTimeout);\n        this._responseActions = [];\n\n        // allow to run this function only once\n        if (this._closing) {\n            return;\n        }\n        this._closing = true;\n\n        let closeMethod = 'end';\n\n        if (this.stage === 'init') {\n            // Close the socket immediately when connection timed out\n            closeMethod = 'destroy';\n        }\n\n        this.logger.debug(\n            {\n                tnx: 'smtp'\n            },\n            'Closing connection to the server using \"%s\"',\n            closeMethod\n        );\n\n        let socket = (this._socket && this._socket.socket) || this._socket;\n\n        if (socket && !socket.destroyed) {\n            try {\n                this._socket[closeMethod]();\n            } catch (E) {\n                // just ignore\n            }\n        }\n\n        this._destroy();\n    }\n\n    /**\n     * Authenticate user\n     */\n    login(authData, callback) {\n        const isDestroyedMessage = this._isDestroyedMessage('login');\n        if (isDestroyedMessage) {\n            return callback(this._formatError(isDestroyedMessage, 'ECONNECTION', false, 'API'));\n        }\n\n        this._auth = authData || {};\n        // Select SASL authentication method\n        this._authMethod = (this._auth.method || '').toString().trim().toUpperCase() || false;\n\n        if (!this._authMethod && this._auth.oauth2 && !this._auth.credentials) {\n            this._authMethod = 'XOAUTH2';\n        } else if (!this._authMethod || (this._authMethod === 'XOAUTH2' && !this._auth.oauth2)) {\n            // use first supported\n            this._authMethod = (this._supportedAuth[0] || 'PLAIN').toUpperCase().trim();\n        }\n\n        if (this._authMethod !== 'XOAUTH2' && (!this._auth.credentials || !this._auth.credentials.user || !this._auth.credentials.pass)) {\n            if (this._auth.user && this._auth.pass) {\n                this._auth.credentials = {\n                    user: this._auth.user,\n                    pass: this._auth.pass,\n                    options: this._auth.options\n                };\n            } else {\n                return callback(this._formatError('Missing credentials for \"' + this._authMethod + '\"', 'EAUTH', false, 'API'));\n            }\n        }\n\n        if (this.customAuth.has(this._authMethod)) {\n            let handler = this.customAuth.get(this._authMethod);\n            let lastResponse;\n            let returned = false;\n\n            let resolve = () => {\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                this.logger.info(\n                    {\n                        tnx: 'smtp',\n                        username: this._auth.user,\n                        action: 'authenticated',\n                        method: this._authMethod\n                    },\n                    'User %s authenticated',\n                    JSON.stringify(this._auth.user)\n                );\n                this.authenticated = true;\n                callback(null, true);\n            };\n\n            let reject = err => {\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                callback(this._formatError(err, 'EAUTH', lastResponse, 'AUTH ' + this._authMethod));\n            };\n\n            let handlerResponse = handler({\n                auth: this._auth,\n                method: this._authMethod,\n\n                extensions: [].concat(this._supportedExtensions),\n                authMethods: [].concat(this._supportedAuth),\n                maxAllowedSize: this._maxAllowedSize || false,\n\n                sendCommand: (cmd, done) => {\n                    let promise;\n\n                    if (!done) {\n                        promise = new Promise((resolve, reject) => {\n                            done = shared.callbackPromise(resolve, reject);\n                        });\n                    }\n\n                    this._responseActions.push(str => {\n                        lastResponse = str;\n\n                        let codes = str.match(/^(\\d+)(?:\\s(\\d+\\.\\d+\\.\\d+))?\\s/);\n                        let data = {\n                            command: cmd,\n                            response: str\n                        };\n                        if (codes) {\n                            data.status = Number(codes[1]) || 0;\n                            if (codes[2]) {\n                                data.code = codes[2];\n                            }\n                            data.text = str.substr(codes[0].length);\n                        } else {\n                            data.text = str;\n                            data.status = 0; // just in case we need to perform numeric comparisons\n                        }\n                        done(null, data);\n                    });\n                    setImmediate(() => this._sendCommand(cmd));\n\n                    return promise;\n                },\n\n                resolve,\n                reject\n            });\n\n            if (handlerResponse && typeof handlerResponse.catch === 'function') {\n                // a promise was returned\n                handlerResponse.then(resolve).catch(reject);\n            }\n\n            return;\n        }\n\n        switch (this._authMethod) {\n            case 'XOAUTH2':\n                this._handleXOauth2Token(false, callback);\n                return;\n            case 'LOGIN':\n                this._responseActions.push(str => {\n                    this._actionAUTH_LOGIN_USER(str, callback);\n                });\n                this._sendCommand('AUTH LOGIN');\n                return;\n            case 'PLAIN':\n                this._responseActions.push(str => {\n                    this._actionAUTHComplete(str, callback);\n                });\n                this._sendCommand(\n                    'AUTH PLAIN ' +\n                        Buffer.from(\n                            //this._auth.user+'\\u0000'+\n                            '\\u0000' + // skip authorization identity as it causes problems with some servers\n                                this._auth.credentials.user +\n                                '\\u0000' +\n                                this._auth.credentials.pass,\n                            'utf-8'\n                        ).toString('base64')\n                );\n                return;\n            case 'CRAM-MD5':\n                this._responseActions.push(str => {\n                    this._actionAUTH_CRAM_MD5(str, callback);\n                });\n                this._sendCommand('AUTH CRAM-MD5');\n                return;\n        }\n\n        return callback(this._formatError('Unknown authentication method \"' + this._authMethod + '\"', 'EAUTH', false, 'API'));\n    }\n\n    /**\n     * Sends a message\n     *\n     * @param {Object} envelope Envelope object, {from: addr, to: [addr]}\n     * @param {Object} message String, Buffer or a Stream\n     * @param {Function} callback Callback to return once sending is completed\n     */\n    send(envelope, message, done) {\n        if (!message) {\n            return done(this._formatError('Empty message', 'EMESSAGE', false, 'API'));\n        }\n\n        const isDestroyedMessage = this._isDestroyedMessage('send message');\n        if (isDestroyedMessage) {\n            return done(this._formatError(isDestroyedMessage, 'ECONNECTION', false, 'API'));\n        }\n\n        // reject larger messages than allowed\n        if (this._maxAllowedSize && envelope.size > this._maxAllowedSize) {\n            return setImmediate(() => {\n                done(this._formatError('Message size larger than allowed ' + this._maxAllowedSize, 'EMESSAGE', false, 'MAIL FROM'));\n            });\n        }\n\n        // ensure that callback is only called once\n        let returned = false;\n        let callback = function () {\n            if (returned) {\n                return;\n            }\n            returned = true;\n\n            done(...arguments);\n        };\n\n        if (typeof message.on === 'function') {\n            message.on('error', err => callback(this._formatError(err, 'ESTREAM', false, 'API')));\n        }\n\n        let startTime = Date.now();\n        this._setEnvelope(envelope, (err, info) => {\n            if (err) {\n                return callback(err);\n            }\n            let envelopeTime = Date.now();\n            let stream = this._createSendStream((err, str) => {\n                if (err) {\n                    return callback(err);\n                }\n\n                info.envelopeTime = envelopeTime - startTime;\n                info.messageTime = Date.now() - envelopeTime;\n                info.messageSize = stream.outByteCount;\n                info.response = str;\n\n                return callback(null, info);\n            });\n            if (typeof message.pipe === 'function') {\n                message.pipe(stream);\n            } else {\n                stream.write(message);\n                stream.end();\n            }\n        });\n    }\n\n    /**\n     * Resets connection state\n     *\n     * @param {Function} callback Callback to return once connection is reset\n     */\n    reset(callback) {\n        this._sendCommand('RSET');\n        this._responseActions.push(str => {\n            if (str.charAt(0) !== '2') {\n                return callback(this._formatError('Could not reset session state. response=' + str, 'EPROTOCOL', str, 'RSET'));\n            }\n            this._envelope = false;\n            return callback(null, true);\n        });\n    }\n\n    /**\n     * Connection listener that is run when the connection to\n     * the server is opened\n     *\n     * @event\n     */\n    _onConnect() {\n        clearTimeout(this._connectionTimeout);\n\n        this.logger.info(\n            {\n                tnx: 'network',\n                localAddress: this._socket.localAddress,\n                localPort: this._socket.localPort,\n                remoteAddress: this._socket.remoteAddress,\n                remotePort: this._socket.remotePort\n            },\n            '%s established to %s:%s',\n            this.secure ? 'Secure connection' : 'Connection',\n            this._socket.remoteAddress,\n            this._socket.remotePort\n        );\n\n        if (this._destroyed) {\n            // Connection was established after we already had canceled it\n            this.close();\n            return;\n        }\n\n        this.stage = 'connected';\n\n        // clear existing listeners for the socket\n        this._socket.removeListener('data', this._onSocketData);\n        this._socket.removeListener('timeout', this._onSocketTimeout);\n        this._socket.removeListener('close', this._onSocketClose);\n        this._socket.removeListener('end', this._onSocketEnd);\n\n        this._socket.on('data', this._onSocketData);\n        this._socket.once('close', this._onSocketClose);\n        this._socket.once('end', this._onSocketEnd);\n\n        this._socket.setTimeout(this.options.socketTimeout || SOCKET_TIMEOUT);\n        this._socket.on('timeout', this._onSocketTimeout);\n\n        this._greetingTimeout = setTimeout(() => {\n            // if still waiting for greeting, give up\n            if (this._socket && !this._destroyed && this._responseActions[0] === this._actionGreeting) {\n                this._onError('Greeting never received', 'ETIMEDOUT', false, 'CONN');\n            }\n        }, this.options.greetingTimeout || GREETING_TIMEOUT);\n\n        this._responseActions.push(this._actionGreeting);\n\n        // we have a 'data' listener set up so resume socket if it was paused\n        this._socket.resume();\n    }\n\n    /**\n     * 'data' listener for data coming from the server\n     *\n     * @event\n     * @param {Buffer} chunk Data chunk coming from the server\n     */\n    _onData(chunk) {\n        if (this._destroyed || !chunk || !chunk.length) {\n            return;\n        }\n\n        let data = (chunk || '').toString('binary');\n        let lines = (this._remainder + data).split(/\\r?\\n/);\n        let lastline;\n\n        this._remainder = lines.pop();\n\n        for (let i = 0, len = lines.length; i < len; i++) {\n            if (this._responseQueue.length) {\n                lastline = this._responseQueue[this._responseQueue.length - 1];\n                if (/^\\d+-/.test(lastline.split('\\n').pop())) {\n                    this._responseQueue[this._responseQueue.length - 1] += '\\n' + lines[i];\n                    continue;\n                }\n            }\n            this._responseQueue.push(lines[i]);\n        }\n\n        if (this._responseQueue.length) {\n            lastline = this._responseQueue[this._responseQueue.length - 1];\n            if (/^\\d+-/.test(lastline.split('\\n').pop())) {\n                return;\n            }\n        }\n\n        this._processResponse();\n    }\n\n    /**\n     * 'error' listener for the socket\n     *\n     * @event\n     * @param {Error} err Error object\n     * @param {String} type Error name\n     */\n    _onError(err, type, data, command) {\n        clearTimeout(this._connectionTimeout);\n        clearTimeout(this._greetingTimeout);\n\n        if (this._destroyed) {\n            // just ignore, already closed\n            // this might happen when a socket is canceled because of reached timeout\n            // but the socket timeout error itself receives only after\n            return;\n        }\n\n        err = this._formatError(err, type, data, command);\n\n        this.logger.error(data, err.message);\n\n        this.emit('error', err);\n        this.close();\n    }\n\n    _formatError(message, type, response, command) {\n        let err;\n\n        if (/Error\\]$/i.test(Object.prototype.toString.call(message))) {\n            err = message;\n        } else {\n            err = new Error(message);\n        }\n\n        if (type && type !== 'Error') {\n            err.code = type;\n        }\n\n        if (response) {\n            err.response = response;\n            err.message += ': ' + response;\n        }\n\n        let responseCode = (typeof response === 'string' && Number((response.match(/^\\d+/) || [])[0])) || false;\n        if (responseCode) {\n            err.responseCode = responseCode;\n        }\n\n        if (command) {\n            err.command = command;\n        }\n\n        return err;\n    }\n\n    /**\n     * 'close' listener for the socket\n     *\n     * @event\n     */\n    _onClose() {\n        this.logger.info(\n            {\n                tnx: 'network'\n            },\n            'Connection closed'\n        );\n\n        if (this.upgrading && !this._destroyed) {\n            return this._onError(new Error('Connection closed unexpectedly'), 'ETLS', false, 'CONN');\n        } else if (![this._actionGreeting, this.close].includes(this._responseActions[0]) && !this._destroyed) {\n            return this._onError(new Error('Connection closed unexpectedly'), 'ECONNECTION', false, 'CONN');\n        }\n\n        this._destroy();\n    }\n\n    /**\n     * 'end' listener for the socket\n     *\n     * @event\n     */\n    _onEnd() {\n        if (this._socket && !this._socket.destroyed) {\n            this._socket.destroy();\n        }\n    }\n\n    /**\n     * 'timeout' listener for the socket\n     *\n     * @event\n     */\n    _onTimeout() {\n        return this._onError(new Error('Timeout'), 'ETIMEDOUT', false, 'CONN');\n    }\n\n    /**\n     * Destroys the client, emits 'end'\n     */\n    _destroy() {\n        if (this._destroyed) {\n            return;\n        }\n        this._destroyed = true;\n        this.emit('end');\n    }\n\n    /**\n     * Upgrades the connection to TLS\n     *\n     * @param {Function} callback Callback function to run when the connection\n     *        has been secured\n     */\n    _upgradeConnection(callback) {\n        // do not remove all listeners or it breaks node v0.10 as there's\n        // apparently a 'finish' event set that would be cleared as well\n\n        // we can safely keep 'error', 'end', 'close' etc. events\n        this._socket.removeListener('data', this._onSocketData); // incoming data is going to be gibberish from this point onwards\n        this._socket.removeListener('timeout', this._onSocketTimeout); // timeout will be re-set for the new socket object\n\n        let socketPlain = this._socket;\n        let opts = {\n            socket: this._socket,\n            host: this.host\n        };\n\n        Object.keys(this.options.tls || {}).forEach(key => {\n            opts[key] = this.options.tls[key];\n        });\n\n        this.upgrading = true;\n        this._socket = tls.connect(opts, () => {\n            this.secure = true;\n            this.upgrading = false;\n            this._socket.on('data', this._onSocketData);\n\n            socketPlain.removeListener('close', this._onSocketClose);\n            socketPlain.removeListener('end', this._onSocketEnd);\n\n            return callback(null, true);\n        });\n\n        this._socket.on('error', this._onSocketError);\n        this._socket.once('close', this._onSocketClose);\n        this._socket.once('end', this._onSocketEnd);\n\n        this._socket.setTimeout(this.options.socketTimeout || SOCKET_TIMEOUT); // 10 min.\n        this._socket.on('timeout', this._onSocketTimeout);\n\n        // resume in case the socket was paused\n        socketPlain.resume();\n    }\n\n    /**\n     * Processes queued responses from the server\n     *\n     * @param {Boolean} force If true, ignores _processing flag\n     */\n    _processResponse() {\n        if (!this._responseQueue.length) {\n            return false;\n        }\n\n        let str = (this.lastServerResponse = (this._responseQueue.shift() || '').toString());\n\n        if (/^\\d+-/.test(str.split('\\n').pop())) {\n            // keep waiting for the final part of multiline response\n            return;\n        }\n\n        if (this.options.debug || this.options.transactionLog) {\n            this.logger.debug(\n                {\n                    tnx: 'server'\n                },\n                str.replace(/\\r?\\n$/, '')\n            );\n        }\n\n        if (!str.trim()) {\n            // skip unexpected empty lines\n            setImmediate(() => this._processResponse(true));\n        }\n\n        let action = this._responseActions.shift();\n\n        if (typeof action === 'function') {\n            action.call(this, str);\n            setImmediate(() => this._processResponse(true));\n        } else {\n            return this._onError(new Error('Unexpected Response'), 'EPROTOCOL', str, 'CONN');\n        }\n    }\n\n    /**\n     * Send a command to the server, append \\r\\n\n     *\n     * @param {String} str String to be sent to the server\n     */\n    _sendCommand(str) {\n        if (this._destroyed) {\n            // Connection already closed, can't send any more data\n            return;\n        }\n\n        if (this._socket.destroyed) {\n            return this.close();\n        }\n\n        if (this.options.debug || this.options.transactionLog) {\n            this.logger.debug(\n                {\n                    tnx: 'client'\n                },\n                (str || '').toString().replace(/\\r?\\n$/, '')\n            );\n        }\n\n        this._socket.write(Buffer.from(str + '\\r\\n', 'utf-8'));\n    }\n\n    /**\n     * Initiates a new message by submitting envelope data, starting with\n     * MAIL FROM: command\n     *\n     * @param {Object} envelope Envelope object in the form of\n     *        {from:'...', to:['...']}\n     *        or\n     *        {from:{address:'...',name:'...'}, to:[address:'...',name:'...']}\n     */\n    _setEnvelope(envelope, callback) {\n        let args = [];\n        let useSmtpUtf8 = false;\n\n        this._envelope = envelope || {};\n        this._envelope.from = ((this._envelope.from && this._envelope.from.address) || this._envelope.from || '').toString().trim();\n\n        this._envelope.to = [].concat(this._envelope.to || []).map(to => ((to && to.address) || to || '').toString().trim());\n\n        if (!this._envelope.to.length) {\n            return callback(this._formatError('No recipients defined', 'EENVELOPE', false, 'API'));\n        }\n\n        if (this._envelope.from && /[\\r\\n<>]/.test(this._envelope.from)) {\n            return callback(this._formatError('Invalid sender ' + JSON.stringify(this._envelope.from), 'EENVELOPE', false, 'API'));\n        }\n\n        // check if the sender address uses only ASCII characters,\n        // otherwise require usage of SMTPUTF8 extension\n        if (/[\\x80-\\uFFFF]/.test(this._envelope.from)) {\n            useSmtpUtf8 = true;\n        }\n\n        for (let i = 0, len = this._envelope.to.length; i < len; i++) {\n            if (!this._envelope.to[i] || /[\\r\\n<>]/.test(this._envelope.to[i])) {\n                return callback(this._formatError('Invalid recipient ' + JSON.stringify(this._envelope.to[i]), 'EENVELOPE', false, 'API'));\n            }\n\n            // check if the recipients addresses use only ASCII characters,\n            // otherwise require usage of SMTPUTF8 extension\n            if (/[\\x80-\\uFFFF]/.test(this._envelope.to[i])) {\n                useSmtpUtf8 = true;\n            }\n        }\n\n        // clone the recipients array for latter manipulation\n        this._envelope.rcptQueue = JSON.parse(JSON.stringify(this._envelope.to || []));\n        this._envelope.rejected = [];\n        this._envelope.rejectedErrors = [];\n        this._envelope.accepted = [];\n\n        if (this._envelope.dsn) {\n            try {\n                this._envelope.dsn = this._setDsnEnvelope(this._envelope.dsn);\n            } catch (err) {\n                return callback(this._formatError('Invalid DSN ' + err.message, 'EENVELOPE', false, 'API'));\n            }\n        }\n\n        this._responseActions.push(str => {\n            this._actionMAIL(str, callback);\n        });\n\n        // If the server supports SMTPUTF8 and the envelope includes an internationalized\n        // email address then append SMTPUTF8 keyword to the MAIL FROM command\n        if (useSmtpUtf8 && this._supportedExtensions.includes('SMTPUTF8')) {\n            args.push('SMTPUTF8');\n            this._usingSmtpUtf8 = true;\n        }\n\n        // If the server supports 8BITMIME and the message might contain non-ascii bytes\n        // then append the 8BITMIME keyword to the MAIL FROM command\n        if (this._envelope.use8BitMime && this._supportedExtensions.includes('8BITMIME')) {\n            args.push('BODY=8BITMIME');\n            this._using8BitMime = true;\n        }\n\n        if (this._envelope.size && this._supportedExtensions.includes('SIZE')) {\n            args.push('SIZE=' + this._envelope.size);\n        }\n\n        // If the server supports DSN and the envelope includes an DSN prop\n        // then append DSN params to the MAIL FROM command\n        if (this._envelope.dsn && this._supportedExtensions.includes('DSN')) {\n            if (this._envelope.dsn.ret) {\n                args.push('RET=' + shared.encodeXText(this._envelope.dsn.ret));\n            }\n            if (this._envelope.dsn.envid) {\n                args.push('ENVID=' + shared.encodeXText(this._envelope.dsn.envid));\n            }\n        }\n\n        this._sendCommand('MAIL FROM:<' + this._envelope.from + '>' + (args.length ? ' ' + args.join(' ') : ''));\n    }\n\n    _setDsnEnvelope(params) {\n        let ret = (params.ret || params.return || '').toString().toUpperCase() || null;\n        if (ret) {\n            switch (ret) {\n                case 'HDRS':\n                case 'HEADERS':\n                    ret = 'HDRS';\n                    break;\n                case 'FULL':\n                case 'BODY':\n                    ret = 'FULL';\n                    break;\n            }\n        }\n\n        if (ret && !['FULL', 'HDRS'].includes(ret)) {\n            throw new Error('ret: ' + JSON.stringify(ret));\n        }\n\n        let envid = (params.envid || params.id || '').toString() || null;\n\n        let notify = params.notify || null;\n        if (notify) {\n            if (typeof notify === 'string') {\n                notify = notify.split(',');\n            }\n            notify = notify.map(n => n.trim().toUpperCase());\n            let validNotify = ['NEVER', 'SUCCESS', 'FAILURE', 'DELAY'];\n            let invaliNotify = notify.filter(n => !validNotify.includes(n));\n            if (invaliNotify.length || (notify.length > 1 && notify.includes('NEVER'))) {\n                throw new Error('notify: ' + JSON.stringify(notify.join(',')));\n            }\n            notify = notify.join(',');\n        }\n\n        let orcpt = (params.orcpt || params.recipient || '').toString() || null;\n        if (orcpt && orcpt.indexOf(';') < 0) {\n            orcpt = 'rfc822;' + orcpt;\n        }\n\n        return {\n            ret,\n            envid,\n            notify,\n            orcpt\n        };\n    }\n\n    _getDsnRcptToArgs() {\n        let args = [];\n        // If the server supports DSN and the envelope includes an DSN prop\n        // then append DSN params to the RCPT TO command\n        if (this._envelope.dsn && this._supportedExtensions.includes('DSN')) {\n            if (this._envelope.dsn.notify) {\n                args.push('NOTIFY=' + shared.encodeXText(this._envelope.dsn.notify));\n            }\n            if (this._envelope.dsn.orcpt) {\n                args.push('ORCPT=' + shared.encodeXText(this._envelope.dsn.orcpt));\n            }\n        }\n        return args.length ? ' ' + args.join(' ') : '';\n    }\n\n    _createSendStream(callback) {\n        let dataStream = new DataStream();\n        let logStream;\n\n        if (this.options.lmtp) {\n            this._envelope.accepted.forEach((recipient, i) => {\n                let final = i === this._envelope.accepted.length - 1;\n                this._responseActions.push(str => {\n                    this._actionLMTPStream(recipient, final, str, callback);\n                });\n            });\n        } else {\n            this._responseActions.push(str => {\n                this._actionSMTPStream(str, callback);\n            });\n        }\n\n        dataStream.pipe(this._socket, {\n            end: false\n        });\n\n        if (this.options.debug) {\n            logStream = new PassThrough();\n            logStream.on('readable', () => {\n                let chunk;\n                while ((chunk = logStream.read())) {\n                    this.logger.debug(\n                        {\n                            tnx: 'message'\n                        },\n                        chunk.toString('binary').replace(/\\r?\\n$/, '')\n                    );\n                }\n            });\n            dataStream.pipe(logStream);\n        }\n\n        dataStream.once('end', () => {\n            this.logger.info(\n                {\n                    tnx: 'message',\n                    inByteCount: dataStream.inByteCount,\n                    outByteCount: dataStream.outByteCount\n                },\n                '<%s bytes encoded mime message (source size %s bytes)>',\n                dataStream.outByteCount,\n                dataStream.inByteCount\n            );\n        });\n\n        return dataStream;\n    }\n\n    /** ACTIONS **/\n\n    /**\n     * Will be run after the connection is created and the server sends\n     * a greeting. If the incoming message starts with 220 initiate\n     * SMTP session by sending EHLO command\n     *\n     * @param {String} str Message from the server\n     */\n    _actionGreeting(str) {\n        clearTimeout(this._greetingTimeout);\n\n        if (str.substr(0, 3) !== '220') {\n            this._onError(new Error('Invalid greeting. response=' + str), 'EPROTOCOL', str, 'CONN');\n            return;\n        }\n\n        if (this.options.lmtp) {\n            this._responseActions.push(this._actionLHLO);\n            this._sendCommand('LHLO ' + this.name);\n        } else {\n            this._responseActions.push(this._actionEHLO);\n            this._sendCommand('EHLO ' + this.name);\n        }\n    }\n\n    /**\n     * Handles server response for LHLO command. If it yielded in\n     * error, emit 'error', otherwise treat this as an EHLO response\n     *\n     * @param {String} str Message from the server\n     */\n    _actionLHLO(str) {\n        if (str.charAt(0) !== '2') {\n            this._onError(new Error('Invalid LHLO. response=' + str), 'EPROTOCOL', str, 'LHLO');\n            return;\n        }\n\n        this._actionEHLO(str);\n    }\n\n    /**\n     * Handles server response for EHLO command. If it yielded in\n     * error, try HELO instead, otherwise initiate TLS negotiation\n     * if STARTTLS is supported by the server or move into the\n     * authentication phase.\n     *\n     * @param {String} str Message from the server\n     */\n    _actionEHLO(str) {\n        let match;\n\n        if (str.substr(0, 3) === '421') {\n            this._onError(new Error('Server terminates connection. response=' + str), 'ECONNECTION', str, 'EHLO');\n            return;\n        }\n\n        if (str.charAt(0) !== '2') {\n            if (this.options.requireTLS) {\n                this._onError(new Error('EHLO failed but HELO does not support required STARTTLS. response=' + str), 'ECONNECTION', str, 'EHLO');\n                return;\n            }\n\n            // Try HELO instead\n            this._responseActions.push(this._actionHELO);\n            this._sendCommand('HELO ' + this.name);\n            return;\n        }\n\n        // Detect if the server supports STARTTLS\n        if (!this.secure && !this.options.ignoreTLS && (/[ -]STARTTLS\\b/im.test(str) || this.options.requireTLS)) {\n            this._sendCommand('STARTTLS');\n            this._responseActions.push(this._actionSTARTTLS);\n            return;\n        }\n\n        // Detect if the server supports SMTPUTF8\n        if (/[ -]SMTPUTF8\\b/im.test(str)) {\n            this._supportedExtensions.push('SMTPUTF8');\n        }\n\n        // Detect if the server supports DSN\n        if (/[ -]DSN\\b/im.test(str)) {\n            this._supportedExtensions.push('DSN');\n        }\n\n        // Detect if the server supports 8BITMIME\n        if (/[ -]8BITMIME\\b/im.test(str)) {\n            this._supportedExtensions.push('8BITMIME');\n        }\n\n        // Detect if the server supports PIPELINING\n        if (/[ -]PIPELINING\\b/im.test(str)) {\n            this._supportedExtensions.push('PIPELINING');\n        }\n\n        // Detect if the server supports AUTH\n        if (/[ -]AUTH\\b/i.test(str)) {\n            this.allowsAuth = true;\n        }\n\n        // Detect if the server supports PLAIN auth\n        if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)PLAIN/i.test(str)) {\n            this._supportedAuth.push('PLAIN');\n        }\n\n        // Detect if the server supports LOGIN auth\n        if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)LOGIN/i.test(str)) {\n            this._supportedAuth.push('LOGIN');\n        }\n\n        // Detect if the server supports CRAM-MD5 auth\n        if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)CRAM-MD5/i.test(str)) {\n            this._supportedAuth.push('CRAM-MD5');\n        }\n\n        // Detect if the server supports XOAUTH2 auth\n        if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)XOAUTH2/i.test(str)) {\n            this._supportedAuth.push('XOAUTH2');\n        }\n\n        // Detect if the server supports SIZE extensions (and the max allowed size)\n        if ((match = str.match(/[ -]SIZE(?:[ \\t]+(\\d+))?/im))) {\n            this._supportedExtensions.push('SIZE');\n            this._maxAllowedSize = Number(match[1]) || 0;\n        }\n\n        this.emit('connect');\n    }\n\n    /**\n     * Handles server response for HELO command. If it yielded in\n     * error, emit 'error', otherwise move into the authentication phase.\n     *\n     * @param {String} str Message from the server\n     */\n    _actionHELO(str) {\n        if (str.charAt(0) !== '2') {\n            this._onError(new Error('Invalid HELO. response=' + str), 'EPROTOCOL', str, 'HELO');\n            return;\n        }\n\n        // assume that authentication is enabled (most probably is not though)\n        this.allowsAuth = true;\n\n        this.emit('connect');\n    }\n\n    /**\n     * Handles server response for STARTTLS command. If there's an error\n     * try HELO instead, otherwise initiate TLS upgrade. If the upgrade\n     * succeedes restart the EHLO\n     *\n     * @param {String} str Message from the server\n     */\n    _actionSTARTTLS(str) {\n        if (str.charAt(0) !== '2') {\n            if (this.options.opportunisticTLS) {\n                this.logger.info(\n                    {\n                        tnx: 'smtp'\n                    },\n                    'Failed STARTTLS upgrade, continuing unencrypted'\n                );\n                return this.emit('connect');\n            }\n            this._onError(new Error('Error upgrading connection with STARTTLS'), 'ETLS', str, 'STARTTLS');\n            return;\n        }\n\n        this._upgradeConnection((err, secured) => {\n            if (err) {\n                this._onError(new Error('Error initiating TLS - ' + (err.message || err)), 'ETLS', false, 'STARTTLS');\n                return;\n            }\n\n            this.logger.info(\n                {\n                    tnx: 'smtp'\n                },\n                'Connection upgraded with STARTTLS'\n            );\n\n            if (secured) {\n                // restart session\n                if (this.options.lmtp) {\n                    this._responseActions.push(this._actionLHLO);\n                    this._sendCommand('LHLO ' + this.name);\n                } else {\n                    this._responseActions.push(this._actionEHLO);\n                    this._sendCommand('EHLO ' + this.name);\n                }\n            } else {\n                this.emit('connect');\n            }\n        });\n    }\n\n    /**\n     * Handle the response for AUTH LOGIN command. We are expecting\n     * '334 VXNlcm5hbWU6' (base64 for 'Username:'). Data to be sent as\n     * response needs to be base64 encoded username. We do not need\n     * exact match but settle with 334 response in general as some\n     * hosts invalidly use a longer message than VXNlcm5hbWU6\n     *\n     * @param {String} str Message from the server\n     */\n    _actionAUTH_LOGIN_USER(str, callback) {\n        if (!/^334[ -]/.test(str)) {\n            // expecting '334 VXNlcm5hbWU6'\n            callback(this._formatError('Invalid login sequence while waiting for \"334 VXNlcm5hbWU6\"', 'EAUTH', str, 'AUTH LOGIN'));\n            return;\n        }\n\n        this._responseActions.push(str => {\n            this._actionAUTH_LOGIN_PASS(str, callback);\n        });\n\n        this._sendCommand(Buffer.from(this._auth.credentials.user + '', 'utf-8').toString('base64'));\n    }\n\n    /**\n     * Handle the response for AUTH CRAM-MD5 command. We are expecting\n     * '334 <challenge string>'. Data to be sent as response needs to be\n     * base64 decoded challenge string, MD5 hashed using the password as\n     * a HMAC key, prefixed by the username and a space, and finally all\n     * base64 encoded again.\n     *\n     * @param {String} str Message from the server\n     */\n    _actionAUTH_CRAM_MD5(str, callback) {\n        let challengeMatch = str.match(/^334\\s+(.+)$/);\n        let challengeString = '';\n\n        if (!challengeMatch) {\n            return callback(this._formatError('Invalid login sequence while waiting for server challenge string', 'EAUTH', str, 'AUTH CRAM-MD5'));\n        } else {\n            challengeString = challengeMatch[1];\n        }\n\n        // Decode from base64\n        let base64decoded = Buffer.from(challengeString, 'base64').toString('ascii'),\n            hmac_md5 = crypto.createHmac('md5', this._auth.credentials.pass);\n\n        hmac_md5.update(base64decoded);\n\n        let hex_hmac = hmac_md5.digest('hex');\n        let prepended = this._auth.credentials.user + ' ' + hex_hmac;\n\n        this._responseActions.push(str => {\n            this._actionAUTH_CRAM_MD5_PASS(str, callback);\n        });\n\n        this._sendCommand(Buffer.from(prepended).toString('base64'));\n    }\n\n    /**\n     * Handles the response to CRAM-MD5 authentication, if there's no error,\n     * the user can be considered logged in. Start waiting for a message to send\n     *\n     * @param {String} str Message from the server\n     */\n    _actionAUTH_CRAM_MD5_PASS(str, callback) {\n        if (!str.match(/^235\\s+/)) {\n            return callback(this._formatError('Invalid login sequence while waiting for \"235\"', 'EAUTH', str, 'AUTH CRAM-MD5'));\n        }\n\n        this.logger.info(\n            {\n                tnx: 'smtp',\n                username: this._auth.user,\n                action: 'authenticated',\n                method: this._authMethod\n            },\n            'User %s authenticated',\n            JSON.stringify(this._auth.user)\n        );\n        this.authenticated = true;\n        callback(null, true);\n    }\n\n    /**\n     * Handle the response for AUTH LOGIN command. We are expecting\n     * '334 UGFzc3dvcmQ6' (base64 for 'Password:'). Data to be sent as\n     * response needs to be base64 encoded password.\n     *\n     * @param {String} str Message from the server\n     */\n    _actionAUTH_LOGIN_PASS(str, callback) {\n        if (!/^334[ -]/.test(str)) {\n            // expecting '334 UGFzc3dvcmQ6'\n            return callback(this._formatError('Invalid login sequence while waiting for \"334 UGFzc3dvcmQ6\"', 'EAUTH', str, 'AUTH LOGIN'));\n        }\n\n        this._responseActions.push(str => {\n            this._actionAUTHComplete(str, callback);\n        });\n\n        this._sendCommand(Buffer.from(this._auth.credentials.pass + '', 'utf-8').toString('base64'));\n    }\n\n    /**\n     * Handles the response for authentication, if there's no error,\n     * the user can be considered logged in. Start waiting for a message to send\n     *\n     * @param {String} str Message from the server\n     */\n    _actionAUTHComplete(str, isRetry, callback) {\n        if (!callback && typeof isRetry === 'function') {\n            callback = isRetry;\n            isRetry = false;\n        }\n\n        if (str.substr(0, 3) === '334') {\n            this._responseActions.push(str => {\n                if (isRetry || this._authMethod !== 'XOAUTH2') {\n                    this._actionAUTHComplete(str, true, callback);\n                } else {\n                    // fetch a new OAuth2 access token\n                    setImmediate(() => this._handleXOauth2Token(true, callback));\n                }\n            });\n            this._sendCommand('');\n            return;\n        }\n\n        if (str.charAt(0) !== '2') {\n            this.logger.info(\n                {\n                    tnx: 'smtp',\n                    username: this._auth.user,\n                    action: 'authfail',\n                    method: this._authMethod\n                },\n                'User %s failed to authenticate',\n                JSON.stringify(this._auth.user)\n            );\n            return callback(this._formatError('Invalid login', 'EAUTH', str, 'AUTH ' + this._authMethod));\n        }\n\n        this.logger.info(\n            {\n                tnx: 'smtp',\n                username: this._auth.user,\n                action: 'authenticated',\n                method: this._authMethod\n            },\n            'User %s authenticated',\n            JSON.stringify(this._auth.user)\n        );\n        this.authenticated = true;\n        callback(null, true);\n    }\n\n    /**\n     * Handle response for a MAIL FROM: command\n     *\n     * @param {String} str Message from the server\n     */\n    _actionMAIL(str, callback) {\n        let message, curRecipient;\n        if (Number(str.charAt(0)) !== 2) {\n            if (this._usingSmtpUtf8 && /^550 /.test(str) && /[\\x80-\\uFFFF]/.test(this._envelope.from)) {\n                message = 'Internationalized mailbox name not allowed';\n            } else {\n                message = 'Mail command failed';\n            }\n            return callback(this._formatError(message, 'EENVELOPE', str, 'MAIL FROM'));\n        }\n\n        if (!this._envelope.rcptQueue.length) {\n            return callback(this._formatError('Can\\x27t send mail - no recipients defined', 'EENVELOPE', false, 'API'));\n        } else {\n            this._recipientQueue = [];\n\n            if (this._supportedExtensions.includes('PIPELINING')) {\n                while (this._envelope.rcptQueue.length) {\n                    curRecipient = this._envelope.rcptQueue.shift();\n                    this._recipientQueue.push(curRecipient);\n                    this._responseActions.push(str => {\n                        this._actionRCPT(str, callback);\n                    });\n                    this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());\n                }\n            } else {\n                curRecipient = this._envelope.rcptQueue.shift();\n                this._recipientQueue.push(curRecipient);\n                this._responseActions.push(str => {\n                    this._actionRCPT(str, callback);\n                });\n                this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());\n            }\n        }\n    }\n\n    /**\n     * Handle response for a RCPT TO: command\n     *\n     * @param {String} str Message from the server\n     */\n    _actionRCPT(str, callback) {\n        let message,\n            err,\n            curRecipient = this._recipientQueue.shift();\n        if (Number(str.charAt(0)) !== 2) {\n            // this is a soft error\n            if (this._usingSmtpUtf8 && /^553 /.test(str) && /[\\x80-\\uFFFF]/.test(curRecipient)) {\n                message = 'Internationalized mailbox name not allowed';\n            } else {\n                message = 'Recipient command failed';\n            }\n            this._envelope.rejected.push(curRecipient);\n            // store error for the failed recipient\n            err = this._formatError(message, 'EENVELOPE', str, 'RCPT TO');\n            err.recipient = curRecipient;\n            this._envelope.rejectedErrors.push(err);\n        } else {\n            this._envelope.accepted.push(curRecipient);\n        }\n\n        if (!this._envelope.rcptQueue.length && !this._recipientQueue.length) {\n            if (this._envelope.rejected.length < this._envelope.to.length) {\n                this._responseActions.push(str => {\n                    this._actionDATA(str, callback);\n                });\n                this._sendCommand('DATA');\n            } else {\n                err = this._formatError('Can\\x27t send mail - all recipients were rejected', 'EENVELOPE', str, 'RCPT TO');\n                err.rejected = this._envelope.rejected;\n                err.rejectedErrors = this._envelope.rejectedErrors;\n                return callback(err);\n            }\n        } else if (this._envelope.rcptQueue.length) {\n            curRecipient = this._envelope.rcptQueue.shift();\n            this._recipientQueue.push(curRecipient);\n            this._responseActions.push(str => {\n                this._actionRCPT(str, callback);\n            });\n            this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());\n        }\n    }\n\n    /**\n     * Handle response for a DATA command\n     *\n     * @param {String} str Message from the server\n     */\n    _actionDATA(str, callback) {\n        // response should be 354 but according to this issue https://github.com/eleith/emailjs/issues/24\n        // some servers might use 250 instead, so lets check for 2 or 3 as the first digit\n        if (!/^[23]/.test(str)) {\n            return callback(this._formatError('Data command failed', 'EENVELOPE', str, 'DATA'));\n        }\n\n        let response = {\n            accepted: this._envelope.accepted,\n            rejected: this._envelope.rejected\n        };\n\n        if (this._envelope.rejectedErrors.length) {\n            response.rejectedErrors = this._envelope.rejectedErrors;\n        }\n\n        callback(null, response);\n    }\n\n    /**\n     * Handle response for a DATA stream when using SMTP\n     * We expect a single response that defines if the sending succeeded or failed\n     *\n     * @param {String} str Message from the server\n     */\n    _actionSMTPStream(str, callback) {\n        if (Number(str.charAt(0)) !== 2) {\n            // Message failed\n            return callback(this._formatError('Message failed', 'EMESSAGE', str, 'DATA'));\n        } else {\n            // Message sent succesfully\n            return callback(null, str);\n        }\n    }\n\n    /**\n     * Handle response for a DATA stream\n     * We expect a separate response for every recipient. All recipients can either\n     * succeed or fail separately\n     *\n     * @param {String} recipient The recipient this response applies to\n     * @param {Boolean} final Is this the final recipient?\n     * @param {String} str Message from the server\n     */\n    _actionLMTPStream(recipient, final, str, callback) {\n        let err;\n        if (Number(str.charAt(0)) !== 2) {\n            // Message failed\n            err = this._formatError('Message failed for recipient ' + recipient, 'EMESSAGE', str, 'DATA');\n            err.recipient = recipient;\n            this._envelope.rejected.push(recipient);\n            this._envelope.rejectedErrors.push(err);\n            for (let i = 0, len = this._envelope.accepted.length; i < len; i++) {\n                if (this._envelope.accepted[i] === recipient) {\n                    this._envelope.accepted.splice(i, 1);\n                }\n            }\n        }\n        if (final) {\n            return callback(null, str);\n        }\n    }\n\n    _handleXOauth2Token(isRetry, callback) {\n        this._auth.oauth2.getToken(isRetry, (err, accessToken) => {\n            if (err) {\n                this.logger.info(\n                    {\n                        tnx: 'smtp',\n                        username: this._auth.user,\n                        action: 'authfail',\n                        method: this._authMethod\n                    },\n                    'User %s failed to authenticate',\n                    JSON.stringify(this._auth.user)\n                );\n                return callback(this._formatError(err, 'EAUTH', false, 'AUTH XOAUTH2'));\n            }\n            this._responseActions.push(str => {\n                this._actionAUTHComplete(str, isRetry, callback);\n            });\n            this._sendCommand('AUTH XOAUTH2 ' + this._auth.oauth2.buildXOAuth2Token(accessToken));\n        });\n    }\n\n    /**\n     *\n     * @param {string} command\n     * @private\n     */\n    _isDestroyedMessage(command) {\n        if (this._destroyed) {\n            return 'Cannot ' + command + ' - smtp connection is already destroyed.';\n        }\n\n        if (this._socket) {\n            if (this._socket.destroyed) {\n                return 'Cannot ' + command + ' - smtp connection socket is already destroyed.';\n            }\n\n            if (!this._socket.writable) {\n                return 'Cannot ' + command + ' - smtp connection socket is already half-closed.';\n            }\n        }\n    }\n\n    _getHostname() {\n        // defaul hostname is machine hostname or [IP]\n        let defaultHostname = os.hostname() || '';\n\n        // ignore if not FQDN\n        if (defaultHostname.indexOf('.') < 0) {\n            defaultHostname = '[127.0.0.1]';\n        }\n\n        // IP should be enclosed in []\n        if (defaultHostname.match(/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/)) {\n            defaultHostname = '[' + defaultHostname + ']';\n        }\n\n        return defaultHostname;\n    }\n}\n\nmodule.exports = SMTPConnection;\n"]},"metadata":{},"sourceType":"script"}