{"ast":null,"code":"'use strict'; // Implements Brad Hill's Double HMAC pattern from\n// https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/february/double-hmac-verification/.\n// The approach is similar to the node's native implementation of timing safe buffer comparison that will be available on v6+.\n// https://github.com/nodejs/node/issues/3043\n// https://github.com/nodejs/node/pull/3073\n\nvar crypto = require('crypto');\n\nfunction bufferEqual(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  } // `crypto.timingSafeEqual` was introduced in Node v6.6.0\n  // <https://github.com/jshttp/basic-auth/issues/39>\n\n\n  if (crypto.timingSafeEqual) {\n    return crypto.timingSafeEqual(a, b);\n  }\n\n  for (var i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction timeSafeCompare(a, b) {\n  var sa = String(a);\n  var sb = String(b);\n  var key = crypto.pseudoRandomBytes(32);\n  var ah = crypto.createHmac('sha256', key).update(sa).digest();\n  var bh = crypto.createHmac('sha256', key).update(sb).digest();\n  return bufferEqual(ah, bh) && a === b;\n}\n\nmodule.exports = timeSafeCompare;","map":{"version":3,"sources":["/home/yamin/My_repos/new-email-app/new-email-app/node_modules/tsscmp/lib/index.js"],"names":["crypto","require","bufferEqual","a","b","length","timingSafeEqual","i","timeSafeCompare","sa","String","sb","key","pseudoRandomBytes","ah","createHmac","update","digest","bh","module","exports"],"mappings":"AAAA,a,CAEA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAEA,SAASC,WAAT,CAAqBC,CAArB,EAAwBC,CAAxB,EAA2B;AACzB,MAAID,CAAC,CAACE,MAAF,KAAaD,CAAC,CAACC,MAAnB,EAA2B;AACzB,WAAO,KAAP;AACD,GAHwB,CAIzB;AACA;;;AACA,MAAIL,MAAM,CAACM,eAAX,EAA4B;AAC1B,WAAON,MAAM,CAACM,eAAP,CAAuBH,CAAvB,EAA0BC,CAA1B,CAAP;AACD;;AACD,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAAC,CAACE,MAAtB,EAA8BE,CAAC,EAA/B,EAAmC;AACjC,QAAIJ,CAAC,CAACI,CAAD,CAAD,KAASH,CAAC,CAACG,CAAD,CAAd,EAAmB;AACjB,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD;;AAED,SAASC,eAAT,CAAyBL,CAAzB,EAA4BC,CAA5B,EAA+B;AAC7B,MAAIK,EAAE,GAAGC,MAAM,CAACP,CAAD,CAAf;AACA,MAAIQ,EAAE,GAAGD,MAAM,CAACN,CAAD,CAAf;AACA,MAAIQ,GAAG,GAAGZ,MAAM,CAACa,iBAAP,CAAyB,EAAzB,CAAV;AACA,MAAIC,EAAE,GAAGd,MAAM,CAACe,UAAP,CAAkB,QAAlB,EAA4BH,GAA5B,EAAiCI,MAAjC,CAAwCP,EAAxC,EAA4CQ,MAA5C,EAAT;AACA,MAAIC,EAAE,GAAGlB,MAAM,CAACe,UAAP,CAAkB,QAAlB,EAA4BH,GAA5B,EAAiCI,MAAjC,CAAwCL,EAAxC,EAA4CM,MAA5C,EAAT;AAEA,SAAOf,WAAW,CAACY,EAAD,EAAKI,EAAL,CAAX,IAAuBf,CAAC,KAAKC,CAApC;AACD;;AAEDe,MAAM,CAACC,OAAP,GAAiBZ,eAAjB","sourcesContent":["'use strict';\r\n\r\n// Implements Brad Hill's Double HMAC pattern from\r\n// https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/february/double-hmac-verification/.\r\n// The approach is similar to the node's native implementation of timing safe buffer comparison that will be available on v6+.\r\n// https://github.com/nodejs/node/issues/3043\r\n// https://github.com/nodejs/node/pull/3073\r\n\r\nvar crypto = require('crypto');\r\n\r\nfunction bufferEqual(a, b) {\r\n  if (a.length !== b.length) {\r\n    return false;\r\n  }\r\n  // `crypto.timingSafeEqual` was introduced in Node v6.6.0\r\n  // <https://github.com/jshttp/basic-auth/issues/39>\r\n  if (crypto.timingSafeEqual) {\r\n    return crypto.timingSafeEqual(a, b);\r\n  }\r\n  for (var i = 0; i < a.length; i++) {\r\n    if (a[i] !== b[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction timeSafeCompare(a, b) {\r\n  var sa = String(a);\r\n  var sb = String(b);\r\n  var key = crypto.pseudoRandomBytes(32);\r\n  var ah = crypto.createHmac('sha256', key).update(sa).digest();\r\n  var bh = crypto.createHmac('sha256', key).update(sb).digest();\r\n\r\n  return bufferEqual(ah, bh) && a === b;\r\n}\r\n\r\nmodule.exports = timeSafeCompare;\r\n"]},"metadata":{},"sourceType":"script"}