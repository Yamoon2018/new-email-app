{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar buffer_1 = require(\"buffer\");\n/**\n * Error strings\n */\n\n\nvar ERRORS = {\n  INVALID_ENCODING: 'Invalid encoding provided. Please specify a valid encoding the internal Node.js Buffer supports.',\n  INVALID_SMARTBUFFER_SIZE: 'Invalid size provided. Size must be a valid integer greater than zero.',\n  INVALID_SMARTBUFFER_BUFFER: 'Invalid Buffer provided in SmartBufferOptions.',\n  INVALID_SMARTBUFFER_OBJECT: 'Invalid SmartBufferOptions object supplied to SmartBuffer constructor or factory methods.',\n  INVALID_OFFSET: 'An invalid offset value was provided.',\n  INVALID_OFFSET_NON_NUMBER: 'An invalid offset value was provided. A numeric value is required.',\n  INVALID_LENGTH: 'An invalid length value was provided.',\n  INVALID_LENGTH_NON_NUMBER: 'An invalid length value was provived. A numeric value is required.',\n  INVALID_TARGET_OFFSET: 'Target offset is beyond the bounds of the internal SmartBuffer data.',\n  INVALID_TARGET_LENGTH: 'Specified length value moves cursor beyong the bounds of the internal SmartBuffer data.',\n  INVALID_READ_BEYOND_BOUNDS: 'Attempted to read beyond the bounds of the managed data.',\n  INVALID_WRITE_BEYOND_BOUNDS: 'Attempted to write beyond the bounds of the managed data.'\n};\nexports.ERRORS = ERRORS;\n/**\n * Checks if a given encoding is a valid Buffer encoding. (Throws an exception if check fails)\n *\n * @param { String } encoding The encoding string to check.\n */\n\nfunction checkEncoding(encoding) {\n  if (!buffer_1.Buffer.isEncoding(encoding)) {\n    throw new Error(ERRORS.INVALID_ENCODING);\n  }\n}\n\nexports.checkEncoding = checkEncoding;\n/**\n * Checks if a given number is a finite integer. (Throws an exception if check fails)\n *\n * @param { Number } value The number value to check.\n */\n\nfunction isFiniteInteger(value) {\n  return typeof value === 'number' && isFinite(value) && isInteger(value);\n}\n\nexports.isFiniteInteger = isFiniteInteger;\n/**\n * Checks if an offset/length value is valid. (Throws an exception if check fails)\n *\n * @param value The value to check.\n * @param offset True if checking an offset, false if checking a length.\n */\n\nfunction checkOffsetOrLengthValue(value, offset) {\n  if (typeof value === 'number') {\n    // Check for non finite/non integers\n    if (!isFiniteInteger(value) || value < 0) {\n      throw new Error(offset ? ERRORS.INVALID_OFFSET : ERRORS.INVALID_LENGTH);\n    }\n  } else {\n    throw new Error(offset ? ERRORS.INVALID_OFFSET_NON_NUMBER : ERRORS.INVALID_LENGTH_NON_NUMBER);\n  }\n}\n/**\n * Checks if a length value is valid. (Throws an exception if check fails)\n *\n * @param { Number } length The value to check.\n */\n\n\nfunction checkLengthValue(length) {\n  checkOffsetOrLengthValue(length, false);\n}\n\nexports.checkLengthValue = checkLengthValue;\n/**\n * Checks if a offset value is valid. (Throws an exception if check fails)\n *\n * @param { Number } offset The value to check.\n */\n\nfunction checkOffsetValue(offset) {\n  checkOffsetOrLengthValue(offset, true);\n}\n\nexports.checkOffsetValue = checkOffsetValue;\n/**\n * Checks if a target offset value is out of bounds. (Throws an exception if check fails)\n *\n * @param { Number } offset The offset value to check.\n * @param { SmartBuffer } buff The SmartBuffer instance to check against.\n */\n\nfunction checkTargetOffset(offset, buff) {\n  if (offset < 0 || offset > buff.length) {\n    throw new Error(ERRORS.INVALID_TARGET_OFFSET);\n  }\n}\n\nexports.checkTargetOffset = checkTargetOffset;\n/**\n * Determines whether a given number is a integer.\n * @param value The number to check.\n */\n\nfunction isInteger(value) {\n  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n}\n/**\n * Throws if Node.js version is too low to support bigint\n */\n\n\nfunction bigIntAndBufferInt64Check(bufferMethod) {\n  if (typeof BigInt === 'undefined') {\n    throw new Error('Platform does not support JS BigInt type.');\n  }\n\n  if (typeof buffer_1.Buffer.prototype[bufferMethod] === 'undefined') {\n    throw new Error(\"Platform does not support Buffer.prototype.\".concat(bufferMethod, \".\"));\n  }\n}\n\nexports.bigIntAndBufferInt64Check = bigIntAndBufferInt64Check;","map":{"version":3,"sources":["../src/utils.ts"],"names":[],"mappings":";;;;;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA;AAEA;;AAEG;;;AACH,IAAM,MAAM,GAAG;AACb,EAAA,gBAAgB,EAAE,kGADL;AAEb,EAAA,wBAAwB,EAAE,wEAFb;AAGb,EAAA,0BAA0B,EAAE,gDAHf;AAIb,EAAA,0BAA0B,EAAE,2FAJf;AAKb,EAAA,cAAc,EAAE,uCALH;AAMb,EAAA,yBAAyB,EAAE,oEANd;AAOb,EAAA,cAAc,EAAE,uCAPH;AAQb,EAAA,yBAAyB,EAAE,oEARd;AASb,EAAA,qBAAqB,EAAE,sEATV;AAUb,EAAA,qBAAqB,EAAE,yFAVV;AAWb,EAAA,0BAA0B,EAAE,0DAXf;AAYb,EAAA,2BAA2B,EAAE;AAZhB,CAAf;AAoHE,OAAA,CAAA,MAAA,GAAA,MAAA;AArGF;;;;AAIG;;AACH,SAAS,aAAT,CAAuB,QAAvB,EAA+C;AAC7C,MAAI,CAAC,QAAA,CAAA,MAAA,CAAO,UAAP,CAAkB,QAAlB,CAAL,EAAkC;AAChC,UAAM,IAAI,KAAJ,CAAU,MAAM,CAAC,gBAAjB,CAAN;AACD;AACF;;AA4F0B,OAAA,CAAA,aAAA,GAAA,aAAA;AA1F3B;;;;AAIG;;AACH,SAAS,eAAT,CAAyB,KAAzB,EAAsC;AACpC,SAAO,OAAO,KAAP,KAAiB,QAAjB,IAA6B,QAAQ,CAAC,KAAD,CAArC,IAAgD,SAAS,CAAC,KAAD,CAAhE;AACD;;AAmFS,OAAA,CAAA,eAAA,GAAA,eAAA;AAjFV;;;;;AAKG;;AACH,SAAS,wBAAT,CAAkC,KAAlC,EAA8C,MAA9C,EAA6D;AAC3D,MAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B;AACA,QAAI,CAAC,eAAe,CAAC,KAAD,CAAhB,IAA2B,KAAK,GAAG,CAAvC,EAA0C;AACxC,YAAM,IAAI,KAAJ,CAAU,MAAM,GAAG,MAAM,CAAC,cAAV,GAA2B,MAAM,CAAC,cAAlD,CAAN;AACD;AACF,GALD,MAKO;AACL,UAAM,IAAI,KAAJ,CAAU,MAAM,GAAG,MAAM,CAAC,yBAAV,GAAsC,MAAM,CAAC,yBAA7D,CAAN;AACD;AACF;AAED;;;;AAIG;;;AACH,SAAS,gBAAT,CAA0B,MAA1B,EAAqC;AACnC,EAAA,wBAAwB,CAAC,MAAD,EAAS,KAAT,CAAxB;AACD;;AA0DC,OAAA,CAAA,gBAAA,GAAA,gBAAA;AAxDF;;;;AAIG;;AACH,SAAS,gBAAT,CAA0B,MAA1B,EAAqC;AACnC,EAAA,wBAAwB,CAAC,MAAD,EAAS,IAAT,CAAxB;AACD;;AAgDyC,OAAA,CAAA,gBAAA,GAAA,gBAAA;AA9C1C;;;;;AAKG;;AACH,SAAS,iBAAT,CAA2B,MAA3B,EAA2C,IAA3C,EAA4D;AAC1D,MAAI,MAAM,GAAG,CAAT,IAAc,MAAM,GAAG,IAAI,CAAC,MAAhC,EAAwC;AACtC,UAAM,IAAI,KAAJ,CAAU,MAAM,CAAC,qBAAjB,CAAN;AACD;AACF;;AAqCmB,OAAA,CAAA,iBAAA,GAAA,iBAAA;AAnCpB;;;AAGG;;AACH,SAAS,SAAT,CAAmB,KAAnB,EAAgC;AAC9B,SAAO,OAAO,KAAP,KAAiB,QAAjB,IAA6B,QAAQ,CAAC,KAAD,CAArC,IAAgD,IAAI,CAAC,KAAL,CAAW,KAAX,MAAsB,KAA7E;AACD;AAcD;;AAEG;;;AACH,SAAS,yBAAT,CAAmC,YAAnC,EAA6D;AAC3D,MAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AACjC,UAAM,IAAI,KAAJ,CAAU,2CAAV,CAAN;AACD;;AAED,MAAI,OAAO,QAAA,CAAA,MAAA,CAAO,SAAP,CAAiB,YAAjB,CAAP,KAA0C,WAA9C,EAA2D;AACzD,UAAM,IAAI,KAAJ,sDAAwD,YAAxD,OAAN;AACD;AACF;;AAIsC,OAAA,CAAA,yBAAA,GAAA,yBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst buffer_1 = require(\"buffer\");\n/**\n * Error strings\n */\nconst ERRORS = {\n    INVALID_ENCODING: 'Invalid encoding provided. Please specify a valid encoding the internal Node.js Buffer supports.',\n    INVALID_SMARTBUFFER_SIZE: 'Invalid size provided. Size must be a valid integer greater than zero.',\n    INVALID_SMARTBUFFER_BUFFER: 'Invalid Buffer provided in SmartBufferOptions.',\n    INVALID_SMARTBUFFER_OBJECT: 'Invalid SmartBufferOptions object supplied to SmartBuffer constructor or factory methods.',\n    INVALID_OFFSET: 'An invalid offset value was provided.',\n    INVALID_OFFSET_NON_NUMBER: 'An invalid offset value was provided. A numeric value is required.',\n    INVALID_LENGTH: 'An invalid length value was provided.',\n    INVALID_LENGTH_NON_NUMBER: 'An invalid length value was provived. A numeric value is required.',\n    INVALID_TARGET_OFFSET: 'Target offset is beyond the bounds of the internal SmartBuffer data.',\n    INVALID_TARGET_LENGTH: 'Specified length value moves cursor beyong the bounds of the internal SmartBuffer data.',\n    INVALID_READ_BEYOND_BOUNDS: 'Attempted to read beyond the bounds of the managed data.',\n    INVALID_WRITE_BEYOND_BOUNDS: 'Attempted to write beyond the bounds of the managed data.'\n};\nexports.ERRORS = ERRORS;\n/**\n * Checks if a given encoding is a valid Buffer encoding. (Throws an exception if check fails)\n *\n * @param { String } encoding The encoding string to check.\n */\nfunction checkEncoding(encoding) {\n    if (!buffer_1.Buffer.isEncoding(encoding)) {\n        throw new Error(ERRORS.INVALID_ENCODING);\n    }\n}\nexports.checkEncoding = checkEncoding;\n/**\n * Checks if a given number is a finite integer. (Throws an exception if check fails)\n *\n * @param { Number } value The number value to check.\n */\nfunction isFiniteInteger(value) {\n    return typeof value === 'number' && isFinite(value) && isInteger(value);\n}\nexports.isFiniteInteger = isFiniteInteger;\n/**\n * Checks if an offset/length value is valid. (Throws an exception if check fails)\n *\n * @param value The value to check.\n * @param offset True if checking an offset, false if checking a length.\n */\nfunction checkOffsetOrLengthValue(value, offset) {\n    if (typeof value === 'number') {\n        // Check for non finite/non integers\n        if (!isFiniteInteger(value) || value < 0) {\n            throw new Error(offset ? ERRORS.INVALID_OFFSET : ERRORS.INVALID_LENGTH);\n        }\n    }\n    else {\n        throw new Error(offset ? ERRORS.INVALID_OFFSET_NON_NUMBER : ERRORS.INVALID_LENGTH_NON_NUMBER);\n    }\n}\n/**\n * Checks if a length value is valid. (Throws an exception if check fails)\n *\n * @param { Number } length The value to check.\n */\nfunction checkLengthValue(length) {\n    checkOffsetOrLengthValue(length, false);\n}\nexports.checkLengthValue = checkLengthValue;\n/**\n * Checks if a offset value is valid. (Throws an exception if check fails)\n *\n * @param { Number } offset The value to check.\n */\nfunction checkOffsetValue(offset) {\n    checkOffsetOrLengthValue(offset, true);\n}\nexports.checkOffsetValue = checkOffsetValue;\n/**\n * Checks if a target offset value is out of bounds. (Throws an exception if check fails)\n *\n * @param { Number } offset The offset value to check.\n * @param { SmartBuffer } buff The SmartBuffer instance to check against.\n */\nfunction checkTargetOffset(offset, buff) {\n    if (offset < 0 || offset > buff.length) {\n        throw new Error(ERRORS.INVALID_TARGET_OFFSET);\n    }\n}\nexports.checkTargetOffset = checkTargetOffset;\n/**\n * Determines whether a given number is a integer.\n * @param value The number to check.\n */\nfunction isInteger(value) {\n    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n}\n/**\n * Throws if Node.js version is too low to support bigint\n */\nfunction bigIntAndBufferInt64Check(bufferMethod) {\n    if (typeof BigInt === 'undefined') {\n        throw new Error('Platform does not support JS BigInt type.');\n    }\n    if (typeof buffer_1.Buffer.prototype[bufferMethod] === 'undefined') {\n        throw new Error(`Platform does not support Buffer.prototype.${bufferMethod}.`);\n    }\n}\nexports.bigIntAndBufferInt64Check = bigIntAndBufferInt64Check;\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"script"}