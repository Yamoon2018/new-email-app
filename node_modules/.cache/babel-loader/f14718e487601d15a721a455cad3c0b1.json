{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar stream = require('stream');\n\nvar Transform = stream.Transform;\n/**\n * Escapes dots in the beginning of lines. Ends the stream with <CR><LF>.<CR><LF>\n * Also makes sure that only <CR><LF> sequences are used for linebreaks\n *\n * @param {Object} options Stream options\n */\n\nvar DataStream = /*#__PURE__*/function (_Transform) {\n  _inherits(DataStream, _Transform);\n\n  var _super = _createSuper(DataStream);\n\n  function DataStream(options) {\n    var _this;\n\n    _classCallCheck(this, DataStream);\n\n    _this = _super.call(this, options); // init Transform\n\n    _this.options = options || {};\n    _this._curLine = '';\n    _this.inByteCount = 0;\n    _this.outByteCount = 0;\n    _this.lastByte = false;\n    return _this;\n  }\n  /**\n   * Escapes dots\n   */\n\n\n  _createClass(DataStream, [{\n    key: \"_transform\",\n    value: function _transform(chunk, encoding, done) {\n      var chunks = [];\n      var chunklen = 0;\n      var i,\n          len,\n          lastPos = 0;\n      var buf;\n\n      if (!chunk || !chunk.length) {\n        return done();\n      }\n\n      if (typeof chunk === 'string') {\n        chunk = Buffer.from(chunk);\n      }\n\n      this.inByteCount += chunk.length;\n\n      for (i = 0, len = chunk.length; i < len; i++) {\n        if (chunk[i] === 0x2e) {\n          // .\n          if (i && chunk[i - 1] === 0x0a || !i && (!this.lastByte || this.lastByte === 0x0a)) {\n            buf = chunk.slice(lastPos, i + 1);\n            chunks.push(buf);\n            chunks.push(Buffer.from('.'));\n            chunklen += buf.length + 1;\n            lastPos = i + 1;\n          }\n        } else if (chunk[i] === 0x0a) {\n          // .\n          if (i && chunk[i - 1] !== 0x0d || !i && this.lastByte !== 0x0d) {\n            if (i > lastPos) {\n              buf = chunk.slice(lastPos, i);\n              chunks.push(buf);\n              chunklen += buf.length + 2;\n            } else {\n              chunklen += 2;\n            }\n\n            chunks.push(Buffer.from('\\r\\n'));\n            lastPos = i + 1;\n          }\n        }\n      }\n\n      if (chunklen) {\n        // add last piece\n        if (lastPos < chunk.length) {\n          buf = chunk.slice(lastPos);\n          chunks.push(buf);\n          chunklen += buf.length;\n        }\n\n        this.outByteCount += chunklen;\n        this.push(Buffer.concat(chunks, chunklen));\n      } else {\n        this.outByteCount += chunk.length;\n        this.push(chunk);\n      }\n\n      this.lastByte = chunk[chunk.length - 1];\n      done();\n    }\n    /**\n     * Finalizes the stream with a dot on a single line\n     */\n\n  }, {\n    key: \"_flush\",\n    value: function _flush(done) {\n      var buf;\n\n      if (this.lastByte === 0x0a) {\n        buf = Buffer.from('.\\r\\n');\n      } else if (this.lastByte === 0x0d) {\n        buf = Buffer.from('\\n.\\r\\n');\n      } else {\n        buf = Buffer.from('\\r\\n.\\r\\n');\n      }\n\n      this.outByteCount += buf.length;\n      this.push(buf);\n      done();\n    }\n  }]);\n\n  return DataStream;\n}(Transform);\n\nmodule.exports = DataStream;","map":{"version":3,"sources":["/home/yamin/My_repos/new-email-app/new-email-app/node_modules/nodemailer/lib/smtp-connection/data-stream.js"],"names":["stream","require","Transform","DataStream","options","_curLine","inByteCount","outByteCount","lastByte","chunk","encoding","done","chunks","chunklen","i","len","lastPos","buf","length","Buffer","from","slice","push","concat","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst stream = require('stream');\nconst Transform = stream.Transform;\n\n/**\n * Escapes dots in the beginning of lines. Ends the stream with <CR><LF>.<CR><LF>\n * Also makes sure that only <CR><LF> sequences are used for linebreaks\n *\n * @param {Object} options Stream options\n */\nclass DataStream extends Transform {\n    constructor(options) {\n        super(options);\n        // init Transform\n        this.options = options || {};\n        this._curLine = '';\n\n        this.inByteCount = 0;\n        this.outByteCount = 0;\n        this.lastByte = false;\n    }\n\n    /**\n     * Escapes dots\n     */\n    _transform(chunk, encoding, done) {\n        let chunks = [];\n        let chunklen = 0;\n        let i,\n            len,\n            lastPos = 0;\n        let buf;\n\n        if (!chunk || !chunk.length) {\n            return done();\n        }\n\n        if (typeof chunk === 'string') {\n            chunk = Buffer.from(chunk);\n        }\n\n        this.inByteCount += chunk.length;\n\n        for (i = 0, len = chunk.length; i < len; i++) {\n            if (chunk[i] === 0x2e) {\n                // .\n                if ((i && chunk[i - 1] === 0x0a) || (!i && (!this.lastByte || this.lastByte === 0x0a))) {\n                    buf = chunk.slice(lastPos, i + 1);\n                    chunks.push(buf);\n                    chunks.push(Buffer.from('.'));\n                    chunklen += buf.length + 1;\n                    lastPos = i + 1;\n                }\n            } else if (chunk[i] === 0x0a) {\n                // .\n                if ((i && chunk[i - 1] !== 0x0d) || (!i && this.lastByte !== 0x0d)) {\n                    if (i > lastPos) {\n                        buf = chunk.slice(lastPos, i);\n                        chunks.push(buf);\n                        chunklen += buf.length + 2;\n                    } else {\n                        chunklen += 2;\n                    }\n                    chunks.push(Buffer.from('\\r\\n'));\n                    lastPos = i + 1;\n                }\n            }\n        }\n\n        if (chunklen) {\n            // add last piece\n            if (lastPos < chunk.length) {\n                buf = chunk.slice(lastPos);\n                chunks.push(buf);\n                chunklen += buf.length;\n            }\n\n            this.outByteCount += chunklen;\n            this.push(Buffer.concat(chunks, chunklen));\n        } else {\n            this.outByteCount += chunk.length;\n            this.push(chunk);\n        }\n\n        this.lastByte = chunk[chunk.length - 1];\n        done();\n    }\n\n    /**\n     * Finalizes the stream with a dot on a single line\n     */\n    _flush(done) {\n        let buf;\n        if (this.lastByte === 0x0a) {\n            buf = Buffer.from('.\\r\\n');\n        } else if (this.lastByte === 0x0d) {\n            buf = Buffer.from('\\n.\\r\\n');\n        } else {\n            buf = Buffer.from('\\r\\n.\\r\\n');\n        }\n        this.outByteCount += buf.length;\n        this.push(buf);\n        done();\n    }\n}\n\nmodule.exports = DataStream;\n"]},"metadata":{},"sourceType":"script"}