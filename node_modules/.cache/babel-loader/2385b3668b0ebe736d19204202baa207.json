{"ast":null,"code":"var _classCallCheck = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar isStream = require('is-stream');\n/**\n * Creates an Attachment object.\n * @param {Object} options Buffer representing attachment data\n *                data  - one of:\n *                      - string representing the full file path\n *                      - buffer of the data\n *                      - readable interface (stream)\n *                filename - optionally the filename to be used for the attachment, should be used if passing\n *                           buffer or stream in the data param\n *                contentType - the content type for header info. Should be passed in if using stream for data\n *                knownLength - the known length of the data. Should be passed in if using stream for data\n * @constructor\n */\n\n\nvar Attachment = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function Attachment(options) {\n    _classCallCheck(this, Attachment);\n\n    var data = options.data;\n\n    if (data) {\n      if (typeof data === 'string' || Buffer.isBuffer(data) || isStream(data)) {\n        this.data = data;\n      }\n    }\n\n    this.filename = options.filename;\n    this.contentType = options.contentType;\n    this.knownLength = options.knownLength;\n  }\n\n  _createClass(Attachment, [{\n    key: \"getType\",\n    value: function getType() {\n      if (this.data) {\n        if (typeof this.data === 'string') {\n          return 'path';\n        } else if (Buffer.isBuffer(this.data)) {\n          return 'buffer';\n        } else if (isStream(this.data)) {\n          return 'stream';\n        }\n      }\n\n      return 'unknown';\n    }\n  }]);\n\n  return Attachment;\n}();\n\nmodule.exports = Attachment;","map":{"version":3,"sources":["/home/yamin/My_repos/new-email-app/new-email-app/node_modules/mailgun-js/lib/attachment.js"],"names":["isStream","require","Attachment","options","data","Buffer","isBuffer","filename","contentType","knownLength","module","exports"],"mappings":";;;;AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACMC,U;;;AACJ,sBAAaC,OAAb,EAAsB;AAAA;;AACpB,QAAMC,IAAI,GAAGD,OAAO,CAACC,IAArB;;AAEA,QAAIA,IAAJ,EAAU;AACR,UAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4BC,MAAM,CAACC,QAAP,CAAgBF,IAAhB,CAA5B,IAAqDJ,QAAQ,CAACI,IAAD,CAAjE,EAAyE;AACvE,aAAKA,IAAL,GAAYA,IAAZ;AACD;AACF;;AAED,SAAKG,QAAL,GAAgBJ,OAAO,CAACI,QAAxB;AACA,SAAKC,WAAL,GAAmBL,OAAO,CAACK,WAA3B;AACA,SAAKC,WAAL,GAAmBN,OAAO,CAACM,WAA3B;AACD;;;;8BAEU;AACT,UAAI,KAAKL,IAAT,EAAe;AACb,YAAI,OAAO,KAAKA,IAAZ,KAAqB,QAAzB,EAAmC;AACjC,iBAAO,MAAP;AACD,SAFD,MAEO,IAAIC,MAAM,CAACC,QAAP,CAAgB,KAAKF,IAArB,CAAJ,EAAgC;AACrC,iBAAO,QAAP;AACD,SAFM,MAEA,IAAIJ,QAAQ,CAAC,KAAKI,IAAN,CAAZ,EAAyB;AAC9B,iBAAO,QAAP;AACD;AACF;;AAED,aAAO,SAAP;AACD;;;;;;AAGHM,MAAM,CAACC,OAAP,GAAiBT,UAAjB","sourcesContent":["const isStream = require('is-stream')\n\n/**\n * Creates an Attachment object.\n * @param {Object} options Buffer representing attachment data\n *                data  - one of:\n *                      - string representing the full file path\n *                      - buffer of the data\n *                      - readable interface (stream)\n *                filename - optionally the filename to be used for the attachment, should be used if passing\n *                           buffer or stream in the data param\n *                contentType - the content type for header info. Should be passed in if using stream for data\n *                knownLength - the known length of the data. Should be passed in if using stream for data\n * @constructor\n */\nclass Attachment {\n  constructor (options) {\n    const data = options.data\n\n    if (data) {\n      if (typeof data === 'string' || Buffer.isBuffer(data) || isStream(data)) {\n        this.data = data\n      }\n    }\n\n    this.filename = options.filename\n    this.contentType = options.contentType\n    this.knownLength = options.knownLength\n  }\n\n  getType () {\n    if (this.data) {\n      if (typeof this.data === 'string') {\n        return 'path'\n      } else if (Buffer.isBuffer(this.data)) {\n        return 'buffer'\n      } else if (isStream(this.data)) {\n        return 'stream'\n      }\n    }\n\n    return 'unknown'\n  }\n}\n\nmodule.exports = Attachment\n"]},"metadata":{},"sourceType":"script"}