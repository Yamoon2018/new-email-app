{"ast":null,"code":"var inflection = require('inflection');\n/* Construct a system of proxy objects based off\n * of an array of paths.\n *\n * @example:\n *   pathProxy.proxy(Client, [\n *     \"/foo\",\n *     \"/foo/{id}/bar\"\n *   ]);\n *\n * @param {Function} base A constructor to build the proxies on top of.\n * @param {Array} paths An array of paths to build a system of proxies from.\n *\n * @return {Function} The original constructor passed in as the first argument.\n */\n\n\nexports.proxy = function proxy(base, paths) {\n  var i;\n\n  for (i = 0; i < paths.length; i++) {\n    this.pathProxy(base, paths[i]);\n  }\n\n  return base;\n};\n/* Return a proxy object constructor for the the given path from the given\n * base.\n *\n * @example\n *   pathProxy.pathProxy(Client, \"/apps/{id}/bar\");\n *\n * @param {Function} base A constructor to build the proxy on top of.\n * @param {String} path The path to build the proxy object constructor for.\n *\n * @return {Function} A proxy object constructor for the given path. Not meant\n *  to be called immediately, but useful for attaching functions to its\n *  `prototype`.\n */\n\n\nexports.pathProxy = function pathProxy(base, path) {\n  var proxy = base,\n      segments;\n  path = path.split(/\\//);\n  segments = path.slice(1, path.length);\n  segments.forEach(function (segment) {\n    var constructor;\n    segment = normalizeName(segment);\n\n    if (proxy.prototype && proxy.prototype[segment]) {\n      return proxy = proxy.prototype[segment]._constructor;\n    }\n\n    if (!segment.match(/{.*}/)) {\n      constructor = function constructor(base, params, pathSegments) {\n        this.base = base;\n        this.params = params;\n        this.pathSegments = pathSegments;\n        this.path = \"/\" + pathSegments.join(\"/\");\n      };\n\n      proxy.prototype[segment] = function (param) {\n        var _base, params, pathSegments;\n\n        if (this instanceof base) {\n          _base = this;\n        } else {\n          _base = this.base;\n        }\n\n        params = this.params || [];\n        if (param) params = params.concat(param);\n        pathSegments = this.pathSegments || [];\n        pathSegments = pathSegments.concat([segment, param]);\n        pathSegments = pathSegments.filter(function (segment) {\n          return segment;\n        });\n        return new constructor(_base, params, pathSegments);\n      };\n\n      proxy.prototype[segment]._constructor = constructor;\n      return proxy = constructor;\n    }\n  });\n  return proxy;\n};\n\nfunction normalizeName(name) {\n  name = name.toLowerCase();\n  name = inflection.dasherize(name).replace(/-/g, '_');\n  name = inflection.camelize(name, true);\n  return name;\n}","map":{"version":3,"sources":["/home/yamin/My_repos/new-email-app/new-email-app/node_modules/path-proxy/index.js"],"names":["inflection","require","exports","proxy","base","paths","i","length","pathProxy","path","segments","split","slice","forEach","segment","constructor","normalizeName","prototype","_constructor","match","params","pathSegments","join","param","_base","concat","filter","name","toLowerCase","dasherize","replace","camelize"],"mappings":"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","sourcesContent":["var inflection = require('inflection');\n\n\n/* Construct a system of proxy objects based off\n * of an array of paths.\n *\n * @example:\n *   pathProxy.proxy(Client, [\n *     \"/foo\",\n *     \"/foo/{id}/bar\"\n *   ]);\n *\n * @param {Function} base A constructor to build the proxies on top of.\n * @param {Array} paths An array of paths to build a system of proxies from.\n *\n * @return {Function} The original constructor passed in as the first argument.\n */\nexports.proxy = function proxy (base, paths) {\n  var i;\n\n  for (i = 0; i < paths.length; i++) {\n    this.pathProxy(base, paths[i]);\n  }\n\n  return base;\n}\n\n\n/* Return a proxy object constructor for the the given path from the given\n * base.\n *\n * @example\n *   pathProxy.pathProxy(Client, \"/apps/{id}/bar\");\n *\n * @param {Function} base A constructor to build the proxy on top of.\n * @param {String} path The path to build the proxy object constructor for.\n *\n * @return {Function} A proxy object constructor for the given path. Not meant\n *  to be called immediately, but useful for attaching functions to its\n *  `prototype`.\n */\nexports.pathProxy = function pathProxy (base, path) {\n  var proxy = base,\n      segments;\n\n  path = path.split(/\\//);\n  segments = path.slice(1, path.length);\n\n  segments.forEach(function (segment) {\n    var constructor;\n\n    segment = normalizeName(segment);\n\n    if (proxy.prototype && proxy.prototype[segment]) {\n      return proxy = proxy.prototype[segment]._constructor;\n    }\n\n    if (!segment.match(/{.*}/)) {\n      constructor = function (base, params, pathSegments) {\n        this.base         = base;\n        this.params       = params;\n        this.pathSegments = pathSegments;\n        this.path         = \"/\" + pathSegments.join(\"/\");\n      };\n\n      proxy.prototype[segment] = function (param) {\n        var _base, params, pathSegments;\n\n        if (this instanceof base) {\n          _base = this;\n        } else {\n          _base = this.base;\n        }\n\n        params = this.params || [];\n        if (param) params = params.concat(param)\n\n        pathSegments = this.pathSegments || [];\n        pathSegments = pathSegments.concat([segment, param]);\n        pathSegments = pathSegments.filter(function (segment) { return segment });\n\n        return new constructor(_base, params, pathSegments);\n      };\n\n      proxy.prototype[segment]._constructor = constructor;\n\n      return proxy = constructor;\n    }\n  });\n\n  return proxy;\n}\n\n\nfunction normalizeName (name) {\n  name = name.toLowerCase();\n  name = inflection.dasherize(name).replace(/-/g, '_');\n  name = inflection.camelize(name, true);\n\n  return name;\n}\n"]},"metadata":{},"sourceType":"script"}