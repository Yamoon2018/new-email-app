{"ast":null,"code":"'use strict'; // FIXME:\n// replace this Transform mess with a method that pipes input argument to output argument\n\nvar _classCallCheck = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar MessageParser = require('./message-parser');\n\nvar RelaxedBody = require('./relaxed-body');\n\nvar sign = require('./sign');\n\nvar PassThrough = require('stream').PassThrough;\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar crypto = require('crypto');\n\nvar DKIM_ALGO = 'sha256';\nvar MAX_MESSAGE_SIZE = 128 * 1024; // buffer messages larger than this to disk\n\n/*\n// Usage:\n\nlet dkim = new DKIM({\n    domainName: 'example.com',\n    keySelector: 'key-selector',\n    privateKey,\n    cacheDir: '/tmp'\n});\ndkim.sign(input).pipe(process.stdout);\n\n// Where inputStream is a rfc822 message (either a stream, string or Buffer)\n// and outputStream is a DKIM signed rfc822 message\n*/\n\nvar DKIMSigner = /*#__PURE__*/function () {\n  function DKIMSigner(options, keys, input, output) {\n    var _this = this;\n\n    _classCallCheck(this, DKIMSigner);\n\n    this.options = options || {};\n    this.keys = keys;\n    this.cacheTreshold = Number(this.options.cacheTreshold) || MAX_MESSAGE_SIZE;\n    this.hashAlgo = this.options.hashAlgo || DKIM_ALGO;\n    this.cacheDir = this.options.cacheDir || false;\n    this.chunks = [];\n    this.chunklen = 0;\n    this.readPos = 0;\n    this.cachePath = this.cacheDir ? path.join(this.cacheDir, 'message.' + Date.now() + '-' + crypto.randomBytes(14).toString('hex')) : false;\n    this.cache = false;\n    this.headers = false;\n    this.bodyHash = false;\n    this.parser = false;\n    this.relaxedBody = false;\n    this.input = input;\n    this.output = output;\n    this.output.usingCache = false;\n    this.errored = false;\n    this.input.on('error', function (err) {\n      _this.errored = true;\n\n      _this.cleanup();\n\n      output.emit('error', err);\n    });\n  }\n\n  _createClass(DKIMSigner, [{\n    key: \"cleanup\",\n    value: function cleanup() {\n      if (!this.cache || !this.cachePath) {\n        return;\n      }\n\n      fs.unlink(this.cachePath, function () {\n        return false;\n      });\n    }\n  }, {\n    key: \"createReadCache\",\n    value: function createReadCache() {\n      var _this2 = this;\n\n      // pipe remainings to cache file\n      this.cache = fs.createReadStream(this.cachePath);\n      this.cache.once('error', function (err) {\n        _this2.cleanup();\n\n        _this2.output.emit('error', err);\n      });\n      this.cache.once('close', function () {\n        _this2.cleanup();\n      });\n      this.cache.pipe(this.output);\n    }\n  }, {\n    key: \"sendNextChunk\",\n    value: function sendNextChunk() {\n      var _this3 = this;\n\n      if (this.errored) {\n        return;\n      }\n\n      if (this.readPos >= this.chunks.length) {\n        if (!this.cache) {\n          return this.output.end();\n        }\n\n        return this.createReadCache();\n      }\n\n      var chunk = this.chunks[this.readPos++];\n\n      if (this.output.write(chunk) === false) {\n        return this.output.once('drain', function () {\n          _this3.sendNextChunk();\n        });\n      }\n\n      setImmediate(function () {\n        return _this3.sendNextChunk();\n      });\n    }\n  }, {\n    key: \"sendSignedOutput\",\n    value: function sendSignedOutput() {\n      var _this4 = this;\n\n      var keyPos = 0;\n\n      var signNextKey = function signNextKey() {\n        if (keyPos >= _this4.keys.length) {\n          _this4.output.write(_this4.parser.rawHeaders);\n\n          return setImmediate(function () {\n            return _this4.sendNextChunk();\n          });\n        }\n\n        var key = _this4.keys[keyPos++];\n        var dkimField = sign(_this4.headers, _this4.hashAlgo, _this4.bodyHash, {\n          domainName: key.domainName,\n          keySelector: key.keySelector,\n          privateKey: key.privateKey,\n          headerFieldNames: _this4.options.headerFieldNames,\n          skipFields: _this4.options.skipFields\n        });\n\n        if (dkimField) {\n          _this4.output.write(Buffer.from(dkimField + '\\r\\n'));\n        }\n\n        return setImmediate(signNextKey);\n      };\n\n      if (this.bodyHash && this.headers) {\n        return signNextKey();\n      }\n\n      this.output.write(this.parser.rawHeaders);\n      this.sendNextChunk();\n    }\n  }, {\n    key: \"createWriteCache\",\n    value: function createWriteCache() {\n      var _this5 = this;\n\n      this.output.usingCache = true; // pipe remainings to cache file\n\n      this.cache = fs.createWriteStream(this.cachePath);\n      this.cache.once('error', function (err) {\n        _this5.cleanup(); // drain input\n\n\n        _this5.relaxedBody.unpipe(_this5.cache);\n\n        _this5.relaxedBody.on('readable', function () {\n          while (_this5.relaxedBody.read() !== null) {// do nothing\n          }\n        });\n\n        _this5.errored = true; // emit error\n\n        _this5.output.emit('error', err);\n      });\n      this.cache.once('close', function () {\n        _this5.sendSignedOutput();\n      });\n      this.relaxedBody.removeAllListeners('readable');\n      this.relaxedBody.pipe(this.cache);\n    }\n  }, {\n    key: \"signStream\",\n    value: function signStream() {\n      var _this6 = this;\n\n      this.parser = new MessageParser();\n      this.relaxedBody = new RelaxedBody({\n        hashAlgo: this.hashAlgo\n      });\n      this.parser.on('headers', function (value) {\n        _this6.headers = value;\n      });\n      this.relaxedBody.on('hash', function (value) {\n        _this6.bodyHash = value;\n      });\n      this.relaxedBody.on('readable', function () {\n        var chunk;\n\n        if (_this6.cache) {\n          return;\n        }\n\n        while ((chunk = _this6.relaxedBody.read()) !== null) {\n          _this6.chunks.push(chunk);\n\n          _this6.chunklen += chunk.length;\n\n          if (_this6.chunklen >= _this6.cacheTreshold && _this6.cachePath) {\n            return _this6.createWriteCache();\n          }\n        }\n      });\n      this.relaxedBody.on('end', function () {\n        if (_this6.cache) {\n          return;\n        }\n\n        _this6.sendSignedOutput();\n      });\n      this.parser.pipe(this.relaxedBody);\n      setImmediate(function () {\n        return _this6.input.pipe(_this6.parser);\n      });\n    }\n  }]);\n\n  return DKIMSigner;\n}();\n\nvar DKIM = /*#__PURE__*/function () {\n  function DKIM(options) {\n    _classCallCheck(this, DKIM);\n\n    this.options = options || {};\n    this.keys = [].concat(this.options.keys || {\n      domainName: options.domainName,\n      keySelector: options.keySelector,\n      privateKey: options.privateKey\n    });\n  }\n\n  _createClass(DKIM, [{\n    key: \"sign\",\n    value: function sign(input, extraOptions) {\n      var _this7 = this;\n\n      var output = new PassThrough();\n      var inputStream = input;\n      var writeValue = false;\n\n      if (Buffer.isBuffer(input)) {\n        writeValue = input;\n        inputStream = new PassThrough();\n      } else if (typeof input === 'string') {\n        writeValue = Buffer.from(input);\n        inputStream = new PassThrough();\n      }\n\n      var options = this.options;\n\n      if (extraOptions && Object.keys(extraOptions).length) {\n        options = {};\n        Object.keys(this.options || {}).forEach(function (key) {\n          options[key] = _this7.options[key];\n        });\n        Object.keys(extraOptions || {}).forEach(function (key) {\n          if (!(key in options)) {\n            options[key] = extraOptions[key];\n          }\n        });\n      }\n\n      var signer = new DKIMSigner(options, this.keys, inputStream, output);\n      setImmediate(function () {\n        signer.signStream();\n\n        if (writeValue) {\n          setImmediate(function () {\n            inputStream.end(writeValue);\n          });\n        }\n      });\n      return output;\n    }\n  }]);\n\n  return DKIM;\n}();\n\nmodule.exports = DKIM;","map":{"version":3,"sources":["/home/yamin/My_repos/new-email-app/new-email-app/node_modules/nodemailer/lib/dkim/index.js"],"names":["MessageParser","require","RelaxedBody","sign","PassThrough","fs","path","crypto","DKIM_ALGO","MAX_MESSAGE_SIZE","DKIMSigner","options","keys","input","output","cacheTreshold","Number","hashAlgo","cacheDir","chunks","chunklen","readPos","cachePath","join","Date","now","randomBytes","toString","cache","headers","bodyHash","parser","relaxedBody","usingCache","errored","on","err","cleanup","emit","unlink","createReadStream","once","pipe","length","end","createReadCache","chunk","write","sendNextChunk","setImmediate","keyPos","signNextKey","rawHeaders","key","dkimField","domainName","keySelector","privateKey","headerFieldNames","skipFields","Buffer","from","createWriteStream","unpipe","read","sendSignedOutput","removeAllListeners","value","push","createWriteCache","DKIM","concat","extraOptions","inputStream","writeValue","isBuffer","Object","forEach","signer","signStream","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n// FIXME:\n// replace this Transform mess with a method that pipes input argument to output argument\n\nconst MessageParser = require('./message-parser');\nconst RelaxedBody = require('./relaxed-body');\nconst sign = require('./sign');\nconst PassThrough = require('stream').PassThrough;\nconst fs = require('fs');\nconst path = require('path');\nconst crypto = require('crypto');\n\nconst DKIM_ALGO = 'sha256';\nconst MAX_MESSAGE_SIZE = 128 * 1024; // buffer messages larger than this to disk\n\n/*\n// Usage:\n\nlet dkim = new DKIM({\n    domainName: 'example.com',\n    keySelector: 'key-selector',\n    privateKey,\n    cacheDir: '/tmp'\n});\ndkim.sign(input).pipe(process.stdout);\n\n// Where inputStream is a rfc822 message (either a stream, string or Buffer)\n// and outputStream is a DKIM signed rfc822 message\n*/\n\nclass DKIMSigner {\n    constructor(options, keys, input, output) {\n        this.options = options || {};\n        this.keys = keys;\n\n        this.cacheTreshold = Number(this.options.cacheTreshold) || MAX_MESSAGE_SIZE;\n        this.hashAlgo = this.options.hashAlgo || DKIM_ALGO;\n\n        this.cacheDir = this.options.cacheDir || false;\n\n        this.chunks = [];\n        this.chunklen = 0;\n        this.readPos = 0;\n        this.cachePath = this.cacheDir ? path.join(this.cacheDir, 'message.' + Date.now() + '-' + crypto.randomBytes(14).toString('hex')) : false;\n        this.cache = false;\n\n        this.headers = false;\n        this.bodyHash = false;\n        this.parser = false;\n        this.relaxedBody = false;\n\n        this.input = input;\n        this.output = output;\n        this.output.usingCache = false;\n\n        this.errored = false;\n\n        this.input.on('error', err => {\n            this.errored = true;\n            this.cleanup();\n            output.emit('error', err);\n        });\n    }\n\n    cleanup() {\n        if (!this.cache || !this.cachePath) {\n            return;\n        }\n        fs.unlink(this.cachePath, () => false);\n    }\n\n    createReadCache() {\n        // pipe remainings to cache file\n        this.cache = fs.createReadStream(this.cachePath);\n        this.cache.once('error', err => {\n            this.cleanup();\n            this.output.emit('error', err);\n        });\n        this.cache.once('close', () => {\n            this.cleanup();\n        });\n        this.cache.pipe(this.output);\n    }\n\n    sendNextChunk() {\n        if (this.errored) {\n            return;\n        }\n\n        if (this.readPos >= this.chunks.length) {\n            if (!this.cache) {\n                return this.output.end();\n            }\n            return this.createReadCache();\n        }\n        let chunk = this.chunks[this.readPos++];\n        if (this.output.write(chunk) === false) {\n            return this.output.once('drain', () => {\n                this.sendNextChunk();\n            });\n        }\n        setImmediate(() => this.sendNextChunk());\n    }\n\n    sendSignedOutput() {\n        let keyPos = 0;\n        let signNextKey = () => {\n            if (keyPos >= this.keys.length) {\n                this.output.write(this.parser.rawHeaders);\n                return setImmediate(() => this.sendNextChunk());\n            }\n            let key = this.keys[keyPos++];\n            let dkimField = sign(this.headers, this.hashAlgo, this.bodyHash, {\n                domainName: key.domainName,\n                keySelector: key.keySelector,\n                privateKey: key.privateKey,\n                headerFieldNames: this.options.headerFieldNames,\n                skipFields: this.options.skipFields\n            });\n            if (dkimField) {\n                this.output.write(Buffer.from(dkimField + '\\r\\n'));\n            }\n            return setImmediate(signNextKey);\n        };\n\n        if (this.bodyHash && this.headers) {\n            return signNextKey();\n        }\n\n        this.output.write(this.parser.rawHeaders);\n        this.sendNextChunk();\n    }\n\n    createWriteCache() {\n        this.output.usingCache = true;\n        // pipe remainings to cache file\n        this.cache = fs.createWriteStream(this.cachePath);\n        this.cache.once('error', err => {\n            this.cleanup();\n            // drain input\n            this.relaxedBody.unpipe(this.cache);\n            this.relaxedBody.on('readable', () => {\n                while (this.relaxedBody.read() !== null) {\n                    // do nothing\n                }\n            });\n            this.errored = true;\n            // emit error\n            this.output.emit('error', err);\n        });\n        this.cache.once('close', () => {\n            this.sendSignedOutput();\n        });\n        this.relaxedBody.removeAllListeners('readable');\n        this.relaxedBody.pipe(this.cache);\n    }\n\n    signStream() {\n        this.parser = new MessageParser();\n        this.relaxedBody = new RelaxedBody({\n            hashAlgo: this.hashAlgo\n        });\n\n        this.parser.on('headers', value => {\n            this.headers = value;\n        });\n\n        this.relaxedBody.on('hash', value => {\n            this.bodyHash = value;\n        });\n\n        this.relaxedBody.on('readable', () => {\n            let chunk;\n            if (this.cache) {\n                return;\n            }\n            while ((chunk = this.relaxedBody.read()) !== null) {\n                this.chunks.push(chunk);\n                this.chunklen += chunk.length;\n                if (this.chunklen >= this.cacheTreshold && this.cachePath) {\n                    return this.createWriteCache();\n                }\n            }\n        });\n\n        this.relaxedBody.on('end', () => {\n            if (this.cache) {\n                return;\n            }\n            this.sendSignedOutput();\n        });\n\n        this.parser.pipe(this.relaxedBody);\n        setImmediate(() => this.input.pipe(this.parser));\n    }\n}\n\nclass DKIM {\n    constructor(options) {\n        this.options = options || {};\n        this.keys = [].concat(\n            this.options.keys || {\n                domainName: options.domainName,\n                keySelector: options.keySelector,\n                privateKey: options.privateKey\n            }\n        );\n    }\n\n    sign(input, extraOptions) {\n        let output = new PassThrough();\n        let inputStream = input;\n        let writeValue = false;\n\n        if (Buffer.isBuffer(input)) {\n            writeValue = input;\n            inputStream = new PassThrough();\n        } else if (typeof input === 'string') {\n            writeValue = Buffer.from(input);\n            inputStream = new PassThrough();\n        }\n\n        let options = this.options;\n        if (extraOptions && Object.keys(extraOptions).length) {\n            options = {};\n            Object.keys(this.options || {}).forEach(key => {\n                options[key] = this.options[key];\n            });\n            Object.keys(extraOptions || {}).forEach(key => {\n                if (!(key in options)) {\n                    options[key] = extraOptions[key];\n                }\n            });\n        }\n\n        let signer = new DKIMSigner(options, this.keys, inputStream, output);\n        setImmediate(() => {\n            signer.signStream();\n            if (writeValue) {\n                setImmediate(() => {\n                    inputStream.end(writeValue);\n                });\n            }\n        });\n\n        return output;\n    }\n}\n\nmodule.exports = DKIM;\n"]},"metadata":{},"sourceType":"script"}