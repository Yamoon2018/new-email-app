{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar EventEmitter = require('events');\n\nvar packageData = require('../../package.json');\n\nvar shared = require('../shared');\n\nvar LeWindows = require('../sendmail-transport/le-windows');\n/**\n * Generates a Transport object for AWS SES\n *\n * Possible options can be the following:\n *\n *  * **sendingRate** optional Number specifying how many messages per second should be delivered to SES\n *  * **maxConnections** optional Number specifying max number of parallel connections to SES\n *\n * @constructor\n * @param {Object} optional config parameter\n */\n\n\nvar SESTransport = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(SESTransport, _EventEmitter);\n\n  var _super = _createSuper(SESTransport);\n\n  function SESTransport(options) {\n    var _this;\n\n    _classCallCheck(this, SESTransport);\n\n    _this = _super.call(this);\n    options = options || {};\n    _this.options = options || {};\n    _this.ses = _this.options.SES;\n    _this.name = 'SESTransport';\n    _this.version = packageData.version;\n    _this.logger = shared.getLogger(_this.options, {\n      component: _this.options.component || 'ses-transport'\n    }); // parallel sending connections\n\n    _this.maxConnections = Number(_this.options.maxConnections) || Infinity;\n    _this.connections = 0; // max messages per second\n\n    _this.sendingRate = Number(_this.options.sendingRate) || Infinity;\n    _this.sendingRateTTL = null;\n    _this.rateInterval = 1000; // milliseconds\n\n    _this.rateMessages = [];\n    _this.pending = [];\n    _this.idling = true;\n    setImmediate(function () {\n      if (_this.idling) {\n        _this.emit('idle');\n      }\n    });\n    return _this;\n  }\n  /**\n   * Schedules a sending of a message\n   *\n   * @param {Object} emailMessage MailComposer object\n   * @param {Function} callback Callback function to run when the sending is completed\n   */\n\n\n  _createClass(SESTransport, [{\n    key: \"send\",\n    value: function send(mail, callback) {\n      var _this2 = this;\n\n      if (this.connections >= this.maxConnections) {\n        this.idling = false;\n        return this.pending.push({\n          mail: mail,\n          callback: callback\n        });\n      }\n\n      if (!this._checkSendingRate()) {\n        this.idling = false;\n        return this.pending.push({\n          mail: mail,\n          callback: callback\n        });\n      }\n\n      this._send(mail, function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        setImmediate(function () {\n          return callback.apply(void 0, args);\n        });\n\n        _this2._sent();\n      });\n    }\n  }, {\n    key: \"_checkRatedQueue\",\n    value: function _checkRatedQueue() {\n      var _this3 = this;\n\n      if (this.connections >= this.maxConnections || !this._checkSendingRate()) {\n        return;\n      }\n\n      if (!this.pending.length) {\n        if (!this.idling) {\n          this.idling = true;\n          this.emit('idle');\n        }\n\n        return;\n      }\n\n      var next = this.pending.shift();\n\n      this._send(next.mail, function () {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        setImmediate(function () {\n          return next.callback.apply(next, args);\n        });\n\n        _this3._sent();\n      });\n    }\n  }, {\n    key: \"_checkSendingRate\",\n    value: function _checkSendingRate() {\n      var _this4 = this;\n\n      clearTimeout(this.sendingRateTTL);\n      var now = Date.now();\n      var oldest = false; // delete older messages\n\n      for (var i = this.rateMessages.length - 1; i >= 0; i--) {\n        if (this.rateMessages[i].ts >= now - this.rateInterval && (!oldest || this.rateMessages[i].ts < oldest)) {\n          oldest = this.rateMessages[i].ts;\n        }\n\n        if (this.rateMessages[i].ts < now - this.rateInterval && !this.rateMessages[i].pending) {\n          this.rateMessages.splice(i, 1);\n        }\n      }\n\n      if (this.rateMessages.length < this.sendingRate) {\n        return true;\n      }\n\n      var delay = Math.max(oldest + 1001, now + 20);\n      this.sendingRateTTL = setTimeout(function () {\n        return _this4._checkRatedQueue();\n      }, now - delay);\n\n      try {\n        this.sendingRateTTL.unref();\n      } catch (E) {// Ignore. Happens on envs with non-node timer implementation\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_sent\",\n    value: function _sent() {\n      this.connections--;\n\n      this._checkRatedQueue();\n    }\n    /**\n     * Returns true if there are free slots in the queue\n     */\n\n  }, {\n    key: \"isIdle\",\n    value: function isIdle() {\n      return this.idling;\n    }\n    /**\n     * Compiles a mailcomposer message and forwards it to SES\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */\n\n  }, {\n    key: \"_send\",\n    value: function _send(mail, callback) {\n      var _this5 = this;\n\n      var statObject = {\n        ts: Date.now(),\n        pending: true\n      };\n      this.connections++;\n      this.rateMessages.push(statObject);\n      var envelope = mail.data.envelope || mail.message.getEnvelope();\n      var messageId = mail.message.messageId();\n      var recipients = [].concat(envelope.to || []);\n\n      if (recipients.length > 3) {\n        recipients.push('...and ' + recipients.splice(2).length + ' more');\n      }\n\n      this.logger.info({\n        tnx: 'send',\n        messageId: messageId\n      }, 'Sending message %s to <%s>', messageId, recipients.join(', '));\n\n      var getRawMessage = function getRawMessage(next) {\n        // do not use Message-ID and Date in DKIM signature\n        if (!mail.data._dkim) {\n          mail.data._dkim = {};\n        }\n\n        if (mail.data._dkim.skipFields && typeof mail.data._dkim.skipFields === 'string') {\n          mail.data._dkim.skipFields += ':date:message-id';\n        } else {\n          mail.data._dkim.skipFields = 'date:message-id';\n        }\n\n        var sourceStream = mail.message.createReadStream();\n        var stream = sourceStream.pipe(new LeWindows());\n        var chunks = [];\n        var chunklen = 0;\n        stream.on('readable', function () {\n          var chunk;\n\n          while ((chunk = stream.read()) !== null) {\n            chunks.push(chunk);\n            chunklen += chunk.length;\n          }\n        });\n        sourceStream.once('error', function (err) {\n          return stream.emit('error', err);\n        });\n        stream.once('error', function (err) {\n          next(err);\n        });\n        stream.once('end', function () {\n          return next(null, Buffer.concat(chunks, chunklen));\n        });\n      };\n\n      setImmediate(function () {\n        return getRawMessage(function (err, raw) {\n          if (err) {\n            _this5.logger.error({\n              err: err,\n              tnx: 'send',\n              messageId: messageId\n            }, 'Failed creating message for %s. %s', messageId, err.message);\n\n            statObject.pending = false;\n            return callback(err);\n          }\n\n          var sesMessage = {\n            RawMessage: {\n              // required\n              Data: raw // required\n\n            },\n            Source: envelope.from,\n            Destinations: envelope.to\n          };\n          Object.keys(mail.data.ses || {}).forEach(function (key) {\n            sesMessage[key] = mail.data.ses[key];\n          });\n\n          _this5.ses.sendRawEmail(sesMessage, function (err, data) {\n            if (err) {\n              _this5.logger.error({\n                err: err,\n                tnx: 'send'\n              }, 'Send error for %s: %s', messageId, err.message);\n\n              statObject.pending = false;\n              return callback(err);\n            }\n\n            var region = _this5.ses.config && _this5.ses.config.region || 'us-east-1';\n\n            if (region === 'us-east-1') {\n              region = 'email';\n            }\n\n            statObject.pending = false;\n            callback(null, {\n              envelope: {\n                from: envelope.from,\n                to: envelope.to\n              },\n              messageId: '<' + data.MessageId + (!/@/.test(data.MessageId) ? '@' + region + '.amazonses.com' : '') + '>',\n              response: data.MessageId,\n              raw: raw\n            });\n          });\n        });\n      });\n    }\n    /**\n     * Verifies SES configuration\n     *\n     * @param {Function} callback Callback function\n     */\n\n  }, {\n    key: \"verify\",\n    value: function verify(callback) {\n      var promise;\n\n      if (!callback) {\n        promise = new Promise(function (resolve, reject) {\n          callback = shared.callbackPromise(resolve, reject);\n        });\n      }\n\n      this.ses.sendRawEmail({\n        RawMessage: {\n          // required\n          Data: 'From: invalid@invalid\\r\\nTo: invalid@invalid\\r\\n Subject: Invalid\\r\\n\\r\\nInvalid'\n        },\n        Source: 'invalid@invalid',\n        Destinations: ['invalid@invalid']\n      }, function (err) {\n        if (err && err.code !== 'InvalidParameterValue') {\n          return callback(err);\n        }\n\n        return callback(null, true);\n      });\n      return promise;\n    }\n  }]);\n\n  return SESTransport;\n}(EventEmitter);\n\nmodule.exports = SESTransport;","map":{"version":3,"sources":["/home/yamin/My_repos/new-email-app/new-email-app/node_modules/nodemailer/lib/ses-transport/index.js"],"names":["EventEmitter","require","packageData","shared","LeWindows","SESTransport","options","ses","SES","name","version","logger","getLogger","component","maxConnections","Number","Infinity","connections","sendingRate","sendingRateTTL","rateInterval","rateMessages","pending","idling","setImmediate","emit","mail","callback","push","_checkSendingRate","_send","args","_sent","length","next","shift","clearTimeout","now","Date","oldest","i","ts","splice","delay","Math","max","setTimeout","_checkRatedQueue","unref","E","statObject","envelope","data","message","getEnvelope","messageId","recipients","concat","to","info","tnx","join","getRawMessage","_dkim","skipFields","sourceStream","createReadStream","stream","pipe","chunks","chunklen","on","chunk","read","once","err","Buffer","raw","error","sesMessage","RawMessage","Data","Source","from","Destinations","Object","keys","forEach","key","sendRawEmail","region","config","MessageId","test","response","promise","Promise","resolve","reject","callbackPromise","code","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst EventEmitter = require('events');\nconst packageData = require('../../package.json');\nconst shared = require('../shared');\nconst LeWindows = require('../sendmail-transport/le-windows');\n\n/**\n * Generates a Transport object for AWS SES\n *\n * Possible options can be the following:\n *\n *  * **sendingRate** optional Number specifying how many messages per second should be delivered to SES\n *  * **maxConnections** optional Number specifying max number of parallel connections to SES\n *\n * @constructor\n * @param {Object} optional config parameter\n */\nclass SESTransport extends EventEmitter {\n    constructor(options) {\n        super();\n        options = options || {};\n\n        this.options = options || {};\n        this.ses = this.options.SES;\n\n        this.name = 'SESTransport';\n        this.version = packageData.version;\n\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || 'ses-transport'\n        });\n\n        // parallel sending connections\n        this.maxConnections = Number(this.options.maxConnections) || Infinity;\n        this.connections = 0;\n\n        // max messages per second\n        this.sendingRate = Number(this.options.sendingRate) || Infinity;\n        this.sendingRateTTL = null;\n        this.rateInterval = 1000; // milliseconds\n        this.rateMessages = [];\n\n        this.pending = [];\n\n        this.idling = true;\n\n        setImmediate(() => {\n            if (this.idling) {\n                this.emit('idle');\n            }\n        });\n    }\n\n    /**\n     * Schedules a sending of a message\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */\n    send(mail, callback) {\n        if (this.connections >= this.maxConnections) {\n            this.idling = false;\n            return this.pending.push({\n                mail,\n                callback\n            });\n        }\n\n        if (!this._checkSendingRate()) {\n            this.idling = false;\n            return this.pending.push({\n                mail,\n                callback\n            });\n        }\n\n        this._send(mail, (...args) => {\n            setImmediate(() => callback(...args));\n            this._sent();\n        });\n    }\n\n    _checkRatedQueue() {\n        if (this.connections >= this.maxConnections || !this._checkSendingRate()) {\n            return;\n        }\n\n        if (!this.pending.length) {\n            if (!this.idling) {\n                this.idling = true;\n                this.emit('idle');\n            }\n            return;\n        }\n\n        let next = this.pending.shift();\n        this._send(next.mail, (...args) => {\n            setImmediate(() => next.callback(...args));\n            this._sent();\n        });\n    }\n\n    _checkSendingRate() {\n        clearTimeout(this.sendingRateTTL);\n\n        let now = Date.now();\n        let oldest = false;\n        // delete older messages\n        for (let i = this.rateMessages.length - 1; i >= 0; i--) {\n            if (this.rateMessages[i].ts >= now - this.rateInterval && (!oldest || this.rateMessages[i].ts < oldest)) {\n                oldest = this.rateMessages[i].ts;\n            }\n\n            if (this.rateMessages[i].ts < now - this.rateInterval && !this.rateMessages[i].pending) {\n                this.rateMessages.splice(i, 1);\n            }\n        }\n\n        if (this.rateMessages.length < this.sendingRate) {\n            return true;\n        }\n\n        let delay = Math.max(oldest + 1001, now + 20);\n        this.sendingRateTTL = setTimeout(() => this._checkRatedQueue(), now - delay);\n\n        try {\n            this.sendingRateTTL.unref();\n        } catch (E) {\n            // Ignore. Happens on envs with non-node timer implementation\n        }\n\n        return false;\n    }\n\n    _sent() {\n        this.connections--;\n        this._checkRatedQueue();\n    }\n\n    /**\n     * Returns true if there are free slots in the queue\n     */\n    isIdle() {\n        return this.idling;\n    }\n\n    /**\n     * Compiles a mailcomposer message and forwards it to SES\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */\n    _send(mail, callback) {\n        let statObject = {\n            ts: Date.now(),\n            pending: true\n        };\n        this.connections++;\n        this.rateMessages.push(statObject);\n\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push('...and ' + recipients.splice(2).length + ' more');\n        }\n        this.logger.info(\n            {\n                tnx: 'send',\n                messageId\n            },\n            'Sending message %s to <%s>',\n            messageId,\n            recipients.join(', ')\n        );\n\n        let getRawMessage = next => {\n            // do not use Message-ID and Date in DKIM signature\n            if (!mail.data._dkim) {\n                mail.data._dkim = {};\n            }\n            if (mail.data._dkim.skipFields && typeof mail.data._dkim.skipFields === 'string') {\n                mail.data._dkim.skipFields += ':date:message-id';\n            } else {\n                mail.data._dkim.skipFields = 'date:message-id';\n            }\n\n            let sourceStream = mail.message.createReadStream();\n            let stream = sourceStream.pipe(new LeWindows());\n            let chunks = [];\n            let chunklen = 0;\n\n            stream.on('readable', () => {\n                let chunk;\n                while ((chunk = stream.read()) !== null) {\n                    chunks.push(chunk);\n                    chunklen += chunk.length;\n                }\n            });\n\n            sourceStream.once('error', err => stream.emit('error', err));\n\n            stream.once('error', err => {\n                next(err);\n            });\n\n            stream.once('end', () => next(null, Buffer.concat(chunks, chunklen)));\n        };\n\n        setImmediate(() =>\n            getRawMessage((err, raw) => {\n                if (err) {\n                    this.logger.error(\n                        {\n                            err,\n                            tnx: 'send',\n                            messageId\n                        },\n                        'Failed creating message for %s. %s',\n                        messageId,\n                        err.message\n                    );\n                    statObject.pending = false;\n                    return callback(err);\n                }\n\n                let sesMessage = {\n                    RawMessage: {\n                        // required\n                        Data: raw // required\n                    },\n                    Source: envelope.from,\n                    Destinations: envelope.to\n                };\n\n                Object.keys(mail.data.ses || {}).forEach(key => {\n                    sesMessage[key] = mail.data.ses[key];\n                });\n\n                this.ses.sendRawEmail(sesMessage, (err, data) => {\n                    if (err) {\n                        this.logger.error(\n                            {\n                                err,\n                                tnx: 'send'\n                            },\n                            'Send error for %s: %s',\n                            messageId,\n                            err.message\n                        );\n                        statObject.pending = false;\n                        return callback(err);\n                    }\n\n                    let region = (this.ses.config && this.ses.config.region) || 'us-east-1';\n                    if (region === 'us-east-1') {\n                        region = 'email';\n                    }\n\n                    statObject.pending = false;\n                    callback(null, {\n                        envelope: {\n                            from: envelope.from,\n                            to: envelope.to\n                        },\n                        messageId: '<' + data.MessageId + (!/@/.test(data.MessageId) ? '@' + region + '.amazonses.com' : '') + '>',\n                        response: data.MessageId,\n                        raw\n                    });\n                });\n            })\n        );\n    }\n\n    /**\n     * Verifies SES configuration\n     *\n     * @param {Function} callback Callback function\n     */\n    verify(callback) {\n        let promise;\n\n        if (!callback) {\n            promise = new Promise((resolve, reject) => {\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n\n        this.ses.sendRawEmail(\n            {\n                RawMessage: {\n                    // required\n                    Data: 'From: invalid@invalid\\r\\nTo: invalid@invalid\\r\\n Subject: Invalid\\r\\n\\r\\nInvalid'\n                },\n                Source: 'invalid@invalid',\n                Destinations: ['invalid@invalid']\n            },\n            err => {\n                if (err && err.code !== 'InvalidParameterValue') {\n                    return callback(err);\n                }\n                return callback(null, true);\n            }\n        );\n\n        return promise;\n    }\n}\n\nmodule.exports = SESTransport;\n"]},"metadata":{},"sourceType":"script"}