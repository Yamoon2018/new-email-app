{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar spawn = require('child_process').spawn;\n\nvar packageData = require('../../package.json');\n\nvar LeWindows = require('./le-windows');\n\nvar LeUnix = require('./le-unix');\n\nvar shared = require('../shared');\n/**\n * Generates a Transport object for Sendmail\n *\n * Possible options can be the following:\n *\n *  * **path** optional path to sendmail binary\n *  * **newline** either 'windows' or 'unix'\n *  * **args** an array of arguments for the sendmail binary\n *\n * @constructor\n * @param {Object} optional config parameter for Sendmail\n */\n\n\nvar SendmailTransport = /*#__PURE__*/function () {\n  function SendmailTransport(options) {\n    _classCallCheck(this, SendmailTransport);\n\n    options = options || {}; // use a reference to spawn for mocking purposes\n\n    this._spawn = spawn;\n    this.options = options || {};\n    this.name = 'Sendmail';\n    this.version = packageData.version;\n    this.path = 'sendmail';\n    this.args = false;\n    this.winbreak = false;\n    this.logger = shared.getLogger(this.options, {\n      component: this.options.component || 'sendmail'\n    });\n\n    if (options) {\n      if (typeof options === 'string') {\n        this.path = options;\n      } else if (typeof options === 'object') {\n        if (options.path) {\n          this.path = options.path;\n        }\n\n        if (Array.isArray(options.args)) {\n          this.args = options.args;\n        }\n\n        this.winbreak = ['win', 'windows', 'dos', '\\r\\n'].includes((options.newline || '').toString().toLowerCase());\n      }\n    }\n  }\n  /**\n   * <p>Compiles a mailcomposer message and forwards it to handler that sends it.</p>\n   *\n   * @param {Object} emailMessage MailComposer object\n   * @param {Function} callback Callback function to run when the sending is completed\n   */\n\n\n  _createClass(SendmailTransport, [{\n    key: \"send\",\n    value: function send(mail, done) {\n      var _this = this;\n\n      // Sendmail strips this header line by itself\n      mail.message.keepBcc = true;\n      var envelope = mail.data.envelope || mail.message.getEnvelope();\n      var messageId = mail.message.messageId();\n      var args;\n      var sendmail;\n      var returned;\n      var transform;\n      var hasInvalidAddresses = [].concat(envelope.from || []).concat(envelope.to || []).some(function (addr) {\n        return /^-/.test(addr);\n      });\n\n      if (hasInvalidAddresses) {\n        return done(new Error('Can not send mail. Invalid envelope addresses.'));\n      }\n\n      if (this.args) {\n        // force -i to keep single dots\n        args = ['-i'].concat(this.args).concat(envelope.to);\n      } else {\n        args = ['-i'].concat(envelope.from ? ['-f', envelope.from] : []).concat(envelope.to);\n      }\n\n      var callback = function callback(err) {\n        if (returned) {\n          // ignore any additional responses, already done\n          return;\n        }\n\n        returned = true;\n\n        if (typeof done === 'function') {\n          if (err) {\n            return done(err);\n          } else {\n            return done(null, {\n              envelope: mail.data.envelope || mail.message.getEnvelope(),\n              messageId: messageId,\n              response: 'Messages queued for delivery'\n            });\n          }\n        }\n      };\n\n      try {\n        sendmail = this._spawn(this.path, args);\n      } catch (E) {\n        this.logger.error({\n          err: E,\n          tnx: 'spawn',\n          messageId: messageId\n        }, 'Error occurred while spawning sendmail. %s', E.message);\n        return callback(E);\n      }\n\n      if (sendmail) {\n        sendmail.on('error', function (err) {\n          _this.logger.error({\n            err: err,\n            tnx: 'spawn',\n            messageId: messageId\n          }, 'Error occurred when sending message %s. %s', messageId, err.message);\n\n          callback(err);\n        });\n        sendmail.once('exit', function (code) {\n          if (!code) {\n            return callback();\n          }\n\n          var err;\n\n          if (code === 127) {\n            err = new Error('Sendmail command not found, process exited with code ' + code);\n          } else {\n            err = new Error('Sendmail exited with code ' + code);\n          }\n\n          _this.logger.error({\n            err: err,\n            tnx: 'stdin',\n            messageId: messageId\n          }, 'Error sending message %s to sendmail. %s', messageId, err.message);\n\n          callback(err);\n        });\n        sendmail.once('close', callback);\n        sendmail.stdin.on('error', function (err) {\n          _this.logger.error({\n            err: err,\n            tnx: 'stdin',\n            messageId: messageId\n          }, 'Error occurred when piping message %s to sendmail. %s', messageId, err.message);\n\n          callback(err);\n        });\n        var recipients = [].concat(envelope.to || []);\n\n        if (recipients.length > 3) {\n          recipients.push('...and ' + recipients.splice(2).length + ' more');\n        }\n\n        this.logger.info({\n          tnx: 'send',\n          messageId: messageId\n        }, 'Sending message %s to <%s>', messageId, recipients.join(', '));\n        transform = this.winbreak ? new LeWindows() : new LeUnix();\n        var sourceStream = mail.message.createReadStream();\n        transform.once('error', function (err) {\n          _this.logger.error({\n            err: err,\n            tnx: 'stdin',\n            messageId: messageId\n          }, 'Error occurred when generating message %s. %s', messageId, err.message);\n\n          sendmail.kill('SIGINT'); // do not deliver the message\n\n          callback(err);\n        });\n        sourceStream.once('error', function (err) {\n          return transform.emit('error', err);\n        });\n        sourceStream.pipe(transform).pipe(sendmail.stdin);\n      } else {\n        return callback(new Error('sendmail was not found'));\n      }\n    }\n  }]);\n\n  return SendmailTransport;\n}();\n\nmodule.exports = SendmailTransport;","map":{"version":3,"sources":["/home/yamin/My_repos/new-email-app/new-email-app/node_modules/nodemailer/lib/sendmail-transport/index.js"],"names":["spawn","require","packageData","LeWindows","LeUnix","shared","SendmailTransport","options","_spawn","name","version","path","args","winbreak","logger","getLogger","component","Array","isArray","includes","newline","toString","toLowerCase","mail","done","message","keepBcc","envelope","data","getEnvelope","messageId","sendmail","returned","transform","hasInvalidAddresses","concat","from","to","some","addr","test","Error","callback","err","response","E","error","tnx","on","once","code","stdin","recipients","length","push","splice","info","join","sourceStream","createReadStream","kill","emit","pipe","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst spawn = require('child_process').spawn;\nconst packageData = require('../../package.json');\nconst LeWindows = require('./le-windows');\nconst LeUnix = require('./le-unix');\nconst shared = require('../shared');\n\n/**\n * Generates a Transport object for Sendmail\n *\n * Possible options can be the following:\n *\n *  * **path** optional path to sendmail binary\n *  * **newline** either 'windows' or 'unix'\n *  * **args** an array of arguments for the sendmail binary\n *\n * @constructor\n * @param {Object} optional config parameter for Sendmail\n */\nclass SendmailTransport {\n    constructor(options) {\n        options = options || {};\n\n        // use a reference to spawn for mocking purposes\n        this._spawn = spawn;\n\n        this.options = options || {};\n\n        this.name = 'Sendmail';\n        this.version = packageData.version;\n\n        this.path = 'sendmail';\n        this.args = false;\n        this.winbreak = false;\n\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || 'sendmail'\n        });\n\n        if (options) {\n            if (typeof options === 'string') {\n                this.path = options;\n            } else if (typeof options === 'object') {\n                if (options.path) {\n                    this.path = options.path;\n                }\n                if (Array.isArray(options.args)) {\n                    this.args = options.args;\n                }\n                this.winbreak = ['win', 'windows', 'dos', '\\r\\n'].includes((options.newline || '').toString().toLowerCase());\n            }\n        }\n    }\n\n    /**\n     * <p>Compiles a mailcomposer message and forwards it to handler that sends it.</p>\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */\n    send(mail, done) {\n        // Sendmail strips this header line by itself\n        mail.message.keepBcc = true;\n\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n        let args;\n        let sendmail;\n        let returned;\n        let transform;\n\n        const hasInvalidAddresses = []\n            .concat(envelope.from || [])\n            .concat(envelope.to || [])\n            .some(addr => /^-/.test(addr));\n        if (hasInvalidAddresses) {\n            return done(new Error('Can not send mail. Invalid envelope addresses.'));\n        }\n\n        if (this.args) {\n            // force -i to keep single dots\n            args = ['-i'].concat(this.args).concat(envelope.to);\n        } else {\n            args = ['-i'].concat(envelope.from ? ['-f', envelope.from] : []).concat(envelope.to);\n        }\n\n        let callback = err => {\n            if (returned) {\n                // ignore any additional responses, already done\n                return;\n            }\n            returned = true;\n            if (typeof done === 'function') {\n                if (err) {\n                    return done(err);\n                } else {\n                    return done(null, {\n                        envelope: mail.data.envelope || mail.message.getEnvelope(),\n                        messageId,\n                        response: 'Messages queued for delivery'\n                    });\n                }\n            }\n        };\n\n        try {\n            sendmail = this._spawn(this.path, args);\n        } catch (E) {\n            this.logger.error(\n                {\n                    err: E,\n                    tnx: 'spawn',\n                    messageId\n                },\n                'Error occurred while spawning sendmail. %s',\n                E.message\n            );\n            return callback(E);\n        }\n\n        if (sendmail) {\n            sendmail.on('error', err => {\n                this.logger.error(\n                    {\n                        err,\n                        tnx: 'spawn',\n                        messageId\n                    },\n                    'Error occurred when sending message %s. %s',\n                    messageId,\n                    err.message\n                );\n                callback(err);\n            });\n\n            sendmail.once('exit', code => {\n                if (!code) {\n                    return callback();\n                }\n                let err;\n                if (code === 127) {\n                    err = new Error('Sendmail command not found, process exited with code ' + code);\n                } else {\n                    err = new Error('Sendmail exited with code ' + code);\n                }\n\n                this.logger.error(\n                    {\n                        err,\n                        tnx: 'stdin',\n                        messageId\n                    },\n                    'Error sending message %s to sendmail. %s',\n                    messageId,\n                    err.message\n                );\n                callback(err);\n            });\n            sendmail.once('close', callback);\n\n            sendmail.stdin.on('error', err => {\n                this.logger.error(\n                    {\n                        err,\n                        tnx: 'stdin',\n                        messageId\n                    },\n                    'Error occurred when piping message %s to sendmail. %s',\n                    messageId,\n                    err.message\n                );\n                callback(err);\n            });\n\n            let recipients = [].concat(envelope.to || []);\n            if (recipients.length > 3) {\n                recipients.push('...and ' + recipients.splice(2).length + ' more');\n            }\n            this.logger.info(\n                {\n                    tnx: 'send',\n                    messageId\n                },\n                'Sending message %s to <%s>',\n                messageId,\n                recipients.join(', ')\n            );\n\n            transform = this.winbreak ? new LeWindows() : new LeUnix();\n            let sourceStream = mail.message.createReadStream();\n\n            transform.once('error', err => {\n                this.logger.error(\n                    {\n                        err,\n                        tnx: 'stdin',\n                        messageId\n                    },\n                    'Error occurred when generating message %s. %s',\n                    messageId,\n                    err.message\n                );\n                sendmail.kill('SIGINT'); // do not deliver the message\n                callback(err);\n            });\n\n            sourceStream.once('error', err => transform.emit('error', err));\n            sourceStream.pipe(transform).pipe(sendmail.stdin);\n        } else {\n            return callback(new Error('sendmail was not found'));\n        }\n    }\n}\n\nmodule.exports = SendmailTransport;\n"]},"metadata":{},"sourceType":"script"}