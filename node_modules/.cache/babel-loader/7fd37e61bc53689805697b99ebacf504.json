{"ast":null,"code":"/*!\n * inflection\n * Copyright(c) 2011 Ben Lin <ben@dreamerslab.com>\n * MIT Licensed\n *\n * @fileoverview\n * A port of inflection-js to node.js module.\n */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.inflection = factory();\n  }\n})(this, function () {\n  /**\n   * @description This is a list of nouns that use the same form for both singular and plural.\n   *              This list should remain entirely in lower case to correctly match Strings.\n   * @private\n   */\n  var uncountable_words = ['equipment', 'information', 'rice', 'money', 'species', 'series', 'fish', 'sheep', 'moose', 'deer', 'news'];\n  /**\n   * @description These rules translate from the singular form of a noun to its plural form.\n   * @private\n   */\n\n  var plural_rules = [// do not replace if its already a plural word\n  [new RegExp('(m)en$', 'gi')], [new RegExp('(pe)ople$', 'gi')], [new RegExp('(child)ren$', 'gi')], [new RegExp('([ti])a$', 'gi')], [new RegExp('((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$', 'gi')], [new RegExp('(hive)s$', 'gi')], [new RegExp('(tive)s$', 'gi')], [new RegExp('(curve)s$', 'gi')], [new RegExp('([lr])ves$', 'gi')], [new RegExp('([^fo])ves$', 'gi')], [new RegExp('([^aeiouy]|qu)ies$', 'gi')], [new RegExp('(s)eries$', 'gi')], [new RegExp('(m)ovies$', 'gi')], [new RegExp('(x|ch|ss|sh)es$', 'gi')], [new RegExp('([m|l])ice$', 'gi')], [new RegExp('(bus)es$', 'gi')], [new RegExp('(o)es$', 'gi')], [new RegExp('(shoe)s$', 'gi')], [new RegExp('(cris|ax|test)es$', 'gi')], [new RegExp('(octop|vir)i$', 'gi')], [new RegExp('(alias|status)es$', 'gi')], [new RegExp('^(ox)en', 'gi')], [new RegExp('(vert|ind)ices$', 'gi')], [new RegExp('(matr)ices$', 'gi')], [new RegExp('(quiz)zes$', 'gi')], // original rule\n  [new RegExp('(m)an$', 'gi'), '$1en'], [new RegExp('(pe)rson$', 'gi'), '$1ople'], [new RegExp('(child)$', 'gi'), '$1ren'], [new RegExp('^(ox)$', 'gi'), '$1en'], [new RegExp('(ax|test)is$', 'gi'), '$1es'], [new RegExp('(octop|vir)us$', 'gi'), '$1i'], [new RegExp('(alias|status)$', 'gi'), '$1es'], [new RegExp('(bu)s$', 'gi'), '$1ses'], [new RegExp('(buffal|tomat|potat)o$', 'gi'), '$1oes'], [new RegExp('([ti])um$', 'gi'), '$1a'], [new RegExp('sis$', 'gi'), 'ses'], [new RegExp('(?:([^f])fe|([lr])f)$', 'gi'), '$1$2ves'], [new RegExp('(hive)$', 'gi'), '$1s'], [new RegExp('([^aeiouy]|qu)y$', 'gi'), '$1ies'], [new RegExp('(x|ch|ss|sh)$', 'gi'), '$1es'], [new RegExp('(matr|vert|ind)ix|ex$', 'gi'), '$1ices'], [new RegExp('([m|l])ouse$', 'gi'), '$1ice'], [new RegExp('(quiz)$', 'gi'), '$1zes'], [new RegExp('s$', 'gi'), 's'], [new RegExp('$', 'gi'), 's']];\n  /**\n   * @description These rules translate from the plural form of a noun to its singular form.\n   * @private\n   */\n\n  var singular_rules = [// do not replace if its already a singular word\n  [new RegExp('(m)an$', 'gi')], [new RegExp('(pe)rson$', 'gi')], [new RegExp('(child)$', 'gi')], [new RegExp('^(ox)$', 'gi')], [new RegExp('(ax|test)is$', 'gi')], [new RegExp('(octop|vir)us$', 'gi')], [new RegExp('(alias|status)$', 'gi')], [new RegExp('(bu)s$', 'gi')], [new RegExp('(buffal|tomat|potat)o$', 'gi')], [new RegExp('([ti])um$', 'gi')], [new RegExp('sis$', 'gi')], [new RegExp('(?:([^f])fe|([lr])f)$', 'gi')], [new RegExp('(hive)$', 'gi')], [new RegExp('([^aeiouy]|qu)y$', 'gi')], [new RegExp('(x|ch|ss|sh)$', 'gi')], [new RegExp('(matr|vert|ind)ix|ex$', 'gi')], [new RegExp('([m|l])ouse$', 'gi')], [new RegExp('(quiz)$', 'gi')], // original rule\n  [new RegExp('(m)en$', 'gi'), '$1an'], [new RegExp('(pe)ople$', 'gi'), '$1rson'], [new RegExp('(child)ren$', 'gi'), '$1'], [new RegExp('([ti])a$', 'gi'), '$1um'], [new RegExp('((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$', 'gi'), '$1$2sis'], [new RegExp('(hive)s$', 'gi'), '$1'], [new RegExp('(tive)s$', 'gi'), '$1'], [new RegExp('(curve)s$', 'gi'), '$1'], [new RegExp('([lr])ves$', 'gi'), '$1f'], [new RegExp('([^fo])ves$', 'gi'), '$1fe'], [new RegExp('(m)ovies$', 'gi'), '$1ovie'], [new RegExp('([^aeiouy]|qu)ies$', 'gi'), '$1y'], [new RegExp('(s)eries$', 'gi'), '$1eries'], [new RegExp('(x|ch|ss|sh)es$', 'gi'), '$1'], [new RegExp('([m|l])ice$', 'gi'), '$1ouse'], [new RegExp('(bus)es$', 'gi'), '$1'], [new RegExp('(o)es$', 'gi'), '$1'], [new RegExp('(shoe)s$', 'gi'), '$1'], [new RegExp('(cris|ax|test)es$', 'gi'), '$1is'], [new RegExp('(octop|vir)i$', 'gi'), '$1us'], [new RegExp('(alias|status)es$', 'gi'), '$1'], [new RegExp('^(ox)en', 'gi'), '$1'], [new RegExp('(vert|ind)ices$', 'gi'), '$1ex'], [new RegExp('(matr)ices$', 'gi'), '$1ix'], [new RegExp('(quiz)zes$', 'gi'), '$1'], [new RegExp('ss$', 'gi'), 'ss'], [new RegExp('s$', 'gi'), '']];\n  /**\n   * @description This is a list of words that should not be capitalized for title case.\n   * @private\n   */\n\n  var non_titlecased_words = ['and', 'or', 'nor', 'a', 'an', 'the', 'so', 'but', 'to', 'of', 'at', 'by', 'from', 'into', 'on', 'onto', 'off', 'out', 'in', 'over', 'with', 'for'];\n  /**\n   * @description These are regular expressions used for converting between String formats.\n   * @private\n   */\n\n  var id_suffix = new RegExp('(_ids|_id)$', 'g');\n  var underbar = new RegExp('_', 'g');\n  var space_or_underbar = new RegExp('[\\ _]', 'g');\n  var uppercase = new RegExp('([A-Z])', 'g');\n  var underbar_prefix = new RegExp('^_');\n  var inflector = {\n    /**\n     * A helper method that applies rules based replacement to a String.\n     * @private\n     * @function\n     * @param {String} str String to modify and return based on the passed rules.\n     * @param {Array: [RegExp, String]} rules Regexp to match paired with String to use for replacement\n     * @param {Array: [String]} skip Strings to skip if they match\n     * @param {String} override String to return as though this method succeeded (used to conform to APIs)\n     * @returns {String} Return passed String modified by passed rules.\n     * @example\n     *\n     *     this._apply_rules( 'cows', singular_rules ); // === 'cow'\n     */\n    _apply_rules: function _apply_rules(str, rules, skip, override) {\n      if (override) {\n        str = override;\n      } else {\n        var ignore = inflector.indexOf(skip, str.toLowerCase()) > -1;\n\n        if (!ignore) {\n          var i = 0;\n          var j = rules.length;\n\n          for (; i < j; i++) {\n            if (str.match(rules[i][0])) {\n              if (rules[i][1] !== undefined) {\n                str = str.replace(rules[i][0], rules[i][1]);\n              }\n\n              break;\n            }\n          }\n        }\n      }\n\n      return str;\n    },\n\n    /**\n     * This lets us detect if an Array contains a given element.\n     * @public\n     * @function\n     * @param {Array} arr The subject array.\n     * @param {Object} item Object to locate in the Array.\n     * @param {Number} from_index Starts checking from this position in the Array.(optional)\n     * @param {Function} compare_func Function used to compare Array item vs passed item.(optional)\n     * @returns {Number} Return index position in the Array of the passed item.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.indexOf([ 'hi','there' ], 'guys' ); // === -1\n     *     inflection.indexOf([ 'hi','there' ], 'hi' ); // === 0\n     */\n    indexOf: function indexOf(arr, item, from_index, compare_func) {\n      if (!from_index) {\n        from_index = -1;\n      }\n\n      var index = -1;\n      var i = from_index;\n      var j = arr.length;\n\n      for (; i < j; i++) {\n        if (arr[i] === item || compare_func && compare_func(arr[i], item)) {\n          index = i;\n          break;\n        }\n      }\n\n      return index;\n    },\n\n    /**\n     * This function adds pluralization support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {String} plural Overrides normal output with said String.(optional)\n     * @returns {String} Singular English language nouns are returned in plural form.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.pluralize( 'person' ); // === 'people'\n     *     inflection.pluralize( 'octopus' ); // === 'octopi'\n     *     inflection.pluralize( 'Hat' ); // === 'Hats'\n     *     inflection.pluralize( 'person', 'guys' ); // === 'guys'\n     */\n    pluralize: function pluralize(str, plural) {\n      return inflector._apply_rules(str, plural_rules, uncountable_words, plural);\n    },\n\n    /**\n     * This function adds singularization support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {String} singular Overrides normal output with said String.(optional)\n     * @returns {String} Plural English language nouns are returned in singular form.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.singularize( 'people' ); // === 'person'\n     *     inflection.singularize( 'octopi' ); // === 'octopus'\n     *     inflection.singularize( 'Hats' ); // === 'Hat'\n     *     inflection.singularize( 'guys', 'person' ); // === 'person'\n     */\n    singularize: function singularize(str, singular) {\n      return inflector._apply_rules(str, singular_rules, uncountable_words, singular);\n    },\n\n    /**\n     * This function adds camelization support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)\n     *                                 Passing true will lowercase it.\n     * @returns {String} Lower case underscored words will be returned in camel case.\n     *                  additionally '/' is translated to '::'\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.camelize( 'message_properties' ); // === 'MessageProperties'\n     *     inflection.camelize( 'message_properties', true ); // === 'messageProperties'\n     */\n    camelize: function camelize(str, low_first_letter) {\n      var str_path = str.split('/');\n      var i = 0;\n      var j = str_path.length;\n      var str_arr, init_x, k, l, first;\n\n      for (; i < j; i++) {\n        str_arr = str_path[i].split('_');\n        k = 0;\n        l = str_arr.length;\n\n        for (; k < l; k++) {\n          if (k !== 0) {\n            str_arr[k] = str_arr[k].toLowerCase();\n          }\n\n          first = str_arr[k].charAt(0);\n          first = low_first_letter && i === 0 && k === 0 ? first.toLowerCase() : first.toUpperCase();\n          str_arr[k] = first + str_arr[k].substring(1);\n        }\n\n        str_path[i] = str_arr.join('');\n      }\n\n      return str_path.join('::');\n    },\n\n    /**\n     * This function adds underscore support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {Boolean} all_upper_case Default is to lowercase and add underscore prefix.(optional)\n     *                  Passing true will return as entered.\n     * @returns {String} Camel cased words are returned as lower cased and underscored.\n     *                  additionally '::' is translated to '/'.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.underscore( 'MessageProperties' ); // === 'message_properties'\n     *     inflection.underscore( 'messageProperties' ); // === 'message_properties'\n     *     inflection.underscore( 'MP', true ); // === 'MP'\n     */\n    underscore: function underscore(str, all_upper_case) {\n      if (all_upper_case && str === str.toUpperCase()) return str;\n      var str_path = str.split('::');\n      var i = 0;\n      var j = str_path.length;\n\n      for (; i < j; i++) {\n        str_path[i] = str_path[i].replace(uppercase, '_$1');\n        str_path[i] = str_path[i].replace(underbar_prefix, '');\n      }\n\n      return str_path.join('/').toLowerCase();\n    },\n\n    /**\n     * This function adds humanize support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)\n     *                                 Passing true will lowercase it.\n     * @returns {String} Lower case underscored words will be returned in humanized form.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.humanize( 'message_properties' ); // === 'Message properties'\n     *     inflection.humanize( 'message_properties', true ); // === 'message properties'\n     */\n    humanize: function humanize(str, low_first_letter) {\n      str = str.toLowerCase();\n      str = str.replace(id_suffix, '');\n      str = str.replace(underbar, ' ');\n\n      if (!low_first_letter) {\n        str = inflector.capitalize(str);\n      }\n\n      return str;\n    },\n\n    /**\n     * This function adds capitalization support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} All characters will be lower case and the first will be upper.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.capitalize( 'message_properties' ); // === 'Message_properties'\n     *     inflection.capitalize( 'message properties', true ); // === 'Message properties'\n     */\n    capitalize: function capitalize(str) {\n      str = str.toLowerCase();\n      return str.substring(0, 1).toUpperCase() + str.substring(1);\n    },\n\n    /**\n     * This function adds dasherization support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} Replaces all spaces or underbars with dashes.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.dasherize( 'message_properties' ); // === 'message-properties'\n     *     inflection.dasherize( 'Message Properties' ); // === 'Message-Properties'\n     */\n    dasherize: function dasherize(str) {\n      return str.replace(space_or_underbar, '-');\n    },\n\n    /**\n     * This function adds titleize support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} Capitalizes words as you would for a book title.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.titleize( 'message_properties' ); // === 'Message Properties'\n     *     inflection.titleize( 'message properties to keep' ); // === 'Message Properties to Keep'\n     */\n    titleize: function titleize(str) {\n      str = str.toLowerCase().replace(underbar, ' ');\n      var str_arr = str.split(' ');\n      var i = 0;\n      var j = str_arr.length;\n      var d, k, l;\n\n      for (; i < j; i++) {\n        d = str_arr[i].split('-');\n        k = 0;\n        l = d.length;\n\n        for (; k < l; k++) {\n          if (inflector.indexOf(non_titlecased_words, d[k].toLowerCase()) < 0) {\n            d[k] = inflector.capitalize(d[k]);\n          }\n        }\n\n        str_arr[i] = d.join('-');\n      }\n\n      str = str_arr.join(' ');\n      str = str.substring(0, 1).toUpperCase() + str.substring(1);\n      return str;\n    },\n\n    /**\n     * This function adds demodulize support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} Removes module names leaving only class names.(Ruby style)\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.demodulize( 'Message::Bus::Properties' ); // === 'Properties'\n     */\n    demodulize: function demodulize(str) {\n      var str_arr = str.split('::');\n      return str_arr[str_arr.length - 1];\n    },\n\n    /**\n     * This function adds tableize support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} Return camel cased words into their underscored plural form.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.tableize( 'MessageBusProperty' ); // === 'message_bus_properties'\n     */\n    tableize: function tableize(str) {\n      str = inflector.underscore(str);\n      str = inflector.pluralize(str);\n      return str;\n    },\n\n    /**\n     * This function adds classification support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} Underscored plural nouns become the camel cased singular form.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.classify( 'message_bus_properties' ); // === 'MessageBusProperty'\n     */\n    classify: function classify(str) {\n      str = inflector.camelize(str);\n      str = inflector.singularize(str);\n      return str;\n    },\n\n    /**\n     * This function adds foreign key support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {Boolean} drop_id_ubar Default is to seperate id with an underbar at the end of the class name,\n                                   you can pass true to skip it.(optional)\n     * @returns {String} Underscored plural nouns become the camel cased singular form.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.foreign_key( 'MessageBusProperty' ); // === 'message_bus_property_id'\n     *     inflection.foreign_key( 'MessageBusProperty', true ); // === 'message_bus_propertyid'\n     */\n    foreign_key: function foreign_key(str, drop_id_ubar) {\n      str = inflector.demodulize(str);\n      str = inflector.underscore(str) + (drop_id_ubar ? '' : '_') + 'id';\n      return str;\n    },\n\n    /**\n     * This function adds ordinalize support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} Return all found numbers their sequence like '22nd'.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.ordinalize( 'the 1 pitch' ); // === 'the 1st pitch'\n     */\n    ordinalize: function ordinalize(str) {\n      var str_arr = str.split(' ');\n      var i = 0;\n      var j = str_arr.length;\n\n      for (; i < j; i++) {\n        var k = parseInt(str_arr[i], 10);\n\n        if (!isNaN(k)) {\n          var ltd = str_arr[i].substring(str_arr[i].length - 2);\n          var ld = str_arr[i].substring(str_arr[i].length - 1);\n          var suf = 'th';\n\n          if (ltd != '11' && ltd != '12' && ltd != '13') {\n            if (ld === '1') {\n              suf = 'st';\n            } else if (ld === '2') {\n              suf = 'nd';\n            } else if (ld === '3') {\n              suf = 'rd';\n            }\n          }\n\n          str_arr[i] += suf;\n        }\n      }\n\n      return str_arr.join(' ');\n    },\n\n    /**\n     * This function performs multiple inflection methods on a string\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {Array} arr An array of inflection methods.\n     * @returns {String}\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.transform( 'all job', [ 'pluralize', 'capitalize', 'dasherize' ]); // === 'All-jobs'\n     */\n    transform: function transform(str, arr) {\n      var i = 0;\n      var j = arr.length;\n\n      for (; i < j; i++) {\n        var method = arr[i];\n\n        if (this.hasOwnProperty(method)) {\n          str = this[method](str);\n        }\n      }\n\n      return str;\n    }\n  };\n  /**\n   * @public\n   */\n\n  inflector.version = '1.3.8';\n  return inflector;\n});","map":{"version":3,"sources":["/home/yamin/My_repos/new-email-app/new-email-app/node_modules/path-proxy/node_modules/inflection/lib/inflection.js"],"names":["root","factory","define","amd","exports","module","inflection","uncountable_words","plural_rules","RegExp","singular_rules","non_titlecased_words","id_suffix","underbar","space_or_underbar","uppercase","underbar_prefix","inflector","_apply_rules","str","rules","skip","override","ignore","indexOf","toLowerCase","i","j","length","match","undefined","replace","arr","item","from_index","compare_func","index","pluralize","plural","singularize","singular","camelize","low_first_letter","str_path","split","str_arr","init_x","k","l","first","charAt","toUpperCase","substring","join","underscore","all_upper_case","humanize","capitalize","dasherize","titleize","d","demodulize","tableize","classify","foreign_key","drop_id_ubar","ordinalize","parseInt","isNaN","ltd","ld","suf","transform","method","hasOwnProperty","version"],"mappings":"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","sourcesContent":["/*!\n * inflection\n * Copyright(c) 2011 Ben Lin <ben@dreamerslab.com>\n * MIT Licensed\n *\n * @fileoverview\n * A port of inflection-js to node.js module.\n */\n\n( function ( root, factory ){\n  if( typeof define === 'function' && define.amd ){\n    define([], factory );\n  }else if( typeof exports === 'object' ){\n    module.exports = factory();\n  }else{\n    root.inflection = factory();\n  }\n}( this, function (){\n\n  /**\n   * @description This is a list of nouns that use the same form for both singular and plural.\n   *              This list should remain entirely in lower case to correctly match Strings.\n   * @private\n   */\n  var uncountable_words = [\n    'equipment', 'information', 'rice', 'money', 'species',\n    'series', 'fish', 'sheep', 'moose', 'deer', 'news'\n  ];\n\n  /**\n   * @description These rules translate from the singular form of a noun to its plural form.\n   * @private\n   */\n  var plural_rules = [\n\n    // do not replace if its already a plural word\n    [ new RegExp( '(m)en$',      'gi' )],\n    [ new RegExp( '(pe)ople$',   'gi' )],\n    [ new RegExp( '(child)ren$', 'gi' )],\n    [ new RegExp( '([ti])a$',    'gi' )],\n    [ new RegExp( '((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$','gi' )],\n    [ new RegExp( '(hive)s$',           'gi' )],\n    [ new RegExp( '(tive)s$',           'gi' )],\n    [ new RegExp( '(curve)s$',          'gi' )],\n    [ new RegExp( '([lr])ves$',         'gi' )],\n    [ new RegExp( '([^fo])ves$',        'gi' )],\n    [ new RegExp( '([^aeiouy]|qu)ies$', 'gi' )],\n    [ new RegExp( '(s)eries$',          'gi' )],\n    [ new RegExp( '(m)ovies$',          'gi' )],\n    [ new RegExp( '(x|ch|ss|sh)es$',    'gi' )],\n    [ new RegExp( '([m|l])ice$',        'gi' )],\n    [ new RegExp( '(bus)es$',           'gi' )],\n    [ new RegExp( '(o)es$',             'gi' )],\n    [ new RegExp( '(shoe)s$',           'gi' )],\n    [ new RegExp( '(cris|ax|test)es$',  'gi' )],\n    [ new RegExp( '(octop|vir)i$',      'gi' )],\n    [ new RegExp( '(alias|status)es$',  'gi' )],\n    [ new RegExp( '^(ox)en',            'gi' )],\n    [ new RegExp( '(vert|ind)ices$',    'gi' )],\n    [ new RegExp( '(matr)ices$',        'gi' )],\n    [ new RegExp( '(quiz)zes$',         'gi' )],\n\n    // original rule\n    [ new RegExp( '(m)an$', 'gi' ),                 '$1en' ],\n    [ new RegExp( '(pe)rson$', 'gi' ),              '$1ople' ],\n    [ new RegExp( '(child)$', 'gi' ),               '$1ren' ],\n    [ new RegExp( '^(ox)$', 'gi' ),                 '$1en' ],\n    [ new RegExp( '(ax|test)is$', 'gi' ),           '$1es' ],\n    [ new RegExp( '(octop|vir)us$', 'gi' ),         '$1i' ],\n    [ new RegExp( '(alias|status)$', 'gi' ),        '$1es' ],\n    [ new RegExp( '(bu)s$', 'gi' ),                 '$1ses' ],\n    [ new RegExp( '(buffal|tomat|potat)o$', 'gi' ), '$1oes' ],\n    [ new RegExp( '([ti])um$', 'gi' ),              '$1a' ],\n    [ new RegExp( 'sis$', 'gi' ),                   'ses' ],\n    [ new RegExp( '(?:([^f])fe|([lr])f)$', 'gi' ),  '$1$2ves' ],\n    [ new RegExp( '(hive)$', 'gi' ),                '$1s' ],\n    [ new RegExp( '([^aeiouy]|qu)y$', 'gi' ),       '$1ies' ],\n    [ new RegExp( '(x|ch|ss|sh)$', 'gi' ),          '$1es' ],\n    [ new RegExp( '(matr|vert|ind)ix|ex$', 'gi' ),  '$1ices' ],\n    [ new RegExp( '([m|l])ouse$', 'gi' ),           '$1ice' ],\n    [ new RegExp( '(quiz)$', 'gi' ),                '$1zes' ],\n\n    [ new RegExp( 's$', 'gi' ), 's' ],\n    [ new RegExp( '$', 'gi' ),  's' ]\n  ];\n\n  /**\n   * @description These rules translate from the plural form of a noun to its singular form.\n   * @private\n   */\n  var singular_rules = [\n\n    // do not replace if its already a singular word\n    [ new RegExp( '(m)an$',                 'gi' )],\n    [ new RegExp( '(pe)rson$',              'gi' )],\n    [ new RegExp( '(child)$',               'gi' )],\n    [ new RegExp( '^(ox)$',                 'gi' )],\n    [ new RegExp( '(ax|test)is$',           'gi' )],\n    [ new RegExp( '(octop|vir)us$',         'gi' )],\n    [ new RegExp( '(alias|status)$',        'gi' )],\n    [ new RegExp( '(bu)s$',                 'gi' )],\n    [ new RegExp( '(buffal|tomat|potat)o$', 'gi' )],\n    [ new RegExp( '([ti])um$',              'gi' )],\n    [ new RegExp( 'sis$',                   'gi' )],\n    [ new RegExp( '(?:([^f])fe|([lr])f)$',  'gi' )],\n    [ new RegExp( '(hive)$',                'gi' )],\n    [ new RegExp( '([^aeiouy]|qu)y$',       'gi' )],\n    [ new RegExp( '(x|ch|ss|sh)$',          'gi' )],\n    [ new RegExp( '(matr|vert|ind)ix|ex$',  'gi' )],\n    [ new RegExp( '([m|l])ouse$',           'gi' )],\n    [ new RegExp( '(quiz)$',                'gi' )],\n\n    // original rule\n    [ new RegExp( '(m)en$', 'gi' ),                                                       '$1an' ],\n    [ new RegExp( '(pe)ople$', 'gi' ),                                                    '$1rson' ],\n    [ new RegExp( '(child)ren$', 'gi' ),                                                  '$1' ],\n    [ new RegExp( '([ti])a$', 'gi' ),                                                     '$1um' ],\n    [ new RegExp( '((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$','gi' ), '$1$2sis' ],\n    [ new RegExp( '(hive)s$', 'gi' ),                                                     '$1' ],\n    [ new RegExp( '(tive)s$', 'gi' ),                                                     '$1' ],\n    [ new RegExp( '(curve)s$', 'gi' ),                                                    '$1' ],\n    [ new RegExp( '([lr])ves$', 'gi' ),                                                   '$1f' ],\n    [ new RegExp( '([^fo])ves$', 'gi' ),                                                  '$1fe' ],\n    [ new RegExp( '(m)ovies$', 'gi' ),                                                    '$1ovie' ],\n    [ new RegExp( '([^aeiouy]|qu)ies$', 'gi' ),                                           '$1y' ],\n    [ new RegExp( '(s)eries$', 'gi' ),                                                    '$1eries' ],\n    [ new RegExp( '(x|ch|ss|sh)es$', 'gi' ),                                              '$1' ],\n    [ new RegExp( '([m|l])ice$', 'gi' ),                                                  '$1ouse' ],\n    [ new RegExp( '(bus)es$', 'gi' ),                                                     '$1' ],\n    [ new RegExp( '(o)es$', 'gi' ),                                                       '$1' ],\n    [ new RegExp( '(shoe)s$', 'gi' ),                                                     '$1' ],\n    [ new RegExp( '(cris|ax|test)es$', 'gi' ),                                            '$1is' ],\n    [ new RegExp( '(octop|vir)i$', 'gi' ),                                                '$1us' ],\n    [ new RegExp( '(alias|status)es$', 'gi' ),                                            '$1' ],\n    [ new RegExp( '^(ox)en', 'gi' ),                                                      '$1' ],\n    [ new RegExp( '(vert|ind)ices$', 'gi' ),                                              '$1ex' ],\n    [ new RegExp( '(matr)ices$', 'gi' ),                                                  '$1ix' ],\n    [ new RegExp( '(quiz)zes$', 'gi' ),                                                   '$1' ],\n    [ new RegExp( 'ss$', 'gi' ),                                                          'ss' ],\n    [ new RegExp( 's$', 'gi' ),                                                           '' ]\n  ];\n\n  /**\n   * @description This is a list of words that should not be capitalized for title case.\n   * @private\n   */\n  var non_titlecased_words = [\n    'and', 'or', 'nor', 'a', 'an', 'the', 'so', 'but', 'to', 'of', 'at','by',\n    'from', 'into', 'on', 'onto', 'off', 'out', 'in', 'over', 'with', 'for'\n  ];\n\n  /**\n   * @description These are regular expressions used for converting between String formats.\n   * @private\n   */\n  var id_suffix         = new RegExp( '(_ids|_id)$', 'g' );\n  var underbar          = new RegExp( '_', 'g' );\n  var space_or_underbar = new RegExp( '[\\ _]', 'g' );\n  var uppercase         = new RegExp( '([A-Z])', 'g' );\n  var underbar_prefix   = new RegExp( '^_' );\n\n  var inflector = {\n\n  /**\n   * A helper method that applies rules based replacement to a String.\n   * @private\n   * @function\n   * @param {String} str String to modify and return based on the passed rules.\n   * @param {Array: [RegExp, String]} rules Regexp to match paired with String to use for replacement\n   * @param {Array: [String]} skip Strings to skip if they match\n   * @param {String} override String to return as though this method succeeded (used to conform to APIs)\n   * @returns {String} Return passed String modified by passed rules.\n   * @example\n   *\n   *     this._apply_rules( 'cows', singular_rules ); // === 'cow'\n   */\n    _apply_rules : function ( str, rules, skip, override ){\n      if( override ){\n        str = override;\n      }else{\n        var ignore = ( inflector.indexOf( skip, str.toLowerCase()) > -1 );\n\n        if( !ignore ){\n          var i = 0;\n          var j = rules.length;\n\n          for( ; i < j; i++ ){\n            if( str.match( rules[ i ][ 0 ])){\n              if( rules[ i ][ 1 ] !== undefined ){\n                str = str.replace( rules[ i ][ 0 ], rules[ i ][ 1 ]);\n              }\n              break;\n            }\n          }\n        }\n      }\n\n      return str;\n    },\n\n\n\n  /**\n   * This lets us detect if an Array contains a given element.\n   * @public\n   * @function\n   * @param {Array} arr The subject array.\n   * @param {Object} item Object to locate in the Array.\n   * @param {Number} from_index Starts checking from this position in the Array.(optional)\n   * @param {Function} compare_func Function used to compare Array item vs passed item.(optional)\n   * @returns {Number} Return index position in the Array of the passed item.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.indexOf([ 'hi','there' ], 'guys' ); // === -1\n   *     inflection.indexOf([ 'hi','there' ], 'hi' ); // === 0\n   */\n    indexOf : function ( arr, item, from_index, compare_func ){\n      if( !from_index ){\n        from_index = -1;\n      }\n\n      var index = -1;\n      var i     = from_index;\n      var j     = arr.length;\n\n      for( ; i < j; i++ ){\n        if( arr[ i ]  === item || compare_func && compare_func( arr[ i ], item )){\n          index = i;\n          break;\n        }\n      }\n\n      return index;\n    },\n\n\n\n  /**\n   * This function adds pluralization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {String} plural Overrides normal output with said String.(optional)\n   * @returns {String} Singular English language nouns are returned in plural form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.pluralize( 'person' ); // === 'people'\n   *     inflection.pluralize( 'octopus' ); // === 'octopi'\n   *     inflection.pluralize( 'Hat' ); // === 'Hats'\n   *     inflection.pluralize( 'person', 'guys' ); // === 'guys'\n   */\n    pluralize : function ( str, plural ){\n      return inflector._apply_rules( str, plural_rules, uncountable_words, plural );\n    },\n\n\n\n  /**\n   * This function adds singularization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {String} singular Overrides normal output with said String.(optional)\n   * @returns {String} Plural English language nouns are returned in singular form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.singularize( 'people' ); // === 'person'\n   *     inflection.singularize( 'octopi' ); // === 'octopus'\n   *     inflection.singularize( 'Hats' ); // === 'Hat'\n   *     inflection.singularize( 'guys', 'person' ); // === 'person'\n   */\n    singularize : function ( str, singular ){\n      return inflector._apply_rules( str, singular_rules, uncountable_words, singular );\n    },\n\n\n\n  /**\n   * This function adds camelization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)\n   *                                 Passing true will lowercase it.\n   * @returns {String} Lower case underscored words will be returned in camel case.\n   *                  additionally '/' is translated to '::'\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.camelize( 'message_properties' ); // === 'MessageProperties'\n   *     inflection.camelize( 'message_properties', true ); // === 'messageProperties'\n   */\n    camelize : function ( str, low_first_letter ){\n      var str_path = str.split( '/' );\n      var i        = 0;\n      var j        = str_path.length;\n      var str_arr, init_x, k, l, first;\n\n      for( ; i < j; i++ ){\n        str_arr = str_path[ i ].split( '_' );\n        k       = 0;\n        l       = str_arr.length;\n\n        for( ; k < l; k++ ){\n          if( k !== 0 ){\n            str_arr[ k ] = str_arr[ k ].toLowerCase();\n          }\n\n          first = str_arr[ k ].charAt( 0 );\n          first = low_first_letter && i === 0 && k === 0\n            ? first.toLowerCase() : first.toUpperCase();\n          str_arr[ k ] = first + str_arr[ k ].substring( 1 );\n        }\n\n        str_path[ i ] = str_arr.join( '' );\n      }\n\n      return str_path.join( '::' );\n    },\n\n\n\n  /**\n   * This function adds underscore support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} all_upper_case Default is to lowercase and add underscore prefix.(optional)\n   *                  Passing true will return as entered.\n   * @returns {String} Camel cased words are returned as lower cased and underscored.\n   *                  additionally '::' is translated to '/'.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.underscore( 'MessageProperties' ); // === 'message_properties'\n   *     inflection.underscore( 'messageProperties' ); // === 'message_properties'\n   *     inflection.underscore( 'MP', true ); // === 'MP'\n   */\n    underscore : function ( str, all_upper_case ){\n      if( all_upper_case && str === str.toUpperCase()) return str;\n\n      var str_path = str.split( '::' );\n      var i        = 0;\n      var j        = str_path.length;\n\n      for( ; i < j; i++ ){\n        str_path[ i ] = str_path[ i ].replace( uppercase, '_$1' );\n        str_path[ i ] = str_path[ i ].replace( underbar_prefix, '' );\n      }\n\n      return str_path.join( '/' ).toLowerCase();\n    },\n\n\n\n  /**\n   * This function adds humanize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)\n   *                                 Passing true will lowercase it.\n   * @returns {String} Lower case underscored words will be returned in humanized form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.humanize( 'message_properties' ); // === 'Message properties'\n   *     inflection.humanize( 'message_properties', true ); // === 'message properties'\n   */\n    humanize : function ( str, low_first_letter ){\n      str = str.toLowerCase();\n      str = str.replace( id_suffix, '' );\n      str = str.replace( underbar, ' ' );\n\n      if( !low_first_letter ){\n        str = inflector.capitalize( str );\n      }\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds capitalization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} All characters will be lower case and the first will be upper.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.capitalize( 'message_properties' ); // === 'Message_properties'\n   *     inflection.capitalize( 'message properties', true ); // === 'Message properties'\n   */\n    capitalize : function ( str ){\n      str = str.toLowerCase();\n\n      return str.substring( 0, 1 ).toUpperCase() + str.substring( 1 );\n    },\n\n\n\n  /**\n   * This function adds dasherization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Replaces all spaces or underbars with dashes.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.dasherize( 'message_properties' ); // === 'message-properties'\n   *     inflection.dasherize( 'Message Properties' ); // === 'Message-Properties'\n   */\n    dasherize : function ( str ){\n      return str.replace( space_or_underbar, '-' );\n    },\n\n\n\n  /**\n   * This function adds titleize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Capitalizes words as you would for a book title.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.titleize( 'message_properties' ); // === 'Message Properties'\n   *     inflection.titleize( 'message properties to keep' ); // === 'Message Properties to Keep'\n   */\n    titleize : function ( str ){\n      str         = str.toLowerCase().replace( underbar, ' ' );\n      var str_arr = str.split( ' ' );\n      var i       = 0;\n      var j       = str_arr.length;\n      var d, k, l;\n\n      for( ; i < j; i++ ){\n        d = str_arr[ i ].split( '-' );\n        k = 0;\n        l = d.length;\n\n        for( ; k < l; k++){\n          if( inflector.indexOf( non_titlecased_words, d[ k ].toLowerCase()) < 0 ){\n            d[ k ] = inflector.capitalize( d[ k ]);\n          }\n        }\n\n        str_arr[ i ] = d.join( '-' );\n      }\n\n      str = str_arr.join( ' ' );\n      str = str.substring( 0, 1 ).toUpperCase() + str.substring( 1 );\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds demodulize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Removes module names leaving only class names.(Ruby style)\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.demodulize( 'Message::Bus::Properties' ); // === 'Properties'\n   */\n    demodulize : function ( str ){\n      var str_arr = str.split( '::' );\n\n      return str_arr[ str_arr.length - 1 ];\n    },\n\n\n\n  /**\n   * This function adds tableize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Return camel cased words into their underscored plural form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.tableize( 'MessageBusProperty' ); // === 'message_bus_properties'\n   */\n    tableize : function ( str ){\n      str = inflector.underscore( str );\n      str = inflector.pluralize( str );\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds classification support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Underscored plural nouns become the camel cased singular form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.classify( 'message_bus_properties' ); // === 'MessageBusProperty'\n   */\n    classify : function ( str ){\n      str = inflector.camelize( str );\n      str = inflector.singularize( str );\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds foreign key support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} drop_id_ubar Default is to seperate id with an underbar at the end of the class name,\n                                 you can pass true to skip it.(optional)\n   * @returns {String} Underscored plural nouns become the camel cased singular form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.foreign_key( 'MessageBusProperty' ); // === 'message_bus_property_id'\n   *     inflection.foreign_key( 'MessageBusProperty', true ); // === 'message_bus_propertyid'\n   */\n    foreign_key : function ( str, drop_id_ubar ){\n      str = inflector.demodulize( str );\n      str = inflector.underscore( str ) + (( drop_id_ubar ) ? ( '' ) : ( '_' )) + 'id';\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds ordinalize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Return all found numbers their sequence like '22nd'.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.ordinalize( 'the 1 pitch' ); // === 'the 1st pitch'\n   */\n    ordinalize : function ( str ){\n      var str_arr = str.split( ' ' );\n      var i       = 0;\n      var j       = str_arr.length;\n\n      for( ; i < j; i++ ){\n        var k = parseInt( str_arr[ i ], 10 );\n\n        if( !isNaN( k )){\n          var ltd = str_arr[ i ].substring( str_arr[ i ].length - 2 );\n          var ld  = str_arr[ i ].substring( str_arr[ i ].length - 1 );\n          var suf = 'th';\n\n          if( ltd != '11' && ltd != '12' && ltd != '13' ){\n            if( ld === '1' ){\n              suf = 'st';\n            }else if( ld === '2' ){\n              suf = 'nd';\n            }else if( ld === '3' ){\n              suf = 'rd';\n            }\n          }\n\n          str_arr[ i ] += suf;\n        }\n      }\n\n      return str_arr.join( ' ' );\n    },\n\n  /**\n   * This function performs multiple inflection methods on a string\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Array} arr An array of inflection methods.\n   * @returns {String}\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.transform( 'all job', [ 'pluralize', 'capitalize', 'dasherize' ]); // === 'All-jobs'\n   */\n    transform : function ( str, arr ){\n      var i = 0;\n      var j = arr.length;\n\n      for( ;i < j; i++ ){\n        var method = arr[ i ];\n\n        if( this.hasOwnProperty( method )){\n          str = this[ method ]( str );\n        }\n      }\n\n      return str;\n    }\n  };\n\n/**\n * @public\n */\n  inflector.version = '1.3.8';\n\n  return inflector;\n}));\n"]},"metadata":{},"sourceType":"script"}