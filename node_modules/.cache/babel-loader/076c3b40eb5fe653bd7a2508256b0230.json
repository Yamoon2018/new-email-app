{"ast":null,"code":"// Generated by CoffeeScript 1.10.0\n(function () {\n  var Netmask, ip2long, long2ip;\n\n  long2ip = function long2ip(long) {\n    var a, b, c, d;\n    a = (long & 0xff << 24) >>> 24;\n    b = (long & 0xff << 16) >>> 16;\n    c = (long & 0xff << 8) >>> 8;\n    d = long & 0xff;\n    return [a, b, c, d].join('.');\n  };\n\n  ip2long = function ip2long(ip) {\n    var b, byte, i, j, len;\n    b = (ip + '').split('.');\n\n    if (b.length === 0 || b.length > 4) {\n      throw new Error('Invalid IP');\n    }\n\n    for (i = j = 0, len = b.length; j < len; i = ++j) {\n      byte = b[i];\n\n      if (isNaN(parseInt(byte, 10))) {\n        throw new Error(\"Invalid byte: \" + byte);\n      }\n\n      if (byte < 0 || byte > 255) {\n        throw new Error(\"Invalid byte: \" + byte);\n      }\n    }\n\n    return ((b[0] || 0) << 24 | (b[1] || 0) << 16 | (b[2] || 0) << 8 | (b[3] || 0)) >>> 0;\n  };\n\n  Netmask = function () {\n    function Netmask(net, mask) {\n      var error, error1, error2, i, j, ref;\n\n      if (typeof net !== 'string') {\n        throw new Error(\"Missing `net' parameter\");\n      }\n\n      if (!mask) {\n        ref = net.split('/', 2), net = ref[0], mask = ref[1];\n      }\n\n      if (!mask) {\n        switch (net.split('.').length) {\n          case 1:\n            mask = 8;\n            break;\n\n          case 2:\n            mask = 16;\n            break;\n\n          case 3:\n            mask = 24;\n            break;\n\n          case 4:\n            mask = 32;\n            break;\n\n          default:\n            throw new Error(\"Invalid net address: \" + net);\n        }\n      }\n\n      if (typeof mask === 'string' && mask.indexOf('.') > -1) {\n        try {\n          this.maskLong = ip2long(mask);\n        } catch (error1) {\n          error = error1;\n          throw new Error(\"Invalid mask: \" + mask);\n        }\n\n        for (i = j = 32; j >= 0; i = --j) {\n          if (this.maskLong === 0xffffffff << 32 - i >>> 0) {\n            this.bitmask = i;\n            break;\n          }\n        }\n      } else if (mask) {\n        this.bitmask = parseInt(mask, 10);\n        this.maskLong = 0;\n\n        if (this.bitmask > 0) {\n          this.maskLong = 0xffffffff << 32 - this.bitmask >>> 0;\n        }\n      } else {\n        throw new Error(\"Invalid mask: empty\");\n      }\n\n      try {\n        this.netLong = (ip2long(net) & this.maskLong) >>> 0;\n      } catch (error2) {\n        error = error2;\n        throw new Error(\"Invalid net address: \" + net);\n      }\n\n      if (!(this.bitmask <= 32)) {\n        throw new Error(\"Invalid mask for ip4: \" + mask);\n      }\n\n      this.size = Math.pow(2, 32 - this.bitmask);\n      this.base = long2ip(this.netLong);\n      this.mask = long2ip(this.maskLong);\n      this.hostmask = long2ip(~this.maskLong);\n      this.first = this.bitmask <= 30 ? long2ip(this.netLong + 1) : this.base;\n      this.last = this.bitmask <= 30 ? long2ip(this.netLong + this.size - 2) : long2ip(this.netLong + this.size - 1);\n      this.broadcast = this.bitmask <= 30 ? long2ip(this.netLong + this.size - 1) : void 0;\n    }\n\n    Netmask.prototype.contains = function (ip) {\n      if (typeof ip === 'string' && (ip.indexOf('/') > 0 || ip.split('.').length !== 4)) {\n        ip = new Netmask(ip);\n      }\n\n      if (ip instanceof Netmask) {\n        return this.contains(ip.base) && this.contains(ip.broadcast || ip.last);\n      } else {\n        return (ip2long(ip) & this.maskLong) >>> 0 === (this.netLong & this.maskLong) >>> 0;\n      }\n    };\n\n    Netmask.prototype.next = function (count) {\n      if (count == null) {\n        count = 1;\n      }\n\n      return new Netmask(long2ip(this.netLong + this.size * count), this.mask);\n    };\n\n    Netmask.prototype.forEach = function (fn) {\n      var index, j, k, len, long, range, ref, ref1, results, results1;\n\n      range = function () {\n        results = [];\n\n        for (var j = ref = ip2long(this.first), ref1 = ip2long(this.last); ref <= ref1 ? j <= ref1 : j >= ref1; ref <= ref1 ? j++ : j--) {\n          results.push(j);\n        }\n\n        return results;\n      }.apply(this);\n\n      results1 = [];\n\n      for (index = k = 0, len = range.length; k < len; index = ++k) {\n        long = range[index];\n        results1.push(fn(long2ip(long), long, index));\n      }\n\n      return results1;\n    };\n\n    Netmask.prototype.toString = function () {\n      return this.base + \"/\" + this.bitmask;\n    };\n\n    return Netmask;\n  }();\n\n  exports.ip2long = ip2long;\n  exports.long2ip = long2ip;\n  exports.Netmask = Netmask;\n}).call(this);","map":{"version":3,"sources":["/home/yamin/My_repos/new-email-app/new-email-app/node_modules/netmask/lib/netmask.js"],"names":["Netmask","ip2long","long2ip","long","a","b","c","d","join","ip","byte","i","j","len","split","length","Error","isNaN","parseInt","net","mask","error","error1","error2","ref","indexOf","maskLong","bitmask","netLong","size","Math","pow","base","hostmask","first","last","broadcast","prototype","contains","next","count","forEach","fn","index","k","range","ref1","results","results1","push","apply","toString","exports","call"],"mappings":"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","sourcesContent":["// Generated by CoffeeScript 1.10.0\n(function() {\n  var Netmask, ip2long, long2ip;\n\n  long2ip = function(long) {\n    var a, b, c, d;\n    a = (long & (0xff << 24)) >>> 24;\n    b = (long & (0xff << 16)) >>> 16;\n    c = (long & (0xff << 8)) >>> 8;\n    d = long & 0xff;\n    return [a, b, c, d].join('.');\n  };\n\n  ip2long = function(ip) {\n    var b, byte, i, j, len;\n    b = (ip + '').split('.');\n    if (b.length === 0 || b.length > 4) {\n      throw new Error('Invalid IP');\n    }\n    for (i = j = 0, len = b.length; j < len; i = ++j) {\n      byte = b[i];\n      if (isNaN(parseInt(byte, 10))) {\n        throw new Error(\"Invalid byte: \" + byte);\n      }\n      if (byte < 0 || byte > 255) {\n        throw new Error(\"Invalid byte: \" + byte);\n      }\n    }\n    return ((b[0] || 0) << 24 | (b[1] || 0) << 16 | (b[2] || 0) << 8 | (b[3] || 0)) >>> 0;\n  };\n\n  Netmask = (function() {\n    function Netmask(net, mask) {\n      var error, error1, error2, i, j, ref;\n      if (typeof net !== 'string') {\n        throw new Error(\"Missing `net' parameter\");\n      }\n      if (!mask) {\n        ref = net.split('/', 2), net = ref[0], mask = ref[1];\n      }\n      if (!mask) {\n        switch (net.split('.').length) {\n          case 1:\n            mask = 8;\n            break;\n          case 2:\n            mask = 16;\n            break;\n          case 3:\n            mask = 24;\n            break;\n          case 4:\n            mask = 32;\n            break;\n          default:\n            throw new Error(\"Invalid net address: \" + net);\n        }\n      }\n      if (typeof mask === 'string' && mask.indexOf('.') > -1) {\n        try {\n          this.maskLong = ip2long(mask);\n        } catch (error1) {\n          error = error1;\n          throw new Error(\"Invalid mask: \" + mask);\n        }\n        for (i = j = 32; j >= 0; i = --j) {\n          if (this.maskLong === (0xffffffff << (32 - i)) >>> 0) {\n            this.bitmask = i;\n            break;\n          }\n        }\n      } else if (mask) {\n        this.bitmask = parseInt(mask, 10);\n        this.maskLong = 0;\n        if (this.bitmask > 0) {\n          this.maskLong = (0xffffffff << (32 - this.bitmask)) >>> 0;\n        }\n      } else {\n        throw new Error(\"Invalid mask: empty\");\n      }\n      try {\n        this.netLong = (ip2long(net) & this.maskLong) >>> 0;\n      } catch (error2) {\n        error = error2;\n        throw new Error(\"Invalid net address: \" + net);\n      }\n      if (!(this.bitmask <= 32)) {\n        throw new Error(\"Invalid mask for ip4: \" + mask);\n      }\n      this.size = Math.pow(2, 32 - this.bitmask);\n      this.base = long2ip(this.netLong);\n      this.mask = long2ip(this.maskLong);\n      this.hostmask = long2ip(~this.maskLong);\n      this.first = this.bitmask <= 30 ? long2ip(this.netLong + 1) : this.base;\n      this.last = this.bitmask <= 30 ? long2ip(this.netLong + this.size - 2) : long2ip(this.netLong + this.size - 1);\n      this.broadcast = this.bitmask <= 30 ? long2ip(this.netLong + this.size - 1) : void 0;\n    }\n\n    Netmask.prototype.contains = function(ip) {\n      if (typeof ip === 'string' && (ip.indexOf('/') > 0 || ip.split('.').length !== 4)) {\n        ip = new Netmask(ip);\n      }\n      if (ip instanceof Netmask) {\n        return this.contains(ip.base) && this.contains(ip.broadcast || ip.last);\n      } else {\n        return (ip2long(ip) & this.maskLong) >>> 0 === (this.netLong & this.maskLong) >>> 0;\n      }\n    };\n\n    Netmask.prototype.next = function(count) {\n      if (count == null) {\n        count = 1;\n      }\n      return new Netmask(long2ip(this.netLong + (this.size * count)), this.mask);\n    };\n\n    Netmask.prototype.forEach = function(fn) {\n      var index, j, k, len, long, range, ref, ref1, results, results1;\n      range = (function() {\n        results = [];\n        for (var j = ref = ip2long(this.first), ref1 = ip2long(this.last); ref <= ref1 ? j <= ref1 : j >= ref1; ref <= ref1 ? j++ : j--){ results.push(j); }\n        return results;\n      }).apply(this);\n      results1 = [];\n      for (index = k = 0, len = range.length; k < len; index = ++k) {\n        long = range[index];\n        results1.push(fn(long2ip(long), long, index));\n      }\n      return results1;\n    };\n\n    Netmask.prototype.toString = function() {\n      return this.base + \"/\" + this.bitmask;\n    };\n\n    return Netmask;\n\n  })();\n\n  exports.ip2long = ip2long;\n\n  exports.long2ip = long2ip;\n\n  exports.Netmask = Netmask;\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}