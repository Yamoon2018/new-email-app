{"ast":null,"code":"'use strict';\n/**\n * Module dependencies.\n */\n\nvar co = require('co');\n\nvar vm = require('vm');\n\nvar parse = require('url').parse;\n\nvar thunkify = require('thunkify');\n\nvar degenerator = require('degenerator');\n/**\n * Built-in PAC functions.\n */\n\n\nvar dateRange = require('./dateRange');\n\nvar dnsDomainIs = require('./dnsDomainIs');\n\nvar dnsDomainLevels = require('./dnsDomainLevels');\n\nvar dnsResolve = require('./dnsResolve');\n\nvar isInNet = require('./isInNet');\n\nvar isPlainHostName = require('./isPlainHostName');\n\nvar isResolvable = require('./isResolvable');\n\nvar localHostOrDomainIs = require('./localHostOrDomainIs');\n\nvar myIpAddress = require('./myIpAddress');\n\nvar shExpMatch = require('./shExpMatch');\n\nvar timeRange = require('./timeRange');\n\nvar weekdayRange = require('./weekdayRange');\n/**\n * Module exports.\n */\n\n\nmodule.exports = generate;\n/**\n * Returns an asyncronous `FindProxyForURL` function from the\n * given JS string (from a PAC file).\n *\n * @param {String} str JS string\n * @param {Object} opts optional \"options\" object\n * @return {Function} async resolver function\n */\n\nfunction generate(_str, opts) {\n  var i;\n  var str = String(_str); // the sandbox to use for the vm\n\n  var sandbox = {\n    dateRange: dateRange,\n    dnsDomainIs: dnsDomainIs,\n    dnsDomainLevels: dnsDomainLevels,\n    dnsResolve: dnsResolve,\n    isInNet: isInNet,\n    isPlainHostName: isPlainHostName,\n    isResolvable: isResolvable,\n    localHostOrDomainIs: localHostOrDomainIs,\n    myIpAddress: myIpAddress,\n    shExpMatch: shExpMatch,\n    timeRange: timeRange,\n    weekdayRange: weekdayRange\n  }; // copy the properties from the user-provided `sandbox` onto ours\n\n  if (opts && opts.sandbox) {\n    for (i in opts.sandbox) {\n      sandbox[i] = opts.sandbox[i];\n    }\n  } // construct the array of async function names to add `yield` calls to.\n  // user-provided async functions added to the `sandbox` must have an\n  // `async = true` property set on the function instance\n\n\n  var names = [];\n\n  for (i in sandbox) {\n    if (sandbox[i].async) {\n      names.push(i);\n      sandbox[i] = thunkify(sandbox[i]);\n    }\n  } //console.log(names);\n  // convert the JS FindProxyForURL function into a generator function\n\n\n  var js = degenerator(str, names); // filename of the pac file for the vm\n\n  var filename = opts && opts.filename || 'proxy.pac'; // evaluate the JS string and extract the FindProxyForURL generator function\n\n  var fn = vm.runInNewContext(js + ';FindProxyForURL', sandbox, filename);\n\n  if ('function' != typeof fn) {\n    throw new TypeError('PAC file JavaScript contents must define a `FindProxyForURL` function');\n  } // return the async resolver function\n\n\n  var resolver = co.wrap(fn);\n  return function FindProxyForURL(url, _host, _callback) {\n    var host;\n    var callback;\n\n    switch (arguments.length) {\n      case 3:\n        host = _host;\n        callback = _callback;\n        break;\n\n      case 2:\n        if (typeof _host === 'function') {\n          callback = _host;\n        } else {\n          host = _host;\n        }\n\n        break;\n    }\n\n    if (!host) {\n      host = parse(url).hostname;\n    }\n\n    var promise = resolver(url, host, callback);\n\n    if (typeof callback === 'function') {\n      toCallback(promise, callback);\n    } else {\n      return promise;\n    }\n  };\n}\n\nfunction toCallback(promise, callback) {\n  var called = false;\n\n  function resolve(rtn) {\n    if (called) return;\n    called = true;\n    callback(null, rtn);\n  }\n\n  function reject(err) {\n    if (called) return;\n    called = true;\n    callback(err);\n  }\n\n  promise.then(resolve, reject);\n}","map":{"version":3,"sources":["/home/yamin/My_repos/new-email-app/new-email-app/node_modules/pac-resolver/index.js"],"names":["co","require","vm","parse","thunkify","degenerator","dateRange","dnsDomainIs","dnsDomainLevels","dnsResolve","isInNet","isPlainHostName","isResolvable","localHostOrDomainIs","myIpAddress","shExpMatch","timeRange","weekdayRange","module","exports","generate","_str","opts","i","str","String","sandbox","names","async","push","js","filename","fn","runInNewContext","TypeError","resolver","wrap","FindProxyForURL","url","_host","_callback","host","callback","arguments","length","hostname","promise","toCallback","called","resolve","rtn","reject","err","then"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar co = require('co');\nvar vm = require('vm');\nvar parse = require('url').parse;\nvar thunkify = require('thunkify');\nvar degenerator = require('degenerator');\n\n/**\n * Built-in PAC functions.\n */\n\nvar dateRange = require('./dateRange');\nvar dnsDomainIs = require('./dnsDomainIs');\nvar dnsDomainLevels = require('./dnsDomainLevels');\nvar dnsResolve = require('./dnsResolve');\nvar isInNet = require('./isInNet');\nvar isPlainHostName = require('./isPlainHostName');\nvar isResolvable = require('./isResolvable');\nvar localHostOrDomainIs = require('./localHostOrDomainIs');\nvar myIpAddress = require('./myIpAddress');\nvar shExpMatch = require('./shExpMatch');\nvar timeRange = require('./timeRange');\nvar weekdayRange = require('./weekdayRange');\n\n/**\n * Module exports.\n */\n\nmodule.exports = generate;\n\n/**\n * Returns an asyncronous `FindProxyForURL` function from the\n * given JS string (from a PAC file).\n *\n * @param {String} str JS string\n * @param {Object} opts optional \"options\" object\n * @return {Function} async resolver function\n */\n\nfunction generate (_str, opts) {\n  var i;\n  var str = String(_str)\n\n  // the sandbox to use for the vm\n  var sandbox = {\n    dateRange: dateRange,\n    dnsDomainIs: dnsDomainIs,\n    dnsDomainLevels: dnsDomainLevels,\n    dnsResolve: dnsResolve,\n    isInNet: isInNet,\n    isPlainHostName: isPlainHostName,\n    isResolvable: isResolvable,\n    localHostOrDomainIs: localHostOrDomainIs,\n    myIpAddress: myIpAddress,\n    shExpMatch: shExpMatch,\n    timeRange: timeRange,\n    weekdayRange: weekdayRange\n  };\n\n  // copy the properties from the user-provided `sandbox` onto ours\n  if (opts && opts.sandbox) {\n    for (i in opts.sandbox) {\n      sandbox[i] = opts.sandbox[i];\n    }\n  }\n\n  // construct the array of async function names to add `yield` calls to.\n  // user-provided async functions added to the `sandbox` must have an\n  // `async = true` property set on the function instance\n  var names = [];\n  for (i in sandbox) {\n    if (sandbox[i].async) {\n      names.push(i);\n      sandbox[i] = thunkify(sandbox[i]);\n    }\n  }\n  //console.log(names);\n\n  // convert the JS FindProxyForURL function into a generator function\n  var js = degenerator(str, names);\n\n  // filename of the pac file for the vm\n  var filename = (opts && opts.filename) || 'proxy.pac';\n\n  // evaluate the JS string and extract the FindProxyForURL generator function\n  var fn = vm.runInNewContext(js + ';FindProxyForURL', sandbox, filename);\n  if ('function' != typeof fn) {\n    throw new TypeError('PAC file JavaScript contents must define a `FindProxyForURL` function');\n  }\n\n  // return the async resolver function\n  var resolver = co.wrap(fn);\n\n  return function FindProxyForURL (url, _host, _callback) {\n    let host\n    let callback\n    switch (arguments.length) {\n      case 3:\n        host = _host\n        callback = _callback\n        break;\n      case 2:\n        if (typeof _host === 'function') {\n          callback = _host\n        } else {\n          host = _host\n        }\n        break;\n    }\n\n    if (!host) {\n      host = parse(url).hostname;\n    }\n\n    const promise = resolver(url, host, callback);\n\n    if (typeof callback === 'function') {\n      toCallback(promise, callback)\n    } else {\n      return promise\n    }\n  };\n}\n\nfunction toCallback (promise, callback) {\n  let called = false\n  function resolve(rtn) {\n    if (called) return\n    called = true\n    callback(null, rtn)\n  }\n  function reject(err) {\n    if (called) return\n    called = true\n    callback(err)\n  }\n  promise.then(resolve, reject)\n}\n"]},"metadata":{},"sourceType":"script"}