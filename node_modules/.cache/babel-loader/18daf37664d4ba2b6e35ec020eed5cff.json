{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _inherits = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Stream = require('stream').Stream;\n\nvar fetch = require('../fetch');\n\nvar crypto = require('crypto');\n\nvar shared = require('../shared');\n/**\n * XOAUTH2 access_token generator for Gmail.\n * Create client ID for web applications in Google API console to use it.\n * See Offline Access for receiving the needed refreshToken for an user\n * https://developers.google.com/accounts/docs/OAuth2WebServer#offline\n *\n * Usage for generating access tokens with a custom method using provisionCallback:\n * provisionCallback(user, renew, callback)\n *   * user is the username to get the token for\n *   * renew is a boolean that if true indicates that existing token failed and needs to be renewed\n *   * callback is the callback to run with (error, accessToken [, expires])\n *     * accessToken is a string\n *     * expires is an optional expire time in milliseconds\n * If provisionCallback is used, then Nodemailer does not try to attempt generating the token by itself\n *\n * @constructor\n * @param {Object} options Client information for token generation\n * @param {String} options.user User e-mail address\n * @param {String} options.clientId Client ID value\n * @param {String} options.clientSecret Client secret value\n * @param {String} options.refreshToken Refresh token for an user\n * @param {String} options.accessUrl Endpoint for token generation, defaults to 'https://accounts.google.com/o/oauth2/token'\n * @param {String} options.accessToken An existing valid accessToken\n * @param {String} options.privateKey Private key for JSW\n * @param {Number} options.expires Optional Access Token expire time in ms\n * @param {Number} options.timeout Optional TTL for Access Token in seconds\n * @param {Function} options.provisionCallback Function to run when a new access token is required\n */\n\n\nvar XOAuth2 = /*#__PURE__*/function (_Stream) {\n  _inherits(XOAuth2, _Stream);\n\n  var _super = _createSuper(XOAuth2);\n\n  function XOAuth2(options, logger) {\n    var _this;\n\n    _classCallCheck(this, XOAuth2);\n\n    _this = _super.call(this);\n    _this.options = options || {};\n\n    if (options && options.serviceClient) {\n      if (!options.privateKey || !options.user) {\n        setImmediate(function () {\n          return _this.emit('error', new Error('Options \"privateKey\" and \"user\" are required for service account!'));\n        });\n        return _possibleConstructorReturn(_this);\n      }\n\n      var serviceRequestTimeout = Math.min(Math.max(Number(_this.options.serviceRequestTimeout) || 0, 0), 3600);\n      _this.options.serviceRequestTimeout = serviceRequestTimeout || 5 * 60;\n    }\n\n    _this.logger = shared.getLogger({\n      logger: logger\n    }, {\n      component: _this.options.component || 'OAuth2'\n    });\n    _this.provisionCallback = typeof _this.options.provisionCallback === 'function' ? _this.options.provisionCallback : false;\n    _this.options.accessUrl = _this.options.accessUrl || 'https://accounts.google.com/o/oauth2/token';\n    _this.options.customHeaders = _this.options.customHeaders || {};\n    _this.options.customParams = _this.options.customParams || {};\n    _this.accessToken = _this.options.accessToken || false;\n\n    if (_this.options.expires && Number(_this.options.expires)) {\n      _this.expires = _this.options.expires;\n    } else {\n      var timeout = Math.max(Number(_this.options.timeout) || 0, 0);\n      _this.expires = timeout && Date.now() + timeout * 1000 || 0;\n    }\n\n    return _this;\n  }\n  /**\n   * Returns or generates (if previous has expired) a XOAuth2 token\n   *\n   * @param {Boolean} renew If false then use cached access token (if available)\n   * @param {Function} callback Callback function with error object and token string\n   */\n\n\n  _createClass(XOAuth2, [{\n    key: \"getToken\",\n    value: function getToken(renew, callback) {\n      var _this2 = this;\n\n      if (!renew && this.accessToken && (!this.expires || this.expires > Date.now())) {\n        return callback(null, this.accessToken);\n      }\n\n      var generateCallback = function generateCallback() {\n        if (arguments.length <= 0 ? undefined : arguments[0]) {\n          _this2.logger.error({\n            err: arguments.length <= 0 ? undefined : arguments[0],\n            tnx: 'OAUTH2',\n            user: _this2.options.user,\n            action: 'renew'\n          }, 'Failed generating new Access Token for %s', _this2.options.user);\n        } else {\n          _this2.logger.info({\n            tnx: 'OAUTH2',\n            user: _this2.options.user,\n            action: 'renew'\n          }, 'Generated new Access Token for %s', _this2.options.user);\n        }\n\n        callback.apply(void 0, arguments);\n      };\n\n      if (this.provisionCallback) {\n        this.provisionCallback(this.options.user, !!renew, function (err, accessToken, expires) {\n          if (!err && accessToken) {\n            _this2.accessToken = accessToken;\n            _this2.expires = expires || 0;\n          }\n\n          generateCallback(err, accessToken);\n        });\n      } else {\n        this.generateToken(generateCallback);\n      }\n    }\n    /**\n     * Updates token values\n     *\n     * @param {String} accessToken New access token\n     * @param {Number} timeout Access token lifetime in seconds\n     *\n     * Emits 'token': { user: User email-address, accessToken: the new accessToken, timeout: TTL in seconds}\n     */\n\n  }, {\n    key: \"updateToken\",\n    value: function updateToken(accessToken, timeout) {\n      this.accessToken = accessToken;\n      timeout = Math.max(Number(timeout) || 0, 0);\n      this.expires = timeout && Date.now() + timeout * 1000 || 0;\n      this.emit('token', {\n        user: this.options.user,\n        accessToken: accessToken || '',\n        expires: this.expires\n      });\n    }\n    /**\n     * Generates a new XOAuth2 token with the credentials provided at initialization\n     *\n     * @param {Function} callback Callback function with error object and token string\n     */\n\n  }, {\n    key: \"generateToken\",\n    value: function generateToken(callback) {\n      var _this3 = this;\n\n      var urlOptions;\n      var loggedUrlOptions;\n\n      if (this.options.serviceClient) {\n        // service account - https://developers.google.com/identity/protocols/OAuth2ServiceAccount\n        var iat = Math.floor(Date.now() / 1000); // unix time\n\n        var tokenData = {\n          iss: this.options.serviceClient,\n          scope: this.options.scope || 'https://mail.google.com/',\n          sub: this.options.user,\n          aud: this.options.accessUrl,\n          iat: iat,\n          exp: iat + this.options.serviceRequestTimeout\n        };\n        var token;\n\n        try {\n          token = this.jwtSignRS256(tokenData);\n        } catch (err) {\n          return callback(new Error('Can\\x27t generate token. Check your auth options'));\n        }\n\n        urlOptions = {\n          grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n          assertion: token\n        };\n        loggedUrlOptions = {\n          grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n          assertion: tokenData\n        };\n      } else {\n        if (!this.options.refreshToken) {\n          return callback(new Error('Can\\x27t create new access token for user'));\n        } // web app - https://developers.google.com/identity/protocols/OAuth2WebServer\n\n\n        urlOptions = {\n          client_id: this.options.clientId || '',\n          client_secret: this.options.clientSecret || '',\n          refresh_token: this.options.refreshToken,\n          grant_type: 'refresh_token'\n        };\n        loggedUrlOptions = {\n          client_id: this.options.clientId || '',\n          client_secret: (this.options.clientSecret || '').substr(0, 6) + '...',\n          refresh_token: (this.options.refreshToken || '').substr(0, 6) + '...',\n          grant_type: 'refresh_token'\n        };\n      }\n\n      Object.keys(this.options.customParams).forEach(function (key) {\n        urlOptions[key] = _this3.options.customParams[key];\n        loggedUrlOptions[key] = _this3.options.customParams[key];\n      });\n      this.logger.debug({\n        tnx: 'OAUTH2',\n        user: this.options.user,\n        action: 'generate'\n      }, 'Requesting token using: %s', JSON.stringify(loggedUrlOptions));\n      this.postRequest(this.options.accessUrl, urlOptions, this.options, function (error, body) {\n        var data;\n\n        if (error) {\n          return callback(error);\n        }\n\n        try {\n          data = JSON.parse(body.toString());\n        } catch (E) {\n          return callback(E);\n        }\n\n        if (!data || typeof data !== 'object') {\n          _this3.logger.debug({\n            tnx: 'OAUTH2',\n            user: _this3.options.user,\n            action: 'post'\n          }, 'Response: %s', (body || '').toString());\n\n          return callback(new Error('Invalid authentication response'));\n        }\n\n        var logData = {};\n        Object.keys(data).forEach(function (key) {\n          if (key !== 'access_token') {\n            logData[key] = data[key];\n          } else {\n            logData[key] = (data[key] || '').toString().substr(0, 6) + '...';\n          }\n        });\n\n        _this3.logger.debug({\n          tnx: 'OAUTH2',\n          user: _this3.options.user,\n          action: 'post'\n        }, 'Response: %s', JSON.stringify(logData));\n\n        if (data.error) {\n          // Error Response : https://tools.ietf.org/html/rfc6749#section-5.2\n          var errorMessage = data.error;\n\n          if (data.error_description) {\n            errorMessage += ': ' + data.error_description;\n          }\n\n          if (data.error_uri) {\n            errorMessage += ' (' + data.error_uri + ')';\n          }\n\n          return callback(new Error(errorMessage));\n        }\n\n        if (data.access_token) {\n          _this3.updateToken(data.access_token, data.expires_in);\n\n          return callback(null, _this3.accessToken);\n        }\n\n        return callback(new Error('No access token'));\n      });\n    }\n    /**\n     * Converts an access_token and user id into a base64 encoded XOAuth2 token\n     *\n     * @param {String} [accessToken] Access token string\n     * @return {String} Base64 encoded token for IMAP or SMTP login\n     */\n\n  }, {\n    key: \"buildXOAuth2Token\",\n    value: function buildXOAuth2Token(accessToken) {\n      var authData = ['user=' + (this.options.user || ''), 'auth=Bearer ' + (accessToken || this.accessToken), '', ''];\n      return Buffer.from(authData.join('\\x01'), 'utf-8').toString('base64');\n    }\n    /**\n     * Custom POST request handler.\n     * This is only needed to keep paths short in Windows – usually this module\n     * is a dependency of a dependency and if it tries to require something\n     * like the request module the paths get way too long to handle for Windows.\n     * As we do only a simple POST request we do not actually require complicated\n     * logic support (no redirects, no nothing) anyway.\n     *\n     * @param {String} url Url to POST to\n     * @param {String|Buffer} payload Payload to POST\n     * @param {Function} callback Callback function with (err, buff)\n     */\n\n  }, {\n    key: \"postRequest\",\n    value: function postRequest(url, payload, params, callback) {\n      var returned = false;\n      var chunks = [];\n      var chunklen = 0;\n      var req = fetch(url, {\n        method: 'post',\n        headers: params.customHeaders,\n        body: payload,\n        allowErrorResponse: true\n      });\n      req.on('readable', function () {\n        var chunk;\n\n        while ((chunk = req.read()) !== null) {\n          chunks.push(chunk);\n          chunklen += chunk.length;\n        }\n      });\n      req.once('error', function (err) {\n        if (returned) {\n          return;\n        }\n\n        returned = true;\n        return callback(err);\n      });\n      req.once('end', function () {\n        if (returned) {\n          return;\n        }\n\n        returned = true;\n        return callback(null, Buffer.concat(chunks, chunklen));\n      });\n    }\n    /**\n     * Encodes a buffer or a string into Base64url format\n     *\n     * @param {Buffer|String} data The data to convert\n     * @return {String} The encoded string\n     */\n\n  }, {\n    key: \"toBase64URL\",\n    value: function toBase64URL(data) {\n      if (typeof data === 'string') {\n        data = Buffer.from(data);\n      }\n\n      return data.toString('base64').replace(/[=]+/g, '') // remove '='s\n      .replace(/\\+/g, '-') // '+' → '-'\n      .replace(/\\//g, '_'); // '/' → '_'\n    }\n    /**\n     * Creates a JSON Web Token signed with RS256 (SHA256 + RSA)\n     *\n     * @param {Object} payload The payload to include in the generated token\n     * @return {String} The generated and signed token\n     */\n\n  }, {\n    key: \"jwtSignRS256\",\n    value: function jwtSignRS256(payload) {\n      var _this4 = this;\n\n      payload = ['{\"alg\":\"RS256\",\"typ\":\"JWT\"}', JSON.stringify(payload)].map(function (val) {\n        return _this4.toBase64URL(val);\n      }).join('.');\n      var signature = crypto.createSign('RSA-SHA256').update(payload).sign(this.options.privateKey);\n      return payload + '.' + this.toBase64URL(signature);\n    }\n  }]);\n\n  return XOAuth2;\n}(Stream);\n\nmodule.exports = XOAuth2;","map":{"version":3,"sources":["/home/yamin/My_repos/new-email-app/new-email-app/node_modules/nodemailer/lib/xoauth2/index.js"],"names":["Stream","require","fetch","crypto","shared","XOAuth2","options","logger","serviceClient","privateKey","user","setImmediate","emit","Error","serviceRequestTimeout","Math","min","max","Number","getLogger","component","provisionCallback","accessUrl","customHeaders","customParams","accessToken","expires","timeout","Date","now","renew","callback","generateCallback","error","err","tnx","action","info","generateToken","urlOptions","loggedUrlOptions","iat","floor","tokenData","iss","scope","sub","aud","exp","token","jwtSignRS256","grant_type","assertion","refreshToken","client_id","clientId","client_secret","clientSecret","refresh_token","substr","Object","keys","forEach","key","debug","JSON","stringify","postRequest","body","data","parse","toString","E","logData","errorMessage","error_description","error_uri","access_token","updateToken","expires_in","authData","Buffer","from","join","url","payload","params","returned","chunks","chunklen","req","method","headers","allowErrorResponse","on","chunk","read","push","length","once","concat","replace","map","val","toBase64URL","signature","createSign","update","sign","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Stream = require('stream').Stream;\nconst fetch = require('../fetch');\nconst crypto = require('crypto');\nconst shared = require('../shared');\n\n/**\n * XOAUTH2 access_token generator for Gmail.\n * Create client ID for web applications in Google API console to use it.\n * See Offline Access for receiving the needed refreshToken for an user\n * https://developers.google.com/accounts/docs/OAuth2WebServer#offline\n *\n * Usage for generating access tokens with a custom method using provisionCallback:\n * provisionCallback(user, renew, callback)\n *   * user is the username to get the token for\n *   * renew is a boolean that if true indicates that existing token failed and needs to be renewed\n *   * callback is the callback to run with (error, accessToken [, expires])\n *     * accessToken is a string\n *     * expires is an optional expire time in milliseconds\n * If provisionCallback is used, then Nodemailer does not try to attempt generating the token by itself\n *\n * @constructor\n * @param {Object} options Client information for token generation\n * @param {String} options.user User e-mail address\n * @param {String} options.clientId Client ID value\n * @param {String} options.clientSecret Client secret value\n * @param {String} options.refreshToken Refresh token for an user\n * @param {String} options.accessUrl Endpoint for token generation, defaults to 'https://accounts.google.com/o/oauth2/token'\n * @param {String} options.accessToken An existing valid accessToken\n * @param {String} options.privateKey Private key for JSW\n * @param {Number} options.expires Optional Access Token expire time in ms\n * @param {Number} options.timeout Optional TTL for Access Token in seconds\n * @param {Function} options.provisionCallback Function to run when a new access token is required\n */\nclass XOAuth2 extends Stream {\n    constructor(options, logger) {\n        super();\n\n        this.options = options || {};\n\n        if (options && options.serviceClient) {\n            if (!options.privateKey || !options.user) {\n                setImmediate(() => this.emit('error', new Error('Options \"privateKey\" and \"user\" are required for service account!')));\n                return;\n            }\n\n            let serviceRequestTimeout = Math.min(Math.max(Number(this.options.serviceRequestTimeout) || 0, 0), 3600);\n            this.options.serviceRequestTimeout = serviceRequestTimeout || 5 * 60;\n        }\n\n        this.logger = shared.getLogger(\n            {\n                logger\n            },\n            {\n                component: this.options.component || 'OAuth2'\n            }\n        );\n\n        this.provisionCallback = typeof this.options.provisionCallback === 'function' ? this.options.provisionCallback : false;\n\n        this.options.accessUrl = this.options.accessUrl || 'https://accounts.google.com/o/oauth2/token';\n        this.options.customHeaders = this.options.customHeaders || {};\n        this.options.customParams = this.options.customParams || {};\n\n        this.accessToken = this.options.accessToken || false;\n\n        if (this.options.expires && Number(this.options.expires)) {\n            this.expires = this.options.expires;\n        } else {\n            let timeout = Math.max(Number(this.options.timeout) || 0, 0);\n            this.expires = (timeout && Date.now() + timeout * 1000) || 0;\n        }\n    }\n\n    /**\n     * Returns or generates (if previous has expired) a XOAuth2 token\n     *\n     * @param {Boolean} renew If false then use cached access token (if available)\n     * @param {Function} callback Callback function with error object and token string\n     */\n    getToken(renew, callback) {\n        if (!renew && this.accessToken && (!this.expires || this.expires > Date.now())) {\n            return callback(null, this.accessToken);\n        }\n\n        let generateCallback = (...args) => {\n            if (args[0]) {\n                this.logger.error(\n                    {\n                        err: args[0],\n                        tnx: 'OAUTH2',\n                        user: this.options.user,\n                        action: 'renew'\n                    },\n                    'Failed generating new Access Token for %s',\n                    this.options.user\n                );\n            } else {\n                this.logger.info(\n                    {\n                        tnx: 'OAUTH2',\n                        user: this.options.user,\n                        action: 'renew'\n                    },\n                    'Generated new Access Token for %s',\n                    this.options.user\n                );\n            }\n            callback(...args);\n        };\n\n        if (this.provisionCallback) {\n            this.provisionCallback(this.options.user, !!renew, (err, accessToken, expires) => {\n                if (!err && accessToken) {\n                    this.accessToken = accessToken;\n                    this.expires = expires || 0;\n                }\n                generateCallback(err, accessToken);\n            });\n        } else {\n            this.generateToken(generateCallback);\n        }\n    }\n\n    /**\n     * Updates token values\n     *\n     * @param {String} accessToken New access token\n     * @param {Number} timeout Access token lifetime in seconds\n     *\n     * Emits 'token': { user: User email-address, accessToken: the new accessToken, timeout: TTL in seconds}\n     */\n    updateToken(accessToken, timeout) {\n        this.accessToken = accessToken;\n        timeout = Math.max(Number(timeout) || 0, 0);\n        this.expires = (timeout && Date.now() + timeout * 1000) || 0;\n\n        this.emit('token', {\n            user: this.options.user,\n            accessToken: accessToken || '',\n            expires: this.expires\n        });\n    }\n\n    /**\n     * Generates a new XOAuth2 token with the credentials provided at initialization\n     *\n     * @param {Function} callback Callback function with error object and token string\n     */\n    generateToken(callback) {\n        let urlOptions;\n        let loggedUrlOptions;\n        if (this.options.serviceClient) {\n            // service account - https://developers.google.com/identity/protocols/OAuth2ServiceAccount\n            let iat = Math.floor(Date.now() / 1000); // unix time\n            let tokenData = {\n                iss: this.options.serviceClient,\n                scope: this.options.scope || 'https://mail.google.com/',\n                sub: this.options.user,\n                aud: this.options.accessUrl,\n                iat,\n                exp: iat + this.options.serviceRequestTimeout\n            };\n            let token;\n            try {\n                token = this.jwtSignRS256(tokenData);\n            } catch (err) {\n                return callback(new Error('Can\\x27t generate token. Check your auth options'));\n            }\n\n            urlOptions = {\n                grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n                assertion: token\n            };\n\n            loggedUrlOptions = {\n                grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n                assertion: tokenData\n            };\n        } else {\n            if (!this.options.refreshToken) {\n                return callback(new Error('Can\\x27t create new access token for user'));\n            }\n\n            // web app - https://developers.google.com/identity/protocols/OAuth2WebServer\n            urlOptions = {\n                client_id: this.options.clientId || '',\n                client_secret: this.options.clientSecret || '',\n                refresh_token: this.options.refreshToken,\n                grant_type: 'refresh_token'\n            };\n\n            loggedUrlOptions = {\n                client_id: this.options.clientId || '',\n                client_secret: (this.options.clientSecret || '').substr(0, 6) + '...',\n                refresh_token: (this.options.refreshToken || '').substr(0, 6) + '...',\n                grant_type: 'refresh_token'\n            };\n        }\n\n        Object.keys(this.options.customParams).forEach(key => {\n            urlOptions[key] = this.options.customParams[key];\n            loggedUrlOptions[key] = this.options.customParams[key];\n        });\n\n        this.logger.debug(\n            {\n                tnx: 'OAUTH2',\n                user: this.options.user,\n                action: 'generate'\n            },\n            'Requesting token using: %s',\n            JSON.stringify(loggedUrlOptions)\n        );\n\n        this.postRequest(this.options.accessUrl, urlOptions, this.options, (error, body) => {\n            let data;\n\n            if (error) {\n                return callback(error);\n            }\n\n            try {\n                data = JSON.parse(body.toString());\n            } catch (E) {\n                return callback(E);\n            }\n\n            if (!data || typeof data !== 'object') {\n                this.logger.debug(\n                    {\n                        tnx: 'OAUTH2',\n                        user: this.options.user,\n                        action: 'post'\n                    },\n                    'Response: %s',\n                    (body || '').toString()\n                );\n                return callback(new Error('Invalid authentication response'));\n            }\n\n            let logData = {};\n            Object.keys(data).forEach(key => {\n                if (key !== 'access_token') {\n                    logData[key] = data[key];\n                } else {\n                    logData[key] = (data[key] || '').toString().substr(0, 6) + '...';\n                }\n            });\n\n            this.logger.debug(\n                {\n                    tnx: 'OAUTH2',\n                    user: this.options.user,\n                    action: 'post'\n                },\n                'Response: %s',\n                JSON.stringify(logData)\n            );\n\n            if (data.error) {\n                // Error Response : https://tools.ietf.org/html/rfc6749#section-5.2\n                let errorMessage = data.error;\n                if (data.error_description) {\n                    errorMessage += ': ' + data.error_description;\n                }\n                if (data.error_uri) {\n                    errorMessage += ' (' + data.error_uri + ')';\n                }\n                return callback(new Error(errorMessage));\n            }\n\n            if (data.access_token) {\n                this.updateToken(data.access_token, data.expires_in);\n                return callback(null, this.accessToken);\n            }\n\n            return callback(new Error('No access token'));\n        });\n    }\n\n    /**\n     * Converts an access_token and user id into a base64 encoded XOAuth2 token\n     *\n     * @param {String} [accessToken] Access token string\n     * @return {String} Base64 encoded token for IMAP or SMTP login\n     */\n    buildXOAuth2Token(accessToken) {\n        let authData = ['user=' + (this.options.user || ''), 'auth=Bearer ' + (accessToken || this.accessToken), '', ''];\n        return Buffer.from(authData.join('\\x01'), 'utf-8').toString('base64');\n    }\n\n    /**\n     * Custom POST request handler.\n     * This is only needed to keep paths short in Windows – usually this module\n     * is a dependency of a dependency and if it tries to require something\n     * like the request module the paths get way too long to handle for Windows.\n     * As we do only a simple POST request we do not actually require complicated\n     * logic support (no redirects, no nothing) anyway.\n     *\n     * @param {String} url Url to POST to\n     * @param {String|Buffer} payload Payload to POST\n     * @param {Function} callback Callback function with (err, buff)\n     */\n    postRequest(url, payload, params, callback) {\n        let returned = false;\n\n        let chunks = [];\n        let chunklen = 0;\n\n        let req = fetch(url, {\n            method: 'post',\n            headers: params.customHeaders,\n            body: payload,\n            allowErrorResponse: true\n        });\n\n        req.on('readable', () => {\n            let chunk;\n            while ((chunk = req.read()) !== null) {\n                chunks.push(chunk);\n                chunklen += chunk.length;\n            }\n        });\n\n        req.once('error', err => {\n            if (returned) {\n                return;\n            }\n            returned = true;\n            return callback(err);\n        });\n\n        req.once('end', () => {\n            if (returned) {\n                return;\n            }\n            returned = true;\n            return callback(null, Buffer.concat(chunks, chunklen));\n        });\n    }\n\n    /**\n     * Encodes a buffer or a string into Base64url format\n     *\n     * @param {Buffer|String} data The data to convert\n     * @return {String} The encoded string\n     */\n    toBase64URL(data) {\n        if (typeof data === 'string') {\n            data = Buffer.from(data);\n        }\n\n        return data\n            .toString('base64')\n            .replace(/[=]+/g, '') // remove '='s\n            .replace(/\\+/g, '-') // '+' → '-'\n            .replace(/\\//g, '_'); // '/' → '_'\n    }\n\n    /**\n     * Creates a JSON Web Token signed with RS256 (SHA256 + RSA)\n     *\n     * @param {Object} payload The payload to include in the generated token\n     * @return {String} The generated and signed token\n     */\n    jwtSignRS256(payload) {\n        payload = ['{\"alg\":\"RS256\",\"typ\":\"JWT\"}', JSON.stringify(payload)].map(val => this.toBase64URL(val)).join('.');\n        let signature = crypto.createSign('RSA-SHA256').update(payload).sign(this.options.privateKey);\n        return payload + '.' + this.toBase64URL(signature);\n    }\n}\n\nmodule.exports = XOAuth2;\n"]},"metadata":{},"sourceType":"script"}