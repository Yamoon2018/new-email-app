{"ast":null,"code":"'use strict'; // module to handle cookies\n\nvar _classCallCheck = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar urllib = require('url');\n\nvar SESSION_TIMEOUT = 1800; // 30 min\n\n/**\n * Creates a biskviit cookie jar for managing cookie values in memory\n *\n * @constructor\n * @param {Object} [options] Optional options object\n */\n\nvar Cookies = /*#__PURE__*/function () {\n  function Cookies(options) {\n    _classCallCheck(this, Cookies);\n\n    this.options = options || {};\n    this.cookies = [];\n  }\n  /**\n   * Stores a cookie string to the cookie storage\n   *\n   * @param {String} cookieStr Value from the 'Set-Cookie:' header\n   * @param {String} url Current URL\n   */\n\n\n  _createClass(Cookies, [{\n    key: \"set\",\n    value: function set(cookieStr, url) {\n      var urlparts = urllib.parse(url || '');\n      var cookie = this.parse(cookieStr);\n      var domain;\n\n      if (cookie.domain) {\n        domain = cookie.domain.replace(/^\\./, ''); // do not allow cross origin cookies\n\n        if ( // can't be valid if the requested domain is shorter than current hostname\n        urlparts.hostname.length < domain.length || // prefix domains with dot to be sure that partial matches are not used\n        ('.' + urlparts.hostname).substr(-domain.length + 1) !== '.' + domain) {\n          cookie.domain = urlparts.hostname;\n        }\n      } else {\n        cookie.domain = urlparts.hostname;\n      }\n\n      if (!cookie.path) {\n        cookie.path = this.getPath(urlparts.pathname);\n      } // if no expire date, then use sessionTimeout value\n\n\n      if (!cookie.expires) {\n        cookie.expires = new Date(Date.now() + (Number(this.options.sessionTimeout || SESSION_TIMEOUT) || SESSION_TIMEOUT) * 1000);\n      }\n\n      return this.add(cookie);\n    }\n    /**\n     * Returns cookie string for the 'Cookie:' header.\n     *\n     * @param {String} url URL to check for\n     * @returns {String} Cookie header or empty string if no matches were found\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(url) {\n      return this.list(url).map(function (cookie) {\n        return cookie.name + '=' + cookie.value;\n      }).join('; ');\n    }\n    /**\n     * Lists all valied cookie objects for the specified URL\n     *\n     * @param {String} url URL to check for\n     * @returns {Array} An array of cookie objects\n     */\n\n  }, {\n    key: \"list\",\n    value: function list(url) {\n      var result = [];\n      var i;\n      var cookie;\n\n      for (i = this.cookies.length - 1; i >= 0; i--) {\n        cookie = this.cookies[i];\n\n        if (this.isExpired(cookie)) {\n          this.cookies.splice(i, i);\n          continue;\n        }\n\n        if (this.match(cookie, url)) {\n          result.unshift(cookie);\n        }\n      }\n\n      return result;\n    }\n    /**\n     * Parses cookie string from the 'Set-Cookie:' header\n     *\n     * @param {String} cookieStr String from the 'Set-Cookie:' header\n     * @returns {Object} Cookie object\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(cookieStr) {\n      var cookie = {};\n      (cookieStr || '').toString().split(';').forEach(function (cookiePart) {\n        var valueParts = cookiePart.split('=');\n        var key = valueParts.shift().trim().toLowerCase();\n        var value = valueParts.join('=').trim();\n        var domain;\n\n        if (!key) {\n          // skip empty parts\n          return;\n        }\n\n        switch (key) {\n          case 'expires':\n            value = new Date(value); // ignore date if can not parse it\n\n            if (value.toString() !== 'Invalid Date') {\n              cookie.expires = value;\n            }\n\n            break;\n\n          case 'path':\n            cookie.path = value;\n            break;\n\n          case 'domain':\n            domain = value.toLowerCase();\n\n            if (domain.length && domain.charAt(0) !== '.') {\n              domain = '.' + domain; // ensure preceeding dot for user set domains\n            }\n\n            cookie.domain = domain;\n            break;\n\n          case 'max-age':\n            cookie.expires = new Date(Date.now() + (Number(value) || 0) * 1000);\n            break;\n\n          case 'secure':\n            cookie.secure = true;\n            break;\n\n          case 'httponly':\n            cookie.httponly = true;\n            break;\n\n          default:\n            if (!cookie.name) {\n              cookie.name = key;\n              cookie.value = value;\n            }\n\n        }\n      });\n      return cookie;\n    }\n    /**\n     * Checks if a cookie object is valid for a specified URL\n     *\n     * @param {Object} cookie Cookie object\n     * @param {String} url URL to check for\n     * @returns {Boolean} true if cookie is valid for specifiec URL\n     */\n\n  }, {\n    key: \"match\",\n    value: function match(cookie, url) {\n      var urlparts = urllib.parse(url || ''); // check if hostname matches\n      // .foo.com also matches subdomains, foo.com does not\n\n      if (urlparts.hostname !== cookie.domain && (cookie.domain.charAt(0) !== '.' || ('.' + urlparts.hostname).substr(-cookie.domain.length) !== cookie.domain)) {\n        return false;\n      } // check if path matches\n\n\n      var path = this.getPath(urlparts.pathname);\n\n      if (path.substr(0, cookie.path.length) !== cookie.path) {\n        return false;\n      } // check secure argument\n\n\n      if (cookie.secure && urlparts.protocol !== 'https:') {\n        return false;\n      }\n\n      return true;\n    }\n    /**\n     * Adds (or updates/removes if needed) a cookie object to the cookie storage\n     *\n     * @param {Object} cookie Cookie value to be stored\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(cookie) {\n      var i;\n      var len; // nothing to do here\n\n      if (!cookie || !cookie.name) {\n        return false;\n      } // overwrite if has same params\n\n\n      for (i = 0, len = this.cookies.length; i < len; i++) {\n        if (this.compare(this.cookies[i], cookie)) {\n          // check if the cookie needs to be removed instead\n          if (this.isExpired(cookie)) {\n            this.cookies.splice(i, 1); // remove expired/unset cookie\n\n            return false;\n          }\n\n          this.cookies[i] = cookie;\n          return true;\n        }\n      } // add as new if not already expired\n\n\n      if (!this.isExpired(cookie)) {\n        this.cookies.push(cookie);\n      }\n\n      return true;\n    }\n    /**\n     * Checks if two cookie objects are the same\n     *\n     * @param {Object} a Cookie to check against\n     * @param {Object} b Cookie to check against\n     * @returns {Boolean} True, if the cookies are the same\n     */\n\n  }, {\n    key: \"compare\",\n    value: function compare(a, b) {\n      return a.name === b.name && a.path === b.path && a.domain === b.domain && a.secure === b.secure && a.httponly === a.httponly;\n    }\n    /**\n     * Checks if a cookie is expired\n     *\n     * @param {Object} cookie Cookie object to check against\n     * @returns {Boolean} True, if the cookie is expired\n     */\n\n  }, {\n    key: \"isExpired\",\n    value: function isExpired(cookie) {\n      return cookie.expires && cookie.expires < new Date() || !cookie.value;\n    }\n    /**\n     * Returns normalized cookie path for an URL path argument\n     *\n     * @param {String} pathname\n     * @returns {String} Normalized path\n     */\n\n  }, {\n    key: \"getPath\",\n    value: function getPath(pathname) {\n      var path = (pathname || '/').split('/');\n      path.pop(); // remove filename part\n\n      path = path.join('/').trim(); // ensure path prefix /\n\n      if (path.charAt(0) !== '/') {\n        path = '/' + path;\n      } // ensure path suffix /\n\n\n      if (path.substr(-1) !== '/') {\n        path += '/';\n      }\n\n      return path;\n    }\n  }]);\n\n  return Cookies;\n}();\n\nmodule.exports = Cookies;","map":{"version":3,"sources":["/home/yamin/My_repos/new-email-app/new-email-app/node_modules/nodemailer/lib/fetch/cookies.js"],"names":["urllib","require","SESSION_TIMEOUT","Cookies","options","cookies","cookieStr","url","urlparts","parse","cookie","domain","replace","hostname","length","substr","path","getPath","pathname","expires","Date","now","Number","sessionTimeout","add","list","map","name","value","join","result","i","isExpired","splice","match","unshift","toString","split","forEach","cookiePart","valueParts","key","shift","trim","toLowerCase","charAt","secure","httponly","protocol","len","compare","push","a","b","pop","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n// module to handle cookies\n\nconst urllib = require('url');\n\nconst SESSION_TIMEOUT = 1800; // 30 min\n\n/**\n * Creates a biskviit cookie jar for managing cookie values in memory\n *\n * @constructor\n * @param {Object} [options] Optional options object\n */\nclass Cookies {\n    constructor(options) {\n        this.options = options || {};\n        this.cookies = [];\n    }\n\n    /**\n     * Stores a cookie string to the cookie storage\n     *\n     * @param {String} cookieStr Value from the 'Set-Cookie:' header\n     * @param {String} url Current URL\n     */\n    set(cookieStr, url) {\n        let urlparts = urllib.parse(url || '');\n        let cookie = this.parse(cookieStr);\n        let domain;\n\n        if (cookie.domain) {\n            domain = cookie.domain.replace(/^\\./, '');\n\n            // do not allow cross origin cookies\n            if (\n                // can't be valid if the requested domain is shorter than current hostname\n                urlparts.hostname.length < domain.length ||\n                // prefix domains with dot to be sure that partial matches are not used\n                ('.' + urlparts.hostname).substr(-domain.length + 1) !== '.' + domain\n            ) {\n                cookie.domain = urlparts.hostname;\n            }\n        } else {\n            cookie.domain = urlparts.hostname;\n        }\n\n        if (!cookie.path) {\n            cookie.path = this.getPath(urlparts.pathname);\n        }\n\n        // if no expire date, then use sessionTimeout value\n        if (!cookie.expires) {\n            cookie.expires = new Date(Date.now() + (Number(this.options.sessionTimeout || SESSION_TIMEOUT) || SESSION_TIMEOUT) * 1000);\n        }\n\n        return this.add(cookie);\n    }\n\n    /**\n     * Returns cookie string for the 'Cookie:' header.\n     *\n     * @param {String} url URL to check for\n     * @returns {String} Cookie header or empty string if no matches were found\n     */\n    get(url) {\n        return this.list(url)\n            .map(cookie => cookie.name + '=' + cookie.value)\n            .join('; ');\n    }\n\n    /**\n     * Lists all valied cookie objects for the specified URL\n     *\n     * @param {String} url URL to check for\n     * @returns {Array} An array of cookie objects\n     */\n    list(url) {\n        let result = [];\n        let i;\n        let cookie;\n\n        for (i = this.cookies.length - 1; i >= 0; i--) {\n            cookie = this.cookies[i];\n\n            if (this.isExpired(cookie)) {\n                this.cookies.splice(i, i);\n                continue;\n            }\n\n            if (this.match(cookie, url)) {\n                result.unshift(cookie);\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Parses cookie string from the 'Set-Cookie:' header\n     *\n     * @param {String} cookieStr String from the 'Set-Cookie:' header\n     * @returns {Object} Cookie object\n     */\n    parse(cookieStr) {\n        let cookie = {};\n\n        (cookieStr || '')\n            .toString()\n            .split(';')\n            .forEach(cookiePart => {\n                let valueParts = cookiePart.split('=');\n                let key = valueParts.shift().trim().toLowerCase();\n                let value = valueParts.join('=').trim();\n                let domain;\n\n                if (!key) {\n                    // skip empty parts\n                    return;\n                }\n\n                switch (key) {\n                    case 'expires':\n                        value = new Date(value);\n                        // ignore date if can not parse it\n                        if (value.toString() !== 'Invalid Date') {\n                            cookie.expires = value;\n                        }\n                        break;\n\n                    case 'path':\n                        cookie.path = value;\n                        break;\n\n                    case 'domain':\n                        domain = value.toLowerCase();\n                        if (domain.length && domain.charAt(0) !== '.') {\n                            domain = '.' + domain; // ensure preceeding dot for user set domains\n                        }\n                        cookie.domain = domain;\n                        break;\n\n                    case 'max-age':\n                        cookie.expires = new Date(Date.now() + (Number(value) || 0) * 1000);\n                        break;\n\n                    case 'secure':\n                        cookie.secure = true;\n                        break;\n\n                    case 'httponly':\n                        cookie.httponly = true;\n                        break;\n\n                    default:\n                        if (!cookie.name) {\n                            cookie.name = key;\n                            cookie.value = value;\n                        }\n                }\n            });\n\n        return cookie;\n    }\n\n    /**\n     * Checks if a cookie object is valid for a specified URL\n     *\n     * @param {Object} cookie Cookie object\n     * @param {String} url URL to check for\n     * @returns {Boolean} true if cookie is valid for specifiec URL\n     */\n    match(cookie, url) {\n        let urlparts = urllib.parse(url || '');\n\n        // check if hostname matches\n        // .foo.com also matches subdomains, foo.com does not\n        if (\n            urlparts.hostname !== cookie.domain &&\n            (cookie.domain.charAt(0) !== '.' || ('.' + urlparts.hostname).substr(-cookie.domain.length) !== cookie.domain)\n        ) {\n            return false;\n        }\n\n        // check if path matches\n        let path = this.getPath(urlparts.pathname);\n        if (path.substr(0, cookie.path.length) !== cookie.path) {\n            return false;\n        }\n\n        // check secure argument\n        if (cookie.secure && urlparts.protocol !== 'https:') {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds (or updates/removes if needed) a cookie object to the cookie storage\n     *\n     * @param {Object} cookie Cookie value to be stored\n     */\n    add(cookie) {\n        let i;\n        let len;\n\n        // nothing to do here\n        if (!cookie || !cookie.name) {\n            return false;\n        }\n\n        // overwrite if has same params\n        for (i = 0, len = this.cookies.length; i < len; i++) {\n            if (this.compare(this.cookies[i], cookie)) {\n                // check if the cookie needs to be removed instead\n                if (this.isExpired(cookie)) {\n                    this.cookies.splice(i, 1); // remove expired/unset cookie\n                    return false;\n                }\n\n                this.cookies[i] = cookie;\n                return true;\n            }\n        }\n\n        // add as new if not already expired\n        if (!this.isExpired(cookie)) {\n            this.cookies.push(cookie);\n        }\n\n        return true;\n    }\n\n    /**\n     * Checks if two cookie objects are the same\n     *\n     * @param {Object} a Cookie to check against\n     * @param {Object} b Cookie to check against\n     * @returns {Boolean} True, if the cookies are the same\n     */\n    compare(a, b) {\n        return a.name === b.name && a.path === b.path && a.domain === b.domain && a.secure === b.secure && a.httponly === a.httponly;\n    }\n\n    /**\n     * Checks if a cookie is expired\n     *\n     * @param {Object} cookie Cookie object to check against\n     * @returns {Boolean} True, if the cookie is expired\n     */\n    isExpired(cookie) {\n        return (cookie.expires && cookie.expires < new Date()) || !cookie.value;\n    }\n\n    /**\n     * Returns normalized cookie path for an URL path argument\n     *\n     * @param {String} pathname\n     * @returns {String} Normalized path\n     */\n    getPath(pathname) {\n        let path = (pathname || '/').split('/');\n        path.pop(); // remove filename part\n        path = path.join('/').trim();\n\n        // ensure path prefix /\n        if (path.charAt(0) !== '/') {\n            path = '/' + path;\n        }\n\n        // ensure path suffix /\n        if (path.substr(-1) !== '/') {\n            path += '/';\n        }\n\n        return path;\n    }\n}\n\nmodule.exports = Cookies;\n"]},"metadata":{},"sourceType":"script"}