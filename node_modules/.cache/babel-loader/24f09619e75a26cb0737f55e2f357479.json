{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/yamin/My_repos/new-email-app/new-email-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar packageData = require('../../package.json');\n\nvar shared = require('../shared');\n/**\n * Generates a Transport object to generate JSON output\n *\n * @constructor\n * @param {Object} optional config parameter\n */\n\n\nvar JSONTransport = /*#__PURE__*/function () {\n  function JSONTransport(options) {\n    _classCallCheck(this, JSONTransport);\n\n    options = options || {};\n    this.options = options || {};\n    this.name = 'JSONTransport';\n    this.version = packageData.version;\n    this.logger = shared.getLogger(this.options, {\n      component: this.options.component || 'json-transport'\n    });\n  }\n  /**\n   * <p>Compiles a mailcomposer message and forwards it to handler that sends it.</p>\n   *\n   * @param {Object} emailMessage MailComposer object\n   * @param {Function} callback Callback function to run when the sending is completed\n   */\n\n\n  _createClass(JSONTransport, [{\n    key: \"send\",\n    value: function send(mail, done) {\n      var _this = this;\n\n      // Sendmail strips this header line by itself\n      mail.message.keepBcc = true;\n      var envelope = mail.data.envelope || mail.message.getEnvelope();\n      var messageId = mail.message.messageId();\n      var recipients = [].concat(envelope.to || []);\n\n      if (recipients.length > 3) {\n        recipients.push('...and ' + recipients.splice(2).length + ' more');\n      }\n\n      this.logger.info({\n        tnx: 'send',\n        messageId: messageId\n      }, 'Composing JSON structure of %s to <%s>', messageId, recipients.join(', '));\n      setImmediate(function () {\n        mail.normalize(function (err, data) {\n          if (err) {\n            _this.logger.error({\n              err: err,\n              tnx: 'send',\n              messageId: messageId\n            }, 'Failed building JSON structure for %s. %s', messageId, err.message);\n\n            return done(err);\n          }\n\n          delete data.envelope;\n          delete data.normalizedHeaders;\n          return done(null, {\n            envelope: envelope,\n            messageId: messageId,\n            message: _this.options.skipEncoding ? data : JSON.stringify(data)\n          });\n        });\n      });\n    }\n  }]);\n\n  return JSONTransport;\n}();\n\nmodule.exports = JSONTransport;","map":{"version":3,"sources":["/home/yamin/My_repos/new-email-app/new-email-app/node_modules/nodemailer/lib/json-transport/index.js"],"names":["packageData","require","shared","JSONTransport","options","name","version","logger","getLogger","component","mail","done","message","keepBcc","envelope","data","getEnvelope","messageId","recipients","concat","to","length","push","splice","info","tnx","join","setImmediate","normalize","err","error","normalizedHeaders","skipEncoding","JSON","stringify","module","exports"],"mappings":"AAAA;;;;;;AAEA,IAAMA,WAAW,GAAGC,OAAO,CAAC,oBAAD,CAA3B;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,WAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;;;IACME,a;AACF,yBAAYC,OAAZ,EAAqB;AAAA;;AACjBA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,SAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B;AAEA,SAAKC,IAAL,GAAY,eAAZ;AACA,SAAKC,OAAL,GAAeN,WAAW,CAACM,OAA3B;AAEA,SAAKC,MAAL,GAAcL,MAAM,CAACM,SAAP,CAAiB,KAAKJ,OAAtB,EAA+B;AACzCK,MAAAA,SAAS,EAAE,KAAKL,OAAL,CAAaK,SAAb,IAA0B;AADI,KAA/B,CAAd;AAGH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;;yBACSC,I,EAAMC,I,EAAM;AAAA;;AACb;AACAD,MAAAA,IAAI,CAACE,OAAL,CAAaC,OAAb,GAAuB,IAAvB;AAEA,UAAIC,QAAQ,GAAGJ,IAAI,CAACK,IAAL,CAAUD,QAAV,IAAsBJ,IAAI,CAACE,OAAL,CAAaI,WAAb,EAArC;AACA,UAAIC,SAAS,GAAGP,IAAI,CAACE,OAAL,CAAaK,SAAb,EAAhB;AAEA,UAAIC,UAAU,GAAG,GAAGC,MAAH,CAAUL,QAAQ,CAACM,EAAT,IAAe,EAAzB,CAAjB;;AACA,UAAIF,UAAU,CAACG,MAAX,GAAoB,CAAxB,EAA2B;AACvBH,QAAAA,UAAU,CAACI,IAAX,CAAgB,YAAYJ,UAAU,CAACK,MAAX,CAAkB,CAAlB,EAAqBF,MAAjC,GAA0C,OAA1D;AACH;;AACD,WAAKd,MAAL,CAAYiB,IAAZ,CACI;AACIC,QAAAA,GAAG,EAAE,MADT;AAEIR,QAAAA,SAAS,EAATA;AAFJ,OADJ,EAKI,wCALJ,EAMIA,SANJ,EAOIC,UAAU,CAACQ,IAAX,CAAgB,IAAhB,CAPJ;AAUAC,MAAAA,YAAY,CAAC,YAAM;AACfjB,QAAAA,IAAI,CAACkB,SAAL,CAAe,UAACC,GAAD,EAAMd,IAAN,EAAe;AAC1B,cAAIc,GAAJ,EAAS;AACL,YAAA,KAAI,CAACtB,MAAL,CAAYuB,KAAZ,CACI;AACID,cAAAA,GAAG,EAAHA,GADJ;AAEIJ,cAAAA,GAAG,EAAE,MAFT;AAGIR,cAAAA,SAAS,EAATA;AAHJ,aADJ,EAMI,2CANJ,EAOIA,SAPJ,EAQIY,GAAG,CAACjB,OARR;;AAUA,mBAAOD,IAAI,CAACkB,GAAD,CAAX;AACH;;AAED,iBAAOd,IAAI,CAACD,QAAZ;AACA,iBAAOC,IAAI,CAACgB,iBAAZ;AAEA,iBAAOpB,IAAI,CAAC,IAAD,EAAO;AACdG,YAAAA,QAAQ,EAARA,QADc;AAEdG,YAAAA,SAAS,EAATA,SAFc;AAGdL,YAAAA,OAAO,EAAE,KAAI,CAACR,OAAL,CAAa4B,YAAb,GAA4BjB,IAA5B,GAAmCkB,IAAI,CAACC,SAAL,CAAenB,IAAf;AAH9B,WAAP,CAAX;AAKH,SAvBD;AAwBH,OAzBW,CAAZ;AA0BH;;;;;;AAGLoB,MAAM,CAACC,OAAP,GAAiBjC,aAAjB","sourcesContent":["'use strict';\n\nconst packageData = require('../../package.json');\nconst shared = require('../shared');\n\n/**\n * Generates a Transport object to generate JSON output\n *\n * @constructor\n * @param {Object} optional config parameter\n */\nclass JSONTransport {\n    constructor(options) {\n        options = options || {};\n\n        this.options = options || {};\n\n        this.name = 'JSONTransport';\n        this.version = packageData.version;\n\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || 'json-transport'\n        });\n    }\n\n    /**\n     * <p>Compiles a mailcomposer message and forwards it to handler that sends it.</p>\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */\n    send(mail, done) {\n        // Sendmail strips this header line by itself\n        mail.message.keepBcc = true;\n\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push('...and ' + recipients.splice(2).length + ' more');\n        }\n        this.logger.info(\n            {\n                tnx: 'send',\n                messageId\n            },\n            'Composing JSON structure of %s to <%s>',\n            messageId,\n            recipients.join(', ')\n        );\n\n        setImmediate(() => {\n            mail.normalize((err, data) => {\n                if (err) {\n                    this.logger.error(\n                        {\n                            err,\n                            tnx: 'send',\n                            messageId\n                        },\n                        'Failed building JSON structure for %s. %s',\n                        messageId,\n                        err.message\n                    );\n                    return done(err);\n                }\n\n                delete data.envelope;\n                delete data.normalizedHeaders;\n\n                return done(null, {\n                    envelope,\n                    messageId,\n                    message: this.options.skipEncoding ? data : JSON.stringify(data)\n                });\n            });\n        });\n    }\n}\n\nmodule.exports = JSONTransport;\n"]},"metadata":{},"sourceType":"script"}