{"ast":null,"code":"(function webpackUniversalModuleDefinition(root, factory) {\n  /* istanbul ignore next */\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);\n  /* istanbul ignore next */\n  else if (typeof exports === 'object') exports[\"esprima\"] = factory();else root[\"esprima\"] = factory();\n})(this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n        // Check if module is in cache\n\n        /* istanbul ignore if */\n\n        /******/\n        if (installedModules[moduleId])\n          /******/\n          return installedModules[moduleId].exports;\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n        var module = installedModules[moduleId] = {\n          /******/\n          exports: {},\n\n          /******/\n          id: moduleId,\n\n          /******/\n          loaded: false\n          /******/\n\n        };\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.loaded = true;\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n      __webpack_require__.p = \"\";\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(0);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /*\n        Copyright JS Foundation and other contributors, https://js.foundation/\n      \t  Redistribution and use in source and binary forms, with or without\n        modification, are permitted provided that the following conditions are met:\n      \t    * Redistributions of source code must retain the above copyright\n            notice, this list of conditions and the following disclaimer.\n          * Redistributions in binary form must reproduce the above copyright\n            notice, this list of conditions and the following disclaimer in the\n            documentation and/or other materials provided with the distribution.\n      \t  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n        AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n        IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n        ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n        DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n        (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n        LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n        ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n        (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n        THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n      */\n      \"use strict\";\n\n      var comment_handler_1 = __webpack_require__(1);\n\n      var parser_1 = __webpack_require__(3);\n\n      var jsx_parser_1 = __webpack_require__(11);\n\n      var tokenizer_1 = __webpack_require__(15);\n\n      function parse(code, options, delegate) {\n        var commentHandler = null;\n\n        var proxyDelegate = function proxyDelegate(node, metadata) {\n          if (delegate) {\n            delegate(node, metadata);\n          }\n\n          if (commentHandler) {\n            commentHandler.visit(node, metadata);\n          }\n        };\n\n        var parserDelegate = typeof delegate === 'function' ? proxyDelegate : null;\n        var collectComment = false;\n\n        if (options) {\n          collectComment = typeof options.comment === 'boolean' && options.comment;\n          var attachComment = typeof options.attachComment === 'boolean' && options.attachComment;\n\n          if (collectComment || attachComment) {\n            commentHandler = new comment_handler_1.CommentHandler();\n            commentHandler.attach = attachComment;\n            options.comment = true;\n            parserDelegate = proxyDelegate;\n          }\n        }\n\n        var parser;\n\n        if (options && typeof options.jsx === 'boolean' && options.jsx) {\n          parser = new jsx_parser_1.JSXParser(code, options, parserDelegate);\n        } else {\n          parser = new parser_1.Parser(code, options, parserDelegate);\n        }\n\n        var ast = parser.parseProgram();\n\n        if (collectComment) {\n          ast.comments = commentHandler.comments;\n        }\n\n        if (parser.config.tokens) {\n          ast.tokens = parser.tokens;\n        }\n\n        if (parser.config.tolerant) {\n          ast.errors = parser.errorHandler.errors;\n        }\n\n        return ast;\n      }\n\n      exports.parse = parse;\n\n      function tokenize(code, options, delegate) {\n        var tokenizer = new tokenizer_1.Tokenizer(code, options);\n        var tokens;\n        tokens = [];\n\n        try {\n          while (true) {\n            var token = tokenizer.getNextToken();\n\n            if (!token) {\n              break;\n            }\n\n            if (delegate) {\n              token = delegate(token);\n            }\n\n            tokens.push(token);\n          }\n        } catch (e) {\n          tokenizer.errorHandler.tolerate(e);\n        }\n\n        if (tokenizer.errorHandler.tolerant) {\n          tokens.errors = tokenizer.errors();\n        }\n\n        return tokens;\n      }\n\n      exports.tokenize = tokenize;\n\n      var syntax_1 = __webpack_require__(2);\n\n      exports.Syntax = syntax_1.Syntax; // Sync with *.json manifests.\n\n      exports.version = '3.1.3';\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var syntax_1 = __webpack_require__(2);\n\n      var CommentHandler = function () {\n        function CommentHandler() {\n          this.attach = false;\n          this.comments = [];\n          this.stack = [];\n          this.leading = [];\n          this.trailing = [];\n        }\n\n        CommentHandler.prototype.insertInnerComments = function (node, metadata) {\n          //  innnerComments for properties empty block\n          //  `function a() {/** comments **\\/}`\n          if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {\n            var innerComments = [];\n\n            for (var i = this.leading.length - 1; i >= 0; --i) {\n              var entry = this.leading[i];\n\n              if (metadata.end.offset >= entry.start) {\n                innerComments.unshift(entry.comment);\n                this.leading.splice(i, 1);\n                this.trailing.splice(i, 1);\n              }\n            }\n\n            if (innerComments.length) {\n              node.innerComments = innerComments;\n            }\n          }\n        };\n\n        CommentHandler.prototype.findTrailingComments = function (node, metadata) {\n          var trailingComments = [];\n\n          if (this.trailing.length > 0) {\n            for (var i = this.trailing.length - 1; i >= 0; --i) {\n              var entry_1 = this.trailing[i];\n\n              if (entry_1.start >= metadata.end.offset) {\n                trailingComments.unshift(entry_1.comment);\n              }\n            }\n\n            this.trailing.length = 0;\n            return trailingComments;\n          }\n\n          var entry = this.stack[this.stack.length - 1];\n\n          if (entry && entry.node.trailingComments) {\n            var firstComment = entry.node.trailingComments[0];\n\n            if (firstComment && firstComment.range[0] >= metadata.end.offset) {\n              trailingComments = entry.node.trailingComments;\n              delete entry.node.trailingComments;\n            }\n          }\n\n          return trailingComments;\n        };\n\n        CommentHandler.prototype.findLeadingComments = function (node, metadata) {\n          var leadingComments = [];\n          var target;\n\n          while (this.stack.length > 0) {\n            var entry = this.stack[this.stack.length - 1];\n\n            if (entry && entry.start >= metadata.start.offset) {\n              target = this.stack.pop().node;\n            } else {\n              break;\n            }\n          }\n\n          if (target) {\n            var count = target.leadingComments ? target.leadingComments.length : 0;\n\n            for (var i = count - 1; i >= 0; --i) {\n              var comment = target.leadingComments[i];\n\n              if (comment.range[1] <= metadata.start.offset) {\n                leadingComments.unshift(comment);\n                target.leadingComments.splice(i, 1);\n              }\n            }\n\n            if (target.leadingComments && target.leadingComments.length === 0) {\n              delete target.leadingComments;\n            }\n\n            return leadingComments;\n          }\n\n          for (var i = this.leading.length - 1; i >= 0; --i) {\n            var entry = this.leading[i];\n\n            if (entry.start <= metadata.start.offset) {\n              leadingComments.unshift(entry.comment);\n              this.leading.splice(i, 1);\n            }\n          }\n\n          return leadingComments;\n        };\n\n        CommentHandler.prototype.visitNode = function (node, metadata) {\n          if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {\n            return;\n          }\n\n          this.insertInnerComments(node, metadata);\n          var trailingComments = this.findTrailingComments(node, metadata);\n          var leadingComments = this.findLeadingComments(node, metadata);\n\n          if (leadingComments.length > 0) {\n            node.leadingComments = leadingComments;\n          }\n\n          if (trailingComments.length > 0) {\n            node.trailingComments = trailingComments;\n          }\n\n          this.stack.push({\n            node: node,\n            start: metadata.start.offset\n          });\n        };\n\n        CommentHandler.prototype.visitComment = function (node, metadata) {\n          var type = node.type[0] === 'L' ? 'Line' : 'Block';\n          var comment = {\n            type: type,\n            value: node.value\n          };\n\n          if (node.range) {\n            comment.range = node.range;\n          }\n\n          if (node.loc) {\n            comment.loc = node.loc;\n          }\n\n          this.comments.push(comment);\n\n          if (this.attach) {\n            var entry = {\n              comment: {\n                type: type,\n                value: node.value,\n                range: [metadata.start.offset, metadata.end.offset]\n              },\n              start: metadata.start.offset\n            };\n\n            if (node.loc) {\n              entry.comment.loc = node.loc;\n            }\n\n            node.type = type;\n            this.leading.push(entry);\n            this.trailing.push(entry);\n          }\n        };\n\n        CommentHandler.prototype.visit = function (node, metadata) {\n          if (node.type === 'LineComment') {\n            this.visitComment(node, metadata);\n          } else if (node.type === 'BlockComment') {\n            this.visitComment(node, metadata);\n          } else if (this.attach) {\n            this.visitNode(node, metadata);\n          }\n        };\n\n        return CommentHandler;\n      }();\n\n      exports.CommentHandler = CommentHandler;\n      /***/\n    },\n    /* 2 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\";\n\n      exports.Syntax = {\n        AssignmentExpression: 'AssignmentExpression',\n        AssignmentPattern: 'AssignmentPattern',\n        ArrayExpression: 'ArrayExpression',\n        ArrayPattern: 'ArrayPattern',\n        ArrowFunctionExpression: 'ArrowFunctionExpression',\n        BlockStatement: 'BlockStatement',\n        BinaryExpression: 'BinaryExpression',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ClassBody: 'ClassBody',\n        ClassDeclaration: 'ClassDeclaration',\n        ClassExpression: 'ClassExpression',\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExportAllDeclaration: 'ExportAllDeclaration',\n        ExportDefaultDeclaration: 'ExportDefaultDeclaration',\n        ExportNamedDeclaration: 'ExportNamedDeclaration',\n        ExportSpecifier: 'ExportSpecifier',\n        ExpressionStatement: 'ExpressionStatement',\n        ForStatement: 'ForStatement',\n        ForOfStatement: 'ForOfStatement',\n        ForInStatement: 'ForInStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        ImportDeclaration: 'ImportDeclaration',\n        ImportDefaultSpecifier: 'ImportDefaultSpecifier',\n        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',\n        ImportSpecifier: 'ImportSpecifier',\n        Literal: 'Literal',\n        LabeledStatement: 'LabeledStatement',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        MetaProperty: 'MetaProperty',\n        MethodDefinition: 'MethodDefinition',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        ObjectPattern: 'ObjectPattern',\n        Program: 'Program',\n        Property: 'Property',\n        RestElement: 'RestElement',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SpreadElement: 'SpreadElement',\n        Super: 'Super',\n        SwitchCase: 'SwitchCase',\n        SwitchStatement: 'SwitchStatement',\n        TaggedTemplateExpression: 'TaggedTemplateExpression',\n        TemplateElement: 'TemplateElement',\n        TemplateLiteral: 'TemplateLiteral',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement',\n        YieldExpression: 'YieldExpression'\n      };\n      /***/\n    },\n    /* 3 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var assert_1 = __webpack_require__(4);\n\n      var messages_1 = __webpack_require__(5);\n\n      var error_handler_1 = __webpack_require__(6);\n\n      var token_1 = __webpack_require__(7);\n\n      var scanner_1 = __webpack_require__(8);\n\n      var syntax_1 = __webpack_require__(2);\n\n      var Node = __webpack_require__(10);\n\n      var ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';\n\n      var Parser = function () {\n        function Parser(code, options, delegate) {\n          if (options === void 0) {\n            options = {};\n          }\n\n          this.config = {\n            range: typeof options.range === 'boolean' && options.range,\n            loc: typeof options.loc === 'boolean' && options.loc,\n            source: null,\n            tokens: typeof options.tokens === 'boolean' && options.tokens,\n            comment: typeof options.comment === 'boolean' && options.comment,\n            tolerant: typeof options.tolerant === 'boolean' && options.tolerant\n          };\n\n          if (this.config.loc && options.source && options.source !== null) {\n            this.config.source = String(options.source);\n          }\n\n          this.delegate = delegate;\n          this.errorHandler = new error_handler_1.ErrorHandler();\n          this.errorHandler.tolerant = this.config.tolerant;\n          this.scanner = new scanner_1.Scanner(code, this.errorHandler);\n          this.scanner.trackComment = this.config.comment;\n          this.operatorPrecedence = {\n            ')': 0,\n            ';': 0,\n            ',': 0,\n            '=': 0,\n            ']': 0,\n            '||': 1,\n            '&&': 2,\n            '|': 3,\n            '^': 4,\n            '&': 5,\n            '==': 6,\n            '!=': 6,\n            '===': 6,\n            '!==': 6,\n            '<': 7,\n            '>': 7,\n            '<=': 7,\n            '>=': 7,\n            '<<': 8,\n            '>>': 8,\n            '>>>': 8,\n            '+': 9,\n            '-': 9,\n            '*': 11,\n            '/': 11,\n            '%': 11\n          };\n          this.sourceType = options && options.sourceType === 'module' ? 'module' : 'script';\n          this.lookahead = null;\n          this.hasLineTerminator = false;\n          this.context = {\n            allowIn: true,\n            allowYield: true,\n            firstCoverInitializedNameError: null,\n            isAssignmentTarget: false,\n            isBindingElement: false,\n            inFunctionBody: false,\n            inIteration: false,\n            inSwitch: false,\n            labelSet: {},\n            strict: this.sourceType === 'module'\n          };\n          this.tokens = [];\n          this.startMarker = {\n            index: 0,\n            lineNumber: this.scanner.lineNumber,\n            lineStart: 0\n          };\n          this.lastMarker = {\n            index: 0,\n            lineNumber: this.scanner.lineNumber,\n            lineStart: 0\n          };\n          this.nextToken();\n          this.lastMarker = {\n            index: this.scanner.index,\n            lineNumber: this.scanner.lineNumber,\n            lineStart: this.scanner.lineStart\n          };\n        }\n\n        Parser.prototype.throwError = function (messageFormat) {\n          var values = [];\n\n          for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n          }\n\n          var args = Array.prototype.slice.call(arguments, 1);\n          var msg = messageFormat.replace(/%(\\d)/g, function (whole, idx) {\n            assert_1.assert(idx < args.length, 'Message reference must be in range');\n            return args[idx];\n          });\n          var index = this.lastMarker.index;\n          var line = this.lastMarker.lineNumber;\n          var column = this.lastMarker.index - this.lastMarker.lineStart + 1;\n          throw this.errorHandler.createError(index, line, column, msg);\n        };\n\n        Parser.prototype.tolerateError = function (messageFormat) {\n          var values = [];\n\n          for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n          }\n\n          var args = Array.prototype.slice.call(arguments, 1);\n          var msg = messageFormat.replace(/%(\\d)/g, function (whole, idx) {\n            assert_1.assert(idx < args.length, 'Message reference must be in range');\n            return args[idx];\n          });\n          var index = this.lastMarker.index;\n          var line = this.scanner.lineNumber;\n          var column = this.lastMarker.index - this.lastMarker.lineStart + 1;\n          this.errorHandler.tolerateError(index, line, column, msg);\n        }; // Throw an exception because of the token.\n\n\n        Parser.prototype.unexpectedTokenError = function (token, message) {\n          var msg = message || messages_1.Messages.UnexpectedToken;\n          var value;\n\n          if (token) {\n            if (!message) {\n              msg = token.type === token_1.Token.EOF ? messages_1.Messages.UnexpectedEOS : token.type === token_1.Token.Identifier ? messages_1.Messages.UnexpectedIdentifier : token.type === token_1.Token.NumericLiteral ? messages_1.Messages.UnexpectedNumber : token.type === token_1.Token.StringLiteral ? messages_1.Messages.UnexpectedString : token.type === token_1.Token.Template ? messages_1.Messages.UnexpectedTemplate : messages_1.Messages.UnexpectedToken;\n\n              if (token.type === token_1.Token.Keyword) {\n                if (this.scanner.isFutureReservedWord(token.value)) {\n                  msg = messages_1.Messages.UnexpectedReserved;\n                } else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {\n                  msg = messages_1.Messages.StrictReservedWord;\n                }\n              }\n            }\n\n            value = token.type === token_1.Token.Template ? token.value.raw : token.value;\n          } else {\n            value = 'ILLEGAL';\n          }\n\n          msg = msg.replace('%0', value);\n\n          if (token && typeof token.lineNumber === 'number') {\n            var index = token.start;\n            var line = token.lineNumber;\n            var column = token.start - this.lastMarker.lineStart + 1;\n            return this.errorHandler.createError(index, line, column, msg);\n          } else {\n            var index = this.lastMarker.index;\n            var line = this.lastMarker.lineNumber;\n            var column = index - this.lastMarker.lineStart + 1;\n            return this.errorHandler.createError(index, line, column, msg);\n          }\n        };\n\n        Parser.prototype.throwUnexpectedToken = function (token, message) {\n          throw this.unexpectedTokenError(token, message);\n        };\n\n        Parser.prototype.tolerateUnexpectedToken = function (token, message) {\n          this.errorHandler.tolerate(this.unexpectedTokenError(token, message));\n        };\n\n        Parser.prototype.collectComments = function () {\n          if (!this.config.comment) {\n            this.scanner.scanComments();\n          } else {\n            var comments = this.scanner.scanComments();\n\n            if (comments.length > 0 && this.delegate) {\n              for (var i = 0; i < comments.length; ++i) {\n                var e = comments[i];\n                var node = void 0;\n                node = {\n                  type: e.multiLine ? 'BlockComment' : 'LineComment',\n                  value: this.scanner.source.slice(e.slice[0], e.slice[1])\n                };\n\n                if (this.config.range) {\n                  node.range = e.range;\n                }\n\n                if (this.config.loc) {\n                  node.loc = e.loc;\n                }\n\n                var metadata = {\n                  start: {\n                    line: e.loc.start.line,\n                    column: e.loc.start.column,\n                    offset: e.range[0]\n                  },\n                  end: {\n                    line: e.loc.end.line,\n                    column: e.loc.end.column,\n                    offset: e.range[1]\n                  }\n                };\n                this.delegate(node, metadata);\n              }\n            }\n          }\n        }; // From internal representation to an external structure\n\n\n        Parser.prototype.getTokenRaw = function (token) {\n          return this.scanner.source.slice(token.start, token.end);\n        };\n\n        Parser.prototype.convertToken = function (token) {\n          var t;\n          t = {\n            type: token_1.TokenName[token.type],\n            value: this.getTokenRaw(token)\n          };\n\n          if (this.config.range) {\n            t.range = [token.start, token.end];\n          }\n\n          if (this.config.loc) {\n            t.loc = {\n              start: {\n                line: this.startMarker.lineNumber,\n                column: this.startMarker.index - this.startMarker.lineStart\n              },\n              end: {\n                line: this.scanner.lineNumber,\n                column: this.scanner.index - this.scanner.lineStart\n              }\n            };\n          }\n\n          if (token.regex) {\n            t.regex = token.regex;\n          }\n\n          return t;\n        };\n\n        Parser.prototype.nextToken = function () {\n          var token = this.lookahead;\n          this.lastMarker.index = this.scanner.index;\n          this.lastMarker.lineNumber = this.scanner.lineNumber;\n          this.lastMarker.lineStart = this.scanner.lineStart;\n          this.collectComments();\n          this.startMarker.index = this.scanner.index;\n          this.startMarker.lineNumber = this.scanner.lineNumber;\n          this.startMarker.lineStart = this.scanner.lineStart;\n          var next;\n          next = this.scanner.lex();\n          this.hasLineTerminator = token && next ? token.lineNumber !== next.lineNumber : false;\n\n          if (next && this.context.strict && next.type === token_1.Token.Identifier) {\n            if (this.scanner.isStrictModeReservedWord(next.value)) {\n              next.type = token_1.Token.Keyword;\n            }\n          }\n\n          this.lookahead = next;\n\n          if (this.config.tokens && next.type !== token_1.Token.EOF) {\n            this.tokens.push(this.convertToken(next));\n          }\n\n          return token;\n        };\n\n        Parser.prototype.nextRegexToken = function () {\n          this.collectComments();\n          var token = this.scanner.scanRegExp();\n\n          if (this.config.tokens) {\n            // Pop the previous token, '/' or '/='\n            // This is added from the lookahead token.\n            this.tokens.pop();\n            this.tokens.push(this.convertToken(token));\n          } // Prime the next lookahead.\n\n\n          this.lookahead = token;\n          this.nextToken();\n          return token;\n        };\n\n        Parser.prototype.createNode = function () {\n          return {\n            index: this.startMarker.index,\n            line: this.startMarker.lineNumber,\n            column: this.startMarker.index - this.startMarker.lineStart\n          };\n        };\n\n        Parser.prototype.startNode = function (token) {\n          return {\n            index: token.start,\n            line: token.lineNumber,\n            column: token.start - token.lineStart\n          };\n        };\n\n        Parser.prototype.finalize = function (meta, node) {\n          if (this.config.range) {\n            node.range = [meta.index, this.lastMarker.index];\n          }\n\n          if (this.config.loc) {\n            node.loc = {\n              start: {\n                line: meta.line,\n                column: meta.column\n              },\n              end: {\n                line: this.lastMarker.lineNumber,\n                column: this.lastMarker.index - this.lastMarker.lineStart\n              }\n            };\n\n            if (this.config.source) {\n              node.loc.source = this.config.source;\n            }\n          }\n\n          if (this.delegate) {\n            var metadata = {\n              start: {\n                line: meta.line,\n                column: meta.column,\n                offset: meta.index\n              },\n              end: {\n                line: this.lastMarker.lineNumber,\n                column: this.lastMarker.index - this.lastMarker.lineStart,\n                offset: this.lastMarker.index\n              }\n            };\n            this.delegate(node, metadata);\n          }\n\n          return node;\n        }; // Expect the next token to match the specified punctuator.\n        // If not, an exception will be thrown.\n\n\n        Parser.prototype.expect = function (value) {\n          var token = this.nextToken();\n\n          if (token.type !== token_1.Token.Punctuator || token.value !== value) {\n            this.throwUnexpectedToken(token);\n          }\n        }; // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().\n\n\n        Parser.prototype.expectCommaSeparator = function () {\n          if (this.config.tolerant) {\n            var token = this.lookahead;\n\n            if (token.type === token_1.Token.Punctuator && token.value === ',') {\n              this.nextToken();\n            } else if (token.type === token_1.Token.Punctuator && token.value === ';') {\n              this.nextToken();\n              this.tolerateUnexpectedToken(token);\n            } else {\n              this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);\n            }\n          } else {\n            this.expect(',');\n          }\n        }; // Expect the next token to match the specified keyword.\n        // If not, an exception will be thrown.\n\n\n        Parser.prototype.expectKeyword = function (keyword) {\n          var token = this.nextToken();\n\n          if (token.type !== token_1.Token.Keyword || token.value !== keyword) {\n            this.throwUnexpectedToken(token);\n          }\n        }; // Return true if the next token matches the specified punctuator.\n\n\n        Parser.prototype.match = function (value) {\n          return this.lookahead.type === token_1.Token.Punctuator && this.lookahead.value === value;\n        }; // Return true if the next token matches the specified keyword\n\n\n        Parser.prototype.matchKeyword = function (keyword) {\n          return this.lookahead.type === token_1.Token.Keyword && this.lookahead.value === keyword;\n        }; // Return true if the next token matches the specified contextual keyword\n        // (where an identifier is sometimes a keyword depending on the context)\n\n\n        Parser.prototype.matchContextualKeyword = function (keyword) {\n          return this.lookahead.type === token_1.Token.Identifier && this.lookahead.value === keyword;\n        }; // Return true if the next token is an assignment operator\n\n\n        Parser.prototype.matchAssign = function () {\n          if (this.lookahead.type !== token_1.Token.Punctuator) {\n            return false;\n          }\n\n          var op = this.lookahead.value;\n          return op === '=' || op === '*=' || op === '**=' || op === '/=' || op === '%=' || op === '+=' || op === '-=' || op === '<<=' || op === '>>=' || op === '>>>=' || op === '&=' || op === '^=' || op === '|=';\n        }; // Cover grammar support.\n        //\n        // When an assignment expression position starts with an left parenthesis, the determination of the type\n        // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)\n        // or the first comma. This situation also defers the determination of all the expressions nested in the pair.\n        //\n        // There are three productions that can be parsed in a parentheses pair that needs to be determined\n        // after the outermost pair is closed. They are:\n        //\n        //   1. AssignmentExpression\n        //   2. BindingElements\n        //   3. AssignmentTargets\n        //\n        // In order to avoid exponential backtracking, we use two flags to denote if the production can be\n        // binding element or assignment target.\n        //\n        // The three productions have the relationship:\n        //\n        //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression\n        //\n        // with a single exception that CoverInitializedName when used directly in an Expression, generates\n        // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the\n        // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.\n        //\n        // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not\n        // effect the current flags. This means the production the parser parses is only used as an expression. Therefore\n        // the CoverInitializedName check is conducted.\n        //\n        // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates\n        // the flags outside of the parser. This means the production the parser parses is used as a part of a potential\n        // pattern. The CoverInitializedName check is deferred.\n\n\n        Parser.prototype.isolateCoverGrammar = function (parseFunction) {\n          var previousIsBindingElement = this.context.isBindingElement;\n          var previousIsAssignmentTarget = this.context.isAssignmentTarget;\n          var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\n          this.context.isBindingElement = true;\n          this.context.isAssignmentTarget = true;\n          this.context.firstCoverInitializedNameError = null;\n          var result = parseFunction.call(this);\n\n          if (this.context.firstCoverInitializedNameError !== null) {\n            this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);\n          }\n\n          this.context.isBindingElement = previousIsBindingElement;\n          this.context.isAssignmentTarget = previousIsAssignmentTarget;\n          this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;\n          return result;\n        };\n\n        Parser.prototype.inheritCoverGrammar = function (parseFunction) {\n          var previousIsBindingElement = this.context.isBindingElement;\n          var previousIsAssignmentTarget = this.context.isAssignmentTarget;\n          var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\n          this.context.isBindingElement = true;\n          this.context.isAssignmentTarget = true;\n          this.context.firstCoverInitializedNameError = null;\n          var result = parseFunction.call(this);\n          this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;\n          this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;\n          this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;\n          return result;\n        };\n\n        Parser.prototype.consumeSemicolon = function () {\n          if (this.match(';')) {\n            this.nextToken();\n          } else if (!this.hasLineTerminator) {\n            if (this.lookahead.type !== token_1.Token.EOF && !this.match('}')) {\n              this.throwUnexpectedToken(this.lookahead);\n            }\n\n            this.lastMarker.index = this.startMarker.index;\n            this.lastMarker.lineNumber = this.startMarker.lineNumber;\n            this.lastMarker.lineStart = this.startMarker.lineStart;\n          }\n        }; // ECMA-262 12.2 Primary Expressions\n\n\n        Parser.prototype.parsePrimaryExpression = function () {\n          var node = this.createNode();\n          var expr;\n          var value, token, raw;\n\n          switch (this.lookahead.type) {\n            case token_1.Token.Identifier:\n              if (this.sourceType === 'module' && this.lookahead.value === 'await') {\n                this.tolerateUnexpectedToken(this.lookahead);\n              }\n\n              expr = this.finalize(node, new Node.Identifier(this.nextToken().value));\n              break;\n\n            case token_1.Token.NumericLiteral:\n            case token_1.Token.StringLiteral:\n              if (this.context.strict && this.lookahead.octal) {\n                this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);\n              }\n\n              this.context.isAssignmentTarget = false;\n              this.context.isBindingElement = false;\n              token = this.nextToken();\n              raw = this.getTokenRaw(token);\n              expr = this.finalize(node, new Node.Literal(token.value, raw));\n              break;\n\n            case token_1.Token.BooleanLiteral:\n              this.context.isAssignmentTarget = false;\n              this.context.isBindingElement = false;\n              token = this.nextToken();\n              token.value = token.value === 'true';\n              raw = this.getTokenRaw(token);\n              expr = this.finalize(node, new Node.Literal(token.value, raw));\n              break;\n\n            case token_1.Token.NullLiteral:\n              this.context.isAssignmentTarget = false;\n              this.context.isBindingElement = false;\n              token = this.nextToken();\n              token.value = null;\n              raw = this.getTokenRaw(token);\n              expr = this.finalize(node, new Node.Literal(token.value, raw));\n              break;\n\n            case token_1.Token.Template:\n              expr = this.parseTemplateLiteral();\n              break;\n\n            case token_1.Token.Punctuator:\n              value = this.lookahead.value;\n\n              switch (value) {\n                case '(':\n                  this.context.isBindingElement = false;\n                  expr = this.inheritCoverGrammar(this.parseGroupExpression);\n                  break;\n\n                case '[':\n                  expr = this.inheritCoverGrammar(this.parseArrayInitializer);\n                  break;\n\n                case '{':\n                  expr = this.inheritCoverGrammar(this.parseObjectInitializer);\n                  break;\n\n                case '/':\n                case '/=':\n                  this.context.isAssignmentTarget = false;\n                  this.context.isBindingElement = false;\n                  this.scanner.index = this.startMarker.index;\n                  token = this.nextRegexToken();\n                  raw = this.getTokenRaw(token);\n                  expr = this.finalize(node, new Node.RegexLiteral(token.value, raw, token.regex));\n                  break;\n\n                default:\n                  this.throwUnexpectedToken(this.nextToken());\n              }\n\n              break;\n\n            case token_1.Token.Keyword:\n              if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {\n                expr = this.parseIdentifierName();\n              } else if (!this.context.strict && this.matchKeyword('let')) {\n                expr = this.finalize(node, new Node.Identifier(this.nextToken().value));\n              } else {\n                this.context.isAssignmentTarget = false;\n                this.context.isBindingElement = false;\n\n                if (this.matchKeyword('function')) {\n                  expr = this.parseFunctionExpression();\n                } else if (this.matchKeyword('this')) {\n                  this.nextToken();\n                  expr = this.finalize(node, new Node.ThisExpression());\n                } else if (this.matchKeyword('class')) {\n                  expr = this.parseClassExpression();\n                } else {\n                  this.throwUnexpectedToken(this.nextToken());\n                }\n              }\n\n              break;\n\n            default:\n              this.throwUnexpectedToken(this.nextToken());\n          }\n\n          return expr;\n        }; // ECMA-262 12.2.5 Array Initializer\n\n\n        Parser.prototype.parseSpreadElement = function () {\n          var node = this.createNode();\n          this.expect('...');\n          var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);\n          return this.finalize(node, new Node.SpreadElement(arg));\n        };\n\n        Parser.prototype.parseArrayInitializer = function () {\n          var node = this.createNode();\n          var elements = [];\n          this.expect('[');\n\n          while (!this.match(']')) {\n            if (this.match(',')) {\n              this.nextToken();\n              elements.push(null);\n            } else if (this.match('...')) {\n              var element = this.parseSpreadElement();\n\n              if (!this.match(']')) {\n                this.context.isAssignmentTarget = false;\n                this.context.isBindingElement = false;\n                this.expect(',');\n              }\n\n              elements.push(element);\n            } else {\n              elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\n\n              if (!this.match(']')) {\n                this.expect(',');\n              }\n            }\n          }\n\n          this.expect(']');\n          return this.finalize(node, new Node.ArrayExpression(elements));\n        }; // ECMA-262 12.2.6 Object Initializer\n\n\n        Parser.prototype.parsePropertyMethod = function (params) {\n          this.context.isAssignmentTarget = false;\n          this.context.isBindingElement = false;\n          var previousStrict = this.context.strict;\n          var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);\n\n          if (this.context.strict && params.firstRestricted) {\n            this.tolerateUnexpectedToken(params.firstRestricted, params.message);\n          }\n\n          if (this.context.strict && params.stricted) {\n            this.tolerateUnexpectedToken(params.stricted, params.message);\n          }\n\n          this.context.strict = previousStrict;\n          return body;\n        };\n\n        Parser.prototype.parsePropertyMethodFunction = function () {\n          var isGenerator = false;\n          var node = this.createNode();\n          var previousAllowYield = this.context.allowYield;\n          this.context.allowYield = false;\n          var params = this.parseFormalParameters();\n          var method = this.parsePropertyMethod(params);\n          this.context.allowYield = previousAllowYield;\n          return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n        };\n\n        Parser.prototype.parseObjectPropertyKey = function () {\n          var node = this.createNode();\n          var token = this.nextToken();\n          var key = null;\n\n          switch (token.type) {\n            case token_1.Token.StringLiteral:\n            case token_1.Token.NumericLiteral:\n              if (this.context.strict && token.octal) {\n                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);\n              }\n\n              var raw = this.getTokenRaw(token);\n              key = this.finalize(node, new Node.Literal(token.value, raw));\n              break;\n\n            case token_1.Token.Identifier:\n            case token_1.Token.BooleanLiteral:\n            case token_1.Token.NullLiteral:\n            case token_1.Token.Keyword:\n              key = this.finalize(node, new Node.Identifier(token.value));\n              break;\n\n            case token_1.Token.Punctuator:\n              if (token.value === '[') {\n                key = this.isolateCoverGrammar(this.parseAssignmentExpression);\n                this.expect(']');\n              } else {\n                this.throwUnexpectedToken(token);\n              }\n\n              break;\n\n            default:\n              this.throwUnexpectedToken(token);\n          }\n\n          return key;\n        };\n\n        Parser.prototype.isPropertyKey = function (key, value) {\n          return key.type === syntax_1.Syntax.Identifier && key.name === value || key.type === syntax_1.Syntax.Literal && key.value === value;\n        };\n\n        Parser.prototype.parseObjectProperty = function (hasProto) {\n          var node = this.createNode();\n          var token = this.lookahead;\n          var kind;\n          var key;\n          var value;\n          var computed = false;\n          var method = false;\n          var shorthand = false;\n\n          if (token.type === token_1.Token.Identifier) {\n            this.nextToken();\n            key = this.finalize(node, new Node.Identifier(token.value));\n          } else if (this.match('*')) {\n            this.nextToken();\n          } else {\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n          }\n\n          var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\n\n          if (token.type === token_1.Token.Identifier && token.value === 'get' && lookaheadPropertyKey) {\n            kind = 'get';\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            this.context.allowYield = false;\n            value = this.parseGetterMethod();\n          } else if (token.type === token_1.Token.Identifier && token.value === 'set' && lookaheadPropertyKey) {\n            kind = 'set';\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            value = this.parseSetterMethod();\n          } else if (token.type === token_1.Token.Punctuator && token.value === '*' && lookaheadPropertyKey) {\n            kind = 'init';\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            value = this.parseGeneratorMethod();\n            method = true;\n          } else {\n            if (!key) {\n              this.throwUnexpectedToken(this.lookahead);\n            }\n\n            kind = 'init';\n\n            if (this.match(':')) {\n              if (!computed && this.isPropertyKey(key, '__proto__')) {\n                if (hasProto.value) {\n                  this.tolerateError(messages_1.Messages.DuplicateProtoProperty);\n                }\n\n                hasProto.value = true;\n              }\n\n              this.nextToken();\n              value = this.inheritCoverGrammar(this.parseAssignmentExpression);\n            } else if (this.match('(')) {\n              value = this.parsePropertyMethodFunction();\n              method = true;\n            } else if (token.type === token_1.Token.Identifier) {\n              var id = this.finalize(node, new Node.Identifier(token.value));\n\n              if (this.match('=')) {\n                this.context.firstCoverInitializedNameError = this.lookahead;\n                this.nextToken();\n                shorthand = true;\n                var init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n                value = this.finalize(node, new Node.AssignmentPattern(id, init));\n              } else {\n                shorthand = true;\n                value = id;\n              }\n            } else {\n              this.throwUnexpectedToken(this.nextToken());\n            }\n          }\n\n          return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));\n        };\n\n        Parser.prototype.parseObjectInitializer = function () {\n          var node = this.createNode();\n          this.expect('{');\n          var properties = [];\n          var hasProto = {\n            value: false\n          };\n\n          while (!this.match('}')) {\n            properties.push(this.parseObjectProperty(hasProto));\n\n            if (!this.match('}')) {\n              this.expectCommaSeparator();\n            }\n          }\n\n          this.expect('}');\n          return this.finalize(node, new Node.ObjectExpression(properties));\n        }; // ECMA-262 12.2.9 Template Literals\n\n\n        Parser.prototype.parseTemplateHead = function () {\n          assert_1.assert(this.lookahead.head, 'Template literal must start with a template head');\n          var node = this.createNode();\n          var token = this.nextToken();\n          var value = {\n            raw: token.value.raw,\n            cooked: token.value.cooked\n          };\n          return this.finalize(node, new Node.TemplateElement(value, token.tail));\n        };\n\n        Parser.prototype.parseTemplateElement = function () {\n          if (this.lookahead.type !== token_1.Token.Template) {\n            this.throwUnexpectedToken();\n          }\n\n          var node = this.createNode();\n          var token = this.nextToken();\n          var value = {\n            raw: token.value.raw,\n            cooked: token.value.cooked\n          };\n          return this.finalize(node, new Node.TemplateElement(value, token.tail));\n        };\n\n        Parser.prototype.parseTemplateLiteral = function () {\n          var node = this.createNode();\n          var expressions = [];\n          var quasis = [];\n          var quasi = this.parseTemplateHead();\n          quasis.push(quasi);\n\n          while (!quasi.tail) {\n            expressions.push(this.parseExpression());\n            quasi = this.parseTemplateElement();\n            quasis.push(quasi);\n          }\n\n          return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));\n        }; // ECMA-262 12.2.10 The Grouping Operator\n\n\n        Parser.prototype.reinterpretExpressionAsPattern = function (expr) {\n          switch (expr.type) {\n            case syntax_1.Syntax.Identifier:\n            case syntax_1.Syntax.MemberExpression:\n            case syntax_1.Syntax.RestElement:\n            case syntax_1.Syntax.AssignmentPattern:\n              break;\n\n            case syntax_1.Syntax.SpreadElement:\n              expr.type = syntax_1.Syntax.RestElement;\n              this.reinterpretExpressionAsPattern(expr.argument);\n              break;\n\n            case syntax_1.Syntax.ArrayExpression:\n              expr.type = syntax_1.Syntax.ArrayPattern;\n\n              for (var i = 0; i < expr.elements.length; i++) {\n                if (expr.elements[i] !== null) {\n                  this.reinterpretExpressionAsPattern(expr.elements[i]);\n                }\n              }\n\n              break;\n\n            case syntax_1.Syntax.ObjectExpression:\n              expr.type = syntax_1.Syntax.ObjectPattern;\n\n              for (var i = 0; i < expr.properties.length; i++) {\n                this.reinterpretExpressionAsPattern(expr.properties[i].value);\n              }\n\n              break;\n\n            case syntax_1.Syntax.AssignmentExpression:\n              expr.type = syntax_1.Syntax.AssignmentPattern;\n              delete expr.operator;\n              this.reinterpretExpressionAsPattern(expr.left);\n              break;\n\n            default:\n              // Allow other node type for tolerant parsing.\n              break;\n          }\n        };\n\n        Parser.prototype.parseGroupExpression = function () {\n          var expr;\n          this.expect('(');\n\n          if (this.match(')')) {\n            this.nextToken();\n\n            if (!this.match('=>')) {\n              this.expect('=>');\n            }\n\n            expr = {\n              type: ArrowParameterPlaceHolder,\n              params: []\n            };\n          } else {\n            var startToken = this.lookahead;\n            var params = [];\n\n            if (this.match('...')) {\n              expr = this.parseRestElement(params);\n              this.expect(')');\n\n              if (!this.match('=>')) {\n                this.expect('=>');\n              }\n\n              expr = {\n                type: ArrowParameterPlaceHolder,\n                params: [expr]\n              };\n            } else {\n              var arrow = false;\n              this.context.isBindingElement = true;\n              expr = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\n              if (this.match(',')) {\n                var expressions = [];\n                this.context.isAssignmentTarget = false;\n                expressions.push(expr);\n\n                while (this.startMarker.index < this.scanner.length) {\n                  if (!this.match(',')) {\n                    break;\n                  }\n\n                  this.nextToken();\n\n                  if (this.match('...')) {\n                    if (!this.context.isBindingElement) {\n                      this.throwUnexpectedToken(this.lookahead);\n                    }\n\n                    expressions.push(this.parseRestElement(params));\n                    this.expect(')');\n\n                    if (!this.match('=>')) {\n                      this.expect('=>');\n                    }\n\n                    this.context.isBindingElement = false;\n\n                    for (var i = 0; i < expressions.length; i++) {\n                      this.reinterpretExpressionAsPattern(expressions[i]);\n                    }\n\n                    arrow = true;\n                    expr = {\n                      type: ArrowParameterPlaceHolder,\n                      params: expressions\n                    };\n                  } else {\n                    expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\n                  }\n\n                  if (arrow) {\n                    break;\n                  }\n                }\n\n                if (!arrow) {\n                  expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\n                }\n              }\n\n              if (!arrow) {\n                this.expect(')');\n\n                if (this.match('=>')) {\n                  if (expr.type === syntax_1.Syntax.Identifier && expr.name === 'yield') {\n                    arrow = true;\n                    expr = {\n                      type: ArrowParameterPlaceHolder,\n                      params: [expr]\n                    };\n                  }\n\n                  if (!arrow) {\n                    if (!this.context.isBindingElement) {\n                      this.throwUnexpectedToken(this.lookahead);\n                    }\n\n                    if (expr.type === syntax_1.Syntax.SequenceExpression) {\n                      for (var i = 0; i < expr.expressions.length; i++) {\n                        this.reinterpretExpressionAsPattern(expr.expressions[i]);\n                      }\n                    } else {\n                      this.reinterpretExpressionAsPattern(expr);\n                    }\n\n                    var params_1 = expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr];\n                    expr = {\n                      type: ArrowParameterPlaceHolder,\n                      params: params_1\n                    };\n                  }\n                }\n\n                this.context.isBindingElement = false;\n              }\n            }\n          }\n\n          return expr;\n        }; // ECMA-262 12.3 Left-Hand-Side Expressions\n\n\n        Parser.prototype.parseArguments = function () {\n          this.expect('(');\n          var args = [];\n\n          if (!this.match(')')) {\n            while (true) {\n              var expr = this.match('...') ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAssignmentExpression);\n              args.push(expr);\n\n              if (this.match(')')) {\n                break;\n              }\n\n              this.expectCommaSeparator();\n            }\n          }\n\n          this.expect(')');\n          return args;\n        };\n\n        Parser.prototype.isIdentifierName = function (token) {\n          return token.type === token_1.Token.Identifier || token.type === token_1.Token.Keyword || token.type === token_1.Token.BooleanLiteral || token.type === token_1.Token.NullLiteral;\n        };\n\n        Parser.prototype.parseIdentifierName = function () {\n          var node = this.createNode();\n          var token = this.nextToken();\n\n          if (!this.isIdentifierName(token)) {\n            this.throwUnexpectedToken(token);\n          }\n\n          return this.finalize(node, new Node.Identifier(token.value));\n        };\n\n        Parser.prototype.parseNewExpression = function () {\n          var node = this.createNode();\n          var id = this.parseIdentifierName();\n          assert_1.assert(id.name === 'new', 'New expression must start with `new`');\n          var expr;\n\n          if (this.match('.')) {\n            this.nextToken();\n\n            if (this.lookahead.type === token_1.Token.Identifier && this.context.inFunctionBody && this.lookahead.value === 'target') {\n              var property = this.parseIdentifierName();\n              expr = new Node.MetaProperty(id, property);\n            } else {\n              this.throwUnexpectedToken(this.lookahead);\n            }\n          } else {\n            var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);\n            var args = this.match('(') ? this.parseArguments() : [];\n            expr = new Node.NewExpression(callee, args);\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n          }\n\n          return this.finalize(node, expr);\n        };\n\n        Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {\n          var startToken = this.lookahead;\n          var previousAllowIn = this.context.allowIn;\n          this.context.allowIn = true;\n          var expr;\n\n          if (this.matchKeyword('super') && this.context.inFunctionBody) {\n            expr = this.createNode();\n            this.nextToken();\n            expr = this.finalize(expr, new Node.Super());\n\n            if (!this.match('(') && !this.match('.') && !this.match('[')) {\n              this.throwUnexpectedToken(this.lookahead);\n            }\n          } else {\n            expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\n          }\n\n          while (true) {\n            if (this.match('.')) {\n              this.context.isBindingElement = false;\n              this.context.isAssignmentTarget = true;\n              this.expect('.');\n              var property = this.parseIdentifierName();\n              expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));\n            } else if (this.match('(')) {\n              this.context.isBindingElement = false;\n              this.context.isAssignmentTarget = false;\n              var args = this.parseArguments();\n              expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));\n            } else if (this.match('[')) {\n              this.context.isBindingElement = false;\n              this.context.isAssignmentTarget = true;\n              this.expect('[');\n              var property = this.isolateCoverGrammar(this.parseExpression);\n              this.expect(']');\n              expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));\n            } else if (this.lookahead.type === token_1.Token.Template && this.lookahead.head) {\n              var quasi = this.parseTemplateLiteral();\n              expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));\n            } else {\n              break;\n            }\n          }\n\n          this.context.allowIn = previousAllowIn;\n          return expr;\n        };\n\n        Parser.prototype.parseSuper = function () {\n          var node = this.createNode();\n          this.expectKeyword('super');\n\n          if (!this.match('[') && !this.match('.')) {\n            this.throwUnexpectedToken(this.lookahead);\n          }\n\n          return this.finalize(node, new Node.Super());\n        };\n\n        Parser.prototype.parseLeftHandSideExpression = function () {\n          assert_1.assert(this.context.allowIn, 'callee of new expression always allow in keyword.');\n          var node = this.startNode(this.lookahead);\n          var expr = this.matchKeyword('super') && this.context.inFunctionBody ? this.parseSuper() : this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\n\n          while (true) {\n            if (this.match('[')) {\n              this.context.isBindingElement = false;\n              this.context.isAssignmentTarget = true;\n              this.expect('[');\n              var property = this.isolateCoverGrammar(this.parseExpression);\n              this.expect(']');\n              expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));\n            } else if (this.match('.')) {\n              this.context.isBindingElement = false;\n              this.context.isAssignmentTarget = true;\n              this.expect('.');\n              var property = this.parseIdentifierName();\n              expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));\n            } else if (this.lookahead.type === token_1.Token.Template && this.lookahead.head) {\n              var quasi = this.parseTemplateLiteral();\n              expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));\n            } else {\n              break;\n            }\n          }\n\n          return expr;\n        }; // ECMA-262 12.4 Update Expressions\n\n\n        Parser.prototype.parseUpdateExpression = function () {\n          var expr;\n          var startToken = this.lookahead;\n\n          if (this.match('++') || this.match('--')) {\n            var node = this.startNode(startToken);\n            var token = this.nextToken();\n            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\n            if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\n              this.tolerateError(messages_1.Messages.StrictLHSPrefix);\n            }\n\n            if (!this.context.isAssignmentTarget) {\n              this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n            }\n\n            var prefix = true;\n            expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n          } else {\n            expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n\n            if (!this.hasLineTerminator && this.lookahead.type === token_1.Token.Punctuator) {\n              if (this.match('++') || this.match('--')) {\n                if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\n                  this.tolerateError(messages_1.Messages.StrictLHSPostfix);\n                }\n\n                if (!this.context.isAssignmentTarget) {\n                  this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n                }\n\n                this.context.isAssignmentTarget = false;\n                this.context.isBindingElement = false;\n                var operator = this.nextToken().value;\n                var prefix = false;\n                expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));\n              }\n            }\n          }\n\n          return expr;\n        }; // ECMA-262 12.5 Unary Operators\n\n\n        Parser.prototype.parseUnaryExpression = function () {\n          var expr;\n\n          if (this.match('+') || this.match('-') || this.match('~') || this.match('!') || this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {\n            var node = this.startNode(this.lookahead);\n            var token = this.nextToken();\n            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n            expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));\n\n            if (this.context.strict && expr.operator === 'delete' && expr.argument.type === syntax_1.Syntax.Identifier) {\n              this.tolerateError(messages_1.Messages.StrictDelete);\n            }\n\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n          } else {\n            expr = this.parseUpdateExpression();\n          }\n\n          return expr;\n        };\n\n        Parser.prototype.parseExponentiationExpression = function () {\n          var startToken = this.lookahead;\n          var expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\n          if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match('**')) {\n            this.nextToken();\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n            var left = expr;\n            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n            expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));\n          }\n\n          return expr;\n        }; // ECMA-262 12.6 Exponentiation Operators\n        // ECMA-262 12.7 Multiplicative Operators\n        // ECMA-262 12.8 Additive Operators\n        // ECMA-262 12.9 Bitwise Shift Operators\n        // ECMA-262 12.10 Relational Operators\n        // ECMA-262 12.11 Equality Operators\n        // ECMA-262 12.12 Binary Bitwise Operators\n        // ECMA-262 12.13 Binary Logical Operators\n\n\n        Parser.prototype.binaryPrecedence = function (token) {\n          var op = token.value;\n          var precedence;\n\n          if (token.type === token_1.Token.Punctuator) {\n            precedence = this.operatorPrecedence[op] || 0;\n          } else if (token.type === token_1.Token.Keyword) {\n            precedence = op === 'instanceof' || this.context.allowIn && op === 'in' ? 7 : 0;\n          } else {\n            precedence = 0;\n          }\n\n          return precedence;\n        };\n\n        Parser.prototype.parseBinaryExpression = function () {\n          var startToken = this.lookahead;\n          var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);\n          var token = this.lookahead;\n          var prec = this.binaryPrecedence(token);\n\n          if (prec > 0) {\n            this.nextToken();\n            token.prec = prec;\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n            var markers = [startToken, this.lookahead];\n            var left = expr;\n            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n            var stack = [left, token, right];\n\n            while (true) {\n              prec = this.binaryPrecedence(this.lookahead);\n\n              if (prec <= 0) {\n                break;\n              } // Reduce: make a binary expression from the three topmost entries.\n\n\n              while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {\n                right = stack.pop();\n                var operator = stack.pop().value;\n                left = stack.pop();\n                markers.pop();\n                var node = this.startNode(markers[markers.length - 1]);\n                stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));\n              } // Shift.\n\n\n              token = this.nextToken();\n              token.prec = prec;\n              stack.push(token);\n              markers.push(this.lookahead);\n              stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));\n            } // Final reduce to clean-up the stack.\n\n\n            var i = stack.length - 1;\n            expr = stack[i];\n            markers.pop();\n\n            while (i > 1) {\n              var node = this.startNode(markers.pop());\n              expr = this.finalize(node, new Node.BinaryExpression(stack[i - 1].value, stack[i - 2], expr));\n              i -= 2;\n            }\n          }\n\n          return expr;\n        }; // ECMA-262 12.14 Conditional Operator\n\n\n        Parser.prototype.parseConditionalExpression = function () {\n          var startToken = this.lookahead;\n          var expr = this.inheritCoverGrammar(this.parseBinaryExpression);\n\n          if (this.match('?')) {\n            this.nextToken();\n            var previousAllowIn = this.context.allowIn;\n            this.context.allowIn = true;\n            var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);\n            this.context.allowIn = previousAllowIn;\n            this.expect(':');\n            var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);\n            expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n          }\n\n          return expr;\n        }; // ECMA-262 12.15 Assignment Operators\n\n\n        Parser.prototype.checkPatternParam = function (options, param) {\n          switch (param.type) {\n            case syntax_1.Syntax.Identifier:\n              this.validateParam(options, param, param.name);\n              break;\n\n            case syntax_1.Syntax.RestElement:\n              this.checkPatternParam(options, param.argument);\n              break;\n\n            case syntax_1.Syntax.AssignmentPattern:\n              this.checkPatternParam(options, param.left);\n              break;\n\n            case syntax_1.Syntax.ArrayPattern:\n              for (var i = 0; i < param.elements.length; i++) {\n                if (param.elements[i] !== null) {\n                  this.checkPatternParam(options, param.elements[i]);\n                }\n              }\n\n              break;\n\n            case syntax_1.Syntax.YieldExpression:\n              break;\n\n            default:\n              assert_1.assert(param.type === syntax_1.Syntax.ObjectPattern, 'Invalid type');\n\n              for (var i = 0; i < param.properties.length; i++) {\n                this.checkPatternParam(options, param.properties[i].value);\n              }\n\n              break;\n          }\n        };\n\n        Parser.prototype.reinterpretAsCoverFormalsList = function (expr) {\n          var params = [expr];\n          var options;\n\n          switch (expr.type) {\n            case syntax_1.Syntax.Identifier:\n              break;\n\n            case ArrowParameterPlaceHolder:\n              params = expr.params;\n              break;\n\n            default:\n              return null;\n          }\n\n          options = {\n            paramSet: {}\n          };\n\n          for (var i = 0; i < params.length; ++i) {\n            var param = params[i];\n\n            if (param.type === syntax_1.Syntax.AssignmentPattern) {\n              if (param.right.type === syntax_1.Syntax.YieldExpression) {\n                if (param.right.argument) {\n                  this.throwUnexpectedToken(this.lookahead);\n                }\n\n                param.right.type = syntax_1.Syntax.Identifier;\n                param.right.name = 'yield';\n                delete param.right.argument;\n                delete param.right.delegate;\n              }\n            }\n\n            this.checkPatternParam(options, param);\n            params[i] = param;\n          }\n\n          if (this.context.strict || !this.context.allowYield) {\n            for (var i = 0; i < params.length; ++i) {\n              var param = params[i];\n\n              if (param.type === syntax_1.Syntax.YieldExpression) {\n                this.throwUnexpectedToken(this.lookahead);\n              }\n            }\n          }\n\n          if (options.message === messages_1.Messages.StrictParamDupe) {\n            var token = this.context.strict ? options.stricted : options.firstRestricted;\n            this.throwUnexpectedToken(token, options.message);\n          }\n\n          return {\n            params: params,\n            stricted: options.stricted,\n            firstRestricted: options.firstRestricted,\n            message: options.message\n          };\n        };\n\n        Parser.prototype.parseAssignmentExpression = function () {\n          var expr;\n\n          if (!this.context.allowYield && this.matchKeyword('yield')) {\n            expr = this.parseYieldExpression();\n          } else {\n            var startToken = this.lookahead;\n            var token = startToken;\n            expr = this.parseConditionalExpression();\n\n            if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {\n              // ECMA-262 14.2 Arrow Function Definitions\n              this.context.isAssignmentTarget = false;\n              this.context.isBindingElement = false;\n              var list = this.reinterpretAsCoverFormalsList(expr);\n\n              if (list) {\n                if (this.hasLineTerminator) {\n                  this.tolerateUnexpectedToken(this.lookahead);\n                }\n\n                this.context.firstCoverInitializedNameError = null;\n                var previousStrict = this.context.strict;\n                var previousAllowYield = this.context.allowYield;\n                this.context.allowYield = true;\n                var node = this.startNode(startToken);\n                this.expect('=>');\n                var body = this.match('{') ? this.parseFunctionSourceElements() : this.isolateCoverGrammar(this.parseAssignmentExpression);\n                var expression = body.type !== syntax_1.Syntax.BlockStatement;\n\n                if (this.context.strict && list.firstRestricted) {\n                  this.throwUnexpectedToken(list.firstRestricted, list.message);\n                }\n\n                if (this.context.strict && list.stricted) {\n                  this.tolerateUnexpectedToken(list.stricted, list.message);\n                }\n\n                expr = this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));\n                this.context.strict = previousStrict;\n                this.context.allowYield = previousAllowYield;\n              }\n            } else {\n              if (this.matchAssign()) {\n                if (!this.context.isAssignmentTarget) {\n                  this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n                }\n\n                if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {\n                  var id = expr;\n\n                  if (this.scanner.isRestrictedWord(id.name)) {\n                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);\n                  }\n\n                  if (this.scanner.isStrictModeReservedWord(id.name)) {\n                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n                  }\n                }\n\n                if (!this.match('=')) {\n                  this.context.isAssignmentTarget = false;\n                  this.context.isBindingElement = false;\n                } else {\n                  this.reinterpretExpressionAsPattern(expr);\n                }\n\n                token = this.nextToken();\n                var right = this.isolateCoverGrammar(this.parseAssignmentExpression);\n                expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(token.value, expr, right));\n                this.context.firstCoverInitializedNameError = null;\n              }\n            }\n          }\n\n          return expr;\n        }; // ECMA-262 12.16 Comma Operator\n\n\n        Parser.prototype.parseExpression = function () {\n          var startToken = this.lookahead;\n          var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\n          if (this.match(',')) {\n            var expressions = [];\n            expressions.push(expr);\n\n            while (this.startMarker.index < this.scanner.length) {\n              if (!this.match(',')) {\n                break;\n              }\n\n              this.nextToken();\n              expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\n            }\n\n            expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\n          }\n\n          return expr;\n        }; // ECMA-262 13.2 Block\n\n\n        Parser.prototype.parseStatementListItem = function () {\n          var statement = null;\n          this.context.isAssignmentTarget = true;\n          this.context.isBindingElement = true;\n\n          if (this.lookahead.type === token_1.Token.Keyword) {\n            switch (this.lookahead.value) {\n              case 'export':\n                if (this.sourceType !== 'module') {\n                  this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);\n                }\n\n                statement = this.parseExportDeclaration();\n                break;\n\n              case 'import':\n                if (this.sourceType !== 'module') {\n                  this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);\n                }\n\n                statement = this.parseImportDeclaration();\n                break;\n\n              case 'const':\n                statement = this.parseLexicalDeclaration({\n                  inFor: false\n                });\n                break;\n\n              case 'function':\n                statement = this.parseFunctionDeclaration();\n                break;\n\n              case 'class':\n                statement = this.parseClassDeclaration();\n                break;\n\n              case 'let':\n                statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({\n                  inFor: false\n                }) : this.parseStatement();\n                break;\n\n              default:\n                statement = this.parseStatement();\n                break;\n            }\n          } else {\n            statement = this.parseStatement();\n          }\n\n          return statement;\n        };\n\n        Parser.prototype.parseBlock = function () {\n          var node = this.createNode();\n          this.expect('{');\n          var block = [];\n\n          while (true) {\n            if (this.match('}')) {\n              break;\n            }\n\n            block.push(this.parseStatementListItem());\n          }\n\n          this.expect('}');\n          return this.finalize(node, new Node.BlockStatement(block));\n        }; // ECMA-262 13.3.1 Let and Const Declarations\n\n\n        Parser.prototype.parseLexicalBinding = function (kind, options) {\n          var node = this.createNode();\n          var params = [];\n          var id = this.parsePattern(params, kind); // ECMA-262 12.2.1\n\n          if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {\n            if (this.scanner.isRestrictedWord(id.name)) {\n              this.tolerateError(messages_1.Messages.StrictVarName);\n            }\n          }\n\n          var init = null;\n\n          if (kind === 'const') {\n            if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {\n              this.expect('=');\n              init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n            }\n          } else if (!options.inFor && id.type !== syntax_1.Syntax.Identifier || this.match('=')) {\n            this.expect('=');\n            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n          }\n\n          return this.finalize(node, new Node.VariableDeclarator(id, init));\n        };\n\n        Parser.prototype.parseBindingList = function (kind, options) {\n          var list = [this.parseLexicalBinding(kind, options)];\n\n          while (this.match(',')) {\n            this.nextToken();\n            list.push(this.parseLexicalBinding(kind, options));\n          }\n\n          return list;\n        };\n\n        Parser.prototype.isLexicalDeclaration = function () {\n          var previousIndex = this.scanner.index;\n          var previousLineNumber = this.scanner.lineNumber;\n          var previousLineStart = this.scanner.lineStart;\n          this.collectComments();\n          var next = this.scanner.lex();\n          this.scanner.index = previousIndex;\n          this.scanner.lineNumber = previousLineNumber;\n          this.scanner.lineStart = previousLineStart;\n          return next.type === token_1.Token.Identifier || next.type === token_1.Token.Punctuator && next.value === '[' || next.type === token_1.Token.Punctuator && next.value === '{' || next.type === token_1.Token.Keyword && next.value === 'let' || next.type === token_1.Token.Keyword && next.value === 'yield';\n        };\n\n        Parser.prototype.parseLexicalDeclaration = function (options) {\n          var node = this.createNode();\n          var kind = this.nextToken().value;\n          assert_1.assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');\n          var declarations = this.parseBindingList(kind, options);\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.VariableDeclaration(declarations, kind));\n        }; // ECMA-262 13.3.3 Destructuring Binding Patterns\n\n\n        Parser.prototype.parseBindingRestElement = function (params, kind) {\n          var node = this.createNode();\n          this.expect('...');\n          var arg = this.parsePattern(params, kind);\n          return this.finalize(node, new Node.RestElement(arg));\n        };\n\n        Parser.prototype.parseArrayPattern = function (params, kind) {\n          var node = this.createNode();\n          this.expect('[');\n          var elements = [];\n\n          while (!this.match(']')) {\n            if (this.match(',')) {\n              this.nextToken();\n              elements.push(null);\n            } else {\n              if (this.match('...')) {\n                elements.push(this.parseBindingRestElement(params, kind));\n                break;\n              } else {\n                elements.push(this.parsePatternWithDefault(params, kind));\n              }\n\n              if (!this.match(']')) {\n                this.expect(',');\n              }\n            }\n          }\n\n          this.expect(']');\n          return this.finalize(node, new Node.ArrayPattern(elements));\n        };\n\n        Parser.prototype.parsePropertyPattern = function (params, kind) {\n          var node = this.createNode();\n          var computed = false;\n          var shorthand = false;\n          var method = false;\n          var key;\n          var value;\n\n          if (this.lookahead.type === token_1.Token.Identifier) {\n            var keyToken = this.lookahead;\n            key = this.parseVariableIdentifier();\n            var init = this.finalize(node, new Node.Identifier(keyToken.value));\n\n            if (this.match('=')) {\n              params.push(keyToken);\n              shorthand = true;\n              this.nextToken();\n              var expr = this.parseAssignmentExpression();\n              value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));\n            } else if (!this.match(':')) {\n              params.push(keyToken);\n              shorthand = true;\n              value = init;\n            } else {\n              this.expect(':');\n              value = this.parsePatternWithDefault(params, kind);\n            }\n          } else {\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            this.expect(':');\n            value = this.parsePatternWithDefault(params, kind);\n          }\n\n          return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));\n        };\n\n        Parser.prototype.parseObjectPattern = function (params, kind) {\n          var node = this.createNode();\n          var properties = [];\n          this.expect('{');\n\n          while (!this.match('}')) {\n            properties.push(this.parsePropertyPattern(params, kind));\n\n            if (!this.match('}')) {\n              this.expect(',');\n            }\n          }\n\n          this.expect('}');\n          return this.finalize(node, new Node.ObjectPattern(properties));\n        };\n\n        Parser.prototype.parsePattern = function (params, kind) {\n          var pattern;\n\n          if (this.match('[')) {\n            pattern = this.parseArrayPattern(params, kind);\n          } else if (this.match('{')) {\n            pattern = this.parseObjectPattern(params, kind);\n          } else {\n            if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {\n              this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.UnexpectedToken);\n            }\n\n            params.push(this.lookahead);\n            pattern = this.parseVariableIdentifier(kind);\n          }\n\n          return pattern;\n        };\n\n        Parser.prototype.parsePatternWithDefault = function (params, kind) {\n          var startToken = this.lookahead;\n          var pattern = this.parsePattern(params, kind);\n\n          if (this.match('=')) {\n            this.nextToken();\n            var previousAllowYield = this.context.allowYield;\n            this.context.allowYield = true;\n            var right = this.isolateCoverGrammar(this.parseAssignmentExpression);\n            this.context.allowYield = previousAllowYield;\n            pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));\n          }\n\n          return pattern;\n        }; // ECMA-262 13.3.2 Variable Statement\n\n\n        Parser.prototype.parseVariableIdentifier = function (kind) {\n          var node = this.createNode();\n          var token = this.nextToken();\n\n          if (token.type === token_1.Token.Keyword && token.value === 'yield') {\n            if (this.context.strict) {\n              this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n            }\n\n            if (!this.context.allowYield) {\n              this.throwUnexpectedToken(token);\n            }\n          } else if (token.type !== token_1.Token.Identifier) {\n            if (this.context.strict && token.type === token_1.Token.Keyword && this.scanner.isStrictModeReservedWord(token.value)) {\n              this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n            } else {\n              if (this.context.strict || token.value !== 'let' || kind !== 'var') {\n                this.throwUnexpectedToken(token);\n              }\n            }\n          } else if (this.sourceType === 'module' && token.type === token_1.Token.Identifier && token.value === 'await') {\n            this.tolerateUnexpectedToken(token);\n          }\n\n          return this.finalize(node, new Node.Identifier(token.value));\n        };\n\n        Parser.prototype.parseVariableDeclaration = function (options) {\n          var node = this.createNode();\n          var params = [];\n          var id = this.parsePattern(params, 'var'); // ECMA-262 12.2.1\n\n          if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {\n            if (this.scanner.isRestrictedWord(id.name)) {\n              this.tolerateError(messages_1.Messages.StrictVarName);\n            }\n          }\n\n          var init = null;\n\n          if (this.match('=')) {\n            this.nextToken();\n            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n          } else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {\n            this.expect('=');\n          }\n\n          return this.finalize(node, new Node.VariableDeclarator(id, init));\n        };\n\n        Parser.prototype.parseVariableDeclarationList = function (options) {\n          var opt = {\n            inFor: options.inFor\n          };\n          var list = [];\n          list.push(this.parseVariableDeclaration(opt));\n\n          while (this.match(',')) {\n            this.nextToken();\n            list.push(this.parseVariableDeclaration(opt));\n          }\n\n          return list;\n        };\n\n        Parser.prototype.parseVariableStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('var');\n          var declarations = this.parseVariableDeclarationList({\n            inFor: false\n          });\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));\n        }; // ECMA-262 13.4 Empty Statement\n\n\n        Parser.prototype.parseEmptyStatement = function () {\n          var node = this.createNode();\n          this.expect(';');\n          return this.finalize(node, new Node.EmptyStatement());\n        }; // ECMA-262 13.5 Expression Statement\n\n\n        Parser.prototype.parseExpressionStatement = function () {\n          var node = this.createNode();\n          var expr = this.parseExpression();\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.ExpressionStatement(expr));\n        }; // ECMA-262 13.6 If statement\n\n\n        Parser.prototype.parseIfStatement = function () {\n          var node = this.createNode();\n          var consequent;\n          var alternate = null;\n          this.expectKeyword('if');\n          this.expect('(');\n          var test = this.parseExpression();\n\n          if (!this.match(')') && this.config.tolerant) {\n            this.tolerateUnexpectedToken(this.nextToken());\n            consequent = this.finalize(this.createNode(), new Node.EmptyStatement());\n          } else {\n            this.expect(')');\n            consequent = this.parseStatement();\n\n            if (this.matchKeyword('else')) {\n              this.nextToken();\n              alternate = this.parseStatement();\n            }\n          }\n\n          return this.finalize(node, new Node.IfStatement(test, consequent, alternate));\n        }; // ECMA-262 13.7.2 The do-while Statement\n\n\n        Parser.prototype.parseDoWhileStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('do');\n          var previousInIteration = this.context.inIteration;\n          this.context.inIteration = true;\n          var body = this.parseStatement();\n          this.context.inIteration = previousInIteration;\n          this.expectKeyword('while');\n          this.expect('(');\n          var test = this.parseExpression();\n          this.expect(')');\n\n          if (this.match(';')) {\n            this.nextToken();\n          }\n\n          return this.finalize(node, new Node.DoWhileStatement(body, test));\n        }; // ECMA-262 13.7.3 The while Statement\n\n\n        Parser.prototype.parseWhileStatement = function () {\n          var node = this.createNode();\n          var body;\n          this.expectKeyword('while');\n          this.expect('(');\n          var test = this.parseExpression();\n\n          if (!this.match(')') && this.config.tolerant) {\n            this.tolerateUnexpectedToken(this.nextToken());\n            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n          } else {\n            this.expect(')');\n            var previousInIteration = this.context.inIteration;\n            this.context.inIteration = true;\n            body = this.parseStatement();\n            this.context.inIteration = previousInIteration;\n          }\n\n          return this.finalize(node, new Node.WhileStatement(test, body));\n        }; // ECMA-262 13.7.4 The for Statement\n        // ECMA-262 13.7.5 The for-in and for-of Statements\n\n\n        Parser.prototype.parseForStatement = function () {\n          var init = null;\n          var test = null;\n          var update = null;\n          var forIn = true;\n          var left, right;\n          var node = this.createNode();\n          this.expectKeyword('for');\n          this.expect('(');\n\n          if (this.match(';')) {\n            this.nextToken();\n          } else {\n            if (this.matchKeyword('var')) {\n              init = this.createNode();\n              this.nextToken();\n              var previousAllowIn = this.context.allowIn;\n              this.context.allowIn = false;\n              var declarations = this.parseVariableDeclarationList({\n                inFor: true\n              });\n              this.context.allowIn = previousAllowIn;\n\n              if (declarations.length === 1 && this.matchKeyword('in')) {\n                var decl = declarations[0];\n\n                if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {\n                  this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, 'for-in');\n                }\n\n                init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n                this.nextToken();\n                left = init;\n                right = this.parseExpression();\n                init = null;\n              } else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\n                init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n                this.nextToken();\n                left = init;\n                right = this.parseAssignmentExpression();\n                init = null;\n                forIn = false;\n              } else {\n                init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n                this.expect(';');\n              }\n            } else if (this.matchKeyword('const') || this.matchKeyword('let')) {\n              init = this.createNode();\n              var kind = this.nextToken().value;\n\n              if (!this.context.strict && this.lookahead.value === 'in') {\n                init = this.finalize(init, new Node.Identifier(kind));\n                this.nextToken();\n                left = init;\n                right = this.parseExpression();\n                init = null;\n              } else {\n                var previousAllowIn = this.context.allowIn;\n                this.context.allowIn = false;\n                var declarations = this.parseBindingList(kind, {\n                  inFor: true\n                });\n                this.context.allowIn = previousAllowIn;\n\n                if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {\n                  init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n                  this.nextToken();\n                  left = init;\n                  right = this.parseExpression();\n                  init = null;\n                } else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\n                  init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n                  this.nextToken();\n                  left = init;\n                  right = this.parseAssignmentExpression();\n                  init = null;\n                  forIn = false;\n                } else {\n                  this.consumeSemicolon();\n                  init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n                }\n              }\n            } else {\n              var initStartToken = this.lookahead;\n              var previousAllowIn = this.context.allowIn;\n              this.context.allowIn = false;\n              init = this.inheritCoverGrammar(this.parseAssignmentExpression);\n              this.context.allowIn = previousAllowIn;\n\n              if (this.matchKeyword('in')) {\n                if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {\n                  this.tolerateError(messages_1.Messages.InvalidLHSInForIn);\n                }\n\n                this.nextToken();\n                this.reinterpretExpressionAsPattern(init);\n                left = init;\n                right = this.parseExpression();\n                init = null;\n              } else if (this.matchContextualKeyword('of')) {\n                if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {\n                  this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);\n                }\n\n                this.nextToken();\n                this.reinterpretExpressionAsPattern(init);\n                left = init;\n                right = this.parseAssignmentExpression();\n                init = null;\n                forIn = false;\n              } else {\n                if (this.match(',')) {\n                  var initSeq = [init];\n\n                  while (this.match(',')) {\n                    this.nextToken();\n                    initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\n                  }\n\n                  init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));\n                }\n\n                this.expect(';');\n              }\n            }\n          }\n\n          if (typeof left === 'undefined') {\n            if (!this.match(';')) {\n              test = this.parseExpression();\n            }\n\n            this.expect(';');\n\n            if (!this.match(')')) {\n              update = this.parseExpression();\n            }\n          }\n\n          var body;\n\n          if (!this.match(')') && this.config.tolerant) {\n            this.tolerateUnexpectedToken(this.nextToken());\n            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n          } else {\n            this.expect(')');\n            var previousInIteration = this.context.inIteration;\n            this.context.inIteration = true;\n            body = this.isolateCoverGrammar(this.parseStatement);\n            this.context.inIteration = previousInIteration;\n          }\n\n          return typeof left === 'undefined' ? this.finalize(node, new Node.ForStatement(init, test, update, body)) : forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) : this.finalize(node, new Node.ForOfStatement(left, right, body));\n        }; // ECMA-262 13.8 The continue statement\n\n\n        Parser.prototype.parseContinueStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('continue');\n          var label = null;\n\n          if (this.lookahead.type === token_1.Token.Identifier && !this.hasLineTerminator) {\n            label = this.parseVariableIdentifier();\n            var key = '$' + label.name;\n\n            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n              this.throwError(messages_1.Messages.UnknownLabel, label.name);\n            }\n          }\n\n          this.consumeSemicolon();\n\n          if (label === null && !this.context.inIteration) {\n            this.throwError(messages_1.Messages.IllegalContinue);\n          }\n\n          return this.finalize(node, new Node.ContinueStatement(label));\n        }; // ECMA-262 13.9 The break statement\n\n\n        Parser.prototype.parseBreakStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('break');\n          var label = null;\n\n          if (this.lookahead.type === token_1.Token.Identifier && !this.hasLineTerminator) {\n            label = this.parseVariableIdentifier();\n            var key = '$' + label.name;\n\n            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n              this.throwError(messages_1.Messages.UnknownLabel, label.name);\n            }\n          }\n\n          this.consumeSemicolon();\n\n          if (label === null && !this.context.inIteration && !this.context.inSwitch) {\n            this.throwError(messages_1.Messages.IllegalBreak);\n          }\n\n          return this.finalize(node, new Node.BreakStatement(label));\n        }; // ECMA-262 13.10 The return statement\n\n\n        Parser.prototype.parseReturnStatement = function () {\n          if (!this.context.inFunctionBody) {\n            this.tolerateError(messages_1.Messages.IllegalReturn);\n          }\n\n          var node = this.createNode();\n          this.expectKeyword('return');\n          var hasArgument = !this.match(';') && !this.match('}') && !this.hasLineTerminator && this.lookahead.type !== token_1.Token.EOF;\n          var argument = hasArgument ? this.parseExpression() : null;\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.ReturnStatement(argument));\n        }; // ECMA-262 13.11 The with statement\n\n\n        Parser.prototype.parseWithStatement = function () {\n          if (this.context.strict) {\n            this.tolerateError(messages_1.Messages.StrictModeWith);\n          }\n\n          var node = this.createNode();\n          this.expectKeyword('with');\n          this.expect('(');\n          var object = this.parseExpression();\n          this.expect(')');\n          var body = this.parseStatement();\n          return this.finalize(node, new Node.WithStatement(object, body));\n        }; // ECMA-262 13.12 The switch statement\n\n\n        Parser.prototype.parseSwitchCase = function () {\n          var node = this.createNode();\n          var test;\n\n          if (this.matchKeyword('default')) {\n            this.nextToken();\n            test = null;\n          } else {\n            this.expectKeyword('case');\n            test = this.parseExpression();\n          }\n\n          this.expect(':');\n          var consequent = [];\n\n          while (true) {\n            if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {\n              break;\n            }\n\n            consequent.push(this.parseStatementListItem());\n          }\n\n          return this.finalize(node, new Node.SwitchCase(test, consequent));\n        };\n\n        Parser.prototype.parseSwitchStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('switch');\n          this.expect('(');\n          var discriminant = this.parseExpression();\n          this.expect(')');\n          var previousInSwitch = this.context.inSwitch;\n          this.context.inSwitch = true;\n          var cases = [];\n          var defaultFound = false;\n          this.expect('{');\n\n          while (true) {\n            if (this.match('}')) {\n              break;\n            }\n\n            var clause = this.parseSwitchCase();\n\n            if (clause.test === null) {\n              if (defaultFound) {\n                this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);\n              }\n\n              defaultFound = true;\n            }\n\n            cases.push(clause);\n          }\n\n          this.expect('}');\n          this.context.inSwitch = previousInSwitch;\n          return this.finalize(node, new Node.SwitchStatement(discriminant, cases));\n        }; // ECMA-262 13.13 Labelled Statements\n\n\n        Parser.prototype.parseLabelledStatement = function () {\n          var node = this.createNode();\n          var expr = this.parseExpression();\n          var statement;\n\n          if (expr.type === syntax_1.Syntax.Identifier && this.match(':')) {\n            this.nextToken();\n            var id = expr;\n            var key = '$' + id.name;\n\n            if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n              this.throwError(messages_1.Messages.Redeclaration, 'Label', id.name);\n            }\n\n            this.context.labelSet[key] = true;\n            var labeledBody = this.parseStatement();\n            delete this.context.labelSet[key];\n            statement = new Node.LabeledStatement(id, labeledBody);\n          } else {\n            this.consumeSemicolon();\n            statement = new Node.ExpressionStatement(expr);\n          }\n\n          return this.finalize(node, statement);\n        }; // ECMA-262 13.14 The throw statement\n\n\n        Parser.prototype.parseThrowStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('throw');\n\n          if (this.hasLineTerminator) {\n            this.throwError(messages_1.Messages.NewlineAfterThrow);\n          }\n\n          var argument = this.parseExpression();\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.ThrowStatement(argument));\n        }; // ECMA-262 13.15 The try statement\n\n\n        Parser.prototype.parseCatchClause = function () {\n          var node = this.createNode();\n          this.expectKeyword('catch');\n          this.expect('(');\n\n          if (this.match(')')) {\n            this.throwUnexpectedToken(this.lookahead);\n          }\n\n          var params = [];\n          var param = this.parsePattern(params);\n          var paramMap = {};\n\n          for (var i = 0; i < params.length; i++) {\n            var key = '$' + params[i].value;\n\n            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {\n              this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);\n            }\n\n            paramMap[key] = true;\n          }\n\n          if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {\n            if (this.scanner.isRestrictedWord(param.name)) {\n              this.tolerateError(messages_1.Messages.StrictCatchVariable);\n            }\n          }\n\n          this.expect(')');\n          var body = this.parseBlock();\n          return this.finalize(node, new Node.CatchClause(param, body));\n        };\n\n        Parser.prototype.parseFinallyClause = function () {\n          this.expectKeyword('finally');\n          return this.parseBlock();\n        };\n\n        Parser.prototype.parseTryStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('try');\n          var block = this.parseBlock();\n          var handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;\n          var finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;\n\n          if (!handler && !finalizer) {\n            this.throwError(messages_1.Messages.NoCatchOrFinally);\n          }\n\n          return this.finalize(node, new Node.TryStatement(block, handler, finalizer));\n        }; // ECMA-262 13.16 The debugger statement\n\n\n        Parser.prototype.parseDebuggerStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('debugger');\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.DebuggerStatement());\n        }; // ECMA-262 13 Statements\n\n\n        Parser.prototype.parseStatement = function () {\n          var statement = null;\n\n          switch (this.lookahead.type) {\n            case token_1.Token.BooleanLiteral:\n            case token_1.Token.NullLiteral:\n            case token_1.Token.NumericLiteral:\n            case token_1.Token.StringLiteral:\n            case token_1.Token.Template:\n            case token_1.Token.RegularExpression:\n              statement = this.parseExpressionStatement();\n              break;\n\n            case token_1.Token.Punctuator:\n              var value = this.lookahead.value;\n\n              if (value === '{') {\n                statement = this.parseBlock();\n              } else if (value === '(') {\n                statement = this.parseExpressionStatement();\n              } else if (value === ';') {\n                statement = this.parseEmptyStatement();\n              } else {\n                statement = this.parseExpressionStatement();\n              }\n\n              break;\n\n            case token_1.Token.Identifier:\n              statement = this.parseLabelledStatement();\n              break;\n\n            case token_1.Token.Keyword:\n              switch (this.lookahead.value) {\n                case 'break':\n                  statement = this.parseBreakStatement();\n                  break;\n\n                case 'continue':\n                  statement = this.parseContinueStatement();\n                  break;\n\n                case 'debugger':\n                  statement = this.parseDebuggerStatement();\n                  break;\n\n                case 'do':\n                  statement = this.parseDoWhileStatement();\n                  break;\n\n                case 'for':\n                  statement = this.parseForStatement();\n                  break;\n\n                case 'function':\n                  statement = this.parseFunctionDeclaration();\n                  break;\n\n                case 'if':\n                  statement = this.parseIfStatement();\n                  break;\n\n                case 'return':\n                  statement = this.parseReturnStatement();\n                  break;\n\n                case 'switch':\n                  statement = this.parseSwitchStatement();\n                  break;\n\n                case 'throw':\n                  statement = this.parseThrowStatement();\n                  break;\n\n                case 'try':\n                  statement = this.parseTryStatement();\n                  break;\n\n                case 'var':\n                  statement = this.parseVariableStatement();\n                  break;\n\n                case 'while':\n                  statement = this.parseWhileStatement();\n                  break;\n\n                case 'with':\n                  statement = this.parseWithStatement();\n                  break;\n\n                default:\n                  statement = this.parseExpressionStatement();\n                  break;\n              }\n\n              break;\n\n            default:\n              this.throwUnexpectedToken(this.lookahead);\n          }\n\n          return statement;\n        }; // ECMA-262 14.1 Function Definition\n\n\n        Parser.prototype.parseFunctionSourceElements = function () {\n          var node = this.createNode();\n          this.expect('{');\n          var body = this.parseDirectivePrologues();\n          var previousLabelSet = this.context.labelSet;\n          var previousInIteration = this.context.inIteration;\n          var previousInSwitch = this.context.inSwitch;\n          var previousInFunctionBody = this.context.inFunctionBody;\n          this.context.labelSet = {};\n          this.context.inIteration = false;\n          this.context.inSwitch = false;\n          this.context.inFunctionBody = true;\n\n          while (this.startMarker.index < this.scanner.length) {\n            if (this.match('}')) {\n              break;\n            }\n\n            body.push(this.parseStatementListItem());\n          }\n\n          this.expect('}');\n          this.context.labelSet = previousLabelSet;\n          this.context.inIteration = previousInIteration;\n          this.context.inSwitch = previousInSwitch;\n          this.context.inFunctionBody = previousInFunctionBody;\n          return this.finalize(node, new Node.BlockStatement(body));\n        };\n\n        Parser.prototype.validateParam = function (options, param, name) {\n          var key = '$' + name;\n\n          if (this.context.strict) {\n            if (this.scanner.isRestrictedWord(name)) {\n              options.stricted = param;\n              options.message = messages_1.Messages.StrictParamName;\n            }\n\n            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\n              options.stricted = param;\n              options.message = messages_1.Messages.StrictParamDupe;\n            }\n          } else if (!options.firstRestricted) {\n            if (this.scanner.isRestrictedWord(name)) {\n              options.firstRestricted = param;\n              options.message = messages_1.Messages.StrictParamName;\n            } else if (this.scanner.isStrictModeReservedWord(name)) {\n              options.firstRestricted = param;\n              options.message = messages_1.Messages.StrictReservedWord;\n            } else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\n              options.stricted = param;\n              options.message = messages_1.Messages.StrictParamDupe;\n            }\n          }\n          /* istanbul ignore next */\n\n\n          if (typeof Object.defineProperty === 'function') {\n            Object.defineProperty(options.paramSet, key, {\n              value: true,\n              enumerable: true,\n              writable: true,\n              configurable: true\n            });\n          } else {\n            options.paramSet[key] = true;\n          }\n        };\n\n        Parser.prototype.parseRestElement = function (params) {\n          var node = this.createNode();\n          this.expect('...');\n          var arg = this.parsePattern(params);\n\n          if (this.match('=')) {\n            this.throwError(messages_1.Messages.DefaultRestParameter);\n          }\n\n          if (!this.match(')')) {\n            this.throwError(messages_1.Messages.ParameterAfterRestParameter);\n          }\n\n          return this.finalize(node, new Node.RestElement(arg));\n        };\n\n        Parser.prototype.parseFormalParameter = function (options) {\n          var params = [];\n          var param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);\n\n          for (var i = 0; i < params.length; i++) {\n            this.validateParam(options, params[i], params[i].value);\n          }\n\n          options.params.push(param);\n          return !this.match(')');\n        };\n\n        Parser.prototype.parseFormalParameters = function (firstRestricted) {\n          var options;\n          options = {\n            params: [],\n            firstRestricted: firstRestricted\n          };\n          this.expect('(');\n\n          if (!this.match(')')) {\n            options.paramSet = {};\n\n            while (this.startMarker.index < this.scanner.length) {\n              if (!this.parseFormalParameter(options)) {\n                break;\n              }\n\n              this.expect(',');\n            }\n          }\n\n          this.expect(')');\n          return {\n            params: options.params,\n            stricted: options.stricted,\n            firstRestricted: options.firstRestricted,\n            message: options.message\n          };\n        };\n\n        Parser.prototype.parseFunctionDeclaration = function (identifierIsOptional) {\n          var node = this.createNode();\n          this.expectKeyword('function');\n          var isGenerator = this.match('*');\n\n          if (isGenerator) {\n            this.nextToken();\n          }\n\n          var message;\n          var id = null;\n          var firstRestricted = null;\n\n          if (!identifierIsOptional || !this.match('(')) {\n            var token = this.lookahead;\n            id = this.parseVariableIdentifier();\n\n            if (this.context.strict) {\n              if (this.scanner.isRestrictedWord(token.value)) {\n                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);\n              }\n            } else {\n              if (this.scanner.isRestrictedWord(token.value)) {\n                firstRestricted = token;\n                message = messages_1.Messages.StrictFunctionName;\n              } else if (this.scanner.isStrictModeReservedWord(token.value)) {\n                firstRestricted = token;\n                message = messages_1.Messages.StrictReservedWord;\n              }\n            }\n          }\n\n          var previousAllowYield = this.context.allowYield;\n          this.context.allowYield = !isGenerator;\n          var formalParameters = this.parseFormalParameters(firstRestricted);\n          var params = formalParameters.params;\n          var stricted = formalParameters.stricted;\n          firstRestricted = formalParameters.firstRestricted;\n\n          if (formalParameters.message) {\n            message = formalParameters.message;\n          }\n\n          var previousStrict = this.context.strict;\n          var body = this.parseFunctionSourceElements();\n\n          if (this.context.strict && firstRestricted) {\n            this.throwUnexpectedToken(firstRestricted, message);\n          }\n\n          if (this.context.strict && stricted) {\n            this.tolerateUnexpectedToken(stricted, message);\n          }\n\n          this.context.strict = previousStrict;\n          this.context.allowYield = previousAllowYield;\n          return this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));\n        };\n\n        Parser.prototype.parseFunctionExpression = function () {\n          var node = this.createNode();\n          this.expectKeyword('function');\n          var isGenerator = this.match('*');\n\n          if (isGenerator) {\n            this.nextToken();\n          }\n\n          var message;\n          var id = null;\n          var firstRestricted;\n          var previousAllowYield = this.context.allowYield;\n          this.context.allowYield = !isGenerator;\n\n          if (!this.match('(')) {\n            var token = this.lookahead;\n            id = !this.context.strict && !isGenerator && this.matchKeyword('yield') ? this.parseIdentifierName() : this.parseVariableIdentifier();\n\n            if (this.context.strict) {\n              if (this.scanner.isRestrictedWord(token.value)) {\n                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);\n              }\n            } else {\n              if (this.scanner.isRestrictedWord(token.value)) {\n                firstRestricted = token;\n                message = messages_1.Messages.StrictFunctionName;\n              } else if (this.scanner.isStrictModeReservedWord(token.value)) {\n                firstRestricted = token;\n                message = messages_1.Messages.StrictReservedWord;\n              }\n            }\n          }\n\n          var formalParameters = this.parseFormalParameters(firstRestricted);\n          var params = formalParameters.params;\n          var stricted = formalParameters.stricted;\n          firstRestricted = formalParameters.firstRestricted;\n\n          if (formalParameters.message) {\n            message = formalParameters.message;\n          }\n\n          var previousStrict = this.context.strict;\n          var body = this.parseFunctionSourceElements();\n\n          if (this.context.strict && firstRestricted) {\n            this.throwUnexpectedToken(firstRestricted, message);\n          }\n\n          if (this.context.strict && stricted) {\n            this.tolerateUnexpectedToken(stricted, message);\n          }\n\n          this.context.strict = previousStrict;\n          this.context.allowYield = previousAllowYield;\n          return this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));\n        }; // ECMA-262 14.1.1 Directive Prologues\n\n\n        Parser.prototype.parseDirective = function () {\n          var token = this.lookahead;\n          var directive = null;\n          var node = this.createNode();\n          var expr = this.parseExpression();\n\n          if (expr.type === syntax_1.Syntax.Literal) {\n            directive = this.getTokenRaw(token).slice(1, -1);\n          }\n\n          this.consumeSemicolon();\n          return this.finalize(node, directive ? new Node.Directive(expr, directive) : new Node.ExpressionStatement(expr));\n        };\n\n        Parser.prototype.parseDirectivePrologues = function () {\n          var firstRestricted = null;\n          var body = [];\n\n          while (true) {\n            var token = this.lookahead;\n\n            if (token.type !== token_1.Token.StringLiteral) {\n              break;\n            }\n\n            var statement = this.parseDirective();\n            body.push(statement);\n            var directive = statement.directive;\n\n            if (typeof directive !== 'string') {\n              break;\n            }\n\n            if (directive === 'use strict') {\n              this.context.strict = true;\n\n              if (firstRestricted) {\n                this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);\n              }\n            } else {\n              if (!firstRestricted && token.octal) {\n                firstRestricted = token;\n              }\n            }\n          }\n\n          return body;\n        }; // ECMA-262 14.3 Method Definitions\n\n\n        Parser.prototype.qualifiedPropertyName = function (token) {\n          switch (token.type) {\n            case token_1.Token.Identifier:\n            case token_1.Token.StringLiteral:\n            case token_1.Token.BooleanLiteral:\n            case token_1.Token.NullLiteral:\n            case token_1.Token.NumericLiteral:\n            case token_1.Token.Keyword:\n              return true;\n\n            case token_1.Token.Punctuator:\n              return token.value === '[';\n          }\n\n          return false;\n        };\n\n        Parser.prototype.parseGetterMethod = function () {\n          var node = this.createNode();\n          this.expect('(');\n          this.expect(')');\n          var isGenerator = false;\n          var params = {\n            params: [],\n            stricted: null,\n            firstRestricted: null,\n            message: null\n          };\n          var previousAllowYield = this.context.allowYield;\n          this.context.allowYield = false;\n          var method = this.parsePropertyMethod(params);\n          this.context.allowYield = previousAllowYield;\n          return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n        };\n\n        Parser.prototype.parseSetterMethod = function () {\n          var node = this.createNode();\n          var options = {\n            params: [],\n            firstRestricted: null,\n            paramSet: {}\n          };\n          var isGenerator = false;\n          var previousAllowYield = this.context.allowYield;\n          this.context.allowYield = false;\n          this.expect('(');\n\n          if (this.match(')')) {\n            this.tolerateUnexpectedToken(this.lookahead);\n          } else {\n            this.parseFormalParameter(options);\n          }\n\n          this.expect(')');\n          var method = this.parsePropertyMethod(options);\n          this.context.allowYield = previousAllowYield;\n          return this.finalize(node, new Node.FunctionExpression(null, options.params, method, isGenerator));\n        };\n\n        Parser.prototype.parseGeneratorMethod = function () {\n          var node = this.createNode();\n          var isGenerator = true;\n          var previousAllowYield = this.context.allowYield;\n          this.context.allowYield = true;\n          var params = this.parseFormalParameters();\n          this.context.allowYield = false;\n          var method = this.parsePropertyMethod(params);\n          this.context.allowYield = previousAllowYield;\n          return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n        }; // ECMA-262 14.4 Generator Function Definitions\n\n\n        Parser.prototype.isStartOfExpression = function () {\n          var start = true;\n          var value = this.lookahead.value;\n\n          switch (this.lookahead.type) {\n            case token_1.Token.Punctuator:\n              start = value === '[' || value === '(' || value === '{' || value === '+' || value === '-' || value === '!' || value === '~' || value === '++' || value === '--' || value === '/' || value === '/='; // regular expression literal\n\n              break;\n\n            case token_1.Token.Keyword:\n              start = value === 'class' || value === 'delete' || value === 'function' || value === 'let' || value === 'new' || value === 'super' || value === 'this' || value === 'typeof' || value === 'void' || value === 'yield';\n              break;\n\n            default:\n              break;\n          }\n\n          return start;\n        };\n\n        Parser.prototype.parseYieldExpression = function () {\n          var node = this.createNode();\n          this.expectKeyword('yield');\n          var argument = null;\n          var delegate = false;\n\n          if (!this.hasLineTerminator) {\n            var previousAllowYield = this.context.allowYield;\n            this.context.allowYield = false;\n            delegate = this.match('*');\n\n            if (delegate) {\n              this.nextToken();\n              argument = this.parseAssignmentExpression();\n            } else if (this.isStartOfExpression()) {\n              argument = this.parseAssignmentExpression();\n            }\n\n            this.context.allowYield = previousAllowYield;\n          }\n\n          return this.finalize(node, new Node.YieldExpression(argument, delegate));\n        }; // ECMA-262 14.5 Class Definitions\n\n\n        Parser.prototype.parseClassElement = function (hasConstructor) {\n          var token = this.lookahead;\n          var node = this.createNode();\n          var kind;\n          var key;\n          var value;\n          var computed = false;\n          var method = false;\n          var isStatic = false;\n\n          if (this.match('*')) {\n            this.nextToken();\n          } else {\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            var id = key;\n\n            if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {\n              token = this.lookahead;\n              isStatic = true;\n              computed = this.match('[');\n\n              if (this.match('*')) {\n                this.nextToken();\n              } else {\n                key = this.parseObjectPropertyKey();\n              }\n            }\n          }\n\n          var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\n\n          if (token.type === token_1.Token.Identifier) {\n            if (token.value === 'get' && lookaheadPropertyKey) {\n              kind = 'get';\n              computed = this.match('[');\n              key = this.parseObjectPropertyKey();\n              this.context.allowYield = false;\n              value = this.parseGetterMethod();\n            } else if (token.value === 'set' && lookaheadPropertyKey) {\n              kind = 'set';\n              computed = this.match('[');\n              key = this.parseObjectPropertyKey();\n              value = this.parseSetterMethod();\n            }\n          } else if (token.type === token_1.Token.Punctuator && token.value === '*' && lookaheadPropertyKey) {\n            kind = 'init';\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            value = this.parseGeneratorMethod();\n            method = true;\n          }\n\n          if (!kind && key && this.match('(')) {\n            kind = 'init';\n            value = this.parsePropertyMethodFunction();\n            method = true;\n          }\n\n          if (!kind) {\n            this.throwUnexpectedToken(this.lookahead);\n          }\n\n          if (kind === 'init') {\n            kind = 'method';\n          }\n\n          if (!computed) {\n            if (isStatic && this.isPropertyKey(key, 'prototype')) {\n              this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);\n            }\n\n            if (!isStatic && this.isPropertyKey(key, 'constructor')) {\n              if (kind !== 'method' || !method || value.generator) {\n                this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);\n              }\n\n              if (hasConstructor.value) {\n                this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);\n              } else {\n                hasConstructor.value = true;\n              }\n\n              kind = 'constructor';\n            }\n          }\n\n          return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));\n        };\n\n        Parser.prototype.parseClassElementList = function () {\n          var body = [];\n          var hasConstructor = {\n            value: false\n          };\n          this.expect('{');\n\n          while (!this.match('}')) {\n            if (this.match(';')) {\n              this.nextToken();\n            } else {\n              body.push(this.parseClassElement(hasConstructor));\n            }\n          }\n\n          this.expect('}');\n          return body;\n        };\n\n        Parser.prototype.parseClassBody = function () {\n          var node = this.createNode();\n          var elementList = this.parseClassElementList();\n          return this.finalize(node, new Node.ClassBody(elementList));\n        };\n\n        Parser.prototype.parseClassDeclaration = function (identifierIsOptional) {\n          var node = this.createNode();\n          var previousStrict = this.context.strict;\n          this.context.strict = true;\n          this.expectKeyword('class');\n          var id = identifierIsOptional && this.lookahead.type !== token_1.Token.Identifier ? null : this.parseVariableIdentifier();\n          var superClass = null;\n\n          if (this.matchKeyword('extends')) {\n            this.nextToken();\n            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n          }\n\n          var classBody = this.parseClassBody();\n          this.context.strict = previousStrict;\n          return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));\n        };\n\n        Parser.prototype.parseClassExpression = function () {\n          var node = this.createNode();\n          var previousStrict = this.context.strict;\n          this.context.strict = true;\n          this.expectKeyword('class');\n          var id = this.lookahead.type === token_1.Token.Identifier ? this.parseVariableIdentifier() : null;\n          var superClass = null;\n\n          if (this.matchKeyword('extends')) {\n            this.nextToken();\n            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n          }\n\n          var classBody = this.parseClassBody();\n          this.context.strict = previousStrict;\n          return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));\n        }; // ECMA-262 15.1 Scripts\n        // ECMA-262 15.2 Modules\n\n\n        Parser.prototype.parseProgram = function () {\n          var node = this.createNode();\n          var body = this.parseDirectivePrologues();\n\n          while (this.startMarker.index < this.scanner.length) {\n            body.push(this.parseStatementListItem());\n          }\n\n          return this.finalize(node, new Node.Program(body, this.sourceType));\n        }; // ECMA-262 15.2.2 Imports\n\n\n        Parser.prototype.parseModuleSpecifier = function () {\n          var node = this.createNode();\n\n          if (this.lookahead.type !== token_1.Token.StringLiteral) {\n            this.throwError(messages_1.Messages.InvalidModuleSpecifier);\n          }\n\n          var token = this.nextToken();\n          var raw = this.getTokenRaw(token);\n          return this.finalize(node, new Node.Literal(token.value, raw));\n        }; // import {<foo as bar>} ...;\n\n\n        Parser.prototype.parseImportSpecifier = function () {\n          var node = this.createNode();\n          var imported;\n          var local;\n\n          if (this.lookahead.type === token_1.Token.Identifier) {\n            imported = this.parseVariableIdentifier();\n            local = imported;\n\n            if (this.matchContextualKeyword('as')) {\n              this.nextToken();\n              local = this.parseVariableIdentifier();\n            }\n          } else {\n            imported = this.parseIdentifierName();\n            local = imported;\n\n            if (this.matchContextualKeyword('as')) {\n              this.nextToken();\n              local = this.parseVariableIdentifier();\n            } else {\n              this.throwUnexpectedToken(this.nextToken());\n            }\n          }\n\n          return this.finalize(node, new Node.ImportSpecifier(local, imported));\n        }; // {foo, bar as bas}\n\n\n        Parser.prototype.parseNamedImports = function () {\n          this.expect('{');\n          var specifiers = [];\n\n          while (!this.match('}')) {\n            specifiers.push(this.parseImportSpecifier());\n\n            if (!this.match('}')) {\n              this.expect(',');\n            }\n          }\n\n          this.expect('}');\n          return specifiers;\n        }; // import <foo> ...;\n\n\n        Parser.prototype.parseImportDefaultSpecifier = function () {\n          var node = this.createNode();\n          var local = this.parseIdentifierName();\n          return this.finalize(node, new Node.ImportDefaultSpecifier(local));\n        }; // import <* as foo> ...;\n\n\n        Parser.prototype.parseImportNamespaceSpecifier = function () {\n          var node = this.createNode();\n          this.expect('*');\n\n          if (!this.matchContextualKeyword('as')) {\n            this.throwError(messages_1.Messages.NoAsAfterImportNamespace);\n          }\n\n          this.nextToken();\n          var local = this.parseIdentifierName();\n          return this.finalize(node, new Node.ImportNamespaceSpecifier(local));\n        };\n\n        Parser.prototype.parseImportDeclaration = function () {\n          if (this.context.inFunctionBody) {\n            this.throwError(messages_1.Messages.IllegalImportDeclaration);\n          }\n\n          var node = this.createNode();\n          this.expectKeyword('import');\n          var src;\n          var specifiers = [];\n\n          if (this.lookahead.type === token_1.Token.StringLiteral) {\n            // import 'foo';\n            src = this.parseModuleSpecifier();\n          } else {\n            if (this.match('{')) {\n              // import {bar}\n              specifiers = specifiers.concat(this.parseNamedImports());\n            } else if (this.match('*')) {\n              // import * as foo\n              specifiers.push(this.parseImportNamespaceSpecifier());\n            } else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {\n              // import foo\n              specifiers.push(this.parseImportDefaultSpecifier());\n\n              if (this.match(',')) {\n                this.nextToken();\n\n                if (this.match('*')) {\n                  // import foo, * as foo\n                  specifiers.push(this.parseImportNamespaceSpecifier());\n                } else if (this.match('{')) {\n                  // import foo, {bar}\n                  specifiers = specifiers.concat(this.parseNamedImports());\n                } else {\n                  this.throwUnexpectedToken(this.lookahead);\n                }\n              }\n            } else {\n              this.throwUnexpectedToken(this.nextToken());\n            }\n\n            if (!this.matchContextualKeyword('from')) {\n              var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n              this.throwError(message, this.lookahead.value);\n            }\n\n            this.nextToken();\n            src = this.parseModuleSpecifier();\n          }\n\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.ImportDeclaration(specifiers, src));\n        }; // ECMA-262 15.2.3 Exports\n\n\n        Parser.prototype.parseExportSpecifier = function () {\n          var node = this.createNode();\n          var local = this.parseIdentifierName();\n          var exported = local;\n\n          if (this.matchContextualKeyword('as')) {\n            this.nextToken();\n            exported = this.parseIdentifierName();\n          }\n\n          return this.finalize(node, new Node.ExportSpecifier(local, exported));\n        };\n\n        Parser.prototype.parseExportDeclaration = function () {\n          if (this.context.inFunctionBody) {\n            this.throwError(messages_1.Messages.IllegalExportDeclaration);\n          }\n\n          var node = this.createNode();\n          this.expectKeyword('export');\n          var exportDeclaration;\n\n          if (this.matchKeyword('default')) {\n            // export default ...\n            this.nextToken();\n\n            if (this.matchKeyword('function')) {\n              // export default function foo () {}\n              // export default function () {}\n              var declaration = this.parseFunctionDeclaration(true);\n              exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n            } else if (this.matchKeyword('class')) {\n              // export default class foo {}\n              var declaration = this.parseClassDeclaration(true);\n              exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n            } else {\n              if (this.matchContextualKeyword('from')) {\n                this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);\n              } // export default {};\n              // export default [];\n              // export default (1 + 2);\n\n\n              var declaration = this.match('{') ? this.parseObjectInitializer() : this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();\n              this.consumeSemicolon();\n              exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n            }\n          } else if (this.match('*')) {\n            // export * from 'foo';\n            this.nextToken();\n\n            if (!this.matchContextualKeyword('from')) {\n              var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n              this.throwError(message, this.lookahead.value);\n            }\n\n            this.nextToken();\n            var src = this.parseModuleSpecifier();\n            this.consumeSemicolon();\n            exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));\n          } else if (this.lookahead.type === token_1.Token.Keyword) {\n            // export var f = 1;\n            var declaration = void 0;\n\n            switch (this.lookahead.value) {\n              case 'let':\n              case 'const':\n                declaration = this.parseLexicalDeclaration({\n                  inFor: false\n                });\n                break;\n\n              case 'var':\n              case 'class':\n              case 'function':\n                declaration = this.parseStatementListItem();\n                break;\n\n              default:\n                this.throwUnexpectedToken(this.lookahead);\n            }\n\n            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));\n          } else {\n            var specifiers = [];\n            var source = null;\n            var isExportFromIdentifier = false;\n            this.expect('{');\n\n            while (!this.match('}')) {\n              isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');\n              specifiers.push(this.parseExportSpecifier());\n\n              if (!this.match('}')) {\n                this.expect(',');\n              }\n            }\n\n            this.expect('}');\n\n            if (this.matchContextualKeyword('from')) {\n              // export {default} from 'foo';\n              // export {foo} from 'foo';\n              this.nextToken();\n              source = this.parseModuleSpecifier();\n              this.consumeSemicolon();\n            } else if (isExportFromIdentifier) {\n              // export {default}; // missing fromClause\n              var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n              this.throwError(message, this.lookahead.value);\n            } else {\n              // export {foo};\n              this.consumeSemicolon();\n            }\n\n            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));\n          }\n\n          return exportDeclaration;\n        };\n\n        return Parser;\n      }();\n\n      exports.Parser = Parser;\n      /***/\n    },\n    /* 4 */\n\n    /***/\n    function (module, exports) {\n      // Ensure the condition is true, otherwise throw an error.\n      // This is only to have a better contract semantic, i.e. another safety net\n      // to catch a logic error. The condition shall be fulfilled in normal case.\n      // Do NOT use this to enforce a certain condition on any user input.\n      \"use strict\";\n\n      function assert(condition, message) {\n        /* istanbul ignore if */\n        if (!condition) {\n          throw new Error('ASSERT: ' + message);\n        }\n      }\n\n      exports.assert = assert;\n      /***/\n    },\n    /* 5 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\"; // Error messages should be identical to V8.\n\n      exports.Messages = {\n        UnexpectedToken: 'Unexpected token %0',\n        UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',\n        UnexpectedNumber: 'Unexpected number',\n        UnexpectedString: 'Unexpected string',\n        UnexpectedIdentifier: 'Unexpected identifier',\n        UnexpectedReserved: 'Unexpected reserved word',\n        UnexpectedTemplate: 'Unexpected quasi %0',\n        UnexpectedEOS: 'Unexpected end of input',\n        NewlineAfterThrow: 'Illegal newline after throw',\n        InvalidRegExp: 'Invalid regular expression',\n        UnterminatedRegExp: 'Invalid regular expression: missing /',\n        InvalidLHSInAssignment: 'Invalid left-hand side in assignment',\n        InvalidLHSInForIn: 'Invalid left-hand side in for-in',\n        InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',\n        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',\n        NoCatchOrFinally: 'Missing catch or finally after try',\n        UnknownLabel: 'Undefined label \\'%0\\'',\n        Redeclaration: '%0 \\'%1\\' has already been declared',\n        IllegalContinue: 'Illegal continue statement',\n        IllegalBreak: 'Illegal break statement',\n        IllegalReturn: 'Illegal return statement',\n        StrictModeWith: 'Strict mode code may not include a with statement',\n        StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',\n        StrictVarName: 'Variable name may not be eval or arguments in strict mode',\n        StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',\n        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\n        StrictFunctionName: 'Function name may not be eval or arguments in strict mode',\n        StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',\n        StrictDelete: 'Delete of an unqualified identifier in strict mode.',\n        StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',\n        StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictReservedWord: 'Use of future reserved word in strict mode',\n        TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',\n        ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',\n        DefaultRestParameter: 'Unexpected token =',\n        DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',\n        ConstructorSpecialMethod: 'Class constructor may not be an accessor',\n        DuplicateConstructor: 'A class may only have one constructor',\n        StaticPrototype: 'Classes may not have static property named prototype',\n        MissingFromClause: 'Unexpected token',\n        NoAsAfterImportNamespace: 'Unexpected token',\n        InvalidModuleSpecifier: 'Unexpected token',\n        IllegalImportDeclaration: 'Unexpected token',\n        IllegalExportDeclaration: 'Unexpected token',\n        DuplicateBinding: 'Duplicate binding %0',\n        ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer'\n      };\n      /***/\n    },\n    /* 6 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\";\n\n      var ErrorHandler = function () {\n        function ErrorHandler() {\n          this.errors = [];\n          this.tolerant = false;\n        }\n\n        ;\n\n        ErrorHandler.prototype.recordError = function (error) {\n          this.errors.push(error);\n        };\n\n        ;\n\n        ErrorHandler.prototype.tolerate = function (error) {\n          if (this.tolerant) {\n            this.recordError(error);\n          } else {\n            throw error;\n          }\n        };\n\n        ;\n\n        ErrorHandler.prototype.constructError = function (msg, column) {\n          var error = new Error(msg);\n\n          try {\n            throw error;\n          } catch (base) {\n            /* istanbul ignore else */\n            if (Object.create && Object.defineProperty) {\n              error = Object.create(base);\n              Object.defineProperty(error, 'column', {\n                value: column\n              });\n            }\n          } finally {\n            return error;\n          }\n        };\n\n        ;\n\n        ErrorHandler.prototype.createError = function (index, line, col, description) {\n          var msg = 'Line ' + line + ': ' + description;\n          var error = this.constructError(msg, col);\n          error.index = index;\n          error.lineNumber = line;\n          error.description = description;\n          return error;\n        };\n\n        ;\n\n        ErrorHandler.prototype.throwError = function (index, line, col, description) {\n          throw this.createError(index, line, col, description);\n        };\n\n        ;\n\n        ErrorHandler.prototype.tolerateError = function (index, line, col, description) {\n          var error = this.createError(index, line, col, description);\n\n          if (this.tolerant) {\n            this.recordError(error);\n          } else {\n            throw error;\n          }\n        };\n\n        ;\n        return ErrorHandler;\n      }();\n\n      exports.ErrorHandler = ErrorHandler;\n      /***/\n    },\n    /* 7 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\";\n\n      (function (Token) {\n        Token[Token[\"BooleanLiteral\"] = 1] = \"BooleanLiteral\";\n        Token[Token[\"EOF\"] = 2] = \"EOF\";\n        Token[Token[\"Identifier\"] = 3] = \"Identifier\";\n        Token[Token[\"Keyword\"] = 4] = \"Keyword\";\n        Token[Token[\"NullLiteral\"] = 5] = \"NullLiteral\";\n        Token[Token[\"NumericLiteral\"] = 6] = \"NumericLiteral\";\n        Token[Token[\"Punctuator\"] = 7] = \"Punctuator\";\n        Token[Token[\"StringLiteral\"] = 8] = \"StringLiteral\";\n        Token[Token[\"RegularExpression\"] = 9] = \"RegularExpression\";\n        Token[Token[\"Template\"] = 10] = \"Template\";\n      })(exports.Token || (exports.Token = {}));\n\n      var Token = exports.Token;\n      ;\n      exports.TokenName = {};\n      exports.TokenName[Token.BooleanLiteral] = 'Boolean';\n      exports.TokenName[Token.EOF] = '<end>';\n      exports.TokenName[Token.Identifier] = 'Identifier';\n      exports.TokenName[Token.Keyword] = 'Keyword';\n      exports.TokenName[Token.NullLiteral] = 'Null';\n      exports.TokenName[Token.NumericLiteral] = 'Numeric';\n      exports.TokenName[Token.Punctuator] = 'Punctuator';\n      exports.TokenName[Token.StringLiteral] = 'String';\n      exports.TokenName[Token.RegularExpression] = 'RegularExpression';\n      exports.TokenName[Token.Template] = 'Template';\n      /***/\n    },\n    /* 8 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var assert_1 = __webpack_require__(4);\n\n      var messages_1 = __webpack_require__(5);\n\n      var character_1 = __webpack_require__(9);\n\n      var token_1 = __webpack_require__(7);\n\n      function hexValue(ch) {\n        return '0123456789abcdef'.indexOf(ch.toLowerCase());\n      }\n\n      function octalValue(ch) {\n        return '01234567'.indexOf(ch);\n      }\n\n      var Scanner = function () {\n        function Scanner(code, handler) {\n          this.source = code;\n          this.errorHandler = handler;\n          this.trackComment = false;\n          this.length = code.length;\n          this.index = 0;\n          this.lineNumber = code.length > 0 ? 1 : 0;\n          this.lineStart = 0;\n          this.curlyStack = [];\n        }\n\n        ;\n\n        Scanner.prototype.eof = function () {\n          return this.index >= this.length;\n        };\n\n        ;\n\n        Scanner.prototype.throwUnexpectedToken = function (message) {\n          if (message === void 0) {\n            message = messages_1.Messages.UnexpectedTokenIllegal;\n          }\n\n          this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);\n        };\n\n        ;\n\n        Scanner.prototype.tolerateUnexpectedToken = function () {\n          this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, messages_1.Messages.UnexpectedTokenIllegal);\n        };\n\n        ; // ECMA-262 11.4 Comments\n\n        Scanner.prototype.skipSingleLineComment = function (offset) {\n          var comments;\n          var start, loc;\n\n          if (this.trackComment) {\n            comments = [];\n            start = this.index - offset;\n            loc = {\n              start: {\n                line: this.lineNumber,\n                column: this.index - this.lineStart - offset\n              },\n              end: {}\n            };\n          }\n\n          while (!this.eof()) {\n            var ch = this.source.charCodeAt(this.index);\n            ++this.index;\n\n            if (character_1.Character.isLineTerminator(ch)) {\n              if (this.trackComment) {\n                loc.end = {\n                  line: this.lineNumber,\n                  column: this.index - this.lineStart - 1\n                };\n                var entry = {\n                  multiLine: false,\n                  slice: [start + offset, this.index - 1],\n                  range: [start, this.index - 1],\n                  loc: loc\n                };\n                comments.push(entry);\n              }\n\n              if (ch === 13 && this.source.charCodeAt(this.index) === 10) {\n                ++this.index;\n              }\n\n              ++this.lineNumber;\n              this.lineStart = this.index;\n              return comments;\n            }\n          }\n\n          if (this.trackComment) {\n            loc.end = {\n              line: this.lineNumber,\n              column: this.index - this.lineStart\n            };\n            var entry = {\n              multiLine: false,\n              slice: [start + offset, this.index],\n              range: [start, this.index],\n              loc: loc\n            };\n            comments.push(entry);\n          }\n\n          return comments;\n        };\n\n        ;\n\n        Scanner.prototype.skipMultiLineComment = function () {\n          var comments;\n          var start, loc;\n\n          if (this.trackComment) {\n            comments = [];\n            start = this.index - 2;\n            loc = {\n              start: {\n                line: this.lineNumber,\n                column: this.index - this.lineStart - 2\n              },\n              end: {}\n            };\n          }\n\n          while (!this.eof()) {\n            var ch = this.source.charCodeAt(this.index);\n\n            if (character_1.Character.isLineTerminator(ch)) {\n              if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {\n                ++this.index;\n              }\n\n              ++this.lineNumber;\n              ++this.index;\n              this.lineStart = this.index;\n            } else if (ch === 0x2A) {\n              // Block comment ends with '*/'.\n              if (this.source.charCodeAt(this.index + 1) === 0x2F) {\n                this.index += 2;\n\n                if (this.trackComment) {\n                  loc.end = {\n                    line: this.lineNumber,\n                    column: this.index - this.lineStart\n                  };\n                  var entry = {\n                    multiLine: true,\n                    slice: [start + 2, this.index - 2],\n                    range: [start, this.index],\n                    loc: loc\n                  };\n                  comments.push(entry);\n                }\n\n                return comments;\n              }\n\n              ++this.index;\n            } else {\n              ++this.index;\n            }\n          } // Ran off the end of the file - the whole thing is a comment\n\n\n          if (this.trackComment) {\n            loc.end = {\n              line: this.lineNumber,\n              column: this.index - this.lineStart\n            };\n            var entry = {\n              multiLine: true,\n              slice: [start + 2, this.index],\n              range: [start, this.index],\n              loc: loc\n            };\n            comments.push(entry);\n          }\n\n          this.tolerateUnexpectedToken();\n          return comments;\n        };\n\n        ;\n\n        Scanner.prototype.scanComments = function () {\n          var comments;\n\n          if (this.trackComment) {\n            comments = [];\n          }\n\n          var start = this.index === 0;\n\n          while (!this.eof()) {\n            var ch = this.source.charCodeAt(this.index);\n\n            if (character_1.Character.isWhiteSpace(ch)) {\n              ++this.index;\n            } else if (character_1.Character.isLineTerminator(ch)) {\n              ++this.index;\n\n              if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {\n                ++this.index;\n              }\n\n              ++this.lineNumber;\n              this.lineStart = this.index;\n              start = true;\n            } else if (ch === 0x2F) {\n              ch = this.source.charCodeAt(this.index + 1);\n\n              if (ch === 0x2F) {\n                this.index += 2;\n                var comment = this.skipSingleLineComment(2);\n\n                if (this.trackComment) {\n                  comments = comments.concat(comment);\n                }\n\n                start = true;\n              } else if (ch === 0x2A) {\n                this.index += 2;\n                var comment = this.skipMultiLineComment();\n\n                if (this.trackComment) {\n                  comments = comments.concat(comment);\n                }\n              } else {\n                break;\n              }\n            } else if (start && ch === 0x2D) {\n              // U+003E is '>'\n              if (this.source.charCodeAt(this.index + 1) === 0x2D && this.source.charCodeAt(this.index + 2) === 0x3E) {\n                // '-->' is a single-line comment\n                this.index += 3;\n                var comment = this.skipSingleLineComment(3);\n\n                if (this.trackComment) {\n                  comments = comments.concat(comment);\n                }\n              } else {\n                break;\n              }\n            } else if (ch === 0x3C) {\n              if (this.source.slice(this.index + 1, this.index + 4) === '!--') {\n                this.index += 4; // `<!--`\n\n                var comment = this.skipSingleLineComment(4);\n\n                if (this.trackComment) {\n                  comments = comments.concat(comment);\n                }\n              } else {\n                break;\n              }\n            } else {\n              break;\n            }\n          }\n\n          return comments;\n        };\n\n        ; // ECMA-262 11.6.2.2 Future Reserved Words\n\n        Scanner.prototype.isFutureReservedWord = function (id) {\n          switch (id) {\n            case 'enum':\n            case 'export':\n            case 'import':\n            case 'super':\n              return true;\n\n            default:\n              return false;\n          }\n        };\n\n        ;\n\n        Scanner.prototype.isStrictModeReservedWord = function (id) {\n          switch (id) {\n            case 'implements':\n            case 'interface':\n            case 'package':\n            case 'private':\n            case 'protected':\n            case 'public':\n            case 'static':\n            case 'yield':\n            case 'let':\n              return true;\n\n            default:\n              return false;\n          }\n        };\n\n        ;\n\n        Scanner.prototype.isRestrictedWord = function (id) {\n          return id === 'eval' || id === 'arguments';\n        };\n\n        ; // ECMA-262 11.6.2.1 Keywords\n\n        Scanner.prototype.isKeyword = function (id) {\n          switch (id.length) {\n            case 2:\n              return id === 'if' || id === 'in' || id === 'do';\n\n            case 3:\n              return id === 'var' || id === 'for' || id === 'new' || id === 'try' || id === 'let';\n\n            case 4:\n              return id === 'this' || id === 'else' || id === 'case' || id === 'void' || id === 'with' || id === 'enum';\n\n            case 5:\n              return id === 'while' || id === 'break' || id === 'catch' || id === 'throw' || id === 'const' || id === 'yield' || id === 'class' || id === 'super';\n\n            case 6:\n              return id === 'return' || id === 'typeof' || id === 'delete' || id === 'switch' || id === 'export' || id === 'import';\n\n            case 7:\n              return id === 'default' || id === 'finally' || id === 'extends';\n\n            case 8:\n              return id === 'function' || id === 'continue' || id === 'debugger';\n\n            case 10:\n              return id === 'instanceof';\n\n            default:\n              return false;\n          }\n        };\n\n        ;\n\n        Scanner.prototype.codePointAt = function (i) {\n          var cp = this.source.charCodeAt(i);\n\n          if (cp >= 0xD800 && cp <= 0xDBFF) {\n            var second = this.source.charCodeAt(i + 1);\n\n            if (second >= 0xDC00 && second <= 0xDFFF) {\n              var first = cp;\n              cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n            }\n          }\n\n          return cp;\n        };\n\n        ;\n\n        Scanner.prototype.scanHexEscape = function (prefix) {\n          var len = prefix === 'u' ? 4 : 2;\n          var code = 0;\n\n          for (var i = 0; i < len; ++i) {\n            if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {\n              code = code * 16 + hexValue(this.source[this.index++]);\n            } else {\n              return '';\n            }\n          }\n\n          return String.fromCharCode(code);\n        };\n\n        ;\n\n        Scanner.prototype.scanUnicodeCodePointEscape = function () {\n          var ch = this.source[this.index];\n          var code = 0; // At least, one hex digit is required.\n\n          if (ch === '}') {\n            this.throwUnexpectedToken();\n          }\n\n          while (!this.eof()) {\n            ch = this.source[this.index++];\n\n            if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {\n              break;\n            }\n\n            code = code * 16 + hexValue(ch);\n          }\n\n          if (code > 0x10FFFF || ch !== '}') {\n            this.throwUnexpectedToken();\n          }\n\n          return character_1.Character.fromCodePoint(code);\n        };\n\n        ;\n\n        Scanner.prototype.getIdentifier = function () {\n          var start = this.index++;\n\n          while (!this.eof()) {\n            var ch = this.source.charCodeAt(this.index);\n\n            if (ch === 0x5C) {\n              // Blackslash (U+005C) marks Unicode escape sequence.\n              this.index = start;\n              return this.getComplexIdentifier();\n            } else if (ch >= 0xD800 && ch < 0xDFFF) {\n              // Need to handle surrogate pairs.\n              this.index = start;\n              return this.getComplexIdentifier();\n            }\n\n            if (character_1.Character.isIdentifierPart(ch)) {\n              ++this.index;\n            } else {\n              break;\n            }\n          }\n\n          return this.source.slice(start, this.index);\n        };\n\n        ;\n\n        Scanner.prototype.getComplexIdentifier = function () {\n          var cp = this.codePointAt(this.index);\n          var id = character_1.Character.fromCodePoint(cp);\n          this.index += id.length; // '\\u' (U+005C, U+0075) denotes an escaped character.\n\n          var ch;\n\n          if (cp === 0x5C) {\n            if (this.source.charCodeAt(this.index) !== 0x75) {\n              this.throwUnexpectedToken();\n            }\n\n            ++this.index;\n\n            if (this.source[this.index] === '{') {\n              ++this.index;\n              ch = this.scanUnicodeCodePointEscape();\n            } else {\n              ch = this.scanHexEscape('u');\n              cp = ch.charCodeAt(0);\n\n              if (!ch || ch === '\\\\' || !character_1.Character.isIdentifierStart(cp)) {\n                this.throwUnexpectedToken();\n              }\n            }\n\n            id = ch;\n          }\n\n          while (!this.eof()) {\n            cp = this.codePointAt(this.index);\n\n            if (!character_1.Character.isIdentifierPart(cp)) {\n              break;\n            }\n\n            ch = character_1.Character.fromCodePoint(cp);\n            id += ch;\n            this.index += ch.length; // '\\u' (U+005C, U+0075) denotes an escaped character.\n\n            if (cp === 0x5C) {\n              id = id.substr(0, id.length - 1);\n\n              if (this.source.charCodeAt(this.index) !== 0x75) {\n                this.throwUnexpectedToken();\n              }\n\n              ++this.index;\n\n              if (this.source[this.index] === '{') {\n                ++this.index;\n                ch = this.scanUnicodeCodePointEscape();\n              } else {\n                ch = this.scanHexEscape('u');\n                cp = ch.charCodeAt(0);\n\n                if (!ch || ch === '\\\\' || !character_1.Character.isIdentifierPart(cp)) {\n                  this.throwUnexpectedToken();\n                }\n              }\n\n              id += ch;\n            }\n          }\n\n          return id;\n        };\n\n        ;\n\n        Scanner.prototype.octalToDecimal = function (ch) {\n          // \\0 is not octal escape sequence\n          var octal = ch !== '0';\n          var code = octalValue(ch);\n\n          if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n            octal = true;\n            code = code * 8 + octalValue(this.source[this.index++]); // 3 digits are only allowed when string starts\n            // with 0, 1, 2, 3\n\n            if ('0123'.indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n              code = code * 8 + octalValue(this.source[this.index++]);\n            }\n          }\n\n          return {\n            code: code,\n            octal: octal\n          };\n        };\n\n        ; // ECMA-262 11.6 Names and Keywords\n\n        Scanner.prototype.scanIdentifier = function () {\n          var type;\n          var start = this.index; // Backslash (U+005C) starts an escaped character.\n\n          var id = this.source.charCodeAt(start) === 0x5C ? this.getComplexIdentifier() : this.getIdentifier(); // There is no keyword or literal with only one character.\n          // Thus, it must be an identifier.\n\n          if (id.length === 1) {\n            type = token_1.Token.Identifier;\n          } else if (this.isKeyword(id)) {\n            type = token_1.Token.Keyword;\n          } else if (id === 'null') {\n            type = token_1.Token.NullLiteral;\n          } else if (id === 'true' || id === 'false') {\n            type = token_1.Token.BooleanLiteral;\n          } else {\n            type = token_1.Token.Identifier;\n          }\n\n          return {\n            type: type,\n            value: id,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        };\n\n        ; // ECMA-262 11.7 Punctuators\n\n        Scanner.prototype.scanPunctuator = function () {\n          var token = {\n            type: token_1.Token.Punctuator,\n            value: '',\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: this.index,\n            end: this.index\n          }; // Check for most common single-character punctuators.\n\n          var str = this.source[this.index];\n\n          switch (str) {\n            case '(':\n            case '{':\n              if (str === '{') {\n                this.curlyStack.push('{');\n              }\n\n              ++this.index;\n              break;\n\n            case '.':\n              ++this.index;\n\n              if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {\n                // Spread operator: ...\n                this.index += 2;\n                str = '...';\n              }\n\n              break;\n\n            case '}':\n              ++this.index;\n              this.curlyStack.pop();\n              break;\n\n            case ')':\n            case ';':\n            case ',':\n            case '[':\n            case ']':\n            case ':':\n            case '?':\n            case '~':\n              ++this.index;\n              break;\n\n            default:\n              // 4-character punctuator.\n              str = this.source.substr(this.index, 4);\n\n              if (str === '>>>=') {\n                this.index += 4;\n              } else {\n                // 3-character punctuators.\n                str = str.substr(0, 3);\n\n                if (str === '===' || str === '!==' || str === '>>>' || str === '<<=' || str === '>>=' || str === '**=') {\n                  this.index += 3;\n                } else {\n                  // 2-character punctuators.\n                  str = str.substr(0, 2);\n\n                  if (str === '&&' || str === '||' || str === '==' || str === '!=' || str === '+=' || str === '-=' || str === '*=' || str === '/=' || str === '++' || str === '--' || str === '<<' || str === '>>' || str === '&=' || str === '|=' || str === '^=' || str === '%=' || str === '<=' || str === '>=' || str === '=>' || str === '**') {\n                    this.index += 2;\n                  } else {\n                    // 1-character punctuators.\n                    str = this.source[this.index];\n\n                    if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {\n                      ++this.index;\n                    }\n                  }\n                }\n              }\n\n          }\n\n          if (this.index === token.start) {\n            this.throwUnexpectedToken();\n          }\n\n          token.end = this.index;\n          token.value = str;\n          return token;\n        };\n\n        ; // ECMA-262 11.8.3 Numeric Literals\n\n        Scanner.prototype.scanHexLiteral = function (start) {\n          var number = '';\n\n          while (!this.eof()) {\n            if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {\n              break;\n            }\n\n            number += this.source[this.index++];\n          }\n\n          if (number.length === 0) {\n            this.throwUnexpectedToken();\n          }\n\n          if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\n            this.throwUnexpectedToken();\n          }\n\n          return {\n            type: token_1.Token.NumericLiteral,\n            value: parseInt('0x' + number, 16),\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        };\n\n        ;\n\n        Scanner.prototype.scanBinaryLiteral = function (start) {\n          var number = '';\n          var ch;\n\n          while (!this.eof()) {\n            ch = this.source[this.index];\n\n            if (ch !== '0' && ch !== '1') {\n              break;\n            }\n\n            number += this.source[this.index++];\n          }\n\n          if (number.length === 0) {\n            // only 0b or 0B\n            this.throwUnexpectedToken();\n          }\n\n          if (!this.eof()) {\n            ch = this.source.charCodeAt(this.index);\n            /* istanbul ignore else */\n\n            if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {\n              this.throwUnexpectedToken();\n            }\n          }\n\n          return {\n            type: token_1.Token.NumericLiteral,\n            value: parseInt(number, 2),\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        };\n\n        ;\n\n        Scanner.prototype.scanOctalLiteral = function (prefix, start) {\n          var number = '';\n          var octal = false;\n\n          if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {\n            octal = true;\n            number = '0' + this.source[this.index++];\n          } else {\n            ++this.index;\n          }\n\n          while (!this.eof()) {\n            if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n              break;\n            }\n\n            number += this.source[this.index++];\n          }\n\n          if (!octal && number.length === 0) {\n            // only 0o or 0O\n            this.throwUnexpectedToken();\n          }\n\n          if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n            this.throwUnexpectedToken();\n          }\n\n          return {\n            type: token_1.Token.NumericLiteral,\n            value: parseInt(number, 8),\n            octal: octal,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        };\n\n        ;\n\n        Scanner.prototype.isImplicitOctalLiteral = function () {\n          // Implicit octal, unless there is a non-octal digit.\n          // (Annex B.1.1 on Numeric Literals)\n          for (var i = this.index + 1; i < this.length; ++i) {\n            var ch = this.source[i];\n\n            if (ch === '8' || ch === '9') {\n              return false;\n            }\n\n            if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n              return true;\n            }\n          }\n\n          return true;\n        };\n\n        ;\n\n        Scanner.prototype.scanNumericLiteral = function () {\n          var start = this.index;\n          var ch = this.source[start];\n          assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || ch === '.', 'Numeric literal must start with a decimal digit or a decimal point');\n          var number = '';\n\n          if (ch !== '.') {\n            number = this.source[this.index++];\n            ch = this.source[this.index]; // Hex number starts with '0x'.\n            // Octal number starts with '0'.\n            // Octal number in ES6 starts with '0o'.\n            // Binary number in ES6 starts with '0b'.\n\n            if (number === '0') {\n              if (ch === 'x' || ch === 'X') {\n                ++this.index;\n                return this.scanHexLiteral(start);\n              }\n\n              if (ch === 'b' || ch === 'B') {\n                ++this.index;\n                return this.scanBinaryLiteral(start);\n              }\n\n              if (ch === 'o' || ch === 'O') {\n                return this.scanOctalLiteral(ch, start);\n              }\n\n              if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n                if (this.isImplicitOctalLiteral()) {\n                  return this.scanOctalLiteral(ch, start);\n                }\n              }\n            }\n\n            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n              number += this.source[this.index++];\n            }\n\n            ch = this.source[this.index];\n          }\n\n          if (ch === '.') {\n            number += this.source[this.index++];\n\n            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n              number += this.source[this.index++];\n            }\n\n            ch = this.source[this.index];\n          }\n\n          if (ch === 'e' || ch === 'E') {\n            number += this.source[this.index++];\n            ch = this.source[this.index];\n\n            if (ch === '+' || ch === '-') {\n              number += this.source[this.index++];\n            }\n\n            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n              while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n                number += this.source[this.index++];\n              }\n            } else {\n              this.throwUnexpectedToken();\n            }\n          }\n\n          if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\n            this.throwUnexpectedToken();\n          }\n\n          return {\n            type: token_1.Token.NumericLiteral,\n            value: parseFloat(number),\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        };\n\n        ; // ECMA-262 11.8.4 String Literals\n\n        Scanner.prototype.scanStringLiteral = function () {\n          var start = this.index;\n          var quote = this.source[start];\n          assert_1.assert(quote === '\\'' || quote === '\"', 'String literal must starts with a quote');\n          ++this.index;\n          var octal = false;\n          var str = '';\n\n          while (!this.eof()) {\n            var ch = this.source[this.index++];\n\n            if (ch === quote) {\n              quote = '';\n              break;\n            } else if (ch === '\\\\') {\n              ch = this.source[this.index++];\n\n              if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n                switch (ch) {\n                  case 'u':\n                  case 'x':\n                    if (this.source[this.index] === '{') {\n                      ++this.index;\n                      str += this.scanUnicodeCodePointEscape();\n                    } else {\n                      var unescaped = this.scanHexEscape(ch);\n\n                      if (!unescaped) {\n                        this.throwUnexpectedToken();\n                      }\n\n                      str += unescaped;\n                    }\n\n                    break;\n\n                  case 'n':\n                    str += '\\n';\n                    break;\n\n                  case 'r':\n                    str += '\\r';\n                    break;\n\n                  case 't':\n                    str += '\\t';\n                    break;\n\n                  case 'b':\n                    str += '\\b';\n                    break;\n\n                  case 'f':\n                    str += '\\f';\n                    break;\n\n                  case 'v':\n                    str += '\\x0B';\n                    break;\n\n                  case '8':\n                  case '9':\n                    str += ch;\n                    this.tolerateUnexpectedToken();\n                    break;\n\n                  default:\n                    if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n                      var octToDec = this.octalToDecimal(ch);\n                      octal = octToDec.octal || octal;\n                      str += String.fromCharCode(octToDec.code);\n                    } else {\n                      str += ch;\n                    }\n\n                    break;\n                }\n              } else {\n                ++this.lineNumber;\n\n                if (ch === '\\r' && this.source[this.index] === '\\n') {\n                  ++this.index;\n                }\n\n                this.lineStart = this.index;\n              }\n            } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n              break;\n            } else {\n              str += ch;\n            }\n          }\n\n          if (quote !== '') {\n            this.index = start;\n            this.throwUnexpectedToken();\n          }\n\n          return {\n            type: token_1.Token.StringLiteral,\n            value: str,\n            octal: octal,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        };\n\n        ; // ECMA-262 11.8.6 Template Literal Lexical Components\n\n        Scanner.prototype.scanTemplate = function () {\n          var cooked = '';\n          var terminated = false;\n          var start = this.index;\n          var head = this.source[start] === '`';\n          var tail = false;\n          var rawOffset = 2;\n          ++this.index;\n\n          while (!this.eof()) {\n            var ch = this.source[this.index++];\n\n            if (ch === '`') {\n              rawOffset = 1;\n              tail = true;\n              terminated = true;\n              break;\n            } else if (ch === '$') {\n              if (this.source[this.index] === '{') {\n                this.curlyStack.push('${');\n                ++this.index;\n                terminated = true;\n                break;\n              }\n\n              cooked += ch;\n            } else if (ch === '\\\\') {\n              ch = this.source[this.index++];\n\n              if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n                switch (ch) {\n                  case 'n':\n                    cooked += '\\n';\n                    break;\n\n                  case 'r':\n                    cooked += '\\r';\n                    break;\n\n                  case 't':\n                    cooked += '\\t';\n                    break;\n\n                  case 'u':\n                  case 'x':\n                    if (this.source[this.index] === '{') {\n                      ++this.index;\n                      cooked += this.scanUnicodeCodePointEscape();\n                    } else {\n                      var restore = this.index;\n                      var unescaped = this.scanHexEscape(ch);\n\n                      if (unescaped) {\n                        cooked += unescaped;\n                      } else {\n                        this.index = restore;\n                        cooked += ch;\n                      }\n                    }\n\n                    break;\n\n                  case 'b':\n                    cooked += '\\b';\n                    break;\n\n                  case 'f':\n                    cooked += '\\f';\n                    break;\n\n                  case 'v':\n                    cooked += '\\v';\n                    break;\n\n                  default:\n                    if (ch === '0') {\n                      if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n                        // Illegal: \\01 \\02 and so on\n                        this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);\n                      }\n\n                      cooked += '\\0';\n                    } else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n                      // Illegal: \\1 \\2\n                      this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);\n                    } else {\n                      cooked += ch;\n                    }\n\n                    break;\n                }\n              } else {\n                ++this.lineNumber;\n\n                if (ch === '\\r' && this.source[this.index] === '\\n') {\n                  ++this.index;\n                }\n\n                this.lineStart = this.index;\n              }\n            } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n              ++this.lineNumber;\n\n              if (ch === '\\r' && this.source[this.index] === '\\n') {\n                ++this.index;\n              }\n\n              this.lineStart = this.index;\n              cooked += '\\n';\n            } else {\n              cooked += ch;\n            }\n          }\n\n          if (!terminated) {\n            this.throwUnexpectedToken();\n          }\n\n          if (!head) {\n            this.curlyStack.pop();\n          }\n\n          return {\n            type: token_1.Token.Template,\n            value: {\n              cooked: cooked,\n              raw: this.source.slice(start + 1, this.index - rawOffset)\n            },\n            head: head,\n            tail: tail,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        };\n\n        ; // ECMA-262 11.8.5 Regular Expression Literals\n\n        Scanner.prototype.testRegExp = function (pattern, flags) {\n          // The BMP character to use as a replacement for astral symbols when\n          // translating an ES6 \"u\"-flagged pattern to an ES5-compatible\n          // approximation.\n          // Note: replacing with '\\uFFFF' enables false positives in unlikely\n          // scenarios. For example, `[\\u{1044f}-\\u{10440}]` is an invalid\n          // pattern that would not be detected by this substitution.\n          var astralSubstitute = \"\\uFFFF\";\n          var tmp = pattern;\n          var self = this;\n\n          if (flags.indexOf('u') >= 0) {\n            tmp = tmp.replace(/\\\\u\\{([0-9a-fA-F]+)\\}|\\\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {\n              var codePoint = parseInt($1 || $2, 16);\n\n              if (codePoint > 0x10FFFF) {\n                self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);\n              }\n\n              if (codePoint <= 0xFFFF) {\n                return String.fromCharCode(codePoint);\n              }\n\n              return astralSubstitute;\n            }).replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, astralSubstitute);\n          } // First, detect invalid regular expressions.\n\n\n          try {\n            RegExp(tmp);\n          } catch (e) {\n            this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);\n          } // Return a regular expression object for this pattern-flag pair, or\n          // `null` in case the current environment doesn't support the flags it\n          // uses.\n\n\n          try {\n            return new RegExp(pattern, flags);\n          } catch (exception) {\n            /* istanbul ignore next */\n            return null;\n          }\n        };\n\n        ;\n\n        Scanner.prototype.scanRegExpBody = function () {\n          var ch = this.source[this.index];\n          assert_1.assert(ch === '/', 'Regular expression literal must start with a slash');\n          var str = this.source[this.index++];\n          var classMarker = false;\n          var terminated = false;\n\n          while (!this.eof()) {\n            ch = this.source[this.index++];\n            str += ch;\n\n            if (ch === '\\\\') {\n              ch = this.source[this.index++]; // ECMA-262 7.8.5\n\n              if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n                this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n              }\n\n              str += ch;\n            } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n              this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n            } else if (classMarker) {\n              if (ch === ']') {\n                classMarker = false;\n              }\n            } else {\n              if (ch === '/') {\n                terminated = true;\n                break;\n              } else if (ch === '[') {\n                classMarker = true;\n              }\n            }\n          }\n\n          if (!terminated) {\n            this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n          } // Exclude leading and trailing slash.\n\n\n          var body = str.substr(1, str.length - 2);\n          return {\n            value: body,\n            literal: str\n          };\n        };\n\n        ;\n\n        Scanner.prototype.scanRegExpFlags = function () {\n          var str = '';\n          var flags = '';\n\n          while (!this.eof()) {\n            var ch = this.source[this.index];\n\n            if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {\n              break;\n            }\n\n            ++this.index;\n\n            if (ch === '\\\\' && !this.eof()) {\n              ch = this.source[this.index];\n\n              if (ch === 'u') {\n                ++this.index;\n                var restore = this.index;\n                ch = this.scanHexEscape('u');\n\n                if (ch) {\n                  flags += ch;\n\n                  for (str += \"\\\\u\"; restore < this.index; ++restore) {\n                    str += this.source[restore];\n                  }\n                } else {\n                  this.index = restore;\n                  flags += 'u';\n                  str += \"\\\\u\";\n                }\n\n                this.tolerateUnexpectedToken();\n              } else {\n                str += '\\\\';\n                this.tolerateUnexpectedToken();\n              }\n            } else {\n              flags += ch;\n              str += ch;\n            }\n          }\n\n          return {\n            value: flags,\n            literal: str\n          };\n        };\n\n        ;\n\n        Scanner.prototype.scanRegExp = function () {\n          var start = this.index;\n          var body = this.scanRegExpBody();\n          var flags = this.scanRegExpFlags();\n          var value = this.testRegExp(body.value, flags.value);\n          return {\n            type: token_1.Token.RegularExpression,\n            value: value,\n            literal: body.literal + flags.literal,\n            regex: {\n              pattern: body.value,\n              flags: flags.value\n            },\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        };\n\n        ;\n\n        Scanner.prototype.lex = function () {\n          if (this.eof()) {\n            return {\n              type: token_1.Token.EOF,\n              lineNumber: this.lineNumber,\n              lineStart: this.lineStart,\n              start: this.index,\n              end: this.index\n            };\n          }\n\n          var cp = this.source.charCodeAt(this.index);\n\n          if (character_1.Character.isIdentifierStart(cp)) {\n            return this.scanIdentifier();\n          } // Very common: ( and ) and ;\n\n\n          if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {\n            return this.scanPunctuator();\n          } // String literal starts with single quote (U+0027) or double quote (U+0022).\n\n\n          if (cp === 0x27 || cp === 0x22) {\n            return this.scanStringLiteral();\n          } // Dot (.) U+002E can also start a floating-point number, hence the need\n          // to check the next character.\n\n\n          if (cp === 0x2E) {\n            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {\n              return this.scanNumericLiteral();\n            }\n\n            return this.scanPunctuator();\n          }\n\n          if (character_1.Character.isDecimalDigit(cp)) {\n            return this.scanNumericLiteral();\n          } // Template literals start with ` (U+0060) for template head\n          // or } (U+007D) for template middle or template tail.\n\n\n          if (cp === 0x60 || cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${') {\n            return this.scanTemplate();\n          } // Possible identifier start in a surrogate pair.\n\n\n          if (cp >= 0xD800 && cp < 0xDFFF) {\n            if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {\n              return this.scanIdentifier();\n            }\n          }\n\n          return this.scanPunctuator();\n        };\n\n        ;\n        return Scanner;\n      }();\n\n      exports.Scanner = Scanner;\n      /***/\n    },\n    /* 9 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\"; // See also tools/generate-unicode-regex.js.\n\n      var Regex = {\n        // Unicode v8.0.0 NonAsciiIdentifierStart:\n        NonAsciiIdentifierStart: /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]/,\n        // Unicode v8.0.0 NonAsciiIdentifierPart:\n        NonAsciiIdentifierPart: /[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/\n      };\n      exports.Character = {\n        fromCodePoint: function fromCodePoint(cp) {\n          return cp < 0x10000 ? String.fromCharCode(cp) : String.fromCharCode(0xD800 + (cp - 0x10000 >> 10)) + String.fromCharCode(0xDC00 + (cp - 0x10000 & 1023));\n        },\n        // ECMA-262 11.2 White Space\n        isWhiteSpace: function isWhiteSpace(cp) {\n          return cp === 0x20 || cp === 0x09 || cp === 0x0B || cp === 0x0C || cp === 0xA0 || cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0;\n        },\n        // ECMA-262 11.3 Line Terminators\n        isLineTerminator: function isLineTerminator(cp) {\n          return cp === 0x0A || cp === 0x0D || cp === 0x2028 || cp === 0x2029;\n        },\n        // ECMA-262 11.6 Identifier Names and Identifiers\n        isIdentifierStart: function isIdentifierStart(cp) {\n          return cp === 0x24 || cp === 0x5F || cp >= 0x41 && cp <= 0x5A || cp >= 0x61 && cp <= 0x7A || cp === 0x5C || cp >= 0x80 && Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp));\n        },\n        isIdentifierPart: function isIdentifierPart(cp) {\n          return cp === 0x24 || cp === 0x5F || cp >= 0x41 && cp <= 0x5A || cp >= 0x61 && cp <= 0x7A || cp >= 0x30 && cp <= 0x39 || cp === 0x5C || cp >= 0x80 && Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp));\n        },\n        // ECMA-262 11.8.3 Numeric Literals\n        isDecimalDigit: function isDecimalDigit(cp) {\n          return cp >= 0x30 && cp <= 0x39; // 0..9\n        },\n        isHexDigit: function isHexDigit(cp) {\n          return cp >= 0x30 && cp <= 0x39 || cp >= 0x41 && cp <= 0x46 || cp >= 0x61 && cp <= 0x66; // a..f\n        },\n        isOctalDigit: function isOctalDigit(cp) {\n          return cp >= 0x30 && cp <= 0x37; // 0..7\n        }\n      };\n      /***/\n    },\n    /* 10 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var syntax_1 = __webpack_require__(2);\n\n      var ArrayExpression = function () {\n        function ArrayExpression(elements) {\n          this.type = syntax_1.Syntax.ArrayExpression;\n          this.elements = elements;\n        }\n\n        return ArrayExpression;\n      }();\n\n      exports.ArrayExpression = ArrayExpression;\n\n      var ArrayPattern = function () {\n        function ArrayPattern(elements) {\n          this.type = syntax_1.Syntax.ArrayPattern;\n          this.elements = elements;\n        }\n\n        return ArrayPattern;\n      }();\n\n      exports.ArrayPattern = ArrayPattern;\n\n      var ArrowFunctionExpression = function () {\n        function ArrowFunctionExpression(params, body, expression) {\n          this.type = syntax_1.Syntax.ArrowFunctionExpression;\n          this.id = null;\n          this.params = params;\n          this.body = body;\n          this.generator = false;\n          this.expression = expression;\n        }\n\n        return ArrowFunctionExpression;\n      }();\n\n      exports.ArrowFunctionExpression = ArrowFunctionExpression;\n\n      var AssignmentExpression = function () {\n        function AssignmentExpression(operator, left, right) {\n          this.type = syntax_1.Syntax.AssignmentExpression;\n          this.operator = operator;\n          this.left = left;\n          this.right = right;\n        }\n\n        return AssignmentExpression;\n      }();\n\n      exports.AssignmentExpression = AssignmentExpression;\n\n      var AssignmentPattern = function () {\n        function AssignmentPattern(left, right) {\n          this.type = syntax_1.Syntax.AssignmentPattern;\n          this.left = left;\n          this.right = right;\n        }\n\n        return AssignmentPattern;\n      }();\n\n      exports.AssignmentPattern = AssignmentPattern;\n\n      var BinaryExpression = function () {\n        function BinaryExpression(operator, left, right) {\n          var logical = operator === '||' || operator === '&&';\n          this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;\n          this.operator = operator;\n          this.left = left;\n          this.right = right;\n        }\n\n        return BinaryExpression;\n      }();\n\n      exports.BinaryExpression = BinaryExpression;\n\n      var BlockStatement = function () {\n        function BlockStatement(body) {\n          this.type = syntax_1.Syntax.BlockStatement;\n          this.body = body;\n        }\n\n        return BlockStatement;\n      }();\n\n      exports.BlockStatement = BlockStatement;\n\n      var BreakStatement = function () {\n        function BreakStatement(label) {\n          this.type = syntax_1.Syntax.BreakStatement;\n          this.label = label;\n        }\n\n        return BreakStatement;\n      }();\n\n      exports.BreakStatement = BreakStatement;\n\n      var CallExpression = function () {\n        function CallExpression(callee, args) {\n          this.type = syntax_1.Syntax.CallExpression;\n          this.callee = callee;\n          this.arguments = args;\n        }\n\n        return CallExpression;\n      }();\n\n      exports.CallExpression = CallExpression;\n\n      var CatchClause = function () {\n        function CatchClause(param, body) {\n          this.type = syntax_1.Syntax.CatchClause;\n          this.param = param;\n          this.body = body;\n        }\n\n        return CatchClause;\n      }();\n\n      exports.CatchClause = CatchClause;\n\n      var ClassBody = function () {\n        function ClassBody(body) {\n          this.type = syntax_1.Syntax.ClassBody;\n          this.body = body;\n        }\n\n        return ClassBody;\n      }();\n\n      exports.ClassBody = ClassBody;\n\n      var ClassDeclaration = function () {\n        function ClassDeclaration(id, superClass, body) {\n          this.type = syntax_1.Syntax.ClassDeclaration;\n          this.id = id;\n          this.superClass = superClass;\n          this.body = body;\n        }\n\n        return ClassDeclaration;\n      }();\n\n      exports.ClassDeclaration = ClassDeclaration;\n\n      var ClassExpression = function () {\n        function ClassExpression(id, superClass, body) {\n          this.type = syntax_1.Syntax.ClassExpression;\n          this.id = id;\n          this.superClass = superClass;\n          this.body = body;\n        }\n\n        return ClassExpression;\n      }();\n\n      exports.ClassExpression = ClassExpression;\n\n      var ComputedMemberExpression = function () {\n        function ComputedMemberExpression(object, property) {\n          this.type = syntax_1.Syntax.MemberExpression;\n          this.computed = true;\n          this.object = object;\n          this.property = property;\n        }\n\n        return ComputedMemberExpression;\n      }();\n\n      exports.ComputedMemberExpression = ComputedMemberExpression;\n\n      var ConditionalExpression = function () {\n        function ConditionalExpression(test, consequent, alternate) {\n          this.type = syntax_1.Syntax.ConditionalExpression;\n          this.test = test;\n          this.consequent = consequent;\n          this.alternate = alternate;\n        }\n\n        return ConditionalExpression;\n      }();\n\n      exports.ConditionalExpression = ConditionalExpression;\n\n      var ContinueStatement = function () {\n        function ContinueStatement(label) {\n          this.type = syntax_1.Syntax.ContinueStatement;\n          this.label = label;\n        }\n\n        return ContinueStatement;\n      }();\n\n      exports.ContinueStatement = ContinueStatement;\n\n      var DebuggerStatement = function () {\n        function DebuggerStatement() {\n          this.type = syntax_1.Syntax.DebuggerStatement;\n        }\n\n        return DebuggerStatement;\n      }();\n\n      exports.DebuggerStatement = DebuggerStatement;\n\n      var Directive = function () {\n        function Directive(expression, directive) {\n          this.type = syntax_1.Syntax.ExpressionStatement;\n          this.expression = expression;\n          this.directive = directive;\n        }\n\n        return Directive;\n      }();\n\n      exports.Directive = Directive;\n\n      var DoWhileStatement = function () {\n        function DoWhileStatement(body, test) {\n          this.type = syntax_1.Syntax.DoWhileStatement;\n          this.body = body;\n          this.test = test;\n        }\n\n        return DoWhileStatement;\n      }();\n\n      exports.DoWhileStatement = DoWhileStatement;\n\n      var EmptyStatement = function () {\n        function EmptyStatement() {\n          this.type = syntax_1.Syntax.EmptyStatement;\n        }\n\n        return EmptyStatement;\n      }();\n\n      exports.EmptyStatement = EmptyStatement;\n\n      var ExportAllDeclaration = function () {\n        function ExportAllDeclaration(source) {\n          this.type = syntax_1.Syntax.ExportAllDeclaration;\n          this.source = source;\n        }\n\n        return ExportAllDeclaration;\n      }();\n\n      exports.ExportAllDeclaration = ExportAllDeclaration;\n\n      var ExportDefaultDeclaration = function () {\n        function ExportDefaultDeclaration(declaration) {\n          this.type = syntax_1.Syntax.ExportDefaultDeclaration;\n          this.declaration = declaration;\n        }\n\n        return ExportDefaultDeclaration;\n      }();\n\n      exports.ExportDefaultDeclaration = ExportDefaultDeclaration;\n\n      var ExportNamedDeclaration = function () {\n        function ExportNamedDeclaration(declaration, specifiers, source) {\n          this.type = syntax_1.Syntax.ExportNamedDeclaration;\n          this.declaration = declaration;\n          this.specifiers = specifiers;\n          this.source = source;\n        }\n\n        return ExportNamedDeclaration;\n      }();\n\n      exports.ExportNamedDeclaration = ExportNamedDeclaration;\n\n      var ExportSpecifier = function () {\n        function ExportSpecifier(local, exported) {\n          this.type = syntax_1.Syntax.ExportSpecifier;\n          this.exported = exported;\n          this.local = local;\n        }\n\n        return ExportSpecifier;\n      }();\n\n      exports.ExportSpecifier = ExportSpecifier;\n\n      var ExpressionStatement = function () {\n        function ExpressionStatement(expression) {\n          this.type = syntax_1.Syntax.ExpressionStatement;\n          this.expression = expression;\n        }\n\n        return ExpressionStatement;\n      }();\n\n      exports.ExpressionStatement = ExpressionStatement;\n\n      var ForInStatement = function () {\n        function ForInStatement(left, right, body) {\n          this.type = syntax_1.Syntax.ForInStatement;\n          this.left = left;\n          this.right = right;\n          this.body = body;\n          this.each = false;\n        }\n\n        return ForInStatement;\n      }();\n\n      exports.ForInStatement = ForInStatement;\n\n      var ForOfStatement = function () {\n        function ForOfStatement(left, right, body) {\n          this.type = syntax_1.Syntax.ForOfStatement;\n          this.left = left;\n          this.right = right;\n          this.body = body;\n        }\n\n        return ForOfStatement;\n      }();\n\n      exports.ForOfStatement = ForOfStatement;\n\n      var ForStatement = function () {\n        function ForStatement(init, test, update, body) {\n          this.type = syntax_1.Syntax.ForStatement;\n          this.init = init;\n          this.test = test;\n          this.update = update;\n          this.body = body;\n        }\n\n        return ForStatement;\n      }();\n\n      exports.ForStatement = ForStatement;\n\n      var FunctionDeclaration = function () {\n        function FunctionDeclaration(id, params, body, generator) {\n          this.type = syntax_1.Syntax.FunctionDeclaration;\n          this.id = id;\n          this.params = params;\n          this.body = body;\n          this.generator = generator;\n          this.expression = false;\n        }\n\n        return FunctionDeclaration;\n      }();\n\n      exports.FunctionDeclaration = FunctionDeclaration;\n\n      var FunctionExpression = function () {\n        function FunctionExpression(id, params, body, generator) {\n          this.type = syntax_1.Syntax.FunctionExpression;\n          this.id = id;\n          this.params = params;\n          this.body = body;\n          this.generator = generator;\n          this.expression = false;\n        }\n\n        return FunctionExpression;\n      }();\n\n      exports.FunctionExpression = FunctionExpression;\n\n      var Identifier = function () {\n        function Identifier(name) {\n          this.type = syntax_1.Syntax.Identifier;\n          this.name = name;\n        }\n\n        return Identifier;\n      }();\n\n      exports.Identifier = Identifier;\n\n      var IfStatement = function () {\n        function IfStatement(test, consequent, alternate) {\n          this.type = syntax_1.Syntax.IfStatement;\n          this.test = test;\n          this.consequent = consequent;\n          this.alternate = alternate;\n        }\n\n        return IfStatement;\n      }();\n\n      exports.IfStatement = IfStatement;\n\n      var ImportDeclaration = function () {\n        function ImportDeclaration(specifiers, source) {\n          this.type = syntax_1.Syntax.ImportDeclaration;\n          this.specifiers = specifiers;\n          this.source = source;\n        }\n\n        return ImportDeclaration;\n      }();\n\n      exports.ImportDeclaration = ImportDeclaration;\n\n      var ImportDefaultSpecifier = function () {\n        function ImportDefaultSpecifier(local) {\n          this.type = syntax_1.Syntax.ImportDefaultSpecifier;\n          this.local = local;\n        }\n\n        return ImportDefaultSpecifier;\n      }();\n\n      exports.ImportDefaultSpecifier = ImportDefaultSpecifier;\n\n      var ImportNamespaceSpecifier = function () {\n        function ImportNamespaceSpecifier(local) {\n          this.type = syntax_1.Syntax.ImportNamespaceSpecifier;\n          this.local = local;\n        }\n\n        return ImportNamespaceSpecifier;\n      }();\n\n      exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;\n\n      var ImportSpecifier = function () {\n        function ImportSpecifier(local, imported) {\n          this.type = syntax_1.Syntax.ImportSpecifier;\n          this.local = local;\n          this.imported = imported;\n        }\n\n        return ImportSpecifier;\n      }();\n\n      exports.ImportSpecifier = ImportSpecifier;\n\n      var LabeledStatement = function () {\n        function LabeledStatement(label, body) {\n          this.type = syntax_1.Syntax.LabeledStatement;\n          this.label = label;\n          this.body = body;\n        }\n\n        return LabeledStatement;\n      }();\n\n      exports.LabeledStatement = LabeledStatement;\n\n      var Literal = function () {\n        function Literal(value, raw) {\n          this.type = syntax_1.Syntax.Literal;\n          this.value = value;\n          this.raw = raw;\n        }\n\n        return Literal;\n      }();\n\n      exports.Literal = Literal;\n\n      var MetaProperty = function () {\n        function MetaProperty(meta, property) {\n          this.type = syntax_1.Syntax.MetaProperty;\n          this.meta = meta;\n          this.property = property;\n        }\n\n        return MetaProperty;\n      }();\n\n      exports.MetaProperty = MetaProperty;\n\n      var MethodDefinition = function () {\n        function MethodDefinition(key, computed, value, kind, isStatic) {\n          this.type = syntax_1.Syntax.MethodDefinition;\n          this.key = key;\n          this.computed = computed;\n          this.value = value;\n          this.kind = kind;\n          this.static = isStatic;\n        }\n\n        return MethodDefinition;\n      }();\n\n      exports.MethodDefinition = MethodDefinition;\n\n      var NewExpression = function () {\n        function NewExpression(callee, args) {\n          this.type = syntax_1.Syntax.NewExpression;\n          this.callee = callee;\n          this.arguments = args;\n        }\n\n        return NewExpression;\n      }();\n\n      exports.NewExpression = NewExpression;\n\n      var ObjectExpression = function () {\n        function ObjectExpression(properties) {\n          this.type = syntax_1.Syntax.ObjectExpression;\n          this.properties = properties;\n        }\n\n        return ObjectExpression;\n      }();\n\n      exports.ObjectExpression = ObjectExpression;\n\n      var ObjectPattern = function () {\n        function ObjectPattern(properties) {\n          this.type = syntax_1.Syntax.ObjectPattern;\n          this.properties = properties;\n        }\n\n        return ObjectPattern;\n      }();\n\n      exports.ObjectPattern = ObjectPattern;\n\n      var Program = function () {\n        function Program(body, sourceType) {\n          this.type = syntax_1.Syntax.Program;\n          this.body = body;\n          this.sourceType = sourceType;\n        }\n\n        return Program;\n      }();\n\n      exports.Program = Program;\n\n      var Property = function () {\n        function Property(kind, key, computed, value, method, shorthand) {\n          this.type = syntax_1.Syntax.Property;\n          this.key = key;\n          this.computed = computed;\n          this.value = value;\n          this.kind = kind;\n          this.method = method;\n          this.shorthand = shorthand;\n        }\n\n        return Property;\n      }();\n\n      exports.Property = Property;\n\n      var RegexLiteral = function () {\n        function RegexLiteral(value, raw, regex) {\n          this.type = syntax_1.Syntax.Literal;\n          this.value = value;\n          this.raw = raw;\n          this.regex = regex;\n        }\n\n        return RegexLiteral;\n      }();\n\n      exports.RegexLiteral = RegexLiteral;\n\n      var RestElement = function () {\n        function RestElement(argument) {\n          this.type = syntax_1.Syntax.RestElement;\n          this.argument = argument;\n        }\n\n        return RestElement;\n      }();\n\n      exports.RestElement = RestElement;\n\n      var ReturnStatement = function () {\n        function ReturnStatement(argument) {\n          this.type = syntax_1.Syntax.ReturnStatement;\n          this.argument = argument;\n        }\n\n        return ReturnStatement;\n      }();\n\n      exports.ReturnStatement = ReturnStatement;\n\n      var SequenceExpression = function () {\n        function SequenceExpression(expressions) {\n          this.type = syntax_1.Syntax.SequenceExpression;\n          this.expressions = expressions;\n        }\n\n        return SequenceExpression;\n      }();\n\n      exports.SequenceExpression = SequenceExpression;\n\n      var SpreadElement = function () {\n        function SpreadElement(argument) {\n          this.type = syntax_1.Syntax.SpreadElement;\n          this.argument = argument;\n        }\n\n        return SpreadElement;\n      }();\n\n      exports.SpreadElement = SpreadElement;\n\n      var StaticMemberExpression = function () {\n        function StaticMemberExpression(object, property) {\n          this.type = syntax_1.Syntax.MemberExpression;\n          this.computed = false;\n          this.object = object;\n          this.property = property;\n        }\n\n        return StaticMemberExpression;\n      }();\n\n      exports.StaticMemberExpression = StaticMemberExpression;\n\n      var Super = function () {\n        function Super() {\n          this.type = syntax_1.Syntax.Super;\n        }\n\n        return Super;\n      }();\n\n      exports.Super = Super;\n\n      var SwitchCase = function () {\n        function SwitchCase(test, consequent) {\n          this.type = syntax_1.Syntax.SwitchCase;\n          this.test = test;\n          this.consequent = consequent;\n        }\n\n        return SwitchCase;\n      }();\n\n      exports.SwitchCase = SwitchCase;\n\n      var SwitchStatement = function () {\n        function SwitchStatement(discriminant, cases) {\n          this.type = syntax_1.Syntax.SwitchStatement;\n          this.discriminant = discriminant;\n          this.cases = cases;\n        }\n\n        return SwitchStatement;\n      }();\n\n      exports.SwitchStatement = SwitchStatement;\n\n      var TaggedTemplateExpression = function () {\n        function TaggedTemplateExpression(tag, quasi) {\n          this.type = syntax_1.Syntax.TaggedTemplateExpression;\n          this.tag = tag;\n          this.quasi = quasi;\n        }\n\n        return TaggedTemplateExpression;\n      }();\n\n      exports.TaggedTemplateExpression = TaggedTemplateExpression;\n\n      var TemplateElement = function () {\n        function TemplateElement(value, tail) {\n          this.type = syntax_1.Syntax.TemplateElement;\n          this.value = value;\n          this.tail = tail;\n        }\n\n        return TemplateElement;\n      }();\n\n      exports.TemplateElement = TemplateElement;\n\n      var TemplateLiteral = function () {\n        function TemplateLiteral(quasis, expressions) {\n          this.type = syntax_1.Syntax.TemplateLiteral;\n          this.quasis = quasis;\n          this.expressions = expressions;\n        }\n\n        return TemplateLiteral;\n      }();\n\n      exports.TemplateLiteral = TemplateLiteral;\n\n      var ThisExpression = function () {\n        function ThisExpression() {\n          this.type = syntax_1.Syntax.ThisExpression;\n        }\n\n        return ThisExpression;\n      }();\n\n      exports.ThisExpression = ThisExpression;\n\n      var ThrowStatement = function () {\n        function ThrowStatement(argument) {\n          this.type = syntax_1.Syntax.ThrowStatement;\n          this.argument = argument;\n        }\n\n        return ThrowStatement;\n      }();\n\n      exports.ThrowStatement = ThrowStatement;\n\n      var TryStatement = function () {\n        function TryStatement(block, handler, finalizer) {\n          this.type = syntax_1.Syntax.TryStatement;\n          this.block = block;\n          this.handler = handler;\n          this.finalizer = finalizer;\n        }\n\n        return TryStatement;\n      }();\n\n      exports.TryStatement = TryStatement;\n\n      var UnaryExpression = function () {\n        function UnaryExpression(operator, argument) {\n          this.type = syntax_1.Syntax.UnaryExpression;\n          this.operator = operator;\n          this.argument = argument;\n          this.prefix = true;\n        }\n\n        return UnaryExpression;\n      }();\n\n      exports.UnaryExpression = UnaryExpression;\n\n      var UpdateExpression = function () {\n        function UpdateExpression(operator, argument, prefix) {\n          this.type = syntax_1.Syntax.UpdateExpression;\n          this.operator = operator;\n          this.argument = argument;\n          this.prefix = prefix;\n        }\n\n        return UpdateExpression;\n      }();\n\n      exports.UpdateExpression = UpdateExpression;\n\n      var VariableDeclaration = function () {\n        function VariableDeclaration(declarations, kind) {\n          this.type = syntax_1.Syntax.VariableDeclaration;\n          this.declarations = declarations;\n          this.kind = kind;\n        }\n\n        return VariableDeclaration;\n      }();\n\n      exports.VariableDeclaration = VariableDeclaration;\n\n      var VariableDeclarator = function () {\n        function VariableDeclarator(id, init) {\n          this.type = syntax_1.Syntax.VariableDeclarator;\n          this.id = id;\n          this.init = init;\n        }\n\n        return VariableDeclarator;\n      }();\n\n      exports.VariableDeclarator = VariableDeclarator;\n\n      var WhileStatement = function () {\n        function WhileStatement(test, body) {\n          this.type = syntax_1.Syntax.WhileStatement;\n          this.test = test;\n          this.body = body;\n        }\n\n        return WhileStatement;\n      }();\n\n      exports.WhileStatement = WhileStatement;\n\n      var WithStatement = function () {\n        function WithStatement(object, body) {\n          this.type = syntax_1.Syntax.WithStatement;\n          this.object = object;\n          this.body = body;\n        }\n\n        return WithStatement;\n      }();\n\n      exports.WithStatement = WithStatement;\n\n      var YieldExpression = function () {\n        function YieldExpression(argument, delegate) {\n          this.type = syntax_1.Syntax.YieldExpression;\n          this.argument = argument;\n          this.delegate = delegate;\n        }\n\n        return YieldExpression;\n      }();\n\n      exports.YieldExpression = YieldExpression;\n      /***/\n    },\n    /* 11 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /* istanbul ignore next */\n\n      var __extends = this && this.__extends || function (d, b) {\n        for (var p in b) {\n          if (b.hasOwnProperty(p)) d[p] = b[p];\n        }\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n\n      var character_1 = __webpack_require__(9);\n\n      var token_1 = __webpack_require__(7);\n\n      var parser_1 = __webpack_require__(3);\n\n      var xhtml_entities_1 = __webpack_require__(12);\n\n      var jsx_syntax_1 = __webpack_require__(13);\n\n      var Node = __webpack_require__(10);\n\n      var JSXNode = __webpack_require__(14);\n\n      var JSXToken;\n\n      (function (JSXToken) {\n        JSXToken[JSXToken[\"Identifier\"] = 100] = \"Identifier\";\n        JSXToken[JSXToken[\"Text\"] = 101] = \"Text\";\n      })(JSXToken || (JSXToken = {}));\n\n      token_1.TokenName[JSXToken.Identifier] = 'JSXIdentifier';\n      token_1.TokenName[JSXToken.Text] = 'JSXText'; // Fully qualified element name, e.g. <svg:path> returns \"svg:path\"\n\n      function getQualifiedElementName(elementName) {\n        var qualifiedName;\n\n        switch (elementName.type) {\n          case jsx_syntax_1.JSXSyntax.JSXIdentifier:\n            var id = elementName;\n            qualifiedName = id.name;\n            break;\n\n          case jsx_syntax_1.JSXSyntax.JSXNamespacedName:\n            var ns = elementName;\n            qualifiedName = getQualifiedElementName(ns.namespace) + ':' + getQualifiedElementName(ns.name);\n            break;\n\n          case jsx_syntax_1.JSXSyntax.JSXMemberExpression:\n            var expr = elementName;\n            qualifiedName = getQualifiedElementName(expr.object) + '.' + getQualifiedElementName(expr.property);\n            break;\n        }\n\n        return qualifiedName;\n      }\n\n      var JSXParser = function (_super) {\n        __extends(JSXParser, _super);\n\n        function JSXParser(code, options, delegate) {\n          _super.call(this, code, options, delegate);\n        }\n\n        JSXParser.prototype.parsePrimaryExpression = function () {\n          return this.match('<') ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);\n        };\n\n        JSXParser.prototype.startJSX = function () {\n          // Unwind the scanner before the lookahead token.\n          this.scanner.index = this.startMarker.index;\n          this.scanner.lineNumber = this.startMarker.lineNumber;\n          this.scanner.lineStart = this.startMarker.lineStart;\n        };\n\n        JSXParser.prototype.finishJSX = function () {\n          // Prime the next lookahead.\n          this.nextToken();\n        };\n\n        JSXParser.prototype.reenterJSX = function () {\n          this.startJSX();\n          this.expectJSX('}'); // Pop the closing '}' added from the lookahead.\n\n          if (this.config.tokens) {\n            this.tokens.pop();\n          }\n        };\n\n        JSXParser.prototype.createJSXNode = function () {\n          this.collectComments();\n          return {\n            index: this.scanner.index,\n            line: this.scanner.lineNumber,\n            column: this.scanner.index - this.scanner.lineStart\n          };\n        };\n\n        JSXParser.prototype.createJSXChildNode = function () {\n          return {\n            index: this.scanner.index,\n            line: this.scanner.lineNumber,\n            column: this.scanner.index - this.scanner.lineStart\n          };\n        };\n\n        JSXParser.prototype.scanXHTMLEntity = function (quote) {\n          var result = '&';\n          var valid = true;\n          var terminated = false;\n          var numeric = false;\n          var hex = false;\n\n          while (!this.scanner.eof() && valid && !terminated) {\n            var ch = this.scanner.source[this.scanner.index];\n\n            if (ch === quote) {\n              break;\n            }\n\n            terminated = ch === ';';\n            result += ch;\n            ++this.scanner.index;\n\n            if (!terminated) {\n              switch (result.length) {\n                case 2:\n                  // e.g. '&#123;'\n                  numeric = ch === '#';\n                  break;\n\n                case 3:\n                  if (numeric) {\n                    // e.g. '&#x41;'\n                    hex = ch === 'x';\n                    valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));\n                    numeric = numeric && !hex;\n                  }\n\n                  break;\n\n                default:\n                  valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));\n                  valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));\n                  break;\n              }\n            }\n          }\n\n          if (valid && terminated && result.length > 2) {\n            // e.g. '&#x41;' becomes just '#x41'\n            var str = result.substr(1, result.length - 2);\n\n            if (numeric && str.length > 1) {\n              result = String.fromCharCode(parseInt(str.substr(1), 10));\n            } else if (hex && str.length > 2) {\n              result = String.fromCharCode(parseInt('0' + str.substr(1), 16));\n            } else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {\n              result = xhtml_entities_1.XHTMLEntities[str];\n            }\n          }\n\n          return result;\n        }; // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.\n\n\n        JSXParser.prototype.lexJSX = function () {\n          var cp = this.scanner.source.charCodeAt(this.scanner.index); // < > / : = { }\n\n          if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {\n            var value = this.scanner.source[this.scanner.index++];\n            return {\n              type: token_1.Token.Punctuator,\n              value: value,\n              lineNumber: this.scanner.lineNumber,\n              lineStart: this.scanner.lineStart,\n              start: this.scanner.index - 1,\n              end: this.scanner.index\n            };\n          } // \" '\n\n\n          if (cp === 34 || cp === 39) {\n            var start = this.scanner.index;\n            var quote = this.scanner.source[this.scanner.index++];\n            var str = '';\n\n            while (!this.scanner.eof()) {\n              var ch = this.scanner.source[this.scanner.index++];\n\n              if (ch === quote) {\n                break;\n              } else if (ch === '&') {\n                str += this.scanXHTMLEntity(quote);\n              } else {\n                str += ch;\n              }\n            }\n\n            return {\n              type: token_1.Token.StringLiteral,\n              value: str,\n              lineNumber: this.scanner.lineNumber,\n              lineStart: this.scanner.lineStart,\n              start: start,\n              end: this.scanner.index\n            };\n          } // ... or .\n\n\n          if (cp === 46) {\n            var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);\n            var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);\n            var value = n1 === 46 && n2 === 46 ? '...' : '.';\n            var start = this.scanner.index;\n            this.scanner.index += value.length;\n            return {\n              type: token_1.Token.Punctuator,\n              value: value,\n              lineNumber: this.scanner.lineNumber,\n              lineStart: this.scanner.lineStart,\n              start: start,\n              end: this.scanner.index\n            };\n          } // `\n\n\n          if (cp === 96) {\n            // Only placeholder, since it will be rescanned as a real assignment expression.\n            return {\n              type: token_1.Token.Template,\n              lineNumber: this.scanner.lineNumber,\n              lineStart: this.scanner.lineStart,\n              start: this.scanner.index,\n              end: this.scanner.index\n            };\n          } // Identifer can not contain backslash (char code 92).\n\n\n          if (character_1.Character.isIdentifierStart(cp) && cp !== 92) {\n            var start = this.scanner.index;\n            ++this.scanner.index;\n\n            while (!this.scanner.eof()) {\n              var ch = this.scanner.source.charCodeAt(this.scanner.index);\n\n              if (character_1.Character.isIdentifierPart(ch) && ch !== 92) {\n                ++this.scanner.index;\n              } else if (ch === 45) {\n                // Hyphen (char code 45) can be part of an identifier.\n                ++this.scanner.index;\n              } else {\n                break;\n              }\n            }\n\n            var id = this.scanner.source.slice(start, this.scanner.index);\n            return {\n              type: JSXToken.Identifier,\n              value: id,\n              lineNumber: this.scanner.lineNumber,\n              lineStart: this.scanner.lineStart,\n              start: start,\n              end: this.scanner.index\n            };\n          }\n\n          this.scanner.throwUnexpectedToken();\n        };\n\n        JSXParser.prototype.nextJSXToken = function () {\n          this.collectComments();\n          this.startMarker.index = this.scanner.index;\n          this.startMarker.lineNumber = this.scanner.lineNumber;\n          this.startMarker.lineStart = this.scanner.lineStart;\n          var token = this.lexJSX();\n          this.lastMarker.index = this.scanner.index;\n          this.lastMarker.lineNumber = this.scanner.lineNumber;\n          this.lastMarker.lineStart = this.scanner.lineStart;\n\n          if (this.config.tokens) {\n            this.tokens.push(this.convertToken(token));\n          }\n\n          return token;\n        };\n\n        JSXParser.prototype.nextJSXText = function () {\n          this.startMarker.index = this.scanner.index;\n          this.startMarker.lineNumber = this.scanner.lineNumber;\n          this.startMarker.lineStart = this.scanner.lineStart;\n          var start = this.scanner.index;\n          var text = '';\n\n          while (!this.scanner.eof()) {\n            var ch = this.scanner.source[this.scanner.index];\n\n            if (ch === '{' || ch === '<') {\n              break;\n            }\n\n            ++this.scanner.index;\n            text += ch;\n\n            if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n              ++this.scanner.lineNumber;\n\n              if (ch === '\\r' && this.scanner.source[this.scanner.index] === '\\n') {\n                ++this.scanner.index;\n              }\n\n              this.scanner.lineStart = this.scanner.index;\n            }\n          }\n\n          this.lastMarker.index = this.scanner.index;\n          this.lastMarker.lineNumber = this.scanner.lineNumber;\n          this.lastMarker.lineStart = this.scanner.lineStart;\n          var token = {\n            type: JSXToken.Text,\n            value: text,\n            lineNumber: this.scanner.lineNumber,\n            lineStart: this.scanner.lineStart,\n            start: start,\n            end: this.scanner.index\n          };\n\n          if (text.length > 0 && this.config.tokens) {\n            this.tokens.push(this.convertToken(token));\n          }\n\n          return token;\n        };\n\n        JSXParser.prototype.peekJSXToken = function () {\n          var previousIndex = this.scanner.index;\n          var previousLineNumber = this.scanner.lineNumber;\n          var previousLineStart = this.scanner.lineStart;\n          this.scanner.scanComments();\n          var next = this.lexJSX();\n          this.scanner.index = previousIndex;\n          this.scanner.lineNumber = previousLineNumber;\n          this.scanner.lineStart = previousLineStart;\n          return next;\n        }; // Expect the next JSX token to match the specified punctuator.\n        // If not, an exception will be thrown.\n\n\n        JSXParser.prototype.expectJSX = function (value) {\n          var token = this.nextJSXToken();\n\n          if (token.type !== token_1.Token.Punctuator || token.value !== value) {\n            this.throwUnexpectedToken(token);\n          }\n        }; // Return true if the next JSX token matches the specified punctuator.\n\n\n        JSXParser.prototype.matchJSX = function (value) {\n          var next = this.peekJSXToken();\n          return next.type === token_1.Token.Punctuator && next.value === value;\n        };\n\n        JSXParser.prototype.parseJSXIdentifier = function () {\n          var node = this.createJSXNode();\n          var token = this.nextJSXToken();\n\n          if (token.type !== JSXToken.Identifier) {\n            this.throwUnexpectedToken(token);\n          }\n\n          return this.finalize(node, new JSXNode.JSXIdentifier(token.value));\n        };\n\n        JSXParser.prototype.parseJSXElementName = function () {\n          var node = this.createJSXNode();\n          var elementName = this.parseJSXIdentifier();\n\n          if (this.matchJSX(':')) {\n            var namespace = elementName;\n            this.expectJSX(':');\n            var name_1 = this.parseJSXIdentifier();\n            elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));\n          } else if (this.matchJSX('.')) {\n            while (this.matchJSX('.')) {\n              var object = elementName;\n              this.expectJSX('.');\n              var property = this.parseJSXIdentifier();\n              elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));\n            }\n          }\n\n          return elementName;\n        };\n\n        JSXParser.prototype.parseJSXAttributeName = function () {\n          var node = this.createJSXNode();\n          var attributeName;\n          var identifier = this.parseJSXIdentifier();\n\n          if (this.matchJSX(':')) {\n            var namespace = identifier;\n            this.expectJSX(':');\n            var name_2 = this.parseJSXIdentifier();\n            attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));\n          } else {\n            attributeName = identifier;\n          }\n\n          return attributeName;\n        };\n\n        JSXParser.prototype.parseJSXStringLiteralAttribute = function () {\n          var node = this.createJSXNode();\n          var token = this.nextJSXToken();\n\n          if (token.type !== token_1.Token.StringLiteral) {\n            this.throwUnexpectedToken(token);\n          }\n\n          var raw = this.getTokenRaw(token);\n          return this.finalize(node, new Node.Literal(token.value, raw));\n        };\n\n        JSXParser.prototype.parseJSXExpressionAttribute = function () {\n          var node = this.createJSXNode();\n          this.expectJSX('{');\n          this.finishJSX();\n\n          if (this.match('}')) {\n            this.tolerateError('JSX attributes must only be assigned a non-empty expression');\n          }\n\n          var expression = this.parseAssignmentExpression();\n          this.reenterJSX();\n          return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\n        };\n\n        JSXParser.prototype.parseJSXAttributeValue = function () {\n          return this.matchJSX('{') ? this.parseJSXExpressionAttribute() : this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();\n        };\n\n        JSXParser.prototype.parseJSXNameValueAttribute = function () {\n          var node = this.createJSXNode();\n          var name = this.parseJSXAttributeName();\n          var value = null;\n\n          if (this.matchJSX('=')) {\n            this.expectJSX('=');\n            value = this.parseJSXAttributeValue();\n          }\n\n          return this.finalize(node, new JSXNode.JSXAttribute(name, value));\n        };\n\n        JSXParser.prototype.parseJSXSpreadAttribute = function () {\n          var node = this.createJSXNode();\n          this.expectJSX('{');\n          this.expectJSX('...');\n          this.finishJSX();\n          var argument = this.parseAssignmentExpression();\n          this.reenterJSX();\n          return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));\n        };\n\n        JSXParser.prototype.parseJSXAttributes = function () {\n          var attributes = [];\n\n          while (!this.matchJSX('/') && !this.matchJSX('>')) {\n            var attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() : this.parseJSXNameValueAttribute();\n            attributes.push(attribute);\n          }\n\n          return attributes;\n        };\n\n        JSXParser.prototype.parseJSXOpeningElement = function () {\n          var node = this.createJSXNode();\n          this.expectJSX('<');\n          var name = this.parseJSXElementName();\n          var attributes = this.parseJSXAttributes();\n          var selfClosing = this.matchJSX('/');\n\n          if (selfClosing) {\n            this.expectJSX('/');\n          }\n\n          this.expectJSX('>');\n          return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\n        };\n\n        JSXParser.prototype.parseJSXBoundaryElement = function () {\n          var node = this.createJSXNode();\n          this.expectJSX('<');\n\n          if (this.matchJSX('/')) {\n            this.expectJSX('/');\n            var name_3 = this.parseJSXElementName();\n            this.expectJSX('>');\n            return this.finalize(node, new JSXNode.JSXClosingElement(name_3));\n          }\n\n          var name = this.parseJSXElementName();\n          var attributes = this.parseJSXAttributes();\n          var selfClosing = this.matchJSX('/');\n\n          if (selfClosing) {\n            this.expectJSX('/');\n          }\n\n          this.expectJSX('>');\n          return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\n        };\n\n        JSXParser.prototype.parseJSXEmptyExpression = function () {\n          var node = this.createJSXChildNode();\n          this.collectComments();\n          this.lastMarker.index = this.scanner.index;\n          this.lastMarker.lineNumber = this.scanner.lineNumber;\n          this.lastMarker.lineStart = this.scanner.lineStart;\n          return this.finalize(node, new JSXNode.JSXEmptyExpression());\n        };\n\n        JSXParser.prototype.parseJSXExpressionContainer = function () {\n          var node = this.createJSXNode();\n          this.expectJSX('{');\n          var expression;\n\n          if (this.matchJSX('}')) {\n            expression = this.parseJSXEmptyExpression();\n            this.expectJSX('}');\n          } else {\n            this.finishJSX();\n            expression = this.parseAssignmentExpression();\n            this.reenterJSX();\n          }\n\n          return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\n        };\n\n        JSXParser.prototype.parseJSXChildren = function () {\n          var children = [];\n\n          while (!this.scanner.eof()) {\n            var node = this.createJSXChildNode();\n            var token = this.nextJSXText();\n\n            if (token.start < token.end) {\n              var raw = this.getTokenRaw(token);\n              var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));\n              children.push(child);\n            }\n\n            if (this.scanner.source[this.scanner.index] === '{') {\n              var container = this.parseJSXExpressionContainer();\n              children.push(container);\n            } else {\n              break;\n            }\n          }\n\n          return children;\n        };\n\n        JSXParser.prototype.parseComplexJSXElement = function (el) {\n          var stack = [];\n\n          while (!this.scanner.eof()) {\n            el.children = el.children.concat(this.parseJSXChildren());\n            var node = this.createJSXChildNode();\n            var element = this.parseJSXBoundaryElement();\n\n            if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {\n              var opening = element;\n\n              if (opening.selfClosing) {\n                var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));\n                el.children.push(child);\n              } else {\n                stack.push(el);\n                el = {\n                  node: node,\n                  opening: opening,\n                  closing: null,\n                  children: []\n                };\n              }\n            }\n\n            if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {\n              el.closing = element;\n              var open_1 = getQualifiedElementName(el.opening.name);\n              var close_1 = getQualifiedElementName(el.closing.name);\n\n              if (open_1 !== close_1) {\n                this.tolerateError('Expected corresponding JSX closing tag for %0', open_1);\n              }\n\n              if (stack.length > 0) {\n                var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));\n                el = stack.pop();\n                el.children.push(child);\n              } else {\n                break;\n              }\n            }\n          }\n\n          return el;\n        };\n\n        JSXParser.prototype.parseJSXElement = function () {\n          var node = this.createJSXNode();\n          var opening = this.parseJSXOpeningElement();\n          var children = [];\n          var closing = null;\n\n          if (!opening.selfClosing) {\n            var el = this.parseComplexJSXElement({\n              node: node,\n              opening: opening,\n              closing: closing,\n              children: children\n            });\n            children = el.children;\n            closing = el.closing;\n          }\n\n          return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));\n        };\n\n        JSXParser.prototype.parseJSXRoot = function () {\n          // Pop the opening '<' added from the lookahead.\n          if (this.config.tokens) {\n            this.tokens.pop();\n          }\n\n          this.startJSX();\n          var element = this.parseJSXElement();\n          this.finishJSX();\n          return element;\n        };\n\n        return JSXParser;\n      }(parser_1.Parser);\n\n      exports.JSXParser = JSXParser;\n      /***/\n    },\n    /* 12 */\n\n    /***/\n    function (module, exports) {\n      // Generated by generate-xhtml-entities.js. DO NOT MODIFY!\n      \"use strict\";\n\n      exports.XHTMLEntities = {\n        quot: \"\\\"\",\n        amp: \"&\",\n        apos: \"'\",\n        gt: \">\",\n        nbsp: \"\\xA0\",\n        iexcl: \"\\xA1\",\n        cent: \"\\xA2\",\n        pound: \"\\xA3\",\n        curren: \"\\xA4\",\n        yen: \"\\xA5\",\n        brvbar: \"\\xA6\",\n        sect: \"\\xA7\",\n        uml: \"\\xA8\",\n        copy: \"\\xA9\",\n        ordf: \"\\xAA\",\n        laquo: \"\\xAB\",\n        not: \"\\xAC\",\n        shy: \"\\xAD\",\n        reg: \"\\xAE\",\n        macr: \"\\xAF\",\n        deg: \"\\xB0\",\n        plusmn: \"\\xB1\",\n        sup2: \"\\xB2\",\n        sup3: \"\\xB3\",\n        acute: \"\\xB4\",\n        micro: \"\\xB5\",\n        para: \"\\xB6\",\n        middot: \"\\xB7\",\n        cedil: \"\\xB8\",\n        sup1: \"\\xB9\",\n        ordm: \"\\xBA\",\n        raquo: \"\\xBB\",\n        frac14: \"\\xBC\",\n        frac12: \"\\xBD\",\n        frac34: \"\\xBE\",\n        iquest: \"\\xBF\",\n        Agrave: \"\\xC0\",\n        Aacute: \"\\xC1\",\n        Acirc: \"\\xC2\",\n        Atilde: \"\\xC3\",\n        Auml: \"\\xC4\",\n        Aring: \"\\xC5\",\n        AElig: \"\\xC6\",\n        Ccedil: \"\\xC7\",\n        Egrave: \"\\xC8\",\n        Eacute: \"\\xC9\",\n        Ecirc: \"\\xCA\",\n        Euml: \"\\xCB\",\n        Igrave: \"\\xCC\",\n        Iacute: \"\\xCD\",\n        Icirc: \"\\xCE\",\n        Iuml: \"\\xCF\",\n        ETH: \"\\xD0\",\n        Ntilde: \"\\xD1\",\n        Ograve: \"\\xD2\",\n        Oacute: \"\\xD3\",\n        Ocirc: \"\\xD4\",\n        Otilde: \"\\xD5\",\n        Ouml: \"\\xD6\",\n        times: \"\\xD7\",\n        Oslash: \"\\xD8\",\n        Ugrave: \"\\xD9\",\n        Uacute: \"\\xDA\",\n        Ucirc: \"\\xDB\",\n        Uuml: \"\\xDC\",\n        Yacute: \"\\xDD\",\n        THORN: \"\\xDE\",\n        szlig: \"\\xDF\",\n        agrave: \"\\xE0\",\n        aacute: \"\\xE1\",\n        acirc: \"\\xE2\",\n        atilde: \"\\xE3\",\n        auml: \"\\xE4\",\n        aring: \"\\xE5\",\n        aelig: \"\\xE6\",\n        ccedil: \"\\xE7\",\n        egrave: \"\\xE8\",\n        eacute: \"\\xE9\",\n        ecirc: \"\\xEA\",\n        euml: \"\\xEB\",\n        igrave: \"\\xEC\",\n        iacute: \"\\xED\",\n        icirc: \"\\xEE\",\n        iuml: \"\\xEF\",\n        eth: \"\\xF0\",\n        ntilde: \"\\xF1\",\n        ograve: \"\\xF2\",\n        oacute: \"\\xF3\",\n        ocirc: \"\\xF4\",\n        otilde: \"\\xF5\",\n        ouml: \"\\xF6\",\n        divide: \"\\xF7\",\n        oslash: \"\\xF8\",\n        ugrave: \"\\xF9\",\n        uacute: \"\\xFA\",\n        ucirc: \"\\xFB\",\n        uuml: \"\\xFC\",\n        yacute: \"\\xFD\",\n        thorn: \"\\xFE\",\n        yuml: \"\\xFF\",\n        OElig: \"\\u0152\",\n        oelig: \"\\u0153\",\n        Scaron: \"\\u0160\",\n        scaron: \"\\u0161\",\n        Yuml: \"\\u0178\",\n        fnof: \"\\u0192\",\n        circ: \"\\u02C6\",\n        tilde: \"\\u02DC\",\n        Alpha: \"\\u0391\",\n        Beta: \"\\u0392\",\n        Gamma: \"\\u0393\",\n        Delta: \"\\u0394\",\n        Epsilon: \"\\u0395\",\n        Zeta: \"\\u0396\",\n        Eta: \"\\u0397\",\n        Theta: \"\\u0398\",\n        Iota: \"\\u0399\",\n        Kappa: \"\\u039A\",\n        Lambda: \"\\u039B\",\n        Mu: \"\\u039C\",\n        Nu: \"\\u039D\",\n        Xi: \"\\u039E\",\n        Omicron: \"\\u039F\",\n        Pi: \"\\u03A0\",\n        Rho: \"\\u03A1\",\n        Sigma: \"\\u03A3\",\n        Tau: \"\\u03A4\",\n        Upsilon: \"\\u03A5\",\n        Phi: \"\\u03A6\",\n        Chi: \"\\u03A7\",\n        Psi: \"\\u03A8\",\n        Omega: \"\\u03A9\",\n        alpha: \"\\u03B1\",\n        beta: \"\\u03B2\",\n        gamma: \"\\u03B3\",\n        delta: \"\\u03B4\",\n        epsilon: \"\\u03B5\",\n        zeta: \"\\u03B6\",\n        eta: \"\\u03B7\",\n        theta: \"\\u03B8\",\n        iota: \"\\u03B9\",\n        kappa: \"\\u03BA\",\n        lambda: \"\\u03BB\",\n        mu: \"\\u03BC\",\n        nu: \"\\u03BD\",\n        xi: \"\\u03BE\",\n        omicron: \"\\u03BF\",\n        pi: \"\\u03C0\",\n        rho: \"\\u03C1\",\n        sigmaf: \"\\u03C2\",\n        sigma: \"\\u03C3\",\n        tau: \"\\u03C4\",\n        upsilon: \"\\u03C5\",\n        phi: \"\\u03C6\",\n        chi: \"\\u03C7\",\n        psi: \"\\u03C8\",\n        omega: \"\\u03C9\",\n        thetasym: \"\\u03D1\",\n        upsih: \"\\u03D2\",\n        piv: \"\\u03D6\",\n        ensp: \"\\u2002\",\n        emsp: \"\\u2003\",\n        thinsp: \"\\u2009\",\n        zwnj: \"\\u200C\",\n        zwj: \"\\u200D\",\n        lrm: \"\\u200E\",\n        rlm: \"\\u200F\",\n        ndash: \"\\u2013\",\n        mdash: \"\\u2014\",\n        lsquo: \"\\u2018\",\n        rsquo: \"\\u2019\",\n        sbquo: \"\\u201A\",\n        ldquo: \"\\u201C\",\n        rdquo: \"\\u201D\",\n        bdquo: \"\\u201E\",\n        dagger: \"\\u2020\",\n        Dagger: \"\\u2021\",\n        bull: \"\\u2022\",\n        hellip: \"\\u2026\",\n        permil: \"\\u2030\",\n        prime: \"\\u2032\",\n        Prime: \"\\u2033\",\n        lsaquo: \"\\u2039\",\n        rsaquo: \"\\u203A\",\n        oline: \"\\u203E\",\n        frasl: \"\\u2044\",\n        euro: \"\\u20AC\",\n        image: \"\\u2111\",\n        weierp: \"\\u2118\",\n        real: \"\\u211C\",\n        trade: \"\\u2122\",\n        alefsym: \"\\u2135\",\n        larr: \"\\u2190\",\n        uarr: \"\\u2191\",\n        rarr: \"\\u2192\",\n        darr: \"\\u2193\",\n        harr: \"\\u2194\",\n        crarr: \"\\u21B5\",\n        lArr: \"\\u21D0\",\n        uArr: \"\\u21D1\",\n        rArr: \"\\u21D2\",\n        dArr: \"\\u21D3\",\n        hArr: \"\\u21D4\",\n        forall: \"\\u2200\",\n        part: \"\\u2202\",\n        exist: \"\\u2203\",\n        empty: \"\\u2205\",\n        nabla: \"\\u2207\",\n        isin: \"\\u2208\",\n        notin: \"\\u2209\",\n        ni: \"\\u220B\",\n        prod: \"\\u220F\",\n        sum: \"\\u2211\",\n        minus: \"\\u2212\",\n        lowast: \"\\u2217\",\n        radic: \"\\u221A\",\n        prop: \"\\u221D\",\n        infin: \"\\u221E\",\n        ang: \"\\u2220\",\n        and: \"\\u2227\",\n        or: \"\\u2228\",\n        cap: \"\\u2229\",\n        cup: \"\\u222A\",\n        int: \"\\u222B\",\n        there4: \"\\u2234\",\n        sim: \"\\u223C\",\n        cong: \"\\u2245\",\n        asymp: \"\\u2248\",\n        ne: \"\\u2260\",\n        equiv: \"\\u2261\",\n        le: \"\\u2264\",\n        ge: \"\\u2265\",\n        sub: \"\\u2282\",\n        sup: \"\\u2283\",\n        nsub: \"\\u2284\",\n        sube: \"\\u2286\",\n        supe: \"\\u2287\",\n        oplus: \"\\u2295\",\n        otimes: \"\\u2297\",\n        perp: \"\\u22A5\",\n        sdot: \"\\u22C5\",\n        lceil: \"\\u2308\",\n        rceil: \"\\u2309\",\n        lfloor: \"\\u230A\",\n        rfloor: \"\\u230B\",\n        loz: \"\\u25CA\",\n        spades: \"\\u2660\",\n        clubs: \"\\u2663\",\n        hearts: \"\\u2665\",\n        diams: \"\\u2666\",\n        lang: \"\\u27E8\",\n        rang: \"\\u27E9\"\n      };\n      /***/\n    },\n    /* 13 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\";\n\n      exports.JSXSyntax = {\n        JSXAttribute: 'JSXAttribute',\n        JSXClosingElement: 'JSXClosingElement',\n        JSXElement: 'JSXElement',\n        JSXEmptyExpression: 'JSXEmptyExpression',\n        JSXExpressionContainer: 'JSXExpressionContainer',\n        JSXIdentifier: 'JSXIdentifier',\n        JSXMemberExpression: 'JSXMemberExpression',\n        JSXNamespacedName: 'JSXNamespacedName',\n        JSXOpeningElement: 'JSXOpeningElement',\n        JSXSpreadAttribute: 'JSXSpreadAttribute',\n        JSXText: 'JSXText'\n      };\n      /***/\n    },\n    /* 14 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var jsx_syntax_1 = __webpack_require__(13);\n\n      var JSXClosingElement = function () {\n        function JSXClosingElement(name) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;\n          this.name = name;\n        }\n\n        return JSXClosingElement;\n      }();\n\n      exports.JSXClosingElement = JSXClosingElement;\n\n      var JSXElement = function () {\n        function JSXElement(openingElement, children, closingElement) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXElement;\n          this.openingElement = openingElement;\n          this.children = children;\n          this.closingElement = closingElement;\n        }\n\n        return JSXElement;\n      }();\n\n      exports.JSXElement = JSXElement;\n\n      var JSXEmptyExpression = function () {\n        function JSXEmptyExpression() {\n          this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;\n        }\n\n        return JSXEmptyExpression;\n      }();\n\n      exports.JSXEmptyExpression = JSXEmptyExpression;\n\n      var JSXExpressionContainer = function () {\n        function JSXExpressionContainer(expression) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;\n          this.expression = expression;\n        }\n\n        return JSXExpressionContainer;\n      }();\n\n      exports.JSXExpressionContainer = JSXExpressionContainer;\n\n      var JSXIdentifier = function () {\n        function JSXIdentifier(name) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;\n          this.name = name;\n        }\n\n        return JSXIdentifier;\n      }();\n\n      exports.JSXIdentifier = JSXIdentifier;\n\n      var JSXMemberExpression = function () {\n        function JSXMemberExpression(object, property) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;\n          this.object = object;\n          this.property = property;\n        }\n\n        return JSXMemberExpression;\n      }();\n\n      exports.JSXMemberExpression = JSXMemberExpression;\n\n      var JSXAttribute = function () {\n        function JSXAttribute(name, value) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;\n          this.name = name;\n          this.value = value;\n        }\n\n        return JSXAttribute;\n      }();\n\n      exports.JSXAttribute = JSXAttribute;\n\n      var JSXNamespacedName = function () {\n        function JSXNamespacedName(namespace, name) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;\n          this.namespace = namespace;\n          this.name = name;\n        }\n\n        return JSXNamespacedName;\n      }();\n\n      exports.JSXNamespacedName = JSXNamespacedName;\n\n      var JSXOpeningElement = function () {\n        function JSXOpeningElement(name, selfClosing, attributes) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;\n          this.name = name;\n          this.selfClosing = selfClosing;\n          this.attributes = attributes;\n        }\n\n        return JSXOpeningElement;\n      }();\n\n      exports.JSXOpeningElement = JSXOpeningElement;\n\n      var JSXSpreadAttribute = function () {\n        function JSXSpreadAttribute(argument) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;\n          this.argument = argument;\n        }\n\n        return JSXSpreadAttribute;\n      }();\n\n      exports.JSXSpreadAttribute = JSXSpreadAttribute;\n\n      var JSXText = function () {\n        function JSXText(value, raw) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXText;\n          this.value = value;\n          this.raw = raw;\n        }\n\n        return JSXText;\n      }();\n\n      exports.JSXText = JSXText;\n      /***/\n    },\n    /* 15 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var scanner_1 = __webpack_require__(8);\n\n      var error_handler_1 = __webpack_require__(6);\n\n      var token_1 = __webpack_require__(7);\n\n      var Reader = function () {\n        function Reader() {\n          this.values = [];\n          this.curly = this.paren = -1;\n        }\n\n        ; // A function following one of those tokens is an expression.\n\n        Reader.prototype.beforeFunctionExpression = function (t) {\n          return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new', 'return', 'case', 'delete', 'throw', 'void', // assignment operators\n          '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=', '&=', '|=', '^=', ',', // binary/unary operators\n          '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&', '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=', '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;\n        };\n\n        ; // Determine if forward slash (/) is an operator or part of a regular expression\n        // https://github.com/mozilla/sweet.js/wiki/design\n\n        Reader.prototype.isRegexStart = function () {\n          var previous = this.values[this.values.length - 1];\n          var regex = previous !== null;\n\n          switch (previous) {\n            case 'this':\n            case ']':\n              regex = false;\n              break;\n\n            case ')':\n              var check = this.values[this.paren - 1];\n              regex = check === 'if' || check === 'while' || check === 'for' || check === 'with';\n              break;\n\n            case '}':\n              // Dividing a function by anything makes little sense,\n              // but we have to check for that.\n              regex = false;\n\n              if (this.values[this.curly - 3] === 'function') {\n                // Anonymous function, e.g. function(){} /42\n                var check_1 = this.values[this.curly - 4];\n                regex = check_1 ? !this.beforeFunctionExpression(check_1) : false;\n              } else if (this.values[this.curly - 4] === 'function') {\n                // Named function, e.g. function f(){} /42/\n                var check_2 = this.values[this.curly - 5];\n                regex = check_2 ? !this.beforeFunctionExpression(check_2) : true;\n              }\n\n          }\n\n          return regex;\n        };\n\n        ;\n\n        Reader.prototype.push = function (token) {\n          if (token.type === token_1.Token.Punctuator || token.type === token_1.Token.Keyword) {\n            if (token.value === '{') {\n              this.curly = this.values.length;\n            } else if (token.value === '(') {\n              this.paren = this.values.length;\n            }\n\n            this.values.push(token.value);\n          } else {\n            this.values.push(null);\n          }\n        };\n\n        ;\n        return Reader;\n      }();\n\n      var Tokenizer = function () {\n        function Tokenizer(code, config) {\n          this.errorHandler = new error_handler_1.ErrorHandler();\n          this.errorHandler.tolerant = config ? typeof config.tolerant === 'boolean' && config.tolerant : false;\n          this.scanner = new scanner_1.Scanner(code, this.errorHandler);\n          this.scanner.trackComment = config ? typeof config.comment === 'boolean' && config.comment : false;\n          this.trackRange = config ? typeof config.range === 'boolean' && config.range : false;\n          this.trackLoc = config ? typeof config.loc === 'boolean' && config.loc : false;\n          this.buffer = [];\n          this.reader = new Reader();\n        }\n\n        ;\n\n        Tokenizer.prototype.errors = function () {\n          return this.errorHandler.errors;\n        };\n\n        ;\n\n        Tokenizer.prototype.getNextToken = function () {\n          if (this.buffer.length === 0) {\n            var comments = this.scanner.scanComments();\n\n            if (this.scanner.trackComment) {\n              for (var i = 0; i < comments.length; ++i) {\n                var e = comments[i];\n                var comment = void 0;\n                var value = this.scanner.source.slice(e.slice[0], e.slice[1]);\n                comment = {\n                  type: e.multiLine ? 'BlockComment' : 'LineComment',\n                  value: value\n                };\n\n                if (this.trackRange) {\n                  comment.range = e.range;\n                }\n\n                if (this.trackLoc) {\n                  comment.loc = e.loc;\n                }\n\n                this.buffer.push(comment);\n              }\n            }\n\n            if (!this.scanner.eof()) {\n              var loc = void 0;\n\n              if (this.trackLoc) {\n                loc = {\n                  start: {\n                    line: this.scanner.lineNumber,\n                    column: this.scanner.index - this.scanner.lineStart\n                  },\n                  end: {}\n                };\n              }\n\n              var token = void 0;\n\n              if (this.scanner.source[this.scanner.index] === '/') {\n                token = this.reader.isRegexStart() ? this.scanner.scanRegExp() : this.scanner.scanPunctuator();\n              } else {\n                token = this.scanner.lex();\n              }\n\n              this.reader.push(token);\n              var entry = void 0;\n              entry = {\n                type: token_1.TokenName[token.type],\n                value: this.scanner.source.slice(token.start, token.end)\n              };\n\n              if (this.trackRange) {\n                entry.range = [token.start, token.end];\n              }\n\n              if (this.trackLoc) {\n                loc.end = {\n                  line: this.scanner.lineNumber,\n                  column: this.scanner.index - this.scanner.lineStart\n                };\n                entry.loc = loc;\n              }\n\n              if (token.regex) {\n                entry.regex = token.regex;\n              }\n\n              this.buffer.push(entry);\n            }\n          }\n\n          return this.buffer.shift();\n        };\n\n        ;\n        return Tokenizer;\n      }();\n\n      exports.Tokenizer = Tokenizer;\n      /***/\n    }\n    /******/\n    ])\n  );\n});\n\n;","map":{"version":3,"sources":["/home/yamin/My_repos/new-email-app/new-email-app/node_modules/degenerator/node_modules/esprima/dist/esprima.js"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","modules","installedModules","__webpack_require__","moduleId","id","loaded","call","m","c","p","comment_handler_1","parser_1","jsx_parser_1","tokenizer_1","parse","code","options","delegate","commentHandler","proxyDelegate","node","metadata","visit","parserDelegate","collectComment","comment","attachComment","CommentHandler","attach","parser","jsx","JSXParser","Parser","ast","parseProgram","comments","config","tokens","tolerant","errors","errorHandler","tokenize","tokenizer","Tokenizer","token","getNextToken","push","e","tolerate","syntax_1","Syntax","version","stack","leading","trailing","prototype","insertInnerComments","type","BlockStatement","body","length","innerComments","i","entry","end","offset","start","unshift","splice","findTrailingComments","trailingComments","entry_1","firstComment","range","findLeadingComments","leadingComments","target","pop","count","visitNode","Program","visitComment","value","loc","AssignmentExpression","AssignmentPattern","ArrayExpression","ArrayPattern","ArrowFunctionExpression","BinaryExpression","BreakStatement","CallExpression","CatchClause","ClassBody","ClassDeclaration","ClassExpression","ConditionalExpression","ContinueStatement","DoWhileStatement","DebuggerStatement","EmptyStatement","ExportAllDeclaration","ExportDefaultDeclaration","ExportNamedDeclaration","ExportSpecifier","ExpressionStatement","ForStatement","ForOfStatement","ForInStatement","FunctionDeclaration","FunctionExpression","Identifier","IfStatement","ImportDeclaration","ImportDefaultSpecifier","ImportNamespaceSpecifier","ImportSpecifier","Literal","LabeledStatement","LogicalExpression","MemberExpression","MetaProperty","MethodDefinition","NewExpression","ObjectExpression","ObjectPattern","Property","RestElement","ReturnStatement","SequenceExpression","SpreadElement","Super","SwitchCase","SwitchStatement","TaggedTemplateExpression","TemplateElement","TemplateLiteral","ThisExpression","ThrowStatement","TryStatement","UnaryExpression","UpdateExpression","VariableDeclaration","VariableDeclarator","WhileStatement","WithStatement","YieldExpression","assert_1","messages_1","error_handler_1","token_1","scanner_1","Node","ArrowParameterPlaceHolder","source","String","ErrorHandler","scanner","Scanner","trackComment","operatorPrecedence","sourceType","lookahead","hasLineTerminator","context","allowIn","allowYield","firstCoverInitializedNameError","isAssignmentTarget","isBindingElement","inFunctionBody","inIteration","inSwitch","labelSet","strict","startMarker","index","lineNumber","lineStart","lastMarker","nextToken","throwError","messageFormat","values","_i","arguments","args","Array","slice","msg","replace","whole","idx","assert","line","column","createError","tolerateError","unexpectedTokenError","message","Messages","UnexpectedToken","Token","EOF","UnexpectedEOS","UnexpectedIdentifier","NumericLiteral","UnexpectedNumber","StringLiteral","UnexpectedString","Template","UnexpectedTemplate","Keyword","isFutureReservedWord","UnexpectedReserved","isStrictModeReservedWord","StrictReservedWord","raw","throwUnexpectedToken","tolerateUnexpectedToken","collectComments","scanComments","multiLine","getTokenRaw","convertToken","t","TokenName","regex","next","lex","nextRegexToken","scanRegExp","createNode","startNode","finalize","meta","expect","Punctuator","expectCommaSeparator","expectKeyword","keyword","match","matchKeyword","matchContextualKeyword","matchAssign","op","isolateCoverGrammar","parseFunction","previousIsBindingElement","previousIsAssignmentTarget","previousFirstCoverInitializedNameError","result","inheritCoverGrammar","consumeSemicolon","parsePrimaryExpression","expr","octal","StrictOctalLiteral","BooleanLiteral","NullLiteral","parseTemplateLiteral","parseGroupExpression","parseArrayInitializer","parseObjectInitializer","RegexLiteral","parseIdentifierName","parseFunctionExpression","parseClassExpression","parseSpreadElement","arg","parseAssignmentExpression","elements","element","parsePropertyMethod","params","previousStrict","parseFunctionSourceElements","firstRestricted","stricted","parsePropertyMethodFunction","isGenerator","previousAllowYield","parseFormalParameters","method","parseObjectPropertyKey","key","isPropertyKey","name","parseObjectProperty","hasProto","kind","computed","shorthand","lookaheadPropertyKey","qualifiedPropertyName","parseGetterMethod","parseSetterMethod","parseGeneratorMethod","DuplicateProtoProperty","init","properties","parseTemplateHead","head","cooked","tail","parseTemplateElement","expressions","quasis","quasi","parseExpression","reinterpretExpressionAsPattern","argument","operator","left","startToken","parseRestElement","arrow","params_1","parseArguments","isIdentifierName","parseNewExpression","property","callee","parseLeftHandSideExpression","parseLeftHandSideExpressionAllowCall","previousAllowIn","StaticMemberExpression","ComputedMemberExpression","parseSuper","parseUpdateExpression","parseUnaryExpression","isRestrictedWord","StrictLHSPrefix","InvalidLHSInAssignment","prefix","StrictLHSPostfix","StrictDelete","parseExponentiationExpression","right","binaryPrecedence","precedence","parseBinaryExpression","prec","markers","parseConditionalExpression","consequent","alternate","checkPatternParam","param","validateParam","reinterpretAsCoverFormalsList","paramSet","StrictParamDupe","parseYieldExpression","list","expression","StrictLHSAssignment","parseStatementListItem","statement","IllegalExportDeclaration","parseExportDeclaration","IllegalImportDeclaration","parseImportDeclaration","parseLexicalDeclaration","inFor","parseFunctionDeclaration","parseClassDeclaration","isLexicalDeclaration","parseStatement","parseBlock","block","parseLexicalBinding","parsePattern","StrictVarName","parseBindingList","previousIndex","previousLineNumber","previousLineStart","declarations","parseBindingRestElement","parseArrayPattern","parsePatternWithDefault","parsePropertyPattern","keyToken","parseVariableIdentifier","parseObjectPattern","pattern","parseVariableDeclaration","parseVariableDeclarationList","opt","parseVariableStatement","parseEmptyStatement","parseExpressionStatement","parseIfStatement","test","parseDoWhileStatement","previousInIteration","parseWhileStatement","parseForStatement","update","forIn","decl","ForInOfLoopInitializer","initStartToken","InvalidLHSInForIn","InvalidLHSInForLoop","initSeq","parseContinueStatement","label","Object","hasOwnProperty","UnknownLabel","IllegalContinue","parseBreakStatement","IllegalBreak","parseReturnStatement","IllegalReturn","hasArgument","parseWithStatement","StrictModeWith","object","parseSwitchCase","parseSwitchStatement","discriminant","previousInSwitch","cases","defaultFound","clause","MultipleDefaultsInSwitch","parseLabelledStatement","Redeclaration","labeledBody","parseThrowStatement","NewlineAfterThrow","parseCatchClause","paramMap","DuplicateBinding","StrictCatchVariable","parseFinallyClause","parseTryStatement","handler","finalizer","NoCatchOrFinally","parseDebuggerStatement","RegularExpression","parseDirectivePrologues","previousLabelSet","previousInFunctionBody","StrictParamName","defineProperty","enumerable","writable","configurable","DefaultRestParameter","ParameterAfterRestParameter","parseFormalParameter","identifierIsOptional","StrictFunctionName","formalParameters","parseDirective","directive","Directive","isStartOfExpression","parseClassElement","hasConstructor","isStatic","StaticPrototype","generator","ConstructorSpecialMethod","DuplicateConstructor","parseClassElementList","parseClassBody","elementList","superClass","classBody","parseModuleSpecifier","InvalidModuleSpecifier","parseImportSpecifier","imported","local","parseNamedImports","specifiers","parseImportDefaultSpecifier","parseImportNamespaceSpecifier","NoAsAfterImportNamespace","src","concat","MissingFromClause","parseExportSpecifier","exported","exportDeclaration","declaration","isExportFromIdentifier","condition","Error","UnexpectedTokenIllegal","InvalidRegExp","UnterminatedRegExp","TemplateOctalLiteral","recordError","error","constructError","base","create","col","description","character_1","hexValue","ch","indexOf","toLowerCase","octalValue","curlyStack","eof","skipSingleLineComment","charCodeAt","Character","isLineTerminator","skipMultiLineComment","isWhiteSpace","isKeyword","codePointAt","cp","second","first","scanHexEscape","len","isHexDigit","fromCharCode","scanUnicodeCodePointEscape","fromCodePoint","getIdentifier","getComplexIdentifier","isIdentifierPart","isIdentifierStart","substr","octalToDecimal","isOctalDigit","scanIdentifier","scanPunctuator","str","scanHexLiteral","number","parseInt","scanBinaryLiteral","isDecimalDigit","scanOctalLiteral","isImplicitOctalLiteral","scanNumericLiteral","parseFloat","scanStringLiteral","quote","unescaped","octToDec","scanTemplate","terminated","rawOffset","restore","testRegExp","flags","astralSubstitute","tmp","self","$0","$1","$2","codePoint","RegExp","exception","scanRegExpBody","classMarker","literal","scanRegExpFlags","Regex","NonAsciiIdentifierStart","NonAsciiIdentifierPart","logical","each","static","tag","__extends","d","b","__","constructor","xhtml_entities_1","jsx_syntax_1","JSXNode","JSXToken","Text","getQualifiedElementName","elementName","qualifiedName","JSXSyntax","JSXIdentifier","JSXNamespacedName","ns","namespace","JSXMemberExpression","_super","parseJSXRoot","startJSX","finishJSX","reenterJSX","expectJSX","createJSXNode","createJSXChildNode","scanXHTMLEntity","valid","numeric","hex","XHTMLEntities","lexJSX","n1","n2","nextJSXToken","nextJSXText","text","peekJSXToken","matchJSX","parseJSXIdentifier","parseJSXElementName","name_1","parseJSXAttributeName","attributeName","identifier","name_2","parseJSXStringLiteralAttribute","parseJSXExpressionAttribute","JSXExpressionContainer","parseJSXAttributeValue","parseJSXElement","parseJSXNameValueAttribute","JSXAttribute","parseJSXSpreadAttribute","JSXSpreadAttribute","parseJSXAttributes","attributes","attribute","parseJSXOpeningElement","selfClosing","JSXOpeningElement","parseJSXBoundaryElement","name_3","JSXClosingElement","parseJSXEmptyExpression","JSXEmptyExpression","parseJSXExpressionContainer","parseJSXChildren","children","child","JSXText","container","parseComplexJSXElement","el","opening","JSXElement","closing","open_1","close_1","quot","amp","apos","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","tilde","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","loz","spades","clubs","hearts","diams","lang","rang","openingElement","closingElement","Reader","curly","paren","beforeFunctionExpression","isRegexStart","previous","check","check_1","check_2","trackRange","trackLoc","buffer","reader","shift"],"mappings":"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","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n/* istanbul ignore next */\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n/* istanbul ignore next */\n\telse if(typeof exports === 'object')\n\t\texports[\"esprima\"] = factory();\n\telse\n\t\troot[\"esprima\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/* istanbul ignore if */\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\n\t  Copyright JS Foundation and other contributors, https://js.foundation/\n\n\t  Redistribution and use in source and binary forms, with or without\n\t  modification, are permitted provided that the following conditions are met:\n\n\t    * Redistributions of source code must retain the above copyright\n\t      notice, this list of conditions and the following disclaimer.\n\t    * Redistributions in binary form must reproduce the above copyright\n\t      notice, this list of conditions and the following disclaimer in the\n\t      documentation and/or other materials provided with the distribution.\n\n\t  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\t  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\t  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\t  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n\t  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\t  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\t  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n\t  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n\t  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t*/\n\t\"use strict\";\n\tvar comment_handler_1 = __webpack_require__(1);\n\tvar parser_1 = __webpack_require__(3);\n\tvar jsx_parser_1 = __webpack_require__(11);\n\tvar tokenizer_1 = __webpack_require__(15);\n\tfunction parse(code, options, delegate) {\n\t    var commentHandler = null;\n\t    var proxyDelegate = function (node, metadata) {\n\t        if (delegate) {\n\t            delegate(node, metadata);\n\t        }\n\t        if (commentHandler) {\n\t            commentHandler.visit(node, metadata);\n\t        }\n\t    };\n\t    var parserDelegate = (typeof delegate === 'function') ? proxyDelegate : null;\n\t    var collectComment = false;\n\t    if (options) {\n\t        collectComment = (typeof options.comment === 'boolean' && options.comment);\n\t        var attachComment = (typeof options.attachComment === 'boolean' && options.attachComment);\n\t        if (collectComment || attachComment) {\n\t            commentHandler = new comment_handler_1.CommentHandler();\n\t            commentHandler.attach = attachComment;\n\t            options.comment = true;\n\t            parserDelegate = proxyDelegate;\n\t        }\n\t    }\n\t    var parser;\n\t    if (options && typeof options.jsx === 'boolean' && options.jsx) {\n\t        parser = new jsx_parser_1.JSXParser(code, options, parserDelegate);\n\t    }\n\t    else {\n\t        parser = new parser_1.Parser(code, options, parserDelegate);\n\t    }\n\t    var ast = (parser.parseProgram());\n\t    if (collectComment) {\n\t        ast.comments = commentHandler.comments;\n\t    }\n\t    if (parser.config.tokens) {\n\t        ast.tokens = parser.tokens;\n\t    }\n\t    if (parser.config.tolerant) {\n\t        ast.errors = parser.errorHandler.errors;\n\t    }\n\t    return ast;\n\t}\n\texports.parse = parse;\n\tfunction tokenize(code, options, delegate) {\n\t    var tokenizer = new tokenizer_1.Tokenizer(code, options);\n\t    var tokens;\n\t    tokens = [];\n\t    try {\n\t        while (true) {\n\t            var token = tokenizer.getNextToken();\n\t            if (!token) {\n\t                break;\n\t            }\n\t            if (delegate) {\n\t                token = delegate(token);\n\t            }\n\t            tokens.push(token);\n\t        }\n\t    }\n\t    catch (e) {\n\t        tokenizer.errorHandler.tolerate(e);\n\t    }\n\t    if (tokenizer.errorHandler.tolerant) {\n\t        tokens.errors = tokenizer.errors();\n\t    }\n\t    return tokens;\n\t}\n\texports.tokenize = tokenize;\n\tvar syntax_1 = __webpack_require__(2);\n\texports.Syntax = syntax_1.Syntax;\n\t// Sync with *.json manifests.\n\texports.version = '3.1.3';\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar syntax_1 = __webpack_require__(2);\n\tvar CommentHandler = (function () {\n\t    function CommentHandler() {\n\t        this.attach = false;\n\t        this.comments = [];\n\t        this.stack = [];\n\t        this.leading = [];\n\t        this.trailing = [];\n\t    }\n\t    CommentHandler.prototype.insertInnerComments = function (node, metadata) {\n\t        //  innnerComments for properties empty block\n\t        //  `function a() {/** comments **\\/}`\n\t        if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {\n\t            var innerComments = [];\n\t            for (var i = this.leading.length - 1; i >= 0; --i) {\n\t                var entry = this.leading[i];\n\t                if (metadata.end.offset >= entry.start) {\n\t                    innerComments.unshift(entry.comment);\n\t                    this.leading.splice(i, 1);\n\t                    this.trailing.splice(i, 1);\n\t                }\n\t            }\n\t            if (innerComments.length) {\n\t                node.innerComments = innerComments;\n\t            }\n\t        }\n\t    };\n\t    CommentHandler.prototype.findTrailingComments = function (node, metadata) {\n\t        var trailingComments = [];\n\t        if (this.trailing.length > 0) {\n\t            for (var i = this.trailing.length - 1; i >= 0; --i) {\n\t                var entry_1 = this.trailing[i];\n\t                if (entry_1.start >= metadata.end.offset) {\n\t                    trailingComments.unshift(entry_1.comment);\n\t                }\n\t            }\n\t            this.trailing.length = 0;\n\t            return trailingComments;\n\t        }\n\t        var entry = this.stack[this.stack.length - 1];\n\t        if (entry && entry.node.trailingComments) {\n\t            var firstComment = entry.node.trailingComments[0];\n\t            if (firstComment && firstComment.range[0] >= metadata.end.offset) {\n\t                trailingComments = entry.node.trailingComments;\n\t                delete entry.node.trailingComments;\n\t            }\n\t        }\n\t        return trailingComments;\n\t    };\n\t    CommentHandler.prototype.findLeadingComments = function (node, metadata) {\n\t        var leadingComments = [];\n\t        var target;\n\t        while (this.stack.length > 0) {\n\t            var entry = this.stack[this.stack.length - 1];\n\t            if (entry && entry.start >= metadata.start.offset) {\n\t                target = this.stack.pop().node;\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        if (target) {\n\t            var count = target.leadingComments ? target.leadingComments.length : 0;\n\t            for (var i = count - 1; i >= 0; --i) {\n\t                var comment = target.leadingComments[i];\n\t                if (comment.range[1] <= metadata.start.offset) {\n\t                    leadingComments.unshift(comment);\n\t                    target.leadingComments.splice(i, 1);\n\t                }\n\t            }\n\t            if (target.leadingComments && target.leadingComments.length === 0) {\n\t                delete target.leadingComments;\n\t            }\n\t            return leadingComments;\n\t        }\n\t        for (var i = this.leading.length - 1; i >= 0; --i) {\n\t            var entry = this.leading[i];\n\t            if (entry.start <= metadata.start.offset) {\n\t                leadingComments.unshift(entry.comment);\n\t                this.leading.splice(i, 1);\n\t            }\n\t        }\n\t        return leadingComments;\n\t    };\n\t    CommentHandler.prototype.visitNode = function (node, metadata) {\n\t        if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {\n\t            return;\n\t        }\n\t        this.insertInnerComments(node, metadata);\n\t        var trailingComments = this.findTrailingComments(node, metadata);\n\t        var leadingComments = this.findLeadingComments(node, metadata);\n\t        if (leadingComments.length > 0) {\n\t            node.leadingComments = leadingComments;\n\t        }\n\t        if (trailingComments.length > 0) {\n\t            node.trailingComments = trailingComments;\n\t        }\n\t        this.stack.push({\n\t            node: node,\n\t            start: metadata.start.offset\n\t        });\n\t    };\n\t    CommentHandler.prototype.visitComment = function (node, metadata) {\n\t        var type = (node.type[0] === 'L') ? 'Line' : 'Block';\n\t        var comment = {\n\t            type: type,\n\t            value: node.value\n\t        };\n\t        if (node.range) {\n\t            comment.range = node.range;\n\t        }\n\t        if (node.loc) {\n\t            comment.loc = node.loc;\n\t        }\n\t        this.comments.push(comment);\n\t        if (this.attach) {\n\t            var entry = {\n\t                comment: {\n\t                    type: type,\n\t                    value: node.value,\n\t                    range: [metadata.start.offset, metadata.end.offset]\n\t                },\n\t                start: metadata.start.offset\n\t            };\n\t            if (node.loc) {\n\t                entry.comment.loc = node.loc;\n\t            }\n\t            node.type = type;\n\t            this.leading.push(entry);\n\t            this.trailing.push(entry);\n\t        }\n\t    };\n\t    CommentHandler.prototype.visit = function (node, metadata) {\n\t        if (node.type === 'LineComment') {\n\t            this.visitComment(node, metadata);\n\t        }\n\t        else if (node.type === 'BlockComment') {\n\t            this.visitComment(node, metadata);\n\t        }\n\t        else if (this.attach) {\n\t            this.visitNode(node, metadata);\n\t        }\n\t    };\n\t    return CommentHandler;\n\t}());\n\texports.CommentHandler = CommentHandler;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.Syntax = {\n\t    AssignmentExpression: 'AssignmentExpression',\n\t    AssignmentPattern: 'AssignmentPattern',\n\t    ArrayExpression: 'ArrayExpression',\n\t    ArrayPattern: 'ArrayPattern',\n\t    ArrowFunctionExpression: 'ArrowFunctionExpression',\n\t    BlockStatement: 'BlockStatement',\n\t    BinaryExpression: 'BinaryExpression',\n\t    BreakStatement: 'BreakStatement',\n\t    CallExpression: 'CallExpression',\n\t    CatchClause: 'CatchClause',\n\t    ClassBody: 'ClassBody',\n\t    ClassDeclaration: 'ClassDeclaration',\n\t    ClassExpression: 'ClassExpression',\n\t    ConditionalExpression: 'ConditionalExpression',\n\t    ContinueStatement: 'ContinueStatement',\n\t    DoWhileStatement: 'DoWhileStatement',\n\t    DebuggerStatement: 'DebuggerStatement',\n\t    EmptyStatement: 'EmptyStatement',\n\t    ExportAllDeclaration: 'ExportAllDeclaration',\n\t    ExportDefaultDeclaration: 'ExportDefaultDeclaration',\n\t    ExportNamedDeclaration: 'ExportNamedDeclaration',\n\t    ExportSpecifier: 'ExportSpecifier',\n\t    ExpressionStatement: 'ExpressionStatement',\n\t    ForStatement: 'ForStatement',\n\t    ForOfStatement: 'ForOfStatement',\n\t    ForInStatement: 'ForInStatement',\n\t    FunctionDeclaration: 'FunctionDeclaration',\n\t    FunctionExpression: 'FunctionExpression',\n\t    Identifier: 'Identifier',\n\t    IfStatement: 'IfStatement',\n\t    ImportDeclaration: 'ImportDeclaration',\n\t    ImportDefaultSpecifier: 'ImportDefaultSpecifier',\n\t    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',\n\t    ImportSpecifier: 'ImportSpecifier',\n\t    Literal: 'Literal',\n\t    LabeledStatement: 'LabeledStatement',\n\t    LogicalExpression: 'LogicalExpression',\n\t    MemberExpression: 'MemberExpression',\n\t    MetaProperty: 'MetaProperty',\n\t    MethodDefinition: 'MethodDefinition',\n\t    NewExpression: 'NewExpression',\n\t    ObjectExpression: 'ObjectExpression',\n\t    ObjectPattern: 'ObjectPattern',\n\t    Program: 'Program',\n\t    Property: 'Property',\n\t    RestElement: 'RestElement',\n\t    ReturnStatement: 'ReturnStatement',\n\t    SequenceExpression: 'SequenceExpression',\n\t    SpreadElement: 'SpreadElement',\n\t    Super: 'Super',\n\t    SwitchCase: 'SwitchCase',\n\t    SwitchStatement: 'SwitchStatement',\n\t    TaggedTemplateExpression: 'TaggedTemplateExpression',\n\t    TemplateElement: 'TemplateElement',\n\t    TemplateLiteral: 'TemplateLiteral',\n\t    ThisExpression: 'ThisExpression',\n\t    ThrowStatement: 'ThrowStatement',\n\t    TryStatement: 'TryStatement',\n\t    UnaryExpression: 'UnaryExpression',\n\t    UpdateExpression: 'UpdateExpression',\n\t    VariableDeclaration: 'VariableDeclaration',\n\t    VariableDeclarator: 'VariableDeclarator',\n\t    WhileStatement: 'WhileStatement',\n\t    WithStatement: 'WithStatement',\n\t    YieldExpression: 'YieldExpression'\n\t};\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar assert_1 = __webpack_require__(4);\n\tvar messages_1 = __webpack_require__(5);\n\tvar error_handler_1 = __webpack_require__(6);\n\tvar token_1 = __webpack_require__(7);\n\tvar scanner_1 = __webpack_require__(8);\n\tvar syntax_1 = __webpack_require__(2);\n\tvar Node = __webpack_require__(10);\n\tvar ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';\n\tvar Parser = (function () {\n\t    function Parser(code, options, delegate) {\n\t        if (options === void 0) { options = {}; }\n\t        this.config = {\n\t            range: (typeof options.range === 'boolean') && options.range,\n\t            loc: (typeof options.loc === 'boolean') && options.loc,\n\t            source: null,\n\t            tokens: (typeof options.tokens === 'boolean') && options.tokens,\n\t            comment: (typeof options.comment === 'boolean') && options.comment,\n\t            tolerant: (typeof options.tolerant === 'boolean') && options.tolerant\n\t        };\n\t        if (this.config.loc && options.source && options.source !== null) {\n\t            this.config.source = String(options.source);\n\t        }\n\t        this.delegate = delegate;\n\t        this.errorHandler = new error_handler_1.ErrorHandler();\n\t        this.errorHandler.tolerant = this.config.tolerant;\n\t        this.scanner = new scanner_1.Scanner(code, this.errorHandler);\n\t        this.scanner.trackComment = this.config.comment;\n\t        this.operatorPrecedence = {\n\t            ')': 0,\n\t            ';': 0,\n\t            ',': 0,\n\t            '=': 0,\n\t            ']': 0,\n\t            '||': 1,\n\t            '&&': 2,\n\t            '|': 3,\n\t            '^': 4,\n\t            '&': 5,\n\t            '==': 6,\n\t            '!=': 6,\n\t            '===': 6,\n\t            '!==': 6,\n\t            '<': 7,\n\t            '>': 7,\n\t            '<=': 7,\n\t            '>=': 7,\n\t            '<<': 8,\n\t            '>>': 8,\n\t            '>>>': 8,\n\t            '+': 9,\n\t            '-': 9,\n\t            '*': 11,\n\t            '/': 11,\n\t            '%': 11\n\t        };\n\t        this.sourceType = (options && options.sourceType === 'module') ? 'module' : 'script';\n\t        this.lookahead = null;\n\t        this.hasLineTerminator = false;\n\t        this.context = {\n\t            allowIn: true,\n\t            allowYield: true,\n\t            firstCoverInitializedNameError: null,\n\t            isAssignmentTarget: false,\n\t            isBindingElement: false,\n\t            inFunctionBody: false,\n\t            inIteration: false,\n\t            inSwitch: false,\n\t            labelSet: {},\n\t            strict: (this.sourceType === 'module')\n\t        };\n\t        this.tokens = [];\n\t        this.startMarker = {\n\t            index: 0,\n\t            lineNumber: this.scanner.lineNumber,\n\t            lineStart: 0\n\t        };\n\t        this.lastMarker = {\n\t            index: 0,\n\t            lineNumber: this.scanner.lineNumber,\n\t            lineStart: 0\n\t        };\n\t        this.nextToken();\n\t        this.lastMarker = {\n\t            index: this.scanner.index,\n\t            lineNumber: this.scanner.lineNumber,\n\t            lineStart: this.scanner.lineStart\n\t        };\n\t    }\n\t    Parser.prototype.throwError = function (messageFormat) {\n\t        var values = [];\n\t        for (var _i = 1; _i < arguments.length; _i++) {\n\t            values[_i - 1] = arguments[_i];\n\t        }\n\t        var args = Array.prototype.slice.call(arguments, 1);\n\t        var msg = messageFormat.replace(/%(\\d)/g, function (whole, idx) {\n\t            assert_1.assert(idx < args.length, 'Message reference must be in range');\n\t            return args[idx];\n\t        });\n\t        var index = this.lastMarker.index;\n\t        var line = this.lastMarker.lineNumber;\n\t        var column = this.lastMarker.index - this.lastMarker.lineStart + 1;\n\t        throw this.errorHandler.createError(index, line, column, msg);\n\t    };\n\t    Parser.prototype.tolerateError = function (messageFormat) {\n\t        var values = [];\n\t        for (var _i = 1; _i < arguments.length; _i++) {\n\t            values[_i - 1] = arguments[_i];\n\t        }\n\t        var args = Array.prototype.slice.call(arguments, 1);\n\t        var msg = messageFormat.replace(/%(\\d)/g, function (whole, idx) {\n\t            assert_1.assert(idx < args.length, 'Message reference must be in range');\n\t            return args[idx];\n\t        });\n\t        var index = this.lastMarker.index;\n\t        var line = this.scanner.lineNumber;\n\t        var column = this.lastMarker.index - this.lastMarker.lineStart + 1;\n\t        this.errorHandler.tolerateError(index, line, column, msg);\n\t    };\n\t    // Throw an exception because of the token.\n\t    Parser.prototype.unexpectedTokenError = function (token, message) {\n\t        var msg = message || messages_1.Messages.UnexpectedToken;\n\t        var value;\n\t        if (token) {\n\t            if (!message) {\n\t                msg = (token.type === token_1.Token.EOF) ? messages_1.Messages.UnexpectedEOS :\n\t                    (token.type === token_1.Token.Identifier) ? messages_1.Messages.UnexpectedIdentifier :\n\t                        (token.type === token_1.Token.NumericLiteral) ? messages_1.Messages.UnexpectedNumber :\n\t                            (token.type === token_1.Token.StringLiteral) ? messages_1.Messages.UnexpectedString :\n\t                                (token.type === token_1.Token.Template) ? messages_1.Messages.UnexpectedTemplate :\n\t                                    messages_1.Messages.UnexpectedToken;\n\t                if (token.type === token_1.Token.Keyword) {\n\t                    if (this.scanner.isFutureReservedWord(token.value)) {\n\t                        msg = messages_1.Messages.UnexpectedReserved;\n\t                    }\n\t                    else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {\n\t                        msg = messages_1.Messages.StrictReservedWord;\n\t                    }\n\t                }\n\t            }\n\t            value = (token.type === token_1.Token.Template) ? token.value.raw : token.value;\n\t        }\n\t        else {\n\t            value = 'ILLEGAL';\n\t        }\n\t        msg = msg.replace('%0', value);\n\t        if (token && typeof token.lineNumber === 'number') {\n\t            var index = token.start;\n\t            var line = token.lineNumber;\n\t            var column = token.start - this.lastMarker.lineStart + 1;\n\t            return this.errorHandler.createError(index, line, column, msg);\n\t        }\n\t        else {\n\t            var index = this.lastMarker.index;\n\t            var line = this.lastMarker.lineNumber;\n\t            var column = index - this.lastMarker.lineStart + 1;\n\t            return this.errorHandler.createError(index, line, column, msg);\n\t        }\n\t    };\n\t    Parser.prototype.throwUnexpectedToken = function (token, message) {\n\t        throw this.unexpectedTokenError(token, message);\n\t    };\n\t    Parser.prototype.tolerateUnexpectedToken = function (token, message) {\n\t        this.errorHandler.tolerate(this.unexpectedTokenError(token, message));\n\t    };\n\t    Parser.prototype.collectComments = function () {\n\t        if (!this.config.comment) {\n\t            this.scanner.scanComments();\n\t        }\n\t        else {\n\t            var comments = this.scanner.scanComments();\n\t            if (comments.length > 0 && this.delegate) {\n\t                for (var i = 0; i < comments.length; ++i) {\n\t                    var e = comments[i];\n\t                    var node = void 0;\n\t                    node = {\n\t                        type: e.multiLine ? 'BlockComment' : 'LineComment',\n\t                        value: this.scanner.source.slice(e.slice[0], e.slice[1])\n\t                    };\n\t                    if (this.config.range) {\n\t                        node.range = e.range;\n\t                    }\n\t                    if (this.config.loc) {\n\t                        node.loc = e.loc;\n\t                    }\n\t                    var metadata = {\n\t                        start: {\n\t                            line: e.loc.start.line,\n\t                            column: e.loc.start.column,\n\t                            offset: e.range[0]\n\t                        },\n\t                        end: {\n\t                            line: e.loc.end.line,\n\t                            column: e.loc.end.column,\n\t                            offset: e.range[1]\n\t                        }\n\t                    };\n\t                    this.delegate(node, metadata);\n\t                }\n\t            }\n\t        }\n\t    };\n\t    // From internal representation to an external structure\n\t    Parser.prototype.getTokenRaw = function (token) {\n\t        return this.scanner.source.slice(token.start, token.end);\n\t    };\n\t    Parser.prototype.convertToken = function (token) {\n\t        var t;\n\t        t = {\n\t            type: token_1.TokenName[token.type],\n\t            value: this.getTokenRaw(token)\n\t        };\n\t        if (this.config.range) {\n\t            t.range = [token.start, token.end];\n\t        }\n\t        if (this.config.loc) {\n\t            t.loc = {\n\t                start: {\n\t                    line: this.startMarker.lineNumber,\n\t                    column: this.startMarker.index - this.startMarker.lineStart\n\t                },\n\t                end: {\n\t                    line: this.scanner.lineNumber,\n\t                    column: this.scanner.index - this.scanner.lineStart\n\t                }\n\t            };\n\t        }\n\t        if (token.regex) {\n\t            t.regex = token.regex;\n\t        }\n\t        return t;\n\t    };\n\t    Parser.prototype.nextToken = function () {\n\t        var token = this.lookahead;\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.lineNumber = this.scanner.lineNumber;\n\t        this.lastMarker.lineStart = this.scanner.lineStart;\n\t        this.collectComments();\n\t        this.startMarker.index = this.scanner.index;\n\t        this.startMarker.lineNumber = this.scanner.lineNumber;\n\t        this.startMarker.lineStart = this.scanner.lineStart;\n\t        var next;\n\t        next = this.scanner.lex();\n\t        this.hasLineTerminator = (token && next) ? (token.lineNumber !== next.lineNumber) : false;\n\t        if (next && this.context.strict && next.type === token_1.Token.Identifier) {\n\t            if (this.scanner.isStrictModeReservedWord(next.value)) {\n\t                next.type = token_1.Token.Keyword;\n\t            }\n\t        }\n\t        this.lookahead = next;\n\t        if (this.config.tokens && next.type !== token_1.Token.EOF) {\n\t            this.tokens.push(this.convertToken(next));\n\t        }\n\t        return token;\n\t    };\n\t    Parser.prototype.nextRegexToken = function () {\n\t        this.collectComments();\n\t        var token = this.scanner.scanRegExp();\n\t        if (this.config.tokens) {\n\t            // Pop the previous token, '/' or '/='\n\t            // This is added from the lookahead token.\n\t            this.tokens.pop();\n\t            this.tokens.push(this.convertToken(token));\n\t        }\n\t        // Prime the next lookahead.\n\t        this.lookahead = token;\n\t        this.nextToken();\n\t        return token;\n\t    };\n\t    Parser.prototype.createNode = function () {\n\t        return {\n\t            index: this.startMarker.index,\n\t            line: this.startMarker.lineNumber,\n\t            column: this.startMarker.index - this.startMarker.lineStart\n\t        };\n\t    };\n\t    Parser.prototype.startNode = function (token) {\n\t        return {\n\t            index: token.start,\n\t            line: token.lineNumber,\n\t            column: token.start - token.lineStart\n\t        };\n\t    };\n\t    Parser.prototype.finalize = function (meta, node) {\n\t        if (this.config.range) {\n\t            node.range = [meta.index, this.lastMarker.index];\n\t        }\n\t        if (this.config.loc) {\n\t            node.loc = {\n\t                start: {\n\t                    line: meta.line,\n\t                    column: meta.column\n\t                },\n\t                end: {\n\t                    line: this.lastMarker.lineNumber,\n\t                    column: this.lastMarker.index - this.lastMarker.lineStart\n\t                }\n\t            };\n\t            if (this.config.source) {\n\t                node.loc.source = this.config.source;\n\t            }\n\t        }\n\t        if (this.delegate) {\n\t            var metadata = {\n\t                start: {\n\t                    line: meta.line,\n\t                    column: meta.column,\n\t                    offset: meta.index\n\t                },\n\t                end: {\n\t                    line: this.lastMarker.lineNumber,\n\t                    column: this.lastMarker.index - this.lastMarker.lineStart,\n\t                    offset: this.lastMarker.index\n\t                }\n\t            };\n\t            this.delegate(node, metadata);\n\t        }\n\t        return node;\n\t    };\n\t    // Expect the next token to match the specified punctuator.\n\t    // If not, an exception will be thrown.\n\t    Parser.prototype.expect = function (value) {\n\t        var token = this.nextToken();\n\t        if (token.type !== token_1.Token.Punctuator || token.value !== value) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t    };\n\t    // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().\n\t    Parser.prototype.expectCommaSeparator = function () {\n\t        if (this.config.tolerant) {\n\t            var token = this.lookahead;\n\t            if (token.type === token_1.Token.Punctuator && token.value === ',') {\n\t                this.nextToken();\n\t            }\n\t            else if (token.type === token_1.Token.Punctuator && token.value === ';') {\n\t                this.nextToken();\n\t                this.tolerateUnexpectedToken(token);\n\t            }\n\t            else {\n\t                this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);\n\t            }\n\t        }\n\t        else {\n\t            this.expect(',');\n\t        }\n\t    };\n\t    // Expect the next token to match the specified keyword.\n\t    // If not, an exception will be thrown.\n\t    Parser.prototype.expectKeyword = function (keyword) {\n\t        var token = this.nextToken();\n\t        if (token.type !== token_1.Token.Keyword || token.value !== keyword) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t    };\n\t    // Return true if the next token matches the specified punctuator.\n\t    Parser.prototype.match = function (value) {\n\t        return this.lookahead.type === token_1.Token.Punctuator && this.lookahead.value === value;\n\t    };\n\t    // Return true if the next token matches the specified keyword\n\t    Parser.prototype.matchKeyword = function (keyword) {\n\t        return this.lookahead.type === token_1.Token.Keyword && this.lookahead.value === keyword;\n\t    };\n\t    // Return true if the next token matches the specified contextual keyword\n\t    // (where an identifier is sometimes a keyword depending on the context)\n\t    Parser.prototype.matchContextualKeyword = function (keyword) {\n\t        return this.lookahead.type === token_1.Token.Identifier && this.lookahead.value === keyword;\n\t    };\n\t    // Return true if the next token is an assignment operator\n\t    Parser.prototype.matchAssign = function () {\n\t        if (this.lookahead.type !== token_1.Token.Punctuator) {\n\t            return false;\n\t        }\n\t        var op = this.lookahead.value;\n\t        return op === '=' ||\n\t            op === '*=' ||\n\t            op === '**=' ||\n\t            op === '/=' ||\n\t            op === '%=' ||\n\t            op === '+=' ||\n\t            op === '-=' ||\n\t            op === '<<=' ||\n\t            op === '>>=' ||\n\t            op === '>>>=' ||\n\t            op === '&=' ||\n\t            op === '^=' ||\n\t            op === '|=';\n\t    };\n\t    // Cover grammar support.\n\t    //\n\t    // When an assignment expression position starts with an left parenthesis, the determination of the type\n\t    // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)\n\t    // or the first comma. This situation also defers the determination of all the expressions nested in the pair.\n\t    //\n\t    // There are three productions that can be parsed in a parentheses pair that needs to be determined\n\t    // after the outermost pair is closed. They are:\n\t    //\n\t    //   1. AssignmentExpression\n\t    //   2. BindingElements\n\t    //   3. AssignmentTargets\n\t    //\n\t    // In order to avoid exponential backtracking, we use two flags to denote if the production can be\n\t    // binding element or assignment target.\n\t    //\n\t    // The three productions have the relationship:\n\t    //\n\t    //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression\n\t    //\n\t    // with a single exception that CoverInitializedName when used directly in an Expression, generates\n\t    // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the\n\t    // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.\n\t    //\n\t    // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not\n\t    // effect the current flags. This means the production the parser parses is only used as an expression. Therefore\n\t    // the CoverInitializedName check is conducted.\n\t    //\n\t    // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates\n\t    // the flags outside of the parser. This means the production the parser parses is used as a part of a potential\n\t    // pattern. The CoverInitializedName check is deferred.\n\t    Parser.prototype.isolateCoverGrammar = function (parseFunction) {\n\t        var previousIsBindingElement = this.context.isBindingElement;\n\t        var previousIsAssignmentTarget = this.context.isAssignmentTarget;\n\t        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\n\t        this.context.isBindingElement = true;\n\t        this.context.isAssignmentTarget = true;\n\t        this.context.firstCoverInitializedNameError = null;\n\t        var result = parseFunction.call(this);\n\t        if (this.context.firstCoverInitializedNameError !== null) {\n\t            this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);\n\t        }\n\t        this.context.isBindingElement = previousIsBindingElement;\n\t        this.context.isAssignmentTarget = previousIsAssignmentTarget;\n\t        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;\n\t        return result;\n\t    };\n\t    Parser.prototype.inheritCoverGrammar = function (parseFunction) {\n\t        var previousIsBindingElement = this.context.isBindingElement;\n\t        var previousIsAssignmentTarget = this.context.isAssignmentTarget;\n\t        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\n\t        this.context.isBindingElement = true;\n\t        this.context.isAssignmentTarget = true;\n\t        this.context.firstCoverInitializedNameError = null;\n\t        var result = parseFunction.call(this);\n\t        this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;\n\t        this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;\n\t        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;\n\t        return result;\n\t    };\n\t    Parser.prototype.consumeSemicolon = function () {\n\t        if (this.match(';')) {\n\t            this.nextToken();\n\t        }\n\t        else if (!this.hasLineTerminator) {\n\t            if (this.lookahead.type !== token_1.Token.EOF && !this.match('}')) {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t            this.lastMarker.index = this.startMarker.index;\n\t            this.lastMarker.lineNumber = this.startMarker.lineNumber;\n\t            this.lastMarker.lineStart = this.startMarker.lineStart;\n\t        }\n\t    };\n\t    // ECMA-262 12.2 Primary Expressions\n\t    Parser.prototype.parsePrimaryExpression = function () {\n\t        var node = this.createNode();\n\t        var expr;\n\t        var value, token, raw;\n\t        switch (this.lookahead.type) {\n\t            case token_1.Token.Identifier:\n\t                if (this.sourceType === 'module' && this.lookahead.value === 'await') {\n\t                    this.tolerateUnexpectedToken(this.lookahead);\n\t                }\n\t                expr = this.finalize(node, new Node.Identifier(this.nextToken().value));\n\t                break;\n\t            case token_1.Token.NumericLiteral:\n\t            case token_1.Token.StringLiteral:\n\t                if (this.context.strict && this.lookahead.octal) {\n\t                    this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);\n\t                }\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                token = this.nextToken();\n\t                raw = this.getTokenRaw(token);\n\t                expr = this.finalize(node, new Node.Literal(token.value, raw));\n\t                break;\n\t            case token_1.Token.BooleanLiteral:\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                token = this.nextToken();\n\t                token.value = (token.value === 'true');\n\t                raw = this.getTokenRaw(token);\n\t                expr = this.finalize(node, new Node.Literal(token.value, raw));\n\t                break;\n\t            case token_1.Token.NullLiteral:\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                token = this.nextToken();\n\t                token.value = null;\n\t                raw = this.getTokenRaw(token);\n\t                expr = this.finalize(node, new Node.Literal(token.value, raw));\n\t                break;\n\t            case token_1.Token.Template:\n\t                expr = this.parseTemplateLiteral();\n\t                break;\n\t            case token_1.Token.Punctuator:\n\t                value = this.lookahead.value;\n\t                switch (value) {\n\t                    case '(':\n\t                        this.context.isBindingElement = false;\n\t                        expr = this.inheritCoverGrammar(this.parseGroupExpression);\n\t                        break;\n\t                    case '[':\n\t                        expr = this.inheritCoverGrammar(this.parseArrayInitializer);\n\t                        break;\n\t                    case '{':\n\t                        expr = this.inheritCoverGrammar(this.parseObjectInitializer);\n\t                        break;\n\t                    case '/':\n\t                    case '/=':\n\t                        this.context.isAssignmentTarget = false;\n\t                        this.context.isBindingElement = false;\n\t                        this.scanner.index = this.startMarker.index;\n\t                        token = this.nextRegexToken();\n\t                        raw = this.getTokenRaw(token);\n\t                        expr = this.finalize(node, new Node.RegexLiteral(token.value, raw, token.regex));\n\t                        break;\n\t                    default:\n\t                        this.throwUnexpectedToken(this.nextToken());\n\t                }\n\t                break;\n\t            case token_1.Token.Keyword:\n\t                if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {\n\t                    expr = this.parseIdentifierName();\n\t                }\n\t                else if (!this.context.strict && this.matchKeyword('let')) {\n\t                    expr = this.finalize(node, new Node.Identifier(this.nextToken().value));\n\t                }\n\t                else {\n\t                    this.context.isAssignmentTarget = false;\n\t                    this.context.isBindingElement = false;\n\t                    if (this.matchKeyword('function')) {\n\t                        expr = this.parseFunctionExpression();\n\t                    }\n\t                    else if (this.matchKeyword('this')) {\n\t                        this.nextToken();\n\t                        expr = this.finalize(node, new Node.ThisExpression());\n\t                    }\n\t                    else if (this.matchKeyword('class')) {\n\t                        expr = this.parseClassExpression();\n\t                    }\n\t                    else {\n\t                        this.throwUnexpectedToken(this.nextToken());\n\t                    }\n\t                }\n\t                break;\n\t            default:\n\t                this.throwUnexpectedToken(this.nextToken());\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.2.5 Array Initializer\n\t    Parser.prototype.parseSpreadElement = function () {\n\t        var node = this.createNode();\n\t        this.expect('...');\n\t        var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t        return this.finalize(node, new Node.SpreadElement(arg));\n\t    };\n\t    Parser.prototype.parseArrayInitializer = function () {\n\t        var node = this.createNode();\n\t        var elements = [];\n\t        this.expect('[');\n\t        while (!this.match(']')) {\n\t            if (this.match(',')) {\n\t                this.nextToken();\n\t                elements.push(null);\n\t            }\n\t            else if (this.match('...')) {\n\t                var element = this.parseSpreadElement();\n\t                if (!this.match(']')) {\n\t                    this.context.isAssignmentTarget = false;\n\t                    this.context.isBindingElement = false;\n\t                    this.expect(',');\n\t                }\n\t                elements.push(element);\n\t            }\n\t            else {\n\t                elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\n\t                if (!this.match(']')) {\n\t                    this.expect(',');\n\t                }\n\t            }\n\t        }\n\t        this.expect(']');\n\t        return this.finalize(node, new Node.ArrayExpression(elements));\n\t    };\n\t    // ECMA-262 12.2.6 Object Initializer\n\t    Parser.prototype.parsePropertyMethod = function (params) {\n\t        this.context.isAssignmentTarget = false;\n\t        this.context.isBindingElement = false;\n\t        var previousStrict = this.context.strict;\n\t        var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);\n\t        if (this.context.strict && params.firstRestricted) {\n\t            this.tolerateUnexpectedToken(params.firstRestricted, params.message);\n\t        }\n\t        if (this.context.strict && params.stricted) {\n\t            this.tolerateUnexpectedToken(params.stricted, params.message);\n\t        }\n\t        this.context.strict = previousStrict;\n\t        return body;\n\t    };\n\t    Parser.prototype.parsePropertyMethodFunction = function () {\n\t        var isGenerator = false;\n\t        var node = this.createNode();\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = false;\n\t        var params = this.parseFormalParameters();\n\t        var method = this.parsePropertyMethod(params);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n\t    };\n\t    Parser.prototype.parseObjectPropertyKey = function () {\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        var key = null;\n\t        switch (token.type) {\n\t            case token_1.Token.StringLiteral:\n\t            case token_1.Token.NumericLiteral:\n\t                if (this.context.strict && token.octal) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);\n\t                }\n\t                var raw = this.getTokenRaw(token);\n\t                key = this.finalize(node, new Node.Literal(token.value, raw));\n\t                break;\n\t            case token_1.Token.Identifier:\n\t            case token_1.Token.BooleanLiteral:\n\t            case token_1.Token.NullLiteral:\n\t            case token_1.Token.Keyword:\n\t                key = this.finalize(node, new Node.Identifier(token.value));\n\t                break;\n\t            case token_1.Token.Punctuator:\n\t                if (token.value === '[') {\n\t                    key = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    this.expect(']');\n\t                }\n\t                else {\n\t                    this.throwUnexpectedToken(token);\n\t                }\n\t                break;\n\t            default:\n\t                this.throwUnexpectedToken(token);\n\t        }\n\t        return key;\n\t    };\n\t    Parser.prototype.isPropertyKey = function (key, value) {\n\t        return (key.type === syntax_1.Syntax.Identifier && key.name === value) ||\n\t            (key.type === syntax_1.Syntax.Literal && key.value === value);\n\t    };\n\t    Parser.prototype.parseObjectProperty = function (hasProto) {\n\t        var node = this.createNode();\n\t        var token = this.lookahead;\n\t        var kind;\n\t        var key;\n\t        var value;\n\t        var computed = false;\n\t        var method = false;\n\t        var shorthand = false;\n\t        if (token.type === token_1.Token.Identifier) {\n\t            this.nextToken();\n\t            key = this.finalize(node, new Node.Identifier(token.value));\n\t        }\n\t        else if (this.match('*')) {\n\t            this.nextToken();\n\t        }\n\t        else {\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t        }\n\t        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\n\t        if (token.type === token_1.Token.Identifier && token.value === 'get' && lookaheadPropertyKey) {\n\t            kind = 'get';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            this.context.allowYield = false;\n\t            value = this.parseGetterMethod();\n\t        }\n\t        else if (token.type === token_1.Token.Identifier && token.value === 'set' && lookaheadPropertyKey) {\n\t            kind = 'set';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            value = this.parseSetterMethod();\n\t        }\n\t        else if (token.type === token_1.Token.Punctuator && token.value === '*' && lookaheadPropertyKey) {\n\t            kind = 'init';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            value = this.parseGeneratorMethod();\n\t            method = true;\n\t        }\n\t        else {\n\t            if (!key) {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t            kind = 'init';\n\t            if (this.match(':')) {\n\t                if (!computed && this.isPropertyKey(key, '__proto__')) {\n\t                    if (hasProto.value) {\n\t                        this.tolerateError(messages_1.Messages.DuplicateProtoProperty);\n\t                    }\n\t                    hasProto.value = true;\n\t                }\n\t                this.nextToken();\n\t                value = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t            }\n\t            else if (this.match('(')) {\n\t                value = this.parsePropertyMethodFunction();\n\t                method = true;\n\t            }\n\t            else if (token.type === token_1.Token.Identifier) {\n\t                var id = this.finalize(node, new Node.Identifier(token.value));\n\t                if (this.match('=')) {\n\t                    this.context.firstCoverInitializedNameError = this.lookahead;\n\t                    this.nextToken();\n\t                    shorthand = true;\n\t                    var init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    value = this.finalize(node, new Node.AssignmentPattern(id, init));\n\t                }\n\t                else {\n\t                    shorthand = true;\n\t                    value = id;\n\t                }\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.nextToken());\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));\n\t    };\n\t    Parser.prototype.parseObjectInitializer = function () {\n\t        var node = this.createNode();\n\t        this.expect('{');\n\t        var properties = [];\n\t        var hasProto = { value: false };\n\t        while (!this.match('}')) {\n\t            properties.push(this.parseObjectProperty(hasProto));\n\t            if (!this.match('}')) {\n\t                this.expectCommaSeparator();\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return this.finalize(node, new Node.ObjectExpression(properties));\n\t    };\n\t    // ECMA-262 12.2.9 Template Literals\n\t    Parser.prototype.parseTemplateHead = function () {\n\t        assert_1.assert(this.lookahead.head, 'Template literal must start with a template head');\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        var value = {\n\t            raw: token.value.raw,\n\t            cooked: token.value.cooked\n\t        };\n\t        return this.finalize(node, new Node.TemplateElement(value, token.tail));\n\t    };\n\t    Parser.prototype.parseTemplateElement = function () {\n\t        if (this.lookahead.type !== token_1.Token.Template) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        var value = {\n\t            raw: token.value.raw,\n\t            cooked: token.value.cooked\n\t        };\n\t        return this.finalize(node, new Node.TemplateElement(value, token.tail));\n\t    };\n\t    Parser.prototype.parseTemplateLiteral = function () {\n\t        var node = this.createNode();\n\t        var expressions = [];\n\t        var quasis = [];\n\t        var quasi = this.parseTemplateHead();\n\t        quasis.push(quasi);\n\t        while (!quasi.tail) {\n\t            expressions.push(this.parseExpression());\n\t            quasi = this.parseTemplateElement();\n\t            quasis.push(quasi);\n\t        }\n\t        return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));\n\t    };\n\t    // ECMA-262 12.2.10 The Grouping Operator\n\t    Parser.prototype.reinterpretExpressionAsPattern = function (expr) {\n\t        switch (expr.type) {\n\t            case syntax_1.Syntax.Identifier:\n\t            case syntax_1.Syntax.MemberExpression:\n\t            case syntax_1.Syntax.RestElement:\n\t            case syntax_1.Syntax.AssignmentPattern:\n\t                break;\n\t            case syntax_1.Syntax.SpreadElement:\n\t                expr.type = syntax_1.Syntax.RestElement;\n\t                this.reinterpretExpressionAsPattern(expr.argument);\n\t                break;\n\t            case syntax_1.Syntax.ArrayExpression:\n\t                expr.type = syntax_1.Syntax.ArrayPattern;\n\t                for (var i = 0; i < expr.elements.length; i++) {\n\t                    if (expr.elements[i] !== null) {\n\t                        this.reinterpretExpressionAsPattern(expr.elements[i]);\n\t                    }\n\t                }\n\t                break;\n\t            case syntax_1.Syntax.ObjectExpression:\n\t                expr.type = syntax_1.Syntax.ObjectPattern;\n\t                for (var i = 0; i < expr.properties.length; i++) {\n\t                    this.reinterpretExpressionAsPattern(expr.properties[i].value);\n\t                }\n\t                break;\n\t            case syntax_1.Syntax.AssignmentExpression:\n\t                expr.type = syntax_1.Syntax.AssignmentPattern;\n\t                delete expr.operator;\n\t                this.reinterpretExpressionAsPattern(expr.left);\n\t                break;\n\t            default:\n\t                // Allow other node type for tolerant parsing.\n\t                break;\n\t        }\n\t    };\n\t    Parser.prototype.parseGroupExpression = function () {\n\t        var expr;\n\t        this.expect('(');\n\t        if (this.match(')')) {\n\t            this.nextToken();\n\t            if (!this.match('=>')) {\n\t                this.expect('=>');\n\t            }\n\t            expr = {\n\t                type: ArrowParameterPlaceHolder,\n\t                params: []\n\t            };\n\t        }\n\t        else {\n\t            var startToken = this.lookahead;\n\t            var params = [];\n\t            if (this.match('...')) {\n\t                expr = this.parseRestElement(params);\n\t                this.expect(')');\n\t                if (!this.match('=>')) {\n\t                    this.expect('=>');\n\t                }\n\t                expr = {\n\t                    type: ArrowParameterPlaceHolder,\n\t                    params: [expr]\n\t                };\n\t            }\n\t            else {\n\t                var arrow = false;\n\t                this.context.isBindingElement = true;\n\t                expr = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t                if (this.match(',')) {\n\t                    var expressions = [];\n\t                    this.context.isAssignmentTarget = false;\n\t                    expressions.push(expr);\n\t                    while (this.startMarker.index < this.scanner.length) {\n\t                        if (!this.match(',')) {\n\t                            break;\n\t                        }\n\t                        this.nextToken();\n\t                        if (this.match('...')) {\n\t                            if (!this.context.isBindingElement) {\n\t                                this.throwUnexpectedToken(this.lookahead);\n\t                            }\n\t                            expressions.push(this.parseRestElement(params));\n\t                            this.expect(')');\n\t                            if (!this.match('=>')) {\n\t                                this.expect('=>');\n\t                            }\n\t                            this.context.isBindingElement = false;\n\t                            for (var i = 0; i < expressions.length; i++) {\n\t                                this.reinterpretExpressionAsPattern(expressions[i]);\n\t                            }\n\t                            arrow = true;\n\t                            expr = {\n\t                                type: ArrowParameterPlaceHolder,\n\t                                params: expressions\n\t                            };\n\t                        }\n\t                        else {\n\t                            expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\n\t                        }\n\t                        if (arrow) {\n\t                            break;\n\t                        }\n\t                    }\n\t                    if (!arrow) {\n\t                        expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\n\t                    }\n\t                }\n\t                if (!arrow) {\n\t                    this.expect(')');\n\t                    if (this.match('=>')) {\n\t                        if (expr.type === syntax_1.Syntax.Identifier && expr.name === 'yield') {\n\t                            arrow = true;\n\t                            expr = {\n\t                                type: ArrowParameterPlaceHolder,\n\t                                params: [expr]\n\t                            };\n\t                        }\n\t                        if (!arrow) {\n\t                            if (!this.context.isBindingElement) {\n\t                                this.throwUnexpectedToken(this.lookahead);\n\t                            }\n\t                            if (expr.type === syntax_1.Syntax.SequenceExpression) {\n\t                                for (var i = 0; i < expr.expressions.length; i++) {\n\t                                    this.reinterpretExpressionAsPattern(expr.expressions[i]);\n\t                                }\n\t                            }\n\t                            else {\n\t                                this.reinterpretExpressionAsPattern(expr);\n\t                            }\n\t                            var params_1 = (expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr]);\n\t                            expr = {\n\t                                type: ArrowParameterPlaceHolder,\n\t                                params: params_1\n\t                            };\n\t                        }\n\t                    }\n\t                    this.context.isBindingElement = false;\n\t                }\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.3 Left-Hand-Side Expressions\n\t    Parser.prototype.parseArguments = function () {\n\t        this.expect('(');\n\t        var args = [];\n\t        if (!this.match(')')) {\n\t            while (true) {\n\t                var expr = this.match('...') ? this.parseSpreadElement() :\n\t                    this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                args.push(expr);\n\t                if (this.match(')')) {\n\t                    break;\n\t                }\n\t                this.expectCommaSeparator();\n\t            }\n\t        }\n\t        this.expect(')');\n\t        return args;\n\t    };\n\t    Parser.prototype.isIdentifierName = function (token) {\n\t        return token.type === token_1.Token.Identifier ||\n\t            token.type === token_1.Token.Keyword ||\n\t            token.type === token_1.Token.BooleanLiteral ||\n\t            token.type === token_1.Token.NullLiteral;\n\t    };\n\t    Parser.prototype.parseIdentifierName = function () {\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        if (!this.isIdentifierName(token)) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t        return this.finalize(node, new Node.Identifier(token.value));\n\t    };\n\t    Parser.prototype.parseNewExpression = function () {\n\t        var node = this.createNode();\n\t        var id = this.parseIdentifierName();\n\t        assert_1.assert(id.name === 'new', 'New expression must start with `new`');\n\t        var expr;\n\t        if (this.match('.')) {\n\t            this.nextToken();\n\t            if (this.lookahead.type === token_1.Token.Identifier && this.context.inFunctionBody && this.lookahead.value === 'target') {\n\t                var property = this.parseIdentifierName();\n\t                expr = new Node.MetaProperty(id, property);\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t        }\n\t        else {\n\t            var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);\n\t            var args = this.match('(') ? this.parseArguments() : [];\n\t            expr = new Node.NewExpression(callee, args);\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        return this.finalize(node, expr);\n\t    };\n\t    Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {\n\t        var startToken = this.lookahead;\n\t        var previousAllowIn = this.context.allowIn;\n\t        this.context.allowIn = true;\n\t        var expr;\n\t        if (this.matchKeyword('super') && this.context.inFunctionBody) {\n\t            expr = this.createNode();\n\t            this.nextToken();\n\t            expr = this.finalize(expr, new Node.Super());\n\t            if (!this.match('(') && !this.match('.') && !this.match('[')) {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t        }\n\t        else {\n\t            expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\n\t        }\n\t        while (true) {\n\t            if (this.match('.')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('.');\n\t                var property = this.parseIdentifierName();\n\t                expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));\n\t            }\n\t            else if (this.match('(')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = false;\n\t                var args = this.parseArguments();\n\t                expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));\n\t            }\n\t            else if (this.match('[')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('[');\n\t                var property = this.isolateCoverGrammar(this.parseExpression);\n\t                this.expect(']');\n\t                expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));\n\t            }\n\t            else if (this.lookahead.type === token_1.Token.Template && this.lookahead.head) {\n\t                var quasi = this.parseTemplateLiteral();\n\t                expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        this.context.allowIn = previousAllowIn;\n\t        return expr;\n\t    };\n\t    Parser.prototype.parseSuper = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('super');\n\t        if (!this.match('[') && !this.match('.')) {\n\t            this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        return this.finalize(node, new Node.Super());\n\t    };\n\t    Parser.prototype.parseLeftHandSideExpression = function () {\n\t        assert_1.assert(this.context.allowIn, 'callee of new expression always allow in keyword.');\n\t        var node = this.startNode(this.lookahead);\n\t        var expr = (this.matchKeyword('super') && this.context.inFunctionBody) ? this.parseSuper() :\n\t            this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\n\t        while (true) {\n\t            if (this.match('[')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('[');\n\t                var property = this.isolateCoverGrammar(this.parseExpression);\n\t                this.expect(']');\n\t                expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));\n\t            }\n\t            else if (this.match('.')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('.');\n\t                var property = this.parseIdentifierName();\n\t                expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));\n\t            }\n\t            else if (this.lookahead.type === token_1.Token.Template && this.lookahead.head) {\n\t                var quasi = this.parseTemplateLiteral();\n\t                expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.4 Update Expressions\n\t    Parser.prototype.parseUpdateExpression = function () {\n\t        var expr;\n\t        var startToken = this.lookahead;\n\t        if (this.match('++') || this.match('--')) {\n\t            var node = this.startNode(startToken);\n\t            var token = this.nextToken();\n\t            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\t            if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\n\t                this.tolerateError(messages_1.Messages.StrictLHSPrefix);\n\t            }\n\t            if (!this.context.isAssignmentTarget) {\n\t                this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n\t            }\n\t            var prefix = true;\n\t            expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        else {\n\t            expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n\t            if (!this.hasLineTerminator && this.lookahead.type === token_1.Token.Punctuator) {\n\t                if (this.match('++') || this.match('--')) {\n\t                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\n\t                        this.tolerateError(messages_1.Messages.StrictLHSPostfix);\n\t                    }\n\t                    if (!this.context.isAssignmentTarget) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n\t                    }\n\t                    this.context.isAssignmentTarget = false;\n\t                    this.context.isBindingElement = false;\n\t                    var operator = this.nextToken().value;\n\t                    var prefix = false;\n\t                    expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));\n\t                }\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.5 Unary Operators\n\t    Parser.prototype.parseUnaryExpression = function () {\n\t        var expr;\n\t        if (this.match('+') || this.match('-') || this.match('~') || this.match('!') ||\n\t            this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {\n\t            var node = this.startNode(this.lookahead);\n\t            var token = this.nextToken();\n\t            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\t            expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));\n\t            if (this.context.strict && expr.operator === 'delete' && expr.argument.type === syntax_1.Syntax.Identifier) {\n\t                this.tolerateError(messages_1.Messages.StrictDelete);\n\t            }\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        else {\n\t            expr = this.parseUpdateExpression();\n\t        }\n\t        return expr;\n\t    };\n\t    Parser.prototype.parseExponentiationExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\t        if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match('**')) {\n\t            this.nextToken();\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t            var left = expr;\n\t            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n\t            expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.6 Exponentiation Operators\n\t    // ECMA-262 12.7 Multiplicative Operators\n\t    // ECMA-262 12.8 Additive Operators\n\t    // ECMA-262 12.9 Bitwise Shift Operators\n\t    // ECMA-262 12.10 Relational Operators\n\t    // ECMA-262 12.11 Equality Operators\n\t    // ECMA-262 12.12 Binary Bitwise Operators\n\t    // ECMA-262 12.13 Binary Logical Operators\n\t    Parser.prototype.binaryPrecedence = function (token) {\n\t        var op = token.value;\n\t        var precedence;\n\t        if (token.type === token_1.Token.Punctuator) {\n\t            precedence = this.operatorPrecedence[op] || 0;\n\t        }\n\t        else if (token.type === token_1.Token.Keyword) {\n\t            precedence = (op === 'instanceof' || (this.context.allowIn && op === 'in')) ? 7 : 0;\n\t        }\n\t        else {\n\t            precedence = 0;\n\t        }\n\t        return precedence;\n\t    };\n\t    Parser.prototype.parseBinaryExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);\n\t        var token = this.lookahead;\n\t        var prec = this.binaryPrecedence(token);\n\t        if (prec > 0) {\n\t            this.nextToken();\n\t            token.prec = prec;\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t            var markers = [startToken, this.lookahead];\n\t            var left = expr;\n\t            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n\t            var stack = [left, token, right];\n\t            while (true) {\n\t                prec = this.binaryPrecedence(this.lookahead);\n\t                if (prec <= 0) {\n\t                    break;\n\t                }\n\t                // Reduce: make a binary expression from the three topmost entries.\n\t                while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {\n\t                    right = stack.pop();\n\t                    var operator = stack.pop().value;\n\t                    left = stack.pop();\n\t                    markers.pop();\n\t                    var node = this.startNode(markers[markers.length - 1]);\n\t                    stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));\n\t                }\n\t                // Shift.\n\t                token = this.nextToken();\n\t                token.prec = prec;\n\t                stack.push(token);\n\t                markers.push(this.lookahead);\n\t                stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));\n\t            }\n\t            // Final reduce to clean-up the stack.\n\t            var i = stack.length - 1;\n\t            expr = stack[i];\n\t            markers.pop();\n\t            while (i > 1) {\n\t                var node = this.startNode(markers.pop());\n\t                expr = this.finalize(node, new Node.BinaryExpression(stack[i - 1].value, stack[i - 2], expr));\n\t                i -= 2;\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.14 Conditional Operator\n\t    Parser.prototype.parseConditionalExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.inheritCoverGrammar(this.parseBinaryExpression);\n\t        if (this.match('?')) {\n\t            this.nextToken();\n\t            var previousAllowIn = this.context.allowIn;\n\t            this.context.allowIn = true;\n\t            var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t            this.context.allowIn = previousAllowIn;\n\t            this.expect(':');\n\t            var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t            expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.15 Assignment Operators\n\t    Parser.prototype.checkPatternParam = function (options, param) {\n\t        switch (param.type) {\n\t            case syntax_1.Syntax.Identifier:\n\t                this.validateParam(options, param, param.name);\n\t                break;\n\t            case syntax_1.Syntax.RestElement:\n\t                this.checkPatternParam(options, param.argument);\n\t                break;\n\t            case syntax_1.Syntax.AssignmentPattern:\n\t                this.checkPatternParam(options, param.left);\n\t                break;\n\t            case syntax_1.Syntax.ArrayPattern:\n\t                for (var i = 0; i < param.elements.length; i++) {\n\t                    if (param.elements[i] !== null) {\n\t                        this.checkPatternParam(options, param.elements[i]);\n\t                    }\n\t                }\n\t                break;\n\t            case syntax_1.Syntax.YieldExpression:\n\t                break;\n\t            default:\n\t                assert_1.assert(param.type === syntax_1.Syntax.ObjectPattern, 'Invalid type');\n\t                for (var i = 0; i < param.properties.length; i++) {\n\t                    this.checkPatternParam(options, param.properties[i].value);\n\t                }\n\t                break;\n\t        }\n\t    };\n\t    Parser.prototype.reinterpretAsCoverFormalsList = function (expr) {\n\t        var params = [expr];\n\t        var options;\n\t        switch (expr.type) {\n\t            case syntax_1.Syntax.Identifier:\n\t                break;\n\t            case ArrowParameterPlaceHolder:\n\t                params = expr.params;\n\t                break;\n\t            default:\n\t                return null;\n\t        }\n\t        options = {\n\t            paramSet: {}\n\t        };\n\t        for (var i = 0; i < params.length; ++i) {\n\t            var param = params[i];\n\t            if (param.type === syntax_1.Syntax.AssignmentPattern) {\n\t                if (param.right.type === syntax_1.Syntax.YieldExpression) {\n\t                    if (param.right.argument) {\n\t                        this.throwUnexpectedToken(this.lookahead);\n\t                    }\n\t                    param.right.type = syntax_1.Syntax.Identifier;\n\t                    param.right.name = 'yield';\n\t                    delete param.right.argument;\n\t                    delete param.right.delegate;\n\t                }\n\t            }\n\t            this.checkPatternParam(options, param);\n\t            params[i] = param;\n\t        }\n\t        if (this.context.strict || !this.context.allowYield) {\n\t            for (var i = 0; i < params.length; ++i) {\n\t                var param = params[i];\n\t                if (param.type === syntax_1.Syntax.YieldExpression) {\n\t                    this.throwUnexpectedToken(this.lookahead);\n\t                }\n\t            }\n\t        }\n\t        if (options.message === messages_1.Messages.StrictParamDupe) {\n\t            var token = this.context.strict ? options.stricted : options.firstRestricted;\n\t            this.throwUnexpectedToken(token, options.message);\n\t        }\n\t        return {\n\t            params: params,\n\t            stricted: options.stricted,\n\t            firstRestricted: options.firstRestricted,\n\t            message: options.message\n\t        };\n\t    };\n\t    Parser.prototype.parseAssignmentExpression = function () {\n\t        var expr;\n\t        if (!this.context.allowYield && this.matchKeyword('yield')) {\n\t            expr = this.parseYieldExpression();\n\t        }\n\t        else {\n\t            var startToken = this.lookahead;\n\t            var token = startToken;\n\t            expr = this.parseConditionalExpression();\n\t            if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {\n\t                // ECMA-262 14.2 Arrow Function Definitions\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                var list = this.reinterpretAsCoverFormalsList(expr);\n\t                if (list) {\n\t                    if (this.hasLineTerminator) {\n\t                        this.tolerateUnexpectedToken(this.lookahead);\n\t                    }\n\t                    this.context.firstCoverInitializedNameError = null;\n\t                    var previousStrict = this.context.strict;\n\t                    var previousAllowYield = this.context.allowYield;\n\t                    this.context.allowYield = true;\n\t                    var node = this.startNode(startToken);\n\t                    this.expect('=>');\n\t                    var body = this.match('{') ? this.parseFunctionSourceElements() :\n\t                        this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    var expression = body.type !== syntax_1.Syntax.BlockStatement;\n\t                    if (this.context.strict && list.firstRestricted) {\n\t                        this.throwUnexpectedToken(list.firstRestricted, list.message);\n\t                    }\n\t                    if (this.context.strict && list.stricted) {\n\t                        this.tolerateUnexpectedToken(list.stricted, list.message);\n\t                    }\n\t                    expr = this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));\n\t                    this.context.strict = previousStrict;\n\t                    this.context.allowYield = previousAllowYield;\n\t                }\n\t            }\n\t            else {\n\t                if (this.matchAssign()) {\n\t                    if (!this.context.isAssignmentTarget) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n\t                    }\n\t                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {\n\t                        var id = (expr);\n\t                        if (this.scanner.isRestrictedWord(id.name)) {\n\t                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);\n\t                        }\n\t                        if (this.scanner.isStrictModeReservedWord(id.name)) {\n\t                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n\t                        }\n\t                    }\n\t                    if (!this.match('=')) {\n\t                        this.context.isAssignmentTarget = false;\n\t                        this.context.isBindingElement = false;\n\t                    }\n\t                    else {\n\t                        this.reinterpretExpressionAsPattern(expr);\n\t                    }\n\t                    token = this.nextToken();\n\t                    var right = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(token.value, expr, right));\n\t                    this.context.firstCoverInitializedNameError = null;\n\t                }\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.16 Comma Operator\n\t    Parser.prototype.parseExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t        if (this.match(',')) {\n\t            var expressions = [];\n\t            expressions.push(expr);\n\t            while (this.startMarker.index < this.scanner.length) {\n\t                if (!this.match(',')) {\n\t                    break;\n\t                }\n\t                this.nextToken();\n\t                expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\n\t            }\n\t            expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 13.2 Block\n\t    Parser.prototype.parseStatementListItem = function () {\n\t        var statement = null;\n\t        this.context.isAssignmentTarget = true;\n\t        this.context.isBindingElement = true;\n\t        if (this.lookahead.type === token_1.Token.Keyword) {\n\t            switch (this.lookahead.value) {\n\t                case 'export':\n\t                    if (this.sourceType !== 'module') {\n\t                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);\n\t                    }\n\t                    statement = this.parseExportDeclaration();\n\t                    break;\n\t                case 'import':\n\t                    if (this.sourceType !== 'module') {\n\t                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);\n\t                    }\n\t                    statement = this.parseImportDeclaration();\n\t                    break;\n\t                case 'const':\n\t                    statement = this.parseLexicalDeclaration({ inFor: false });\n\t                    break;\n\t                case 'function':\n\t                    statement = this.parseFunctionDeclaration();\n\t                    break;\n\t                case 'class':\n\t                    statement = this.parseClassDeclaration();\n\t                    break;\n\t                case 'let':\n\t                    statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({ inFor: false }) : this.parseStatement();\n\t                    break;\n\t                default:\n\t                    statement = this.parseStatement();\n\t                    break;\n\t            }\n\t        }\n\t        else {\n\t            statement = this.parseStatement();\n\t        }\n\t        return statement;\n\t    };\n\t    Parser.prototype.parseBlock = function () {\n\t        var node = this.createNode();\n\t        this.expect('{');\n\t        var block = [];\n\t        while (true) {\n\t            if (this.match('}')) {\n\t                break;\n\t            }\n\t            block.push(this.parseStatementListItem());\n\t        }\n\t        this.expect('}');\n\t        return this.finalize(node, new Node.BlockStatement(block));\n\t    };\n\t    // ECMA-262 13.3.1 Let and Const Declarations\n\t    Parser.prototype.parseLexicalBinding = function (kind, options) {\n\t        var node = this.createNode();\n\t        var params = [];\n\t        var id = this.parsePattern(params, kind);\n\t        // ECMA-262 12.2.1\n\t        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {\n\t            if (this.scanner.isRestrictedWord((id).name)) {\n\t                this.tolerateError(messages_1.Messages.StrictVarName);\n\t            }\n\t        }\n\t        var init = null;\n\t        if (kind === 'const') {\n\t            if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {\n\t                this.expect('=');\n\t                init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t            }\n\t        }\n\t        else if ((!options.inFor && id.type !== syntax_1.Syntax.Identifier) || this.match('=')) {\n\t            this.expect('=');\n\t            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t        }\n\t        return this.finalize(node, new Node.VariableDeclarator(id, init));\n\t    };\n\t    Parser.prototype.parseBindingList = function (kind, options) {\n\t        var list = [this.parseLexicalBinding(kind, options)];\n\t        while (this.match(',')) {\n\t            this.nextToken();\n\t            list.push(this.parseLexicalBinding(kind, options));\n\t        }\n\t        return list;\n\t    };\n\t    Parser.prototype.isLexicalDeclaration = function () {\n\t        var previousIndex = this.scanner.index;\n\t        var previousLineNumber = this.scanner.lineNumber;\n\t        var previousLineStart = this.scanner.lineStart;\n\t        this.collectComments();\n\t        var next = this.scanner.lex();\n\t        this.scanner.index = previousIndex;\n\t        this.scanner.lineNumber = previousLineNumber;\n\t        this.scanner.lineStart = previousLineStart;\n\t        return (next.type === token_1.Token.Identifier) ||\n\t            (next.type === token_1.Token.Punctuator && next.value === '[') ||\n\t            (next.type === token_1.Token.Punctuator && next.value === '{') ||\n\t            (next.type === token_1.Token.Keyword && next.value === 'let') ||\n\t            (next.type === token_1.Token.Keyword && next.value === 'yield');\n\t    };\n\t    Parser.prototype.parseLexicalDeclaration = function (options) {\n\t        var node = this.createNode();\n\t        var kind = this.nextToken().value;\n\t        assert_1.assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');\n\t        var declarations = this.parseBindingList(kind, options);\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.VariableDeclaration(declarations, kind));\n\t    };\n\t    // ECMA-262 13.3.3 Destructuring Binding Patterns\n\t    Parser.prototype.parseBindingRestElement = function (params, kind) {\n\t        var node = this.createNode();\n\t        this.expect('...');\n\t        var arg = this.parsePattern(params, kind);\n\t        return this.finalize(node, new Node.RestElement(arg));\n\t    };\n\t    Parser.prototype.parseArrayPattern = function (params, kind) {\n\t        var node = this.createNode();\n\t        this.expect('[');\n\t        var elements = [];\n\t        while (!this.match(']')) {\n\t            if (this.match(',')) {\n\t                this.nextToken();\n\t                elements.push(null);\n\t            }\n\t            else {\n\t                if (this.match('...')) {\n\t                    elements.push(this.parseBindingRestElement(params, kind));\n\t                    break;\n\t                }\n\t                else {\n\t                    elements.push(this.parsePatternWithDefault(params, kind));\n\t                }\n\t                if (!this.match(']')) {\n\t                    this.expect(',');\n\t                }\n\t            }\n\t        }\n\t        this.expect(']');\n\t        return this.finalize(node, new Node.ArrayPattern(elements));\n\t    };\n\t    Parser.prototype.parsePropertyPattern = function (params, kind) {\n\t        var node = this.createNode();\n\t        var computed = false;\n\t        var shorthand = false;\n\t        var method = false;\n\t        var key;\n\t        var value;\n\t        if (this.lookahead.type === token_1.Token.Identifier) {\n\t            var keyToken = this.lookahead;\n\t            key = this.parseVariableIdentifier();\n\t            var init = this.finalize(node, new Node.Identifier(keyToken.value));\n\t            if (this.match('=')) {\n\t                params.push(keyToken);\n\t                shorthand = true;\n\t                this.nextToken();\n\t                var expr = this.parseAssignmentExpression();\n\t                value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));\n\t            }\n\t            else if (!this.match(':')) {\n\t                params.push(keyToken);\n\t                shorthand = true;\n\t                value = init;\n\t            }\n\t            else {\n\t                this.expect(':');\n\t                value = this.parsePatternWithDefault(params, kind);\n\t            }\n\t        }\n\t        else {\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            this.expect(':');\n\t            value = this.parsePatternWithDefault(params, kind);\n\t        }\n\t        return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));\n\t    };\n\t    Parser.prototype.parseObjectPattern = function (params, kind) {\n\t        var node = this.createNode();\n\t        var properties = [];\n\t        this.expect('{');\n\t        while (!this.match('}')) {\n\t            properties.push(this.parsePropertyPattern(params, kind));\n\t            if (!this.match('}')) {\n\t                this.expect(',');\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return this.finalize(node, new Node.ObjectPattern(properties));\n\t    };\n\t    Parser.prototype.parsePattern = function (params, kind) {\n\t        var pattern;\n\t        if (this.match('[')) {\n\t            pattern = this.parseArrayPattern(params, kind);\n\t        }\n\t        else if (this.match('{')) {\n\t            pattern = this.parseObjectPattern(params, kind);\n\t        }\n\t        else {\n\t            if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {\n\t                this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.UnexpectedToken);\n\t            }\n\t            params.push(this.lookahead);\n\t            pattern = this.parseVariableIdentifier(kind);\n\t        }\n\t        return pattern;\n\t    };\n\t    Parser.prototype.parsePatternWithDefault = function (params, kind) {\n\t        var startToken = this.lookahead;\n\t        var pattern = this.parsePattern(params, kind);\n\t        if (this.match('=')) {\n\t            this.nextToken();\n\t            var previousAllowYield = this.context.allowYield;\n\t            this.context.allowYield = true;\n\t            var right = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t            this.context.allowYield = previousAllowYield;\n\t            pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));\n\t        }\n\t        return pattern;\n\t    };\n\t    // ECMA-262 13.3.2 Variable Statement\n\t    Parser.prototype.parseVariableIdentifier = function (kind) {\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        if (token.type === token_1.Token.Keyword && token.value === 'yield') {\n\t            if (this.context.strict) {\n\t                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n\t            }\n\t            if (!this.context.allowYield) {\n\t                this.throwUnexpectedToken(token);\n\t            }\n\t        }\n\t        else if (token.type !== token_1.Token.Identifier) {\n\t            if (this.context.strict && token.type === token_1.Token.Keyword && this.scanner.isStrictModeReservedWord(token.value)) {\n\t                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n\t            }\n\t            else {\n\t                if (this.context.strict || token.value !== 'let' || kind !== 'var') {\n\t                    this.throwUnexpectedToken(token);\n\t                }\n\t            }\n\t        }\n\t        else if (this.sourceType === 'module' && token.type === token_1.Token.Identifier && token.value === 'await') {\n\t            this.tolerateUnexpectedToken(token);\n\t        }\n\t        return this.finalize(node, new Node.Identifier(token.value));\n\t    };\n\t    Parser.prototype.parseVariableDeclaration = function (options) {\n\t        var node = this.createNode();\n\t        var params = [];\n\t        var id = this.parsePattern(params, 'var');\n\t        // ECMA-262 12.2.1\n\t        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {\n\t            if (this.scanner.isRestrictedWord((id).name)) {\n\t                this.tolerateError(messages_1.Messages.StrictVarName);\n\t            }\n\t        }\n\t        var init = null;\n\t        if (this.match('=')) {\n\t            this.nextToken();\n\t            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t        }\n\t        else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {\n\t            this.expect('=');\n\t        }\n\t        return this.finalize(node, new Node.VariableDeclarator(id, init));\n\t    };\n\t    Parser.prototype.parseVariableDeclarationList = function (options) {\n\t        var opt = { inFor: options.inFor };\n\t        var list = [];\n\t        list.push(this.parseVariableDeclaration(opt));\n\t        while (this.match(',')) {\n\t            this.nextToken();\n\t            list.push(this.parseVariableDeclaration(opt));\n\t        }\n\t        return list;\n\t    };\n\t    Parser.prototype.parseVariableStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('var');\n\t        var declarations = this.parseVariableDeclarationList({ inFor: false });\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));\n\t    };\n\t    // ECMA-262 13.4 Empty Statement\n\t    Parser.prototype.parseEmptyStatement = function () {\n\t        var node = this.createNode();\n\t        this.expect(';');\n\t        return this.finalize(node, new Node.EmptyStatement());\n\t    };\n\t    // ECMA-262 13.5 Expression Statement\n\t    Parser.prototype.parseExpressionStatement = function () {\n\t        var node = this.createNode();\n\t        var expr = this.parseExpression();\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ExpressionStatement(expr));\n\t    };\n\t    // ECMA-262 13.6 If statement\n\t    Parser.prototype.parseIfStatement = function () {\n\t        var node = this.createNode();\n\t        var consequent;\n\t        var alternate = null;\n\t        this.expectKeyword('if');\n\t        this.expect('(');\n\t        var test = this.parseExpression();\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t            consequent = this.finalize(this.createNode(), new Node.EmptyStatement());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            consequent = this.parseStatement();\n\t            if (this.matchKeyword('else')) {\n\t                this.nextToken();\n\t                alternate = this.parseStatement();\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.IfStatement(test, consequent, alternate));\n\t    };\n\t    // ECMA-262 13.7.2 The do-while Statement\n\t    Parser.prototype.parseDoWhileStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('do');\n\t        var previousInIteration = this.context.inIteration;\n\t        this.context.inIteration = true;\n\t        var body = this.parseStatement();\n\t        this.context.inIteration = previousInIteration;\n\t        this.expectKeyword('while');\n\t        this.expect('(');\n\t        var test = this.parseExpression();\n\t        this.expect(')');\n\t        if (this.match(';')) {\n\t            this.nextToken();\n\t        }\n\t        return this.finalize(node, new Node.DoWhileStatement(body, test));\n\t    };\n\t    // ECMA-262 13.7.3 The while Statement\n\t    Parser.prototype.parseWhileStatement = function () {\n\t        var node = this.createNode();\n\t        var body;\n\t        this.expectKeyword('while');\n\t        this.expect('(');\n\t        var test = this.parseExpression();\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            var previousInIteration = this.context.inIteration;\n\t            this.context.inIteration = true;\n\t            body = this.parseStatement();\n\t            this.context.inIteration = previousInIteration;\n\t        }\n\t        return this.finalize(node, new Node.WhileStatement(test, body));\n\t    };\n\t    // ECMA-262 13.7.4 The for Statement\n\t    // ECMA-262 13.7.5 The for-in and for-of Statements\n\t    Parser.prototype.parseForStatement = function () {\n\t        var init = null;\n\t        var test = null;\n\t        var update = null;\n\t        var forIn = true;\n\t        var left, right;\n\t        var node = this.createNode();\n\t        this.expectKeyword('for');\n\t        this.expect('(');\n\t        if (this.match(';')) {\n\t            this.nextToken();\n\t        }\n\t        else {\n\t            if (this.matchKeyword('var')) {\n\t                init = this.createNode();\n\t                this.nextToken();\n\t                var previousAllowIn = this.context.allowIn;\n\t                this.context.allowIn = false;\n\t                var declarations = this.parseVariableDeclarationList({ inFor: true });\n\t                this.context.allowIn = previousAllowIn;\n\t                if (declarations.length === 1 && this.matchKeyword('in')) {\n\t                    var decl = declarations[0];\n\t                    if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {\n\t                        this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, 'for-in');\n\t                    }\n\t                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n\t                    this.nextToken();\n\t                    left = init;\n\t                    right = this.parseExpression();\n\t                    init = null;\n\t                }\n\t                else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\n\t                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n\t                    this.nextToken();\n\t                    left = init;\n\t                    right = this.parseAssignmentExpression();\n\t                    init = null;\n\t                    forIn = false;\n\t                }\n\t                else {\n\t                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n\t                    this.expect(';');\n\t                }\n\t            }\n\t            else if (this.matchKeyword('const') || this.matchKeyword('let')) {\n\t                init = this.createNode();\n\t                var kind = this.nextToken().value;\n\t                if (!this.context.strict && this.lookahead.value === 'in') {\n\t                    init = this.finalize(init, new Node.Identifier(kind));\n\t                    this.nextToken();\n\t                    left = init;\n\t                    right = this.parseExpression();\n\t                    init = null;\n\t                }\n\t                else {\n\t                    var previousAllowIn = this.context.allowIn;\n\t                    this.context.allowIn = false;\n\t                    var declarations = this.parseBindingList(kind, { inFor: true });\n\t                    this.context.allowIn = previousAllowIn;\n\t                    if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {\n\t                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n\t                        this.nextToken();\n\t                        left = init;\n\t                        right = this.parseExpression();\n\t                        init = null;\n\t                    }\n\t                    else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\n\t                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n\t                        this.nextToken();\n\t                        left = init;\n\t                        right = this.parseAssignmentExpression();\n\t                        init = null;\n\t                        forIn = false;\n\t                    }\n\t                    else {\n\t                        this.consumeSemicolon();\n\t                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n\t                    }\n\t                }\n\t            }\n\t            else {\n\t                var initStartToken = this.lookahead;\n\t                var previousAllowIn = this.context.allowIn;\n\t                this.context.allowIn = false;\n\t                init = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t                this.context.allowIn = previousAllowIn;\n\t                if (this.matchKeyword('in')) {\n\t                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInForIn);\n\t                    }\n\t                    this.nextToken();\n\t                    this.reinterpretExpressionAsPattern(init);\n\t                    left = init;\n\t                    right = this.parseExpression();\n\t                    init = null;\n\t                }\n\t                else if (this.matchContextualKeyword('of')) {\n\t                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);\n\t                    }\n\t                    this.nextToken();\n\t                    this.reinterpretExpressionAsPattern(init);\n\t                    left = init;\n\t                    right = this.parseAssignmentExpression();\n\t                    init = null;\n\t                    forIn = false;\n\t                }\n\t                else {\n\t                    if (this.match(',')) {\n\t                        var initSeq = [init];\n\t                        while (this.match(',')) {\n\t                            this.nextToken();\n\t                            initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\n\t                        }\n\t                        init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));\n\t                    }\n\t                    this.expect(';');\n\t                }\n\t            }\n\t        }\n\t        if (typeof left === 'undefined') {\n\t            if (!this.match(';')) {\n\t                test = this.parseExpression();\n\t            }\n\t            this.expect(';');\n\t            if (!this.match(')')) {\n\t                update = this.parseExpression();\n\t            }\n\t        }\n\t        var body;\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            var previousInIteration = this.context.inIteration;\n\t            this.context.inIteration = true;\n\t            body = this.isolateCoverGrammar(this.parseStatement);\n\t            this.context.inIteration = previousInIteration;\n\t        }\n\t        return (typeof left === 'undefined') ?\n\t            this.finalize(node, new Node.ForStatement(init, test, update, body)) :\n\t            forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) :\n\t                this.finalize(node, new Node.ForOfStatement(left, right, body));\n\t    };\n\t    // ECMA-262 13.8 The continue statement\n\t    Parser.prototype.parseContinueStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('continue');\n\t        var label = null;\n\t        if (this.lookahead.type === token_1.Token.Identifier && !this.hasLineTerminator) {\n\t            label = this.parseVariableIdentifier();\n\t            var key = '$' + label.name;\n\t            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n\t                this.throwError(messages_1.Messages.UnknownLabel, label.name);\n\t            }\n\t        }\n\t        this.consumeSemicolon();\n\t        if (label === null && !this.context.inIteration) {\n\t            this.throwError(messages_1.Messages.IllegalContinue);\n\t        }\n\t        return this.finalize(node, new Node.ContinueStatement(label));\n\t    };\n\t    // ECMA-262 13.9 The break statement\n\t    Parser.prototype.parseBreakStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('break');\n\t        var label = null;\n\t        if (this.lookahead.type === token_1.Token.Identifier && !this.hasLineTerminator) {\n\t            label = this.parseVariableIdentifier();\n\t            var key = '$' + label.name;\n\t            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n\t                this.throwError(messages_1.Messages.UnknownLabel, label.name);\n\t            }\n\t        }\n\t        this.consumeSemicolon();\n\t        if (label === null && !this.context.inIteration && !this.context.inSwitch) {\n\t            this.throwError(messages_1.Messages.IllegalBreak);\n\t        }\n\t        return this.finalize(node, new Node.BreakStatement(label));\n\t    };\n\t    // ECMA-262 13.10 The return statement\n\t    Parser.prototype.parseReturnStatement = function () {\n\t        if (!this.context.inFunctionBody) {\n\t            this.tolerateError(messages_1.Messages.IllegalReturn);\n\t        }\n\t        var node = this.createNode();\n\t        this.expectKeyword('return');\n\t        var hasArgument = !this.match(';') && !this.match('}') &&\n\t            !this.hasLineTerminator && this.lookahead.type !== token_1.Token.EOF;\n\t        var argument = hasArgument ? this.parseExpression() : null;\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ReturnStatement(argument));\n\t    };\n\t    // ECMA-262 13.11 The with statement\n\t    Parser.prototype.parseWithStatement = function () {\n\t        if (this.context.strict) {\n\t            this.tolerateError(messages_1.Messages.StrictModeWith);\n\t        }\n\t        var node = this.createNode();\n\t        this.expectKeyword('with');\n\t        this.expect('(');\n\t        var object = this.parseExpression();\n\t        this.expect(')');\n\t        var body = this.parseStatement();\n\t        return this.finalize(node, new Node.WithStatement(object, body));\n\t    };\n\t    // ECMA-262 13.12 The switch statement\n\t    Parser.prototype.parseSwitchCase = function () {\n\t        var node = this.createNode();\n\t        var test;\n\t        if (this.matchKeyword('default')) {\n\t            this.nextToken();\n\t            test = null;\n\t        }\n\t        else {\n\t            this.expectKeyword('case');\n\t            test = this.parseExpression();\n\t        }\n\t        this.expect(':');\n\t        var consequent = [];\n\t        while (true) {\n\t            if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {\n\t                break;\n\t            }\n\t            consequent.push(this.parseStatementListItem());\n\t        }\n\t        return this.finalize(node, new Node.SwitchCase(test, consequent));\n\t    };\n\t    Parser.prototype.parseSwitchStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('switch');\n\t        this.expect('(');\n\t        var discriminant = this.parseExpression();\n\t        this.expect(')');\n\t        var previousInSwitch = this.context.inSwitch;\n\t        this.context.inSwitch = true;\n\t        var cases = [];\n\t        var defaultFound = false;\n\t        this.expect('{');\n\t        while (true) {\n\t            if (this.match('}')) {\n\t                break;\n\t            }\n\t            var clause = this.parseSwitchCase();\n\t            if (clause.test === null) {\n\t                if (defaultFound) {\n\t                    this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);\n\t                }\n\t                defaultFound = true;\n\t            }\n\t            cases.push(clause);\n\t        }\n\t        this.expect('}');\n\t        this.context.inSwitch = previousInSwitch;\n\t        return this.finalize(node, new Node.SwitchStatement(discriminant, cases));\n\t    };\n\t    // ECMA-262 13.13 Labelled Statements\n\t    Parser.prototype.parseLabelledStatement = function () {\n\t        var node = this.createNode();\n\t        var expr = this.parseExpression();\n\t        var statement;\n\t        if ((expr.type === syntax_1.Syntax.Identifier) && this.match(':')) {\n\t            this.nextToken();\n\t            var id = (expr);\n\t            var key = '$' + id.name;\n\t            if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n\t                this.throwError(messages_1.Messages.Redeclaration, 'Label', id.name);\n\t            }\n\t            this.context.labelSet[key] = true;\n\t            var labeledBody = this.parseStatement();\n\t            delete this.context.labelSet[key];\n\t            statement = new Node.LabeledStatement(id, labeledBody);\n\t        }\n\t        else {\n\t            this.consumeSemicolon();\n\t            statement = new Node.ExpressionStatement(expr);\n\t        }\n\t        return this.finalize(node, statement);\n\t    };\n\t    // ECMA-262 13.14 The throw statement\n\t    Parser.prototype.parseThrowStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('throw');\n\t        if (this.hasLineTerminator) {\n\t            this.throwError(messages_1.Messages.NewlineAfterThrow);\n\t        }\n\t        var argument = this.parseExpression();\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ThrowStatement(argument));\n\t    };\n\t    // ECMA-262 13.15 The try statement\n\t    Parser.prototype.parseCatchClause = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('catch');\n\t        this.expect('(');\n\t        if (this.match(')')) {\n\t            this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        var params = [];\n\t        var param = this.parsePattern(params);\n\t        var paramMap = {};\n\t        for (var i = 0; i < params.length; i++) {\n\t            var key = '$' + params[i].value;\n\t            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {\n\t                this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);\n\t            }\n\t            paramMap[key] = true;\n\t        }\n\t        if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {\n\t            if (this.scanner.isRestrictedWord((param).name)) {\n\t                this.tolerateError(messages_1.Messages.StrictCatchVariable);\n\t            }\n\t        }\n\t        this.expect(')');\n\t        var body = this.parseBlock();\n\t        return this.finalize(node, new Node.CatchClause(param, body));\n\t    };\n\t    Parser.prototype.parseFinallyClause = function () {\n\t        this.expectKeyword('finally');\n\t        return this.parseBlock();\n\t    };\n\t    Parser.prototype.parseTryStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('try');\n\t        var block = this.parseBlock();\n\t        var handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;\n\t        var finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;\n\t        if (!handler && !finalizer) {\n\t            this.throwError(messages_1.Messages.NoCatchOrFinally);\n\t        }\n\t        return this.finalize(node, new Node.TryStatement(block, handler, finalizer));\n\t    };\n\t    // ECMA-262 13.16 The debugger statement\n\t    Parser.prototype.parseDebuggerStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('debugger');\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.DebuggerStatement());\n\t    };\n\t    // ECMA-262 13 Statements\n\t    Parser.prototype.parseStatement = function () {\n\t        var statement = null;\n\t        switch (this.lookahead.type) {\n\t            case token_1.Token.BooleanLiteral:\n\t            case token_1.Token.NullLiteral:\n\t            case token_1.Token.NumericLiteral:\n\t            case token_1.Token.StringLiteral:\n\t            case token_1.Token.Template:\n\t            case token_1.Token.RegularExpression:\n\t                statement = this.parseExpressionStatement();\n\t                break;\n\t            case token_1.Token.Punctuator:\n\t                var value = this.lookahead.value;\n\t                if (value === '{') {\n\t                    statement = this.parseBlock();\n\t                }\n\t                else if (value === '(') {\n\t                    statement = this.parseExpressionStatement();\n\t                }\n\t                else if (value === ';') {\n\t                    statement = this.parseEmptyStatement();\n\t                }\n\t                else {\n\t                    statement = this.parseExpressionStatement();\n\t                }\n\t                break;\n\t            case token_1.Token.Identifier:\n\t                statement = this.parseLabelledStatement();\n\t                break;\n\t            case token_1.Token.Keyword:\n\t                switch (this.lookahead.value) {\n\t                    case 'break':\n\t                        statement = this.parseBreakStatement();\n\t                        break;\n\t                    case 'continue':\n\t                        statement = this.parseContinueStatement();\n\t                        break;\n\t                    case 'debugger':\n\t                        statement = this.parseDebuggerStatement();\n\t                        break;\n\t                    case 'do':\n\t                        statement = this.parseDoWhileStatement();\n\t                        break;\n\t                    case 'for':\n\t                        statement = this.parseForStatement();\n\t                        break;\n\t                    case 'function':\n\t                        statement = this.parseFunctionDeclaration();\n\t                        break;\n\t                    case 'if':\n\t                        statement = this.parseIfStatement();\n\t                        break;\n\t                    case 'return':\n\t                        statement = this.parseReturnStatement();\n\t                        break;\n\t                    case 'switch':\n\t                        statement = this.parseSwitchStatement();\n\t                        break;\n\t                    case 'throw':\n\t                        statement = this.parseThrowStatement();\n\t                        break;\n\t                    case 'try':\n\t                        statement = this.parseTryStatement();\n\t                        break;\n\t                    case 'var':\n\t                        statement = this.parseVariableStatement();\n\t                        break;\n\t                    case 'while':\n\t                        statement = this.parseWhileStatement();\n\t                        break;\n\t                    case 'with':\n\t                        statement = this.parseWithStatement();\n\t                        break;\n\t                    default:\n\t                        statement = this.parseExpressionStatement();\n\t                        break;\n\t                }\n\t                break;\n\t            default:\n\t                this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        return statement;\n\t    };\n\t    // ECMA-262 14.1 Function Definition\n\t    Parser.prototype.parseFunctionSourceElements = function () {\n\t        var node = this.createNode();\n\t        this.expect('{');\n\t        var body = this.parseDirectivePrologues();\n\t        var previousLabelSet = this.context.labelSet;\n\t        var previousInIteration = this.context.inIteration;\n\t        var previousInSwitch = this.context.inSwitch;\n\t        var previousInFunctionBody = this.context.inFunctionBody;\n\t        this.context.labelSet = {};\n\t        this.context.inIteration = false;\n\t        this.context.inSwitch = false;\n\t        this.context.inFunctionBody = true;\n\t        while (this.startMarker.index < this.scanner.length) {\n\t            if (this.match('}')) {\n\t                break;\n\t            }\n\t            body.push(this.parseStatementListItem());\n\t        }\n\t        this.expect('}');\n\t        this.context.labelSet = previousLabelSet;\n\t        this.context.inIteration = previousInIteration;\n\t        this.context.inSwitch = previousInSwitch;\n\t        this.context.inFunctionBody = previousInFunctionBody;\n\t        return this.finalize(node, new Node.BlockStatement(body));\n\t    };\n\t    Parser.prototype.validateParam = function (options, param, name) {\n\t        var key = '$' + name;\n\t        if (this.context.strict) {\n\t            if (this.scanner.isRestrictedWord(name)) {\n\t                options.stricted = param;\n\t                options.message = messages_1.Messages.StrictParamName;\n\t            }\n\t            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\n\t                options.stricted = param;\n\t                options.message = messages_1.Messages.StrictParamDupe;\n\t            }\n\t        }\n\t        else if (!options.firstRestricted) {\n\t            if (this.scanner.isRestrictedWord(name)) {\n\t                options.firstRestricted = param;\n\t                options.message = messages_1.Messages.StrictParamName;\n\t            }\n\t            else if (this.scanner.isStrictModeReservedWord(name)) {\n\t                options.firstRestricted = param;\n\t                options.message = messages_1.Messages.StrictReservedWord;\n\t            }\n\t            else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\n\t                options.stricted = param;\n\t                options.message = messages_1.Messages.StrictParamDupe;\n\t            }\n\t        }\n\t        /* istanbul ignore next */\n\t        if (typeof Object.defineProperty === 'function') {\n\t            Object.defineProperty(options.paramSet, key, { value: true, enumerable: true, writable: true, configurable: true });\n\t        }\n\t        else {\n\t            options.paramSet[key] = true;\n\t        }\n\t    };\n\t    Parser.prototype.parseRestElement = function (params) {\n\t        var node = this.createNode();\n\t        this.expect('...');\n\t        var arg = this.parsePattern(params);\n\t        if (this.match('=')) {\n\t            this.throwError(messages_1.Messages.DefaultRestParameter);\n\t        }\n\t        if (!this.match(')')) {\n\t            this.throwError(messages_1.Messages.ParameterAfterRestParameter);\n\t        }\n\t        return this.finalize(node, new Node.RestElement(arg));\n\t    };\n\t    Parser.prototype.parseFormalParameter = function (options) {\n\t        var params = [];\n\t        var param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);\n\t        for (var i = 0; i < params.length; i++) {\n\t            this.validateParam(options, params[i], params[i].value);\n\t        }\n\t        options.params.push(param);\n\t        return !this.match(')');\n\t    };\n\t    Parser.prototype.parseFormalParameters = function (firstRestricted) {\n\t        var options;\n\t        options = {\n\t            params: [],\n\t            firstRestricted: firstRestricted\n\t        };\n\t        this.expect('(');\n\t        if (!this.match(')')) {\n\t            options.paramSet = {};\n\t            while (this.startMarker.index < this.scanner.length) {\n\t                if (!this.parseFormalParameter(options)) {\n\t                    break;\n\t                }\n\t                this.expect(',');\n\t            }\n\t        }\n\t        this.expect(')');\n\t        return {\n\t            params: options.params,\n\t            stricted: options.stricted,\n\t            firstRestricted: options.firstRestricted,\n\t            message: options.message\n\t        };\n\t    };\n\t    Parser.prototype.parseFunctionDeclaration = function (identifierIsOptional) {\n\t        var node = this.createNode();\n\t        this.expectKeyword('function');\n\t        var isGenerator = this.match('*');\n\t        if (isGenerator) {\n\t            this.nextToken();\n\t        }\n\t        var message;\n\t        var id = null;\n\t        var firstRestricted = null;\n\t        if (!identifierIsOptional || !this.match('(')) {\n\t            var token = this.lookahead;\n\t            id = this.parseVariableIdentifier();\n\t            if (this.context.strict) {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);\n\t                }\n\t            }\n\t            else {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictFunctionName;\n\t                }\n\t                else if (this.scanner.isStrictModeReservedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictReservedWord;\n\t                }\n\t            }\n\t        }\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = !isGenerator;\n\t        var formalParameters = this.parseFormalParameters(firstRestricted);\n\t        var params = formalParameters.params;\n\t        var stricted = formalParameters.stricted;\n\t        firstRestricted = formalParameters.firstRestricted;\n\t        if (formalParameters.message) {\n\t            message = formalParameters.message;\n\t        }\n\t        var previousStrict = this.context.strict;\n\t        var body = this.parseFunctionSourceElements();\n\t        if (this.context.strict && firstRestricted) {\n\t            this.throwUnexpectedToken(firstRestricted, message);\n\t        }\n\t        if (this.context.strict && stricted) {\n\t            this.tolerateUnexpectedToken(stricted, message);\n\t        }\n\t        this.context.strict = previousStrict;\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));\n\t    };\n\t    Parser.prototype.parseFunctionExpression = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('function');\n\t        var isGenerator = this.match('*');\n\t        if (isGenerator) {\n\t            this.nextToken();\n\t        }\n\t        var message;\n\t        var id = null;\n\t        var firstRestricted;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = !isGenerator;\n\t        if (!this.match('(')) {\n\t            var token = this.lookahead;\n\t            id = (!this.context.strict && !isGenerator && this.matchKeyword('yield')) ? this.parseIdentifierName() : this.parseVariableIdentifier();\n\t            if (this.context.strict) {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);\n\t                }\n\t            }\n\t            else {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictFunctionName;\n\t                }\n\t                else if (this.scanner.isStrictModeReservedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictReservedWord;\n\t                }\n\t            }\n\t        }\n\t        var formalParameters = this.parseFormalParameters(firstRestricted);\n\t        var params = formalParameters.params;\n\t        var stricted = formalParameters.stricted;\n\t        firstRestricted = formalParameters.firstRestricted;\n\t        if (formalParameters.message) {\n\t            message = formalParameters.message;\n\t        }\n\t        var previousStrict = this.context.strict;\n\t        var body = this.parseFunctionSourceElements();\n\t        if (this.context.strict && firstRestricted) {\n\t            this.throwUnexpectedToken(firstRestricted, message);\n\t        }\n\t        if (this.context.strict && stricted) {\n\t            this.tolerateUnexpectedToken(stricted, message);\n\t        }\n\t        this.context.strict = previousStrict;\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));\n\t    };\n\t    // ECMA-262 14.1.1 Directive Prologues\n\t    Parser.prototype.parseDirective = function () {\n\t        var token = this.lookahead;\n\t        var directive = null;\n\t        var node = this.createNode();\n\t        var expr = this.parseExpression();\n\t        if (expr.type === syntax_1.Syntax.Literal) {\n\t            directive = this.getTokenRaw(token).slice(1, -1);\n\t        }\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, directive ? new Node.Directive(expr, directive) :\n\t            new Node.ExpressionStatement(expr));\n\t    };\n\t    Parser.prototype.parseDirectivePrologues = function () {\n\t        var firstRestricted = null;\n\t        var body = [];\n\t        while (true) {\n\t            var token = this.lookahead;\n\t            if (token.type !== token_1.Token.StringLiteral) {\n\t                break;\n\t            }\n\t            var statement = this.parseDirective();\n\t            body.push(statement);\n\t            var directive = statement.directive;\n\t            if (typeof directive !== 'string') {\n\t                break;\n\t            }\n\t            if (directive === 'use strict') {\n\t                this.context.strict = true;\n\t                if (firstRestricted) {\n\t                    this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);\n\t                }\n\t            }\n\t            else {\n\t                if (!firstRestricted && token.octal) {\n\t                    firstRestricted = token;\n\t                }\n\t            }\n\t        }\n\t        return body;\n\t    };\n\t    // ECMA-262 14.3 Method Definitions\n\t    Parser.prototype.qualifiedPropertyName = function (token) {\n\t        switch (token.type) {\n\t            case token_1.Token.Identifier:\n\t            case token_1.Token.StringLiteral:\n\t            case token_1.Token.BooleanLiteral:\n\t            case token_1.Token.NullLiteral:\n\t            case token_1.Token.NumericLiteral:\n\t            case token_1.Token.Keyword:\n\t                return true;\n\t            case token_1.Token.Punctuator:\n\t                return token.value === '[';\n\t        }\n\t        return false;\n\t    };\n\t    Parser.prototype.parseGetterMethod = function () {\n\t        var node = this.createNode();\n\t        this.expect('(');\n\t        this.expect(')');\n\t        var isGenerator = false;\n\t        var params = {\n\t            params: [],\n\t            stricted: null,\n\t            firstRestricted: null,\n\t            message: null\n\t        };\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = false;\n\t        var method = this.parsePropertyMethod(params);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n\t    };\n\t    Parser.prototype.parseSetterMethod = function () {\n\t        var node = this.createNode();\n\t        var options = {\n\t            params: [],\n\t            firstRestricted: null,\n\t            paramSet: {}\n\t        };\n\t        var isGenerator = false;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = false;\n\t        this.expect('(');\n\t        if (this.match(')')) {\n\t            this.tolerateUnexpectedToken(this.lookahead);\n\t        }\n\t        else {\n\t            this.parseFormalParameter(options);\n\t        }\n\t        this.expect(')');\n\t        var method = this.parsePropertyMethod(options);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, options.params, method, isGenerator));\n\t    };\n\t    Parser.prototype.parseGeneratorMethod = function () {\n\t        var node = this.createNode();\n\t        var isGenerator = true;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = true;\n\t        var params = this.parseFormalParameters();\n\t        this.context.allowYield = false;\n\t        var method = this.parsePropertyMethod(params);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n\t    };\n\t    // ECMA-262 14.4 Generator Function Definitions\n\t    Parser.prototype.isStartOfExpression = function () {\n\t        var start = true;\n\t        var value = this.lookahead.value;\n\t        switch (this.lookahead.type) {\n\t            case token_1.Token.Punctuator:\n\t                start = (value === '[') || (value === '(') || (value === '{') ||\n\t                    (value === '+') || (value === '-') ||\n\t                    (value === '!') || (value === '~') ||\n\t                    (value === '++') || (value === '--') ||\n\t                    (value === '/') || (value === '/='); // regular expression literal\n\t                break;\n\t            case token_1.Token.Keyword:\n\t                start = (value === 'class') || (value === 'delete') ||\n\t                    (value === 'function') || (value === 'let') || (value === 'new') ||\n\t                    (value === 'super') || (value === 'this') || (value === 'typeof') ||\n\t                    (value === 'void') || (value === 'yield');\n\t                break;\n\t            default:\n\t                break;\n\t        }\n\t        return start;\n\t    };\n\t    Parser.prototype.parseYieldExpression = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('yield');\n\t        var argument = null;\n\t        var delegate = false;\n\t        if (!this.hasLineTerminator) {\n\t            var previousAllowYield = this.context.allowYield;\n\t            this.context.allowYield = false;\n\t            delegate = this.match('*');\n\t            if (delegate) {\n\t                this.nextToken();\n\t                argument = this.parseAssignmentExpression();\n\t            }\n\t            else if (this.isStartOfExpression()) {\n\t                argument = this.parseAssignmentExpression();\n\t            }\n\t            this.context.allowYield = previousAllowYield;\n\t        }\n\t        return this.finalize(node, new Node.YieldExpression(argument, delegate));\n\t    };\n\t    // ECMA-262 14.5 Class Definitions\n\t    Parser.prototype.parseClassElement = function (hasConstructor) {\n\t        var token = this.lookahead;\n\t        var node = this.createNode();\n\t        var kind;\n\t        var key;\n\t        var value;\n\t        var computed = false;\n\t        var method = false;\n\t        var isStatic = false;\n\t        if (this.match('*')) {\n\t            this.nextToken();\n\t        }\n\t        else {\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            var id = key;\n\t            if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {\n\t                token = this.lookahead;\n\t                isStatic = true;\n\t                computed = this.match('[');\n\t                if (this.match('*')) {\n\t                    this.nextToken();\n\t                }\n\t                else {\n\t                    key = this.parseObjectPropertyKey();\n\t                }\n\t            }\n\t        }\n\t        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\n\t        if (token.type === token_1.Token.Identifier) {\n\t            if (token.value === 'get' && lookaheadPropertyKey) {\n\t                kind = 'get';\n\t                computed = this.match('[');\n\t                key = this.parseObjectPropertyKey();\n\t                this.context.allowYield = false;\n\t                value = this.parseGetterMethod();\n\t            }\n\t            else if (token.value === 'set' && lookaheadPropertyKey) {\n\t                kind = 'set';\n\t                computed = this.match('[');\n\t                key = this.parseObjectPropertyKey();\n\t                value = this.parseSetterMethod();\n\t            }\n\t        }\n\t        else if (token.type === token_1.Token.Punctuator && token.value === '*' && lookaheadPropertyKey) {\n\t            kind = 'init';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            value = this.parseGeneratorMethod();\n\t            method = true;\n\t        }\n\t        if (!kind && key && this.match('(')) {\n\t            kind = 'init';\n\t            value = this.parsePropertyMethodFunction();\n\t            method = true;\n\t        }\n\t        if (!kind) {\n\t            this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        if (kind === 'init') {\n\t            kind = 'method';\n\t        }\n\t        if (!computed) {\n\t            if (isStatic && this.isPropertyKey(key, 'prototype')) {\n\t                this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);\n\t            }\n\t            if (!isStatic && this.isPropertyKey(key, 'constructor')) {\n\t                if (kind !== 'method' || !method || value.generator) {\n\t                    this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);\n\t                }\n\t                if (hasConstructor.value) {\n\t                    this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);\n\t                }\n\t                else {\n\t                    hasConstructor.value = true;\n\t                }\n\t                kind = 'constructor';\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));\n\t    };\n\t    Parser.prototype.parseClassElementList = function () {\n\t        var body = [];\n\t        var hasConstructor = { value: false };\n\t        this.expect('{');\n\t        while (!this.match('}')) {\n\t            if (this.match(';')) {\n\t                this.nextToken();\n\t            }\n\t            else {\n\t                body.push(this.parseClassElement(hasConstructor));\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return body;\n\t    };\n\t    Parser.prototype.parseClassBody = function () {\n\t        var node = this.createNode();\n\t        var elementList = this.parseClassElementList();\n\t        return this.finalize(node, new Node.ClassBody(elementList));\n\t    };\n\t    Parser.prototype.parseClassDeclaration = function (identifierIsOptional) {\n\t        var node = this.createNode();\n\t        var previousStrict = this.context.strict;\n\t        this.context.strict = true;\n\t        this.expectKeyword('class');\n\t        var id = (identifierIsOptional && (this.lookahead.type !== token_1.Token.Identifier)) ? null : this.parseVariableIdentifier();\n\t        var superClass = null;\n\t        if (this.matchKeyword('extends')) {\n\t            this.nextToken();\n\t            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n\t        }\n\t        var classBody = this.parseClassBody();\n\t        this.context.strict = previousStrict;\n\t        return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));\n\t    };\n\t    Parser.prototype.parseClassExpression = function () {\n\t        var node = this.createNode();\n\t        var previousStrict = this.context.strict;\n\t        this.context.strict = true;\n\t        this.expectKeyword('class');\n\t        var id = (this.lookahead.type === token_1.Token.Identifier) ? this.parseVariableIdentifier() : null;\n\t        var superClass = null;\n\t        if (this.matchKeyword('extends')) {\n\t            this.nextToken();\n\t            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n\t        }\n\t        var classBody = this.parseClassBody();\n\t        this.context.strict = previousStrict;\n\t        return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));\n\t    };\n\t    // ECMA-262 15.1 Scripts\n\t    // ECMA-262 15.2 Modules\n\t    Parser.prototype.parseProgram = function () {\n\t        var node = this.createNode();\n\t        var body = this.parseDirectivePrologues();\n\t        while (this.startMarker.index < this.scanner.length) {\n\t            body.push(this.parseStatementListItem());\n\t        }\n\t        return this.finalize(node, new Node.Program(body, this.sourceType));\n\t    };\n\t    // ECMA-262 15.2.2 Imports\n\t    Parser.prototype.parseModuleSpecifier = function () {\n\t        var node = this.createNode();\n\t        if (this.lookahead.type !== token_1.Token.StringLiteral) {\n\t            this.throwError(messages_1.Messages.InvalidModuleSpecifier);\n\t        }\n\t        var token = this.nextToken();\n\t        var raw = this.getTokenRaw(token);\n\t        return this.finalize(node, new Node.Literal(token.value, raw));\n\t    };\n\t    // import {<foo as bar>} ...;\n\t    Parser.prototype.parseImportSpecifier = function () {\n\t        var node = this.createNode();\n\t        var imported;\n\t        var local;\n\t        if (this.lookahead.type === token_1.Token.Identifier) {\n\t            imported = this.parseVariableIdentifier();\n\t            local = imported;\n\t            if (this.matchContextualKeyword('as')) {\n\t                this.nextToken();\n\t                local = this.parseVariableIdentifier();\n\t            }\n\t        }\n\t        else {\n\t            imported = this.parseIdentifierName();\n\t            local = imported;\n\t            if (this.matchContextualKeyword('as')) {\n\t                this.nextToken();\n\t                local = this.parseVariableIdentifier();\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.nextToken());\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.ImportSpecifier(local, imported));\n\t    };\n\t    // {foo, bar as bas}\n\t    Parser.prototype.parseNamedImports = function () {\n\t        this.expect('{');\n\t        var specifiers = [];\n\t        while (!this.match('}')) {\n\t            specifiers.push(this.parseImportSpecifier());\n\t            if (!this.match('}')) {\n\t                this.expect(',');\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return specifiers;\n\t    };\n\t    // import <foo> ...;\n\t    Parser.prototype.parseImportDefaultSpecifier = function () {\n\t        var node = this.createNode();\n\t        var local = this.parseIdentifierName();\n\t        return this.finalize(node, new Node.ImportDefaultSpecifier(local));\n\t    };\n\t    // import <* as foo> ...;\n\t    Parser.prototype.parseImportNamespaceSpecifier = function () {\n\t        var node = this.createNode();\n\t        this.expect('*');\n\t        if (!this.matchContextualKeyword('as')) {\n\t            this.throwError(messages_1.Messages.NoAsAfterImportNamespace);\n\t        }\n\t        this.nextToken();\n\t        var local = this.parseIdentifierName();\n\t        return this.finalize(node, new Node.ImportNamespaceSpecifier(local));\n\t    };\n\t    Parser.prototype.parseImportDeclaration = function () {\n\t        if (this.context.inFunctionBody) {\n\t            this.throwError(messages_1.Messages.IllegalImportDeclaration);\n\t        }\n\t        var node = this.createNode();\n\t        this.expectKeyword('import');\n\t        var src;\n\t        var specifiers = [];\n\t        if (this.lookahead.type === token_1.Token.StringLiteral) {\n\t            // import 'foo';\n\t            src = this.parseModuleSpecifier();\n\t        }\n\t        else {\n\t            if (this.match('{')) {\n\t                // import {bar}\n\t                specifiers = specifiers.concat(this.parseNamedImports());\n\t            }\n\t            else if (this.match('*')) {\n\t                // import * as foo\n\t                specifiers.push(this.parseImportNamespaceSpecifier());\n\t            }\n\t            else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {\n\t                // import foo\n\t                specifiers.push(this.parseImportDefaultSpecifier());\n\t                if (this.match(',')) {\n\t                    this.nextToken();\n\t                    if (this.match('*')) {\n\t                        // import foo, * as foo\n\t                        specifiers.push(this.parseImportNamespaceSpecifier());\n\t                    }\n\t                    else if (this.match('{')) {\n\t                        // import foo, {bar}\n\t                        specifiers = specifiers.concat(this.parseNamedImports());\n\t                    }\n\t                    else {\n\t                        this.throwUnexpectedToken(this.lookahead);\n\t                    }\n\t                }\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.nextToken());\n\t            }\n\t            if (!this.matchContextualKeyword('from')) {\n\t                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n\t                this.throwError(message, this.lookahead.value);\n\t            }\n\t            this.nextToken();\n\t            src = this.parseModuleSpecifier();\n\t        }\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ImportDeclaration(specifiers, src));\n\t    };\n\t    // ECMA-262 15.2.3 Exports\n\t    Parser.prototype.parseExportSpecifier = function () {\n\t        var node = this.createNode();\n\t        var local = this.parseIdentifierName();\n\t        var exported = local;\n\t        if (this.matchContextualKeyword('as')) {\n\t            this.nextToken();\n\t            exported = this.parseIdentifierName();\n\t        }\n\t        return this.finalize(node, new Node.ExportSpecifier(local, exported));\n\t    };\n\t    Parser.prototype.parseExportDeclaration = function () {\n\t        if (this.context.inFunctionBody) {\n\t            this.throwError(messages_1.Messages.IllegalExportDeclaration);\n\t        }\n\t        var node = this.createNode();\n\t        this.expectKeyword('export');\n\t        var exportDeclaration;\n\t        if (this.matchKeyword('default')) {\n\t            // export default ...\n\t            this.nextToken();\n\t            if (this.matchKeyword('function')) {\n\t                // export default function foo () {}\n\t                // export default function () {}\n\t                var declaration = this.parseFunctionDeclaration(true);\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n\t            }\n\t            else if (this.matchKeyword('class')) {\n\t                // export default class foo {}\n\t                var declaration = this.parseClassDeclaration(true);\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n\t            }\n\t            else {\n\t                if (this.matchContextualKeyword('from')) {\n\t                    this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);\n\t                }\n\t                // export default {};\n\t                // export default [];\n\t                // export default (1 + 2);\n\t                var declaration = this.match('{') ? this.parseObjectInitializer() :\n\t                    this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();\n\t                this.consumeSemicolon();\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n\t            }\n\t        }\n\t        else if (this.match('*')) {\n\t            // export * from 'foo';\n\t            this.nextToken();\n\t            if (!this.matchContextualKeyword('from')) {\n\t                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n\t                this.throwError(message, this.lookahead.value);\n\t            }\n\t            this.nextToken();\n\t            var src = this.parseModuleSpecifier();\n\t            this.consumeSemicolon();\n\t            exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));\n\t        }\n\t        else if (this.lookahead.type === token_1.Token.Keyword) {\n\t            // export var f = 1;\n\t            var declaration = void 0;\n\t            switch (this.lookahead.value) {\n\t                case 'let':\n\t                case 'const':\n\t                    declaration = this.parseLexicalDeclaration({ inFor: false });\n\t                    break;\n\t                case 'var':\n\t                case 'class':\n\t                case 'function':\n\t                    declaration = this.parseStatementListItem();\n\t                    break;\n\t                default:\n\t                    this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));\n\t        }\n\t        else {\n\t            var specifiers = [];\n\t            var source = null;\n\t            var isExportFromIdentifier = false;\n\t            this.expect('{');\n\t            while (!this.match('}')) {\n\t                isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');\n\t                specifiers.push(this.parseExportSpecifier());\n\t                if (!this.match('}')) {\n\t                    this.expect(',');\n\t                }\n\t            }\n\t            this.expect('}');\n\t            if (this.matchContextualKeyword('from')) {\n\t                // export {default} from 'foo';\n\t                // export {foo} from 'foo';\n\t                this.nextToken();\n\t                source = this.parseModuleSpecifier();\n\t                this.consumeSemicolon();\n\t            }\n\t            else if (isExportFromIdentifier) {\n\t                // export {default}; // missing fromClause\n\t                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n\t                this.throwError(message, this.lookahead.value);\n\t            }\n\t            else {\n\t                // export {foo};\n\t                this.consumeSemicolon();\n\t            }\n\t            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));\n\t        }\n\t        return exportDeclaration;\n\t    };\n\t    return Parser;\n\t}());\n\texports.Parser = Parser;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t// Ensure the condition is true, otherwise throw an error.\n\t// This is only to have a better contract semantic, i.e. another safety net\n\t// to catch a logic error. The condition shall be fulfilled in normal case.\n\t// Do NOT use this to enforce a certain condition on any user input.\n\t\"use strict\";\n\tfunction assert(condition, message) {\n\t    /* istanbul ignore if */\n\t    if (!condition) {\n\t        throw new Error('ASSERT: ' + message);\n\t    }\n\t}\n\texports.assert = assert;\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t// Error messages should be identical to V8.\n\texports.Messages = {\n\t    UnexpectedToken: 'Unexpected token %0',\n\t    UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',\n\t    UnexpectedNumber: 'Unexpected number',\n\t    UnexpectedString: 'Unexpected string',\n\t    UnexpectedIdentifier: 'Unexpected identifier',\n\t    UnexpectedReserved: 'Unexpected reserved word',\n\t    UnexpectedTemplate: 'Unexpected quasi %0',\n\t    UnexpectedEOS: 'Unexpected end of input',\n\t    NewlineAfterThrow: 'Illegal newline after throw',\n\t    InvalidRegExp: 'Invalid regular expression',\n\t    UnterminatedRegExp: 'Invalid regular expression: missing /',\n\t    InvalidLHSInAssignment: 'Invalid left-hand side in assignment',\n\t    InvalidLHSInForIn: 'Invalid left-hand side in for-in',\n\t    InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',\n\t    MultipleDefaultsInSwitch: 'More than one default clause in switch statement',\n\t    NoCatchOrFinally: 'Missing catch or finally after try',\n\t    UnknownLabel: 'Undefined label \\'%0\\'',\n\t    Redeclaration: '%0 \\'%1\\' has already been declared',\n\t    IllegalContinue: 'Illegal continue statement',\n\t    IllegalBreak: 'Illegal break statement',\n\t    IllegalReturn: 'Illegal return statement',\n\t    StrictModeWith: 'Strict mode code may not include a with statement',\n\t    StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',\n\t    StrictVarName: 'Variable name may not be eval or arguments in strict mode',\n\t    StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',\n\t    StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\n\t    StrictFunctionName: 'Function name may not be eval or arguments in strict mode',\n\t    StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',\n\t    StrictDelete: 'Delete of an unqualified identifier in strict mode.',\n\t    StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',\n\t    StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',\n\t    StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',\n\t    StrictReservedWord: 'Use of future reserved word in strict mode',\n\t    TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',\n\t    ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',\n\t    DefaultRestParameter: 'Unexpected token =',\n\t    DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',\n\t    ConstructorSpecialMethod: 'Class constructor may not be an accessor',\n\t    DuplicateConstructor: 'A class may only have one constructor',\n\t    StaticPrototype: 'Classes may not have static property named prototype',\n\t    MissingFromClause: 'Unexpected token',\n\t    NoAsAfterImportNamespace: 'Unexpected token',\n\t    InvalidModuleSpecifier: 'Unexpected token',\n\t    IllegalImportDeclaration: 'Unexpected token',\n\t    IllegalExportDeclaration: 'Unexpected token',\n\t    DuplicateBinding: 'Duplicate binding %0',\n\t    ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer'\n\t};\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar ErrorHandler = (function () {\n\t    function ErrorHandler() {\n\t        this.errors = [];\n\t        this.tolerant = false;\n\t    }\n\t    ;\n\t    ErrorHandler.prototype.recordError = function (error) {\n\t        this.errors.push(error);\n\t    };\n\t    ;\n\t    ErrorHandler.prototype.tolerate = function (error) {\n\t        if (this.tolerant) {\n\t            this.recordError(error);\n\t        }\n\t        else {\n\t            throw error;\n\t        }\n\t    };\n\t    ;\n\t    ErrorHandler.prototype.constructError = function (msg, column) {\n\t        var error = new Error(msg);\n\t        try {\n\t            throw error;\n\t        }\n\t        catch (base) {\n\t            /* istanbul ignore else */\n\t            if (Object.create && Object.defineProperty) {\n\t                error = Object.create(base);\n\t                Object.defineProperty(error, 'column', { value: column });\n\t            }\n\t        }\n\t        finally {\n\t            return error;\n\t        }\n\t    };\n\t    ;\n\t    ErrorHandler.prototype.createError = function (index, line, col, description) {\n\t        var msg = 'Line ' + line + ': ' + description;\n\t        var error = this.constructError(msg, col);\n\t        error.index = index;\n\t        error.lineNumber = line;\n\t        error.description = description;\n\t        return error;\n\t    };\n\t    ;\n\t    ErrorHandler.prototype.throwError = function (index, line, col, description) {\n\t        throw this.createError(index, line, col, description);\n\t    };\n\t    ;\n\t    ErrorHandler.prototype.tolerateError = function (index, line, col, description) {\n\t        var error = this.createError(index, line, col, description);\n\t        if (this.tolerant) {\n\t            this.recordError(error);\n\t        }\n\t        else {\n\t            throw error;\n\t        }\n\t    };\n\t    ;\n\t    return ErrorHandler;\n\t}());\n\texports.ErrorHandler = ErrorHandler;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t(function (Token) {\n\t    Token[Token[\"BooleanLiteral\"] = 1] = \"BooleanLiteral\";\n\t    Token[Token[\"EOF\"] = 2] = \"EOF\";\n\t    Token[Token[\"Identifier\"] = 3] = \"Identifier\";\n\t    Token[Token[\"Keyword\"] = 4] = \"Keyword\";\n\t    Token[Token[\"NullLiteral\"] = 5] = \"NullLiteral\";\n\t    Token[Token[\"NumericLiteral\"] = 6] = \"NumericLiteral\";\n\t    Token[Token[\"Punctuator\"] = 7] = \"Punctuator\";\n\t    Token[Token[\"StringLiteral\"] = 8] = \"StringLiteral\";\n\t    Token[Token[\"RegularExpression\"] = 9] = \"RegularExpression\";\n\t    Token[Token[\"Template\"] = 10] = \"Template\";\n\t})(exports.Token || (exports.Token = {}));\n\tvar Token = exports.Token;\n\t;\n\texports.TokenName = {};\n\texports.TokenName[Token.BooleanLiteral] = 'Boolean';\n\texports.TokenName[Token.EOF] = '<end>';\n\texports.TokenName[Token.Identifier] = 'Identifier';\n\texports.TokenName[Token.Keyword] = 'Keyword';\n\texports.TokenName[Token.NullLiteral] = 'Null';\n\texports.TokenName[Token.NumericLiteral] = 'Numeric';\n\texports.TokenName[Token.Punctuator] = 'Punctuator';\n\texports.TokenName[Token.StringLiteral] = 'String';\n\texports.TokenName[Token.RegularExpression] = 'RegularExpression';\n\texports.TokenName[Token.Template] = 'Template';\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar assert_1 = __webpack_require__(4);\n\tvar messages_1 = __webpack_require__(5);\n\tvar character_1 = __webpack_require__(9);\n\tvar token_1 = __webpack_require__(7);\n\tfunction hexValue(ch) {\n\t    return '0123456789abcdef'.indexOf(ch.toLowerCase());\n\t}\n\tfunction octalValue(ch) {\n\t    return '01234567'.indexOf(ch);\n\t}\n\tvar Scanner = (function () {\n\t    function Scanner(code, handler) {\n\t        this.source = code;\n\t        this.errorHandler = handler;\n\t        this.trackComment = false;\n\t        this.length = code.length;\n\t        this.index = 0;\n\t        this.lineNumber = (code.length > 0) ? 1 : 0;\n\t        this.lineStart = 0;\n\t        this.curlyStack = [];\n\t    }\n\t    ;\n\t    Scanner.prototype.eof = function () {\n\t        return this.index >= this.length;\n\t    };\n\t    ;\n\t    Scanner.prototype.throwUnexpectedToken = function (message) {\n\t        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }\n\t        this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);\n\t    };\n\t    ;\n\t    Scanner.prototype.tolerateUnexpectedToken = function () {\n\t        this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, messages_1.Messages.UnexpectedTokenIllegal);\n\t    };\n\t    ;\n\t    // ECMA-262 11.4 Comments\n\t    Scanner.prototype.skipSingleLineComment = function (offset) {\n\t        var comments;\n\t        var start, loc;\n\t        if (this.trackComment) {\n\t            comments = [];\n\t            start = this.index - offset;\n\t            loc = {\n\t                start: {\n\t                    line: this.lineNumber,\n\t                    column: this.index - this.lineStart - offset\n\t                },\n\t                end: {}\n\t            };\n\t        }\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            ++this.index;\n\t            if (character_1.Character.isLineTerminator(ch)) {\n\t                if (this.trackComment) {\n\t                    loc.end = {\n\t                        line: this.lineNumber,\n\t                        column: this.index - this.lineStart - 1\n\t                    };\n\t                    var entry = {\n\t                        multiLine: false,\n\t                        slice: [start + offset, this.index - 1],\n\t                        range: [start, this.index - 1],\n\t                        loc: loc\n\t                    };\n\t                    comments.push(entry);\n\t                }\n\t                if (ch === 13 && this.source.charCodeAt(this.index) === 10) {\n\t                    ++this.index;\n\t                }\n\t                ++this.lineNumber;\n\t                this.lineStart = this.index;\n\t                return comments;\n\t            }\n\t        }\n\t        if (this.trackComment) {\n\t            loc.end = {\n\t                line: this.lineNumber,\n\t                column: this.index - this.lineStart\n\t            };\n\t            var entry = {\n\t                multiLine: false,\n\t                slice: [start + offset, this.index],\n\t                range: [start, this.index],\n\t                loc: loc\n\t            };\n\t            comments.push(entry);\n\t        }\n\t        return comments;\n\t    };\n\t    ;\n\t    Scanner.prototype.skipMultiLineComment = function () {\n\t        var comments;\n\t        var start, loc;\n\t        if (this.trackComment) {\n\t            comments = [];\n\t            start = this.index - 2;\n\t            loc = {\n\t                start: {\n\t                    line: this.lineNumber,\n\t                    column: this.index - this.lineStart - 2\n\t                },\n\t                end: {}\n\t            };\n\t        }\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            if (character_1.Character.isLineTerminator(ch)) {\n\t                if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {\n\t                    ++this.index;\n\t                }\n\t                ++this.lineNumber;\n\t                ++this.index;\n\t                this.lineStart = this.index;\n\t            }\n\t            else if (ch === 0x2A) {\n\t                // Block comment ends with '*/'.\n\t                if (this.source.charCodeAt(this.index + 1) === 0x2F) {\n\t                    this.index += 2;\n\t                    if (this.trackComment) {\n\t                        loc.end = {\n\t                            line: this.lineNumber,\n\t                            column: this.index - this.lineStart\n\t                        };\n\t                        var entry = {\n\t                            multiLine: true,\n\t                            slice: [start + 2, this.index - 2],\n\t                            range: [start, this.index],\n\t                            loc: loc\n\t                        };\n\t                        comments.push(entry);\n\t                    }\n\t                    return comments;\n\t                }\n\t                ++this.index;\n\t            }\n\t            else {\n\t                ++this.index;\n\t            }\n\t        }\n\t        // Ran off the end of the file - the whole thing is a comment\n\t        if (this.trackComment) {\n\t            loc.end = {\n\t                line: this.lineNumber,\n\t                column: this.index - this.lineStart\n\t            };\n\t            var entry = {\n\t                multiLine: true,\n\t                slice: [start + 2, this.index],\n\t                range: [start, this.index],\n\t                loc: loc\n\t            };\n\t            comments.push(entry);\n\t        }\n\t        this.tolerateUnexpectedToken();\n\t        return comments;\n\t    };\n\t    ;\n\t    Scanner.prototype.scanComments = function () {\n\t        var comments;\n\t        if (this.trackComment) {\n\t            comments = [];\n\t        }\n\t        var start = (this.index === 0);\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            if (character_1.Character.isWhiteSpace(ch)) {\n\t                ++this.index;\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch)) {\n\t                ++this.index;\n\t                if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {\n\t                    ++this.index;\n\t                }\n\t                ++this.lineNumber;\n\t                this.lineStart = this.index;\n\t                start = true;\n\t            }\n\t            else if (ch === 0x2F) {\n\t                ch = this.source.charCodeAt(this.index + 1);\n\t                if (ch === 0x2F) {\n\t                    this.index += 2;\n\t                    var comment = this.skipSingleLineComment(2);\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                    start = true;\n\t                }\n\t                else if (ch === 0x2A) {\n\t                    this.index += 2;\n\t                    var comment = this.skipMultiLineComment();\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            else if (start && ch === 0x2D) {\n\t                // U+003E is '>'\n\t                if ((this.source.charCodeAt(this.index + 1) === 0x2D) && (this.source.charCodeAt(this.index + 2) === 0x3E)) {\n\t                    // '-->' is a single-line comment\n\t                    this.index += 3;\n\t                    var comment = this.skipSingleLineComment(3);\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            else if (ch === 0x3C) {\n\t                if (this.source.slice(this.index + 1, this.index + 4) === '!--') {\n\t                    this.index += 4; // `<!--`\n\t                    var comment = this.skipSingleLineComment(4);\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return comments;\n\t    };\n\t    ;\n\t    // ECMA-262 11.6.2.2 Future Reserved Words\n\t    Scanner.prototype.isFutureReservedWord = function (id) {\n\t        switch (id) {\n\t            case 'enum':\n\t            case 'export':\n\t            case 'import':\n\t            case 'super':\n\t                return true;\n\t            default:\n\t                return false;\n\t        }\n\t    };\n\t    ;\n\t    Scanner.prototype.isStrictModeReservedWord = function (id) {\n\t        switch (id) {\n\t            case 'implements':\n\t            case 'interface':\n\t            case 'package':\n\t            case 'private':\n\t            case 'protected':\n\t            case 'public':\n\t            case 'static':\n\t            case 'yield':\n\t            case 'let':\n\t                return true;\n\t            default:\n\t                return false;\n\t        }\n\t    };\n\t    ;\n\t    Scanner.prototype.isRestrictedWord = function (id) {\n\t        return id === 'eval' || id === 'arguments';\n\t    };\n\t    ;\n\t    // ECMA-262 11.6.2.1 Keywords\n\t    Scanner.prototype.isKeyword = function (id) {\n\t        switch (id.length) {\n\t            case 2:\n\t                return (id === 'if') || (id === 'in') || (id === 'do');\n\t            case 3:\n\t                return (id === 'var') || (id === 'for') || (id === 'new') ||\n\t                    (id === 'try') || (id === 'let');\n\t            case 4:\n\t                return (id === 'this') || (id === 'else') || (id === 'case') ||\n\t                    (id === 'void') || (id === 'with') || (id === 'enum');\n\t            case 5:\n\t                return (id === 'while') || (id === 'break') || (id === 'catch') ||\n\t                    (id === 'throw') || (id === 'const') || (id === 'yield') ||\n\t                    (id === 'class') || (id === 'super');\n\t            case 6:\n\t                return (id === 'return') || (id === 'typeof') || (id === 'delete') ||\n\t                    (id === 'switch') || (id === 'export') || (id === 'import');\n\t            case 7:\n\t                return (id === 'default') || (id === 'finally') || (id === 'extends');\n\t            case 8:\n\t                return (id === 'function') || (id === 'continue') || (id === 'debugger');\n\t            case 10:\n\t                return (id === 'instanceof');\n\t            default:\n\t                return false;\n\t        }\n\t    };\n\t    ;\n\t    Scanner.prototype.codePointAt = function (i) {\n\t        var cp = this.source.charCodeAt(i);\n\t        if (cp >= 0xD800 && cp <= 0xDBFF) {\n\t            var second = this.source.charCodeAt(i + 1);\n\t            if (second >= 0xDC00 && second <= 0xDFFF) {\n\t                var first = cp;\n\t                cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n\t            }\n\t        }\n\t        return cp;\n\t    };\n\t    ;\n\t    Scanner.prototype.scanHexEscape = function (prefix) {\n\t        var len = (prefix === 'u') ? 4 : 2;\n\t        var code = 0;\n\t        for (var i = 0; i < len; ++i) {\n\t            if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {\n\t                code = code * 16 + hexValue(this.source[this.index++]);\n\t            }\n\t            else {\n\t                return '';\n\t            }\n\t        }\n\t        return String.fromCharCode(code);\n\t    };\n\t    ;\n\t    Scanner.prototype.scanUnicodeCodePointEscape = function () {\n\t        var ch = this.source[this.index];\n\t        var code = 0;\n\t        // At least, one hex digit is required.\n\t        if (ch === '}') {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        while (!this.eof()) {\n\t            ch = this.source[this.index++];\n\t            if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {\n\t                break;\n\t            }\n\t            code = code * 16 + hexValue(ch);\n\t        }\n\t        if (code > 0x10FFFF || ch !== '}') {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return character_1.Character.fromCodePoint(code);\n\t    };\n\t    ;\n\t    Scanner.prototype.getIdentifier = function () {\n\t        var start = this.index++;\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            if (ch === 0x5C) {\n\t                // Blackslash (U+005C) marks Unicode escape sequence.\n\t                this.index = start;\n\t                return this.getComplexIdentifier();\n\t            }\n\t            else if (ch >= 0xD800 && ch < 0xDFFF) {\n\t                // Need to handle surrogate pairs.\n\t                this.index = start;\n\t                return this.getComplexIdentifier();\n\t            }\n\t            if (character_1.Character.isIdentifierPart(ch)) {\n\t                ++this.index;\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return this.source.slice(start, this.index);\n\t    };\n\t    ;\n\t    Scanner.prototype.getComplexIdentifier = function () {\n\t        var cp = this.codePointAt(this.index);\n\t        var id = character_1.Character.fromCodePoint(cp);\n\t        this.index += id.length;\n\t        // '\\u' (U+005C, U+0075) denotes an escaped character.\n\t        var ch;\n\t        if (cp === 0x5C) {\n\t            if (this.source.charCodeAt(this.index) !== 0x75) {\n\t                this.throwUnexpectedToken();\n\t            }\n\t            ++this.index;\n\t            if (this.source[this.index] === '{') {\n\t                ++this.index;\n\t                ch = this.scanUnicodeCodePointEscape();\n\t            }\n\t            else {\n\t                ch = this.scanHexEscape('u');\n\t                cp = ch.charCodeAt(0);\n\t                if (!ch || ch === '\\\\' || !character_1.Character.isIdentifierStart(cp)) {\n\t                    this.throwUnexpectedToken();\n\t                }\n\t            }\n\t            id = ch;\n\t        }\n\t        while (!this.eof()) {\n\t            cp = this.codePointAt(this.index);\n\t            if (!character_1.Character.isIdentifierPart(cp)) {\n\t                break;\n\t            }\n\t            ch = character_1.Character.fromCodePoint(cp);\n\t            id += ch;\n\t            this.index += ch.length;\n\t            // '\\u' (U+005C, U+0075) denotes an escaped character.\n\t            if (cp === 0x5C) {\n\t                id = id.substr(0, id.length - 1);\n\t                if (this.source.charCodeAt(this.index) !== 0x75) {\n\t                    this.throwUnexpectedToken();\n\t                }\n\t                ++this.index;\n\t                if (this.source[this.index] === '{') {\n\t                    ++this.index;\n\t                    ch = this.scanUnicodeCodePointEscape();\n\t                }\n\t                else {\n\t                    ch = this.scanHexEscape('u');\n\t                    cp = ch.charCodeAt(0);\n\t                    if (!ch || ch === '\\\\' || !character_1.Character.isIdentifierPart(cp)) {\n\t                        this.throwUnexpectedToken();\n\t                    }\n\t                }\n\t                id += ch;\n\t            }\n\t        }\n\t        return id;\n\t    };\n\t    ;\n\t    Scanner.prototype.octalToDecimal = function (ch) {\n\t        // \\0 is not octal escape sequence\n\t        var octal = (ch !== '0');\n\t        var code = octalValue(ch);\n\t        if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n\t            octal = true;\n\t            code = code * 8 + octalValue(this.source[this.index++]);\n\t            // 3 digits are only allowed when string starts\n\t            // with 0, 1, 2, 3\n\t            if ('0123'.indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n\t                code = code * 8 + octalValue(this.source[this.index++]);\n\t            }\n\t        }\n\t        return {\n\t            code: code,\n\t            octal: octal\n\t        };\n\t    };\n\t    ;\n\t    // ECMA-262 11.6 Names and Keywords\n\t    Scanner.prototype.scanIdentifier = function () {\n\t        var type;\n\t        var start = this.index;\n\t        // Backslash (U+005C) starts an escaped character.\n\t        var id = (this.source.charCodeAt(start) === 0x5C) ? this.getComplexIdentifier() : this.getIdentifier();\n\t        // There is no keyword or literal with only one character.\n\t        // Thus, it must be an identifier.\n\t        if (id.length === 1) {\n\t            type = token_1.Token.Identifier;\n\t        }\n\t        else if (this.isKeyword(id)) {\n\t            type = token_1.Token.Keyword;\n\t        }\n\t        else if (id === 'null') {\n\t            type = token_1.Token.NullLiteral;\n\t        }\n\t        else if (id === 'true' || id === 'false') {\n\t            type = token_1.Token.BooleanLiteral;\n\t        }\n\t        else {\n\t            type = token_1.Token.Identifier;\n\t        }\n\t        return {\n\t            type: type,\n\t            value: id,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    // ECMA-262 11.7 Punctuators\n\t    Scanner.prototype.scanPunctuator = function () {\n\t        var token = {\n\t            type: token_1.Token.Punctuator,\n\t            value: '',\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: this.index,\n\t            end: this.index\n\t        };\n\t        // Check for most common single-character punctuators.\n\t        var str = this.source[this.index];\n\t        switch (str) {\n\t            case '(':\n\t            case '{':\n\t                if (str === '{') {\n\t                    this.curlyStack.push('{');\n\t                }\n\t                ++this.index;\n\t                break;\n\t            case '.':\n\t                ++this.index;\n\t                if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {\n\t                    // Spread operator: ...\n\t                    this.index += 2;\n\t                    str = '...';\n\t                }\n\t                break;\n\t            case '}':\n\t                ++this.index;\n\t                this.curlyStack.pop();\n\t                break;\n\t            case ')':\n\t            case ';':\n\t            case ',':\n\t            case '[':\n\t            case ']':\n\t            case ':':\n\t            case '?':\n\t            case '~':\n\t                ++this.index;\n\t                break;\n\t            default:\n\t                // 4-character punctuator.\n\t                str = this.source.substr(this.index, 4);\n\t                if (str === '>>>=') {\n\t                    this.index += 4;\n\t                }\n\t                else {\n\t                    // 3-character punctuators.\n\t                    str = str.substr(0, 3);\n\t                    if (str === '===' || str === '!==' || str === '>>>' ||\n\t                        str === '<<=' || str === '>>=' || str === '**=') {\n\t                        this.index += 3;\n\t                    }\n\t                    else {\n\t                        // 2-character punctuators.\n\t                        str = str.substr(0, 2);\n\t                        if (str === '&&' || str === '||' || str === '==' || str === '!=' ||\n\t                            str === '+=' || str === '-=' || str === '*=' || str === '/=' ||\n\t                            str === '++' || str === '--' || str === '<<' || str === '>>' ||\n\t                            str === '&=' || str === '|=' || str === '^=' || str === '%=' ||\n\t                            str === '<=' || str === '>=' || str === '=>' || str === '**') {\n\t                            this.index += 2;\n\t                        }\n\t                        else {\n\t                            // 1-character punctuators.\n\t                            str = this.source[this.index];\n\t                            if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {\n\t                                ++this.index;\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t        }\n\t        if (this.index === token.start) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        token.end = this.index;\n\t        token.value = str;\n\t        return token;\n\t    };\n\t    ;\n\t    // ECMA-262 11.8.3 Numeric Literals\n\t    Scanner.prototype.scanHexLiteral = function (start) {\n\t        var number = '';\n\t        while (!this.eof()) {\n\t            if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {\n\t                break;\n\t            }\n\t            number += this.source[this.index++];\n\t        }\n\t        if (number.length === 0) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: token_1.Token.NumericLiteral,\n\t            value: parseInt('0x' + number, 16),\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    Scanner.prototype.scanBinaryLiteral = function (start) {\n\t        var number = '';\n\t        var ch;\n\t        while (!this.eof()) {\n\t            ch = this.source[this.index];\n\t            if (ch !== '0' && ch !== '1') {\n\t                break;\n\t            }\n\t            number += this.source[this.index++];\n\t        }\n\t        if (number.length === 0) {\n\t            // only 0b or 0B\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (!this.eof()) {\n\t            ch = this.source.charCodeAt(this.index);\n\t            /* istanbul ignore else */\n\t            if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {\n\t                this.throwUnexpectedToken();\n\t            }\n\t        }\n\t        return {\n\t            type: token_1.Token.NumericLiteral,\n\t            value: parseInt(number, 2),\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    Scanner.prototype.scanOctalLiteral = function (prefix, start) {\n\t        var number = '';\n\t        var octal = false;\n\t        if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {\n\t            octal = true;\n\t            number = '0' + this.source[this.index++];\n\t        }\n\t        else {\n\t            ++this.index;\n\t        }\n\t        while (!this.eof()) {\n\t            if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n\t                break;\n\t            }\n\t            number += this.source[this.index++];\n\t        }\n\t        if (!octal && number.length === 0) {\n\t            // only 0o or 0O\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: token_1.Token.NumericLiteral,\n\t            value: parseInt(number, 8),\n\t            octal: octal,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    Scanner.prototype.isImplicitOctalLiteral = function () {\n\t        // Implicit octal, unless there is a non-octal digit.\n\t        // (Annex B.1.1 on Numeric Literals)\n\t        for (var i = this.index + 1; i < this.length; ++i) {\n\t            var ch = this.source[i];\n\t            if (ch === '8' || ch === '9') {\n\t                return false;\n\t            }\n\t            if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                return true;\n\t            }\n\t        }\n\t        return true;\n\t    };\n\t    ;\n\t    Scanner.prototype.scanNumericLiteral = function () {\n\t        var start = this.index;\n\t        var ch = this.source[start];\n\t        assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'), 'Numeric literal must start with a decimal digit or a decimal point');\n\t        var number = '';\n\t        if (ch !== '.') {\n\t            number = this.source[this.index++];\n\t            ch = this.source[this.index];\n\t            // Hex number starts with '0x'.\n\t            // Octal number starts with '0'.\n\t            // Octal number in ES6 starts with '0o'.\n\t            // Binary number in ES6 starts with '0b'.\n\t            if (number === '0') {\n\t                if (ch === 'x' || ch === 'X') {\n\t                    ++this.index;\n\t                    return this.scanHexLiteral(start);\n\t                }\n\t                if (ch === 'b' || ch === 'B') {\n\t                    ++this.index;\n\t                    return this.scanBinaryLiteral(start);\n\t                }\n\t                if (ch === 'o' || ch === 'O') {\n\t                    return this.scanOctalLiteral(ch, start);\n\t                }\n\t                if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                    if (this.isImplicitOctalLiteral()) {\n\t                        return this.scanOctalLiteral(ch, start);\n\t                    }\n\t                }\n\t            }\n\t            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                number += this.source[this.index++];\n\t            }\n\t            ch = this.source[this.index];\n\t        }\n\t        if (ch === '.') {\n\t            number += this.source[this.index++];\n\t            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                number += this.source[this.index++];\n\t            }\n\t            ch = this.source[this.index];\n\t        }\n\t        if (ch === 'e' || ch === 'E') {\n\t            number += this.source[this.index++];\n\t            ch = this.source[this.index];\n\t            if (ch === '+' || ch === '-') {\n\t                number += this.source[this.index++];\n\t            }\n\t            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                    number += this.source[this.index++];\n\t                }\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken();\n\t            }\n\t        }\n\t        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: token_1.Token.NumericLiteral,\n\t            value: parseFloat(number),\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    // ECMA-262 11.8.4 String Literals\n\t    Scanner.prototype.scanStringLiteral = function () {\n\t        var start = this.index;\n\t        var quote = this.source[start];\n\t        assert_1.assert((quote === '\\'' || quote === '\"'), 'String literal must starts with a quote');\n\t        ++this.index;\n\t        var octal = false;\n\t        var str = '';\n\t        while (!this.eof()) {\n\t            var ch = this.source[this.index++];\n\t            if (ch === quote) {\n\t                quote = '';\n\t                break;\n\t            }\n\t            else if (ch === '\\\\') {\n\t                ch = this.source[this.index++];\n\t                if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                    switch (ch) {\n\t                        case 'u':\n\t                        case 'x':\n\t                            if (this.source[this.index] === '{') {\n\t                                ++this.index;\n\t                                str += this.scanUnicodeCodePointEscape();\n\t                            }\n\t                            else {\n\t                                var unescaped = this.scanHexEscape(ch);\n\t                                if (!unescaped) {\n\t                                    this.throwUnexpectedToken();\n\t                                }\n\t                                str += unescaped;\n\t                            }\n\t                            break;\n\t                        case 'n':\n\t                            str += '\\n';\n\t                            break;\n\t                        case 'r':\n\t                            str += '\\r';\n\t                            break;\n\t                        case 't':\n\t                            str += '\\t';\n\t                            break;\n\t                        case 'b':\n\t                            str += '\\b';\n\t                            break;\n\t                        case 'f':\n\t                            str += '\\f';\n\t                            break;\n\t                        case 'v':\n\t                            str += '\\x0B';\n\t                            break;\n\t                        case '8':\n\t                        case '9':\n\t                            str += ch;\n\t                            this.tolerateUnexpectedToken();\n\t                            break;\n\t                        default:\n\t                            if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                                var octToDec = this.octalToDecimal(ch);\n\t                                octal = octToDec.octal || octal;\n\t                                str += String.fromCharCode(octToDec.code);\n\t                            }\n\t                            else {\n\t                                str += ch;\n\t                            }\n\t                            break;\n\t                    }\n\t                }\n\t                else {\n\t                    ++this.lineNumber;\n\t                    if (ch === '\\r' && this.source[this.index] === '\\n') {\n\t                        ++this.index;\n\t                    }\n\t                    this.lineStart = this.index;\n\t                }\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                break;\n\t            }\n\t            else {\n\t                str += ch;\n\t            }\n\t        }\n\t        if (quote !== '') {\n\t            this.index = start;\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: token_1.Token.StringLiteral,\n\t            value: str,\n\t            octal: octal,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    // ECMA-262 11.8.6 Template Literal Lexical Components\n\t    Scanner.prototype.scanTemplate = function () {\n\t        var cooked = '';\n\t        var terminated = false;\n\t        var start = this.index;\n\t        var head = (this.source[start] === '`');\n\t        var tail = false;\n\t        var rawOffset = 2;\n\t        ++this.index;\n\t        while (!this.eof()) {\n\t            var ch = this.source[this.index++];\n\t            if (ch === '`') {\n\t                rawOffset = 1;\n\t                tail = true;\n\t                terminated = true;\n\t                break;\n\t            }\n\t            else if (ch === '$') {\n\t                if (this.source[this.index] === '{') {\n\t                    this.curlyStack.push('${');\n\t                    ++this.index;\n\t                    terminated = true;\n\t                    break;\n\t                }\n\t                cooked += ch;\n\t            }\n\t            else if (ch === '\\\\') {\n\t                ch = this.source[this.index++];\n\t                if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                    switch (ch) {\n\t                        case 'n':\n\t                            cooked += '\\n';\n\t                            break;\n\t                        case 'r':\n\t                            cooked += '\\r';\n\t                            break;\n\t                        case 't':\n\t                            cooked += '\\t';\n\t                            break;\n\t                        case 'u':\n\t                        case 'x':\n\t                            if (this.source[this.index] === '{') {\n\t                                ++this.index;\n\t                                cooked += this.scanUnicodeCodePointEscape();\n\t                            }\n\t                            else {\n\t                                var restore = this.index;\n\t                                var unescaped = this.scanHexEscape(ch);\n\t                                if (unescaped) {\n\t                                    cooked += unescaped;\n\t                                }\n\t                                else {\n\t                                    this.index = restore;\n\t                                    cooked += ch;\n\t                                }\n\t                            }\n\t                            break;\n\t                        case 'b':\n\t                            cooked += '\\b';\n\t                            break;\n\t                        case 'f':\n\t                            cooked += '\\f';\n\t                            break;\n\t                        case 'v':\n\t                            cooked += '\\v';\n\t                            break;\n\t                        default:\n\t                            if (ch === '0') {\n\t                                if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                                    // Illegal: \\01 \\02 and so on\n\t                                    this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);\n\t                                }\n\t                                cooked += '\\0';\n\t                            }\n\t                            else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                                // Illegal: \\1 \\2\n\t                                this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);\n\t                            }\n\t                            else {\n\t                                cooked += ch;\n\t                            }\n\t                            break;\n\t                    }\n\t                }\n\t                else {\n\t                    ++this.lineNumber;\n\t                    if (ch === '\\r' && this.source[this.index] === '\\n') {\n\t                        ++this.index;\n\t                    }\n\t                    this.lineStart = this.index;\n\t                }\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                ++this.lineNumber;\n\t                if (ch === '\\r' && this.source[this.index] === '\\n') {\n\t                    ++this.index;\n\t                }\n\t                this.lineStart = this.index;\n\t                cooked += '\\n';\n\t            }\n\t            else {\n\t                cooked += ch;\n\t            }\n\t        }\n\t        if (!terminated) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (!head) {\n\t            this.curlyStack.pop();\n\t        }\n\t        return {\n\t            type: token_1.Token.Template,\n\t            value: {\n\t                cooked: cooked,\n\t                raw: this.source.slice(start + 1, this.index - rawOffset)\n\t            },\n\t            head: head,\n\t            tail: tail,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    // ECMA-262 11.8.5 Regular Expression Literals\n\t    Scanner.prototype.testRegExp = function (pattern, flags) {\n\t        // The BMP character to use as a replacement for astral symbols when\n\t        // translating an ES6 \"u\"-flagged pattern to an ES5-compatible\n\t        // approximation.\n\t        // Note: replacing with '\\uFFFF' enables false positives in unlikely\n\t        // scenarios. For example, `[\\u{1044f}-\\u{10440}]` is an invalid\n\t        // pattern that would not be detected by this substitution.\n\t        var astralSubstitute = '\\uFFFF';\n\t        var tmp = pattern;\n\t        var self = this;\n\t        if (flags.indexOf('u') >= 0) {\n\t            tmp = tmp\n\t                .replace(/\\\\u\\{([0-9a-fA-F]+)\\}|\\\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {\n\t                var codePoint = parseInt($1 || $2, 16);\n\t                if (codePoint > 0x10FFFF) {\n\t                    self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);\n\t                }\n\t                if (codePoint <= 0xFFFF) {\n\t                    return String.fromCharCode(codePoint);\n\t                }\n\t                return astralSubstitute;\n\t            })\n\t                .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, astralSubstitute);\n\t        }\n\t        // First, detect invalid regular expressions.\n\t        try {\n\t            RegExp(tmp);\n\t        }\n\t        catch (e) {\n\t            this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);\n\t        }\n\t        // Return a regular expression object for this pattern-flag pair, or\n\t        // `null` in case the current environment doesn't support the flags it\n\t        // uses.\n\t        try {\n\t            return new RegExp(pattern, flags);\n\t        }\n\t        catch (exception) {\n\t            /* istanbul ignore next */\n\t            return null;\n\t        }\n\t    };\n\t    ;\n\t    Scanner.prototype.scanRegExpBody = function () {\n\t        var ch = this.source[this.index];\n\t        assert_1.assert(ch === '/', 'Regular expression literal must start with a slash');\n\t        var str = this.source[this.index++];\n\t        var classMarker = false;\n\t        var terminated = false;\n\t        while (!this.eof()) {\n\t            ch = this.source[this.index++];\n\t            str += ch;\n\t            if (ch === '\\\\') {\n\t                ch = this.source[this.index++];\n\t                // ECMA-262 7.8.5\n\t                if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                    this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n\t                }\n\t                str += ch;\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n\t            }\n\t            else if (classMarker) {\n\t                if (ch === ']') {\n\t                    classMarker = false;\n\t                }\n\t            }\n\t            else {\n\t                if (ch === '/') {\n\t                    terminated = true;\n\t                    break;\n\t                }\n\t                else if (ch === '[') {\n\t                    classMarker = true;\n\t                }\n\t            }\n\t        }\n\t        if (!terminated) {\n\t            this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n\t        }\n\t        // Exclude leading and trailing slash.\n\t        var body = str.substr(1, str.length - 2);\n\t        return {\n\t            value: body,\n\t            literal: str\n\t        };\n\t    };\n\t    ;\n\t    Scanner.prototype.scanRegExpFlags = function () {\n\t        var str = '';\n\t        var flags = '';\n\t        while (!this.eof()) {\n\t            var ch = this.source[this.index];\n\t            if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {\n\t                break;\n\t            }\n\t            ++this.index;\n\t            if (ch === '\\\\' && !this.eof()) {\n\t                ch = this.source[this.index];\n\t                if (ch === 'u') {\n\t                    ++this.index;\n\t                    var restore = this.index;\n\t                    ch = this.scanHexEscape('u');\n\t                    if (ch) {\n\t                        flags += ch;\n\t                        for (str += '\\\\u'; restore < this.index; ++restore) {\n\t                            str += this.source[restore];\n\t                        }\n\t                    }\n\t                    else {\n\t                        this.index = restore;\n\t                        flags += 'u';\n\t                        str += '\\\\u';\n\t                    }\n\t                    this.tolerateUnexpectedToken();\n\t                }\n\t                else {\n\t                    str += '\\\\';\n\t                    this.tolerateUnexpectedToken();\n\t                }\n\t            }\n\t            else {\n\t                flags += ch;\n\t                str += ch;\n\t            }\n\t        }\n\t        return {\n\t            value: flags,\n\t            literal: str\n\t        };\n\t    };\n\t    ;\n\t    Scanner.prototype.scanRegExp = function () {\n\t        var start = this.index;\n\t        var body = this.scanRegExpBody();\n\t        var flags = this.scanRegExpFlags();\n\t        var value = this.testRegExp(body.value, flags.value);\n\t        return {\n\t            type: token_1.Token.RegularExpression,\n\t            value: value,\n\t            literal: body.literal + flags.literal,\n\t            regex: {\n\t                pattern: body.value,\n\t                flags: flags.value\n\t            },\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    Scanner.prototype.lex = function () {\n\t        if (this.eof()) {\n\t            return {\n\t                type: token_1.Token.EOF,\n\t                lineNumber: this.lineNumber,\n\t                lineStart: this.lineStart,\n\t                start: this.index,\n\t                end: this.index\n\t            };\n\t        }\n\t        var cp = this.source.charCodeAt(this.index);\n\t        if (character_1.Character.isIdentifierStart(cp)) {\n\t            return this.scanIdentifier();\n\t        }\n\t        // Very common: ( and ) and ;\n\t        if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {\n\t            return this.scanPunctuator();\n\t        }\n\t        // String literal starts with single quote (U+0027) or double quote (U+0022).\n\t        if (cp === 0x27 || cp === 0x22) {\n\t            return this.scanStringLiteral();\n\t        }\n\t        // Dot (.) U+002E can also start a floating-point number, hence the need\n\t        // to check the next character.\n\t        if (cp === 0x2E) {\n\t            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {\n\t                return this.scanNumericLiteral();\n\t            }\n\t            return this.scanPunctuator();\n\t        }\n\t        if (character_1.Character.isDecimalDigit(cp)) {\n\t            return this.scanNumericLiteral();\n\t        }\n\t        // Template literals start with ` (U+0060) for template head\n\t        // or } (U+007D) for template middle or template tail.\n\t        if (cp === 0x60 || (cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${')) {\n\t            return this.scanTemplate();\n\t        }\n\t        // Possible identifier start in a surrogate pair.\n\t        if (cp >= 0xD800 && cp < 0xDFFF) {\n\t            if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {\n\t                return this.scanIdentifier();\n\t            }\n\t        }\n\t        return this.scanPunctuator();\n\t    };\n\t    ;\n\t    return Scanner;\n\t}());\n\texports.Scanner = Scanner;\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t// See also tools/generate-unicode-regex.js.\n\tvar Regex = {\n\t    // Unicode v8.0.0 NonAsciiIdentifierStart:\n\t    NonAsciiIdentifierStart: /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]/,\n\t    // Unicode v8.0.0 NonAsciiIdentifierPart:\n\t    NonAsciiIdentifierPart: /[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/\n\t};\n\texports.Character = {\n\t    fromCodePoint: function (cp) {\n\t        return (cp < 0x10000) ? String.fromCharCode(cp) :\n\t            String.fromCharCode(0xD800 + ((cp - 0x10000) >> 10)) +\n\t                String.fromCharCode(0xDC00 + ((cp - 0x10000) & 1023));\n\t    },\n\t    // ECMA-262 11.2 White Space\n\t    isWhiteSpace: function (cp) {\n\t        return (cp === 0x20) || (cp === 0x09) || (cp === 0x0B) || (cp === 0x0C) || (cp === 0xA0) ||\n\t            (cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0);\n\t    },\n\t    // ECMA-262 11.3 Line Terminators\n\t    isLineTerminator: function (cp) {\n\t        return (cp === 0x0A) || (cp === 0x0D) || (cp === 0x2028) || (cp === 0x2029);\n\t    },\n\t    // ECMA-262 11.6 Identifier Names and Identifiers\n\t    isIdentifierStart: function (cp) {\n\t        return (cp === 0x24) || (cp === 0x5F) ||\n\t            (cp >= 0x41 && cp <= 0x5A) ||\n\t            (cp >= 0x61 && cp <= 0x7A) ||\n\t            (cp === 0x5C) ||\n\t            ((cp >= 0x80) && Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp)));\n\t    },\n\t    isIdentifierPart: function (cp) {\n\t        return (cp === 0x24) || (cp === 0x5F) ||\n\t            (cp >= 0x41 && cp <= 0x5A) ||\n\t            (cp >= 0x61 && cp <= 0x7A) ||\n\t            (cp >= 0x30 && cp <= 0x39) ||\n\t            (cp === 0x5C) ||\n\t            ((cp >= 0x80) && Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp)));\n\t    },\n\t    // ECMA-262 11.8.3 Numeric Literals\n\t    isDecimalDigit: function (cp) {\n\t        return (cp >= 0x30 && cp <= 0x39); // 0..9\n\t    },\n\t    isHexDigit: function (cp) {\n\t        return (cp >= 0x30 && cp <= 0x39) ||\n\t            (cp >= 0x41 && cp <= 0x46) ||\n\t            (cp >= 0x61 && cp <= 0x66); // a..f\n\t    },\n\t    isOctalDigit: function (cp) {\n\t        return (cp >= 0x30 && cp <= 0x37); // 0..7\n\t    }\n\t};\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar syntax_1 = __webpack_require__(2);\n\tvar ArrayExpression = (function () {\n\t    function ArrayExpression(elements) {\n\t        this.type = syntax_1.Syntax.ArrayExpression;\n\t        this.elements = elements;\n\t    }\n\t    return ArrayExpression;\n\t}());\n\texports.ArrayExpression = ArrayExpression;\n\tvar ArrayPattern = (function () {\n\t    function ArrayPattern(elements) {\n\t        this.type = syntax_1.Syntax.ArrayPattern;\n\t        this.elements = elements;\n\t    }\n\t    return ArrayPattern;\n\t}());\n\texports.ArrayPattern = ArrayPattern;\n\tvar ArrowFunctionExpression = (function () {\n\t    function ArrowFunctionExpression(params, body, expression) {\n\t        this.type = syntax_1.Syntax.ArrowFunctionExpression;\n\t        this.id = null;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = false;\n\t        this.expression = expression;\n\t    }\n\t    return ArrowFunctionExpression;\n\t}());\n\texports.ArrowFunctionExpression = ArrowFunctionExpression;\n\tvar AssignmentExpression = (function () {\n\t    function AssignmentExpression(operator, left, right) {\n\t        this.type = syntax_1.Syntax.AssignmentExpression;\n\t        this.operator = operator;\n\t        this.left = left;\n\t        this.right = right;\n\t    }\n\t    return AssignmentExpression;\n\t}());\n\texports.AssignmentExpression = AssignmentExpression;\n\tvar AssignmentPattern = (function () {\n\t    function AssignmentPattern(left, right) {\n\t        this.type = syntax_1.Syntax.AssignmentPattern;\n\t        this.left = left;\n\t        this.right = right;\n\t    }\n\t    return AssignmentPattern;\n\t}());\n\texports.AssignmentPattern = AssignmentPattern;\n\tvar BinaryExpression = (function () {\n\t    function BinaryExpression(operator, left, right) {\n\t        var logical = (operator === '||' || operator === '&&');\n\t        this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;\n\t        this.operator = operator;\n\t        this.left = left;\n\t        this.right = right;\n\t    }\n\t    return BinaryExpression;\n\t}());\n\texports.BinaryExpression = BinaryExpression;\n\tvar BlockStatement = (function () {\n\t    function BlockStatement(body) {\n\t        this.type = syntax_1.Syntax.BlockStatement;\n\t        this.body = body;\n\t    }\n\t    return BlockStatement;\n\t}());\n\texports.BlockStatement = BlockStatement;\n\tvar BreakStatement = (function () {\n\t    function BreakStatement(label) {\n\t        this.type = syntax_1.Syntax.BreakStatement;\n\t        this.label = label;\n\t    }\n\t    return BreakStatement;\n\t}());\n\texports.BreakStatement = BreakStatement;\n\tvar CallExpression = (function () {\n\t    function CallExpression(callee, args) {\n\t        this.type = syntax_1.Syntax.CallExpression;\n\t        this.callee = callee;\n\t        this.arguments = args;\n\t    }\n\t    return CallExpression;\n\t}());\n\texports.CallExpression = CallExpression;\n\tvar CatchClause = (function () {\n\t    function CatchClause(param, body) {\n\t        this.type = syntax_1.Syntax.CatchClause;\n\t        this.param = param;\n\t        this.body = body;\n\t    }\n\t    return CatchClause;\n\t}());\n\texports.CatchClause = CatchClause;\n\tvar ClassBody = (function () {\n\t    function ClassBody(body) {\n\t        this.type = syntax_1.Syntax.ClassBody;\n\t        this.body = body;\n\t    }\n\t    return ClassBody;\n\t}());\n\texports.ClassBody = ClassBody;\n\tvar ClassDeclaration = (function () {\n\t    function ClassDeclaration(id, superClass, body) {\n\t        this.type = syntax_1.Syntax.ClassDeclaration;\n\t        this.id = id;\n\t        this.superClass = superClass;\n\t        this.body = body;\n\t    }\n\t    return ClassDeclaration;\n\t}());\n\texports.ClassDeclaration = ClassDeclaration;\n\tvar ClassExpression = (function () {\n\t    function ClassExpression(id, superClass, body) {\n\t        this.type = syntax_1.Syntax.ClassExpression;\n\t        this.id = id;\n\t        this.superClass = superClass;\n\t        this.body = body;\n\t    }\n\t    return ClassExpression;\n\t}());\n\texports.ClassExpression = ClassExpression;\n\tvar ComputedMemberExpression = (function () {\n\t    function ComputedMemberExpression(object, property) {\n\t        this.type = syntax_1.Syntax.MemberExpression;\n\t        this.computed = true;\n\t        this.object = object;\n\t        this.property = property;\n\t    }\n\t    return ComputedMemberExpression;\n\t}());\n\texports.ComputedMemberExpression = ComputedMemberExpression;\n\tvar ConditionalExpression = (function () {\n\t    function ConditionalExpression(test, consequent, alternate) {\n\t        this.type = syntax_1.Syntax.ConditionalExpression;\n\t        this.test = test;\n\t        this.consequent = consequent;\n\t        this.alternate = alternate;\n\t    }\n\t    return ConditionalExpression;\n\t}());\n\texports.ConditionalExpression = ConditionalExpression;\n\tvar ContinueStatement = (function () {\n\t    function ContinueStatement(label) {\n\t        this.type = syntax_1.Syntax.ContinueStatement;\n\t        this.label = label;\n\t    }\n\t    return ContinueStatement;\n\t}());\n\texports.ContinueStatement = ContinueStatement;\n\tvar DebuggerStatement = (function () {\n\t    function DebuggerStatement() {\n\t        this.type = syntax_1.Syntax.DebuggerStatement;\n\t    }\n\t    return DebuggerStatement;\n\t}());\n\texports.DebuggerStatement = DebuggerStatement;\n\tvar Directive = (function () {\n\t    function Directive(expression, directive) {\n\t        this.type = syntax_1.Syntax.ExpressionStatement;\n\t        this.expression = expression;\n\t        this.directive = directive;\n\t    }\n\t    return Directive;\n\t}());\n\texports.Directive = Directive;\n\tvar DoWhileStatement = (function () {\n\t    function DoWhileStatement(body, test) {\n\t        this.type = syntax_1.Syntax.DoWhileStatement;\n\t        this.body = body;\n\t        this.test = test;\n\t    }\n\t    return DoWhileStatement;\n\t}());\n\texports.DoWhileStatement = DoWhileStatement;\n\tvar EmptyStatement = (function () {\n\t    function EmptyStatement() {\n\t        this.type = syntax_1.Syntax.EmptyStatement;\n\t    }\n\t    return EmptyStatement;\n\t}());\n\texports.EmptyStatement = EmptyStatement;\n\tvar ExportAllDeclaration = (function () {\n\t    function ExportAllDeclaration(source) {\n\t        this.type = syntax_1.Syntax.ExportAllDeclaration;\n\t        this.source = source;\n\t    }\n\t    return ExportAllDeclaration;\n\t}());\n\texports.ExportAllDeclaration = ExportAllDeclaration;\n\tvar ExportDefaultDeclaration = (function () {\n\t    function ExportDefaultDeclaration(declaration) {\n\t        this.type = syntax_1.Syntax.ExportDefaultDeclaration;\n\t        this.declaration = declaration;\n\t    }\n\t    return ExportDefaultDeclaration;\n\t}());\n\texports.ExportDefaultDeclaration = ExportDefaultDeclaration;\n\tvar ExportNamedDeclaration = (function () {\n\t    function ExportNamedDeclaration(declaration, specifiers, source) {\n\t        this.type = syntax_1.Syntax.ExportNamedDeclaration;\n\t        this.declaration = declaration;\n\t        this.specifiers = specifiers;\n\t        this.source = source;\n\t    }\n\t    return ExportNamedDeclaration;\n\t}());\n\texports.ExportNamedDeclaration = ExportNamedDeclaration;\n\tvar ExportSpecifier = (function () {\n\t    function ExportSpecifier(local, exported) {\n\t        this.type = syntax_1.Syntax.ExportSpecifier;\n\t        this.exported = exported;\n\t        this.local = local;\n\t    }\n\t    return ExportSpecifier;\n\t}());\n\texports.ExportSpecifier = ExportSpecifier;\n\tvar ExpressionStatement = (function () {\n\t    function ExpressionStatement(expression) {\n\t        this.type = syntax_1.Syntax.ExpressionStatement;\n\t        this.expression = expression;\n\t    }\n\t    return ExpressionStatement;\n\t}());\n\texports.ExpressionStatement = ExpressionStatement;\n\tvar ForInStatement = (function () {\n\t    function ForInStatement(left, right, body) {\n\t        this.type = syntax_1.Syntax.ForInStatement;\n\t        this.left = left;\n\t        this.right = right;\n\t        this.body = body;\n\t        this.each = false;\n\t    }\n\t    return ForInStatement;\n\t}());\n\texports.ForInStatement = ForInStatement;\n\tvar ForOfStatement = (function () {\n\t    function ForOfStatement(left, right, body) {\n\t        this.type = syntax_1.Syntax.ForOfStatement;\n\t        this.left = left;\n\t        this.right = right;\n\t        this.body = body;\n\t    }\n\t    return ForOfStatement;\n\t}());\n\texports.ForOfStatement = ForOfStatement;\n\tvar ForStatement = (function () {\n\t    function ForStatement(init, test, update, body) {\n\t        this.type = syntax_1.Syntax.ForStatement;\n\t        this.init = init;\n\t        this.test = test;\n\t        this.update = update;\n\t        this.body = body;\n\t    }\n\t    return ForStatement;\n\t}());\n\texports.ForStatement = ForStatement;\n\tvar FunctionDeclaration = (function () {\n\t    function FunctionDeclaration(id, params, body, generator) {\n\t        this.type = syntax_1.Syntax.FunctionDeclaration;\n\t        this.id = id;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = generator;\n\t        this.expression = false;\n\t    }\n\t    return FunctionDeclaration;\n\t}());\n\texports.FunctionDeclaration = FunctionDeclaration;\n\tvar FunctionExpression = (function () {\n\t    function FunctionExpression(id, params, body, generator) {\n\t        this.type = syntax_1.Syntax.FunctionExpression;\n\t        this.id = id;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = generator;\n\t        this.expression = false;\n\t    }\n\t    return FunctionExpression;\n\t}());\n\texports.FunctionExpression = FunctionExpression;\n\tvar Identifier = (function () {\n\t    function Identifier(name) {\n\t        this.type = syntax_1.Syntax.Identifier;\n\t        this.name = name;\n\t    }\n\t    return Identifier;\n\t}());\n\texports.Identifier = Identifier;\n\tvar IfStatement = (function () {\n\t    function IfStatement(test, consequent, alternate) {\n\t        this.type = syntax_1.Syntax.IfStatement;\n\t        this.test = test;\n\t        this.consequent = consequent;\n\t        this.alternate = alternate;\n\t    }\n\t    return IfStatement;\n\t}());\n\texports.IfStatement = IfStatement;\n\tvar ImportDeclaration = (function () {\n\t    function ImportDeclaration(specifiers, source) {\n\t        this.type = syntax_1.Syntax.ImportDeclaration;\n\t        this.specifiers = specifiers;\n\t        this.source = source;\n\t    }\n\t    return ImportDeclaration;\n\t}());\n\texports.ImportDeclaration = ImportDeclaration;\n\tvar ImportDefaultSpecifier = (function () {\n\t    function ImportDefaultSpecifier(local) {\n\t        this.type = syntax_1.Syntax.ImportDefaultSpecifier;\n\t        this.local = local;\n\t    }\n\t    return ImportDefaultSpecifier;\n\t}());\n\texports.ImportDefaultSpecifier = ImportDefaultSpecifier;\n\tvar ImportNamespaceSpecifier = (function () {\n\t    function ImportNamespaceSpecifier(local) {\n\t        this.type = syntax_1.Syntax.ImportNamespaceSpecifier;\n\t        this.local = local;\n\t    }\n\t    return ImportNamespaceSpecifier;\n\t}());\n\texports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;\n\tvar ImportSpecifier = (function () {\n\t    function ImportSpecifier(local, imported) {\n\t        this.type = syntax_1.Syntax.ImportSpecifier;\n\t        this.local = local;\n\t        this.imported = imported;\n\t    }\n\t    return ImportSpecifier;\n\t}());\n\texports.ImportSpecifier = ImportSpecifier;\n\tvar LabeledStatement = (function () {\n\t    function LabeledStatement(label, body) {\n\t        this.type = syntax_1.Syntax.LabeledStatement;\n\t        this.label = label;\n\t        this.body = body;\n\t    }\n\t    return LabeledStatement;\n\t}());\n\texports.LabeledStatement = LabeledStatement;\n\tvar Literal = (function () {\n\t    function Literal(value, raw) {\n\t        this.type = syntax_1.Syntax.Literal;\n\t        this.value = value;\n\t        this.raw = raw;\n\t    }\n\t    return Literal;\n\t}());\n\texports.Literal = Literal;\n\tvar MetaProperty = (function () {\n\t    function MetaProperty(meta, property) {\n\t        this.type = syntax_1.Syntax.MetaProperty;\n\t        this.meta = meta;\n\t        this.property = property;\n\t    }\n\t    return MetaProperty;\n\t}());\n\texports.MetaProperty = MetaProperty;\n\tvar MethodDefinition = (function () {\n\t    function MethodDefinition(key, computed, value, kind, isStatic) {\n\t        this.type = syntax_1.Syntax.MethodDefinition;\n\t        this.key = key;\n\t        this.computed = computed;\n\t        this.value = value;\n\t        this.kind = kind;\n\t        this.static = isStatic;\n\t    }\n\t    return MethodDefinition;\n\t}());\n\texports.MethodDefinition = MethodDefinition;\n\tvar NewExpression = (function () {\n\t    function NewExpression(callee, args) {\n\t        this.type = syntax_1.Syntax.NewExpression;\n\t        this.callee = callee;\n\t        this.arguments = args;\n\t    }\n\t    return NewExpression;\n\t}());\n\texports.NewExpression = NewExpression;\n\tvar ObjectExpression = (function () {\n\t    function ObjectExpression(properties) {\n\t        this.type = syntax_1.Syntax.ObjectExpression;\n\t        this.properties = properties;\n\t    }\n\t    return ObjectExpression;\n\t}());\n\texports.ObjectExpression = ObjectExpression;\n\tvar ObjectPattern = (function () {\n\t    function ObjectPattern(properties) {\n\t        this.type = syntax_1.Syntax.ObjectPattern;\n\t        this.properties = properties;\n\t    }\n\t    return ObjectPattern;\n\t}());\n\texports.ObjectPattern = ObjectPattern;\n\tvar Program = (function () {\n\t    function Program(body, sourceType) {\n\t        this.type = syntax_1.Syntax.Program;\n\t        this.body = body;\n\t        this.sourceType = sourceType;\n\t    }\n\t    return Program;\n\t}());\n\texports.Program = Program;\n\tvar Property = (function () {\n\t    function Property(kind, key, computed, value, method, shorthand) {\n\t        this.type = syntax_1.Syntax.Property;\n\t        this.key = key;\n\t        this.computed = computed;\n\t        this.value = value;\n\t        this.kind = kind;\n\t        this.method = method;\n\t        this.shorthand = shorthand;\n\t    }\n\t    return Property;\n\t}());\n\texports.Property = Property;\n\tvar RegexLiteral = (function () {\n\t    function RegexLiteral(value, raw, regex) {\n\t        this.type = syntax_1.Syntax.Literal;\n\t        this.value = value;\n\t        this.raw = raw;\n\t        this.regex = regex;\n\t    }\n\t    return RegexLiteral;\n\t}());\n\texports.RegexLiteral = RegexLiteral;\n\tvar RestElement = (function () {\n\t    function RestElement(argument) {\n\t        this.type = syntax_1.Syntax.RestElement;\n\t        this.argument = argument;\n\t    }\n\t    return RestElement;\n\t}());\n\texports.RestElement = RestElement;\n\tvar ReturnStatement = (function () {\n\t    function ReturnStatement(argument) {\n\t        this.type = syntax_1.Syntax.ReturnStatement;\n\t        this.argument = argument;\n\t    }\n\t    return ReturnStatement;\n\t}());\n\texports.ReturnStatement = ReturnStatement;\n\tvar SequenceExpression = (function () {\n\t    function SequenceExpression(expressions) {\n\t        this.type = syntax_1.Syntax.SequenceExpression;\n\t        this.expressions = expressions;\n\t    }\n\t    return SequenceExpression;\n\t}());\n\texports.SequenceExpression = SequenceExpression;\n\tvar SpreadElement = (function () {\n\t    function SpreadElement(argument) {\n\t        this.type = syntax_1.Syntax.SpreadElement;\n\t        this.argument = argument;\n\t    }\n\t    return SpreadElement;\n\t}());\n\texports.SpreadElement = SpreadElement;\n\tvar StaticMemberExpression = (function () {\n\t    function StaticMemberExpression(object, property) {\n\t        this.type = syntax_1.Syntax.MemberExpression;\n\t        this.computed = false;\n\t        this.object = object;\n\t        this.property = property;\n\t    }\n\t    return StaticMemberExpression;\n\t}());\n\texports.StaticMemberExpression = StaticMemberExpression;\n\tvar Super = (function () {\n\t    function Super() {\n\t        this.type = syntax_1.Syntax.Super;\n\t    }\n\t    return Super;\n\t}());\n\texports.Super = Super;\n\tvar SwitchCase = (function () {\n\t    function SwitchCase(test, consequent) {\n\t        this.type = syntax_1.Syntax.SwitchCase;\n\t        this.test = test;\n\t        this.consequent = consequent;\n\t    }\n\t    return SwitchCase;\n\t}());\n\texports.SwitchCase = SwitchCase;\n\tvar SwitchStatement = (function () {\n\t    function SwitchStatement(discriminant, cases) {\n\t        this.type = syntax_1.Syntax.SwitchStatement;\n\t        this.discriminant = discriminant;\n\t        this.cases = cases;\n\t    }\n\t    return SwitchStatement;\n\t}());\n\texports.SwitchStatement = SwitchStatement;\n\tvar TaggedTemplateExpression = (function () {\n\t    function TaggedTemplateExpression(tag, quasi) {\n\t        this.type = syntax_1.Syntax.TaggedTemplateExpression;\n\t        this.tag = tag;\n\t        this.quasi = quasi;\n\t    }\n\t    return TaggedTemplateExpression;\n\t}());\n\texports.TaggedTemplateExpression = TaggedTemplateExpression;\n\tvar TemplateElement = (function () {\n\t    function TemplateElement(value, tail) {\n\t        this.type = syntax_1.Syntax.TemplateElement;\n\t        this.value = value;\n\t        this.tail = tail;\n\t    }\n\t    return TemplateElement;\n\t}());\n\texports.TemplateElement = TemplateElement;\n\tvar TemplateLiteral = (function () {\n\t    function TemplateLiteral(quasis, expressions) {\n\t        this.type = syntax_1.Syntax.TemplateLiteral;\n\t        this.quasis = quasis;\n\t        this.expressions = expressions;\n\t    }\n\t    return TemplateLiteral;\n\t}());\n\texports.TemplateLiteral = TemplateLiteral;\n\tvar ThisExpression = (function () {\n\t    function ThisExpression() {\n\t        this.type = syntax_1.Syntax.ThisExpression;\n\t    }\n\t    return ThisExpression;\n\t}());\n\texports.ThisExpression = ThisExpression;\n\tvar ThrowStatement = (function () {\n\t    function ThrowStatement(argument) {\n\t        this.type = syntax_1.Syntax.ThrowStatement;\n\t        this.argument = argument;\n\t    }\n\t    return ThrowStatement;\n\t}());\n\texports.ThrowStatement = ThrowStatement;\n\tvar TryStatement = (function () {\n\t    function TryStatement(block, handler, finalizer) {\n\t        this.type = syntax_1.Syntax.TryStatement;\n\t        this.block = block;\n\t        this.handler = handler;\n\t        this.finalizer = finalizer;\n\t    }\n\t    return TryStatement;\n\t}());\n\texports.TryStatement = TryStatement;\n\tvar UnaryExpression = (function () {\n\t    function UnaryExpression(operator, argument) {\n\t        this.type = syntax_1.Syntax.UnaryExpression;\n\t        this.operator = operator;\n\t        this.argument = argument;\n\t        this.prefix = true;\n\t    }\n\t    return UnaryExpression;\n\t}());\n\texports.UnaryExpression = UnaryExpression;\n\tvar UpdateExpression = (function () {\n\t    function UpdateExpression(operator, argument, prefix) {\n\t        this.type = syntax_1.Syntax.UpdateExpression;\n\t        this.operator = operator;\n\t        this.argument = argument;\n\t        this.prefix = prefix;\n\t    }\n\t    return UpdateExpression;\n\t}());\n\texports.UpdateExpression = UpdateExpression;\n\tvar VariableDeclaration = (function () {\n\t    function VariableDeclaration(declarations, kind) {\n\t        this.type = syntax_1.Syntax.VariableDeclaration;\n\t        this.declarations = declarations;\n\t        this.kind = kind;\n\t    }\n\t    return VariableDeclaration;\n\t}());\n\texports.VariableDeclaration = VariableDeclaration;\n\tvar VariableDeclarator = (function () {\n\t    function VariableDeclarator(id, init) {\n\t        this.type = syntax_1.Syntax.VariableDeclarator;\n\t        this.id = id;\n\t        this.init = init;\n\t    }\n\t    return VariableDeclarator;\n\t}());\n\texports.VariableDeclarator = VariableDeclarator;\n\tvar WhileStatement = (function () {\n\t    function WhileStatement(test, body) {\n\t        this.type = syntax_1.Syntax.WhileStatement;\n\t        this.test = test;\n\t        this.body = body;\n\t    }\n\t    return WhileStatement;\n\t}());\n\texports.WhileStatement = WhileStatement;\n\tvar WithStatement = (function () {\n\t    function WithStatement(object, body) {\n\t        this.type = syntax_1.Syntax.WithStatement;\n\t        this.object = object;\n\t        this.body = body;\n\t    }\n\t    return WithStatement;\n\t}());\n\texports.WithStatement = WithStatement;\n\tvar YieldExpression = (function () {\n\t    function YieldExpression(argument, delegate) {\n\t        this.type = syntax_1.Syntax.YieldExpression;\n\t        this.argument = argument;\n\t        this.delegate = delegate;\n\t    }\n\t    return YieldExpression;\n\t}());\n\texports.YieldExpression = YieldExpression;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n/* istanbul ignore next */\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar character_1 = __webpack_require__(9);\n\tvar token_1 = __webpack_require__(7);\n\tvar parser_1 = __webpack_require__(3);\n\tvar xhtml_entities_1 = __webpack_require__(12);\n\tvar jsx_syntax_1 = __webpack_require__(13);\n\tvar Node = __webpack_require__(10);\n\tvar JSXNode = __webpack_require__(14);\n\tvar JSXToken;\n\t(function (JSXToken) {\n\t    JSXToken[JSXToken[\"Identifier\"] = 100] = \"Identifier\";\n\t    JSXToken[JSXToken[\"Text\"] = 101] = \"Text\";\n\t})(JSXToken || (JSXToken = {}));\n\ttoken_1.TokenName[JSXToken.Identifier] = 'JSXIdentifier';\n\ttoken_1.TokenName[JSXToken.Text] = 'JSXText';\n\t// Fully qualified element name, e.g. <svg:path> returns \"svg:path\"\n\tfunction getQualifiedElementName(elementName) {\n\t    var qualifiedName;\n\t    switch (elementName.type) {\n\t        case jsx_syntax_1.JSXSyntax.JSXIdentifier:\n\t            var id = (elementName);\n\t            qualifiedName = id.name;\n\t            break;\n\t        case jsx_syntax_1.JSXSyntax.JSXNamespacedName:\n\t            var ns = (elementName);\n\t            qualifiedName = getQualifiedElementName(ns.namespace) + ':' +\n\t                getQualifiedElementName(ns.name);\n\t            break;\n\t        case jsx_syntax_1.JSXSyntax.JSXMemberExpression:\n\t            var expr = (elementName);\n\t            qualifiedName = getQualifiedElementName(expr.object) + '.' +\n\t                getQualifiedElementName(expr.property);\n\t            break;\n\t    }\n\t    return qualifiedName;\n\t}\n\tvar JSXParser = (function (_super) {\n\t    __extends(JSXParser, _super);\n\t    function JSXParser(code, options, delegate) {\n\t        _super.call(this, code, options, delegate);\n\t    }\n\t    JSXParser.prototype.parsePrimaryExpression = function () {\n\t        return this.match('<') ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);\n\t    };\n\t    JSXParser.prototype.startJSX = function () {\n\t        // Unwind the scanner before the lookahead token.\n\t        this.scanner.index = this.startMarker.index;\n\t        this.scanner.lineNumber = this.startMarker.lineNumber;\n\t        this.scanner.lineStart = this.startMarker.lineStart;\n\t    };\n\t    JSXParser.prototype.finishJSX = function () {\n\t        // Prime the next lookahead.\n\t        this.nextToken();\n\t    };\n\t    JSXParser.prototype.reenterJSX = function () {\n\t        this.startJSX();\n\t        this.expectJSX('}');\n\t        // Pop the closing '}' added from the lookahead.\n\t        if (this.config.tokens) {\n\t            this.tokens.pop();\n\t        }\n\t    };\n\t    JSXParser.prototype.createJSXNode = function () {\n\t        this.collectComments();\n\t        return {\n\t            index: this.scanner.index,\n\t            line: this.scanner.lineNumber,\n\t            column: this.scanner.index - this.scanner.lineStart\n\t        };\n\t    };\n\t    JSXParser.prototype.createJSXChildNode = function () {\n\t        return {\n\t            index: this.scanner.index,\n\t            line: this.scanner.lineNumber,\n\t            column: this.scanner.index - this.scanner.lineStart\n\t        };\n\t    };\n\t    JSXParser.prototype.scanXHTMLEntity = function (quote) {\n\t        var result = '&';\n\t        var valid = true;\n\t        var terminated = false;\n\t        var numeric = false;\n\t        var hex = false;\n\t        while (!this.scanner.eof() && valid && !terminated) {\n\t            var ch = this.scanner.source[this.scanner.index];\n\t            if (ch === quote) {\n\t                break;\n\t            }\n\t            terminated = (ch === ';');\n\t            result += ch;\n\t            ++this.scanner.index;\n\t            if (!terminated) {\n\t                switch (result.length) {\n\t                    case 2:\n\t                        // e.g. '&#123;'\n\t                        numeric = (ch === '#');\n\t                        break;\n\t                    case 3:\n\t                        if (numeric) {\n\t                            // e.g. '&#x41;'\n\t                            hex = (ch === 'x');\n\t                            valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));\n\t                            numeric = numeric && !hex;\n\t                        }\n\t                        break;\n\t                    default:\n\t                        valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));\n\t                        valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));\n\t                        break;\n\t                }\n\t            }\n\t        }\n\t        if (valid && terminated && result.length > 2) {\n\t            // e.g. '&#x41;' becomes just '#x41'\n\t            var str = result.substr(1, result.length - 2);\n\t            if (numeric && str.length > 1) {\n\t                result = String.fromCharCode(parseInt(str.substr(1), 10));\n\t            }\n\t            else if (hex && str.length > 2) {\n\t                result = String.fromCharCode(parseInt('0' + str.substr(1), 16));\n\t            }\n\t            else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {\n\t                result = xhtml_entities_1.XHTMLEntities[str];\n\t            }\n\t        }\n\t        return result;\n\t    };\n\t    // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.\n\t    JSXParser.prototype.lexJSX = function () {\n\t        var cp = this.scanner.source.charCodeAt(this.scanner.index);\n\t        // < > / : = { }\n\t        if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {\n\t            var value = this.scanner.source[this.scanner.index++];\n\t            return {\n\t                type: token_1.Token.Punctuator,\n\t                value: value,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: this.scanner.index - 1,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // \" '\n\t        if (cp === 34 || cp === 39) {\n\t            var start = this.scanner.index;\n\t            var quote = this.scanner.source[this.scanner.index++];\n\t            var str = '';\n\t            while (!this.scanner.eof()) {\n\t                var ch = this.scanner.source[this.scanner.index++];\n\t                if (ch === quote) {\n\t                    break;\n\t                }\n\t                else if (ch === '&') {\n\t                    str += this.scanXHTMLEntity(quote);\n\t                }\n\t                else {\n\t                    str += ch;\n\t                }\n\t            }\n\t            return {\n\t                type: token_1.Token.StringLiteral,\n\t                value: str,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: start,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // ... or .\n\t        if (cp === 46) {\n\t            var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);\n\t            var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);\n\t            var value = (n1 === 46 && n2 === 46) ? '...' : '.';\n\t            var start = this.scanner.index;\n\t            this.scanner.index += value.length;\n\t            return {\n\t                type: token_1.Token.Punctuator,\n\t                value: value,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: start,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // `\n\t        if (cp === 96) {\n\t            // Only placeholder, since it will be rescanned as a real assignment expression.\n\t            return {\n\t                type: token_1.Token.Template,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: this.scanner.index,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // Identifer can not contain backslash (char code 92).\n\t        if (character_1.Character.isIdentifierStart(cp) && (cp !== 92)) {\n\t            var start = this.scanner.index;\n\t            ++this.scanner.index;\n\t            while (!this.scanner.eof()) {\n\t                var ch = this.scanner.source.charCodeAt(this.scanner.index);\n\t                if (character_1.Character.isIdentifierPart(ch) && (ch !== 92)) {\n\t                    ++this.scanner.index;\n\t                }\n\t                else if (ch === 45) {\n\t                    // Hyphen (char code 45) can be part of an identifier.\n\t                    ++this.scanner.index;\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            var id = this.scanner.source.slice(start, this.scanner.index);\n\t            return {\n\t                type: JSXToken.Identifier,\n\t                value: id,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: start,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        this.scanner.throwUnexpectedToken();\n\t    };\n\t    JSXParser.prototype.nextJSXToken = function () {\n\t        this.collectComments();\n\t        this.startMarker.index = this.scanner.index;\n\t        this.startMarker.lineNumber = this.scanner.lineNumber;\n\t        this.startMarker.lineStart = this.scanner.lineStart;\n\t        var token = this.lexJSX();\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.lineNumber = this.scanner.lineNumber;\n\t        this.lastMarker.lineStart = this.scanner.lineStart;\n\t        if (this.config.tokens) {\n\t            this.tokens.push(this.convertToken(token));\n\t        }\n\t        return token;\n\t    };\n\t    JSXParser.prototype.nextJSXText = function () {\n\t        this.startMarker.index = this.scanner.index;\n\t        this.startMarker.lineNumber = this.scanner.lineNumber;\n\t        this.startMarker.lineStart = this.scanner.lineStart;\n\t        var start = this.scanner.index;\n\t        var text = '';\n\t        while (!this.scanner.eof()) {\n\t            var ch = this.scanner.source[this.scanner.index];\n\t            if (ch === '{' || ch === '<') {\n\t                break;\n\t            }\n\t            ++this.scanner.index;\n\t            text += ch;\n\t            if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                ++this.scanner.lineNumber;\n\t                if (ch === '\\r' && this.scanner.source[this.scanner.index] === '\\n') {\n\t                    ++this.scanner.index;\n\t                }\n\t                this.scanner.lineStart = this.scanner.index;\n\t            }\n\t        }\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.lineNumber = this.scanner.lineNumber;\n\t        this.lastMarker.lineStart = this.scanner.lineStart;\n\t        var token = {\n\t            type: JSXToken.Text,\n\t            value: text,\n\t            lineNumber: this.scanner.lineNumber,\n\t            lineStart: this.scanner.lineStart,\n\t            start: start,\n\t            end: this.scanner.index\n\t        };\n\t        if ((text.length > 0) && this.config.tokens) {\n\t            this.tokens.push(this.convertToken(token));\n\t        }\n\t        return token;\n\t    };\n\t    JSXParser.prototype.peekJSXToken = function () {\n\t        var previousIndex = this.scanner.index;\n\t        var previousLineNumber = this.scanner.lineNumber;\n\t        var previousLineStart = this.scanner.lineStart;\n\t        this.scanner.scanComments();\n\t        var next = this.lexJSX();\n\t        this.scanner.index = previousIndex;\n\t        this.scanner.lineNumber = previousLineNumber;\n\t        this.scanner.lineStart = previousLineStart;\n\t        return next;\n\t    };\n\t    // Expect the next JSX token to match the specified punctuator.\n\t    // If not, an exception will be thrown.\n\t    JSXParser.prototype.expectJSX = function (value) {\n\t        var token = this.nextJSXToken();\n\t        if (token.type !== token_1.Token.Punctuator || token.value !== value) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t    };\n\t    // Return true if the next JSX token matches the specified punctuator.\n\t    JSXParser.prototype.matchJSX = function (value) {\n\t        var next = this.peekJSXToken();\n\t        return next.type === token_1.Token.Punctuator && next.value === value;\n\t    };\n\t    JSXParser.prototype.parseJSXIdentifier = function () {\n\t        var node = this.createJSXNode();\n\t        var token = this.nextJSXToken();\n\t        if (token.type !== JSXToken.Identifier) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXIdentifier(token.value));\n\t    };\n\t    JSXParser.prototype.parseJSXElementName = function () {\n\t        var node = this.createJSXNode();\n\t        var elementName = this.parseJSXIdentifier();\n\t        if (this.matchJSX(':')) {\n\t            var namespace = elementName;\n\t            this.expectJSX(':');\n\t            var name_1 = this.parseJSXIdentifier();\n\t            elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));\n\t        }\n\t        else if (this.matchJSX('.')) {\n\t            while (this.matchJSX('.')) {\n\t                var object = elementName;\n\t                this.expectJSX('.');\n\t                var property = this.parseJSXIdentifier();\n\t                elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));\n\t            }\n\t        }\n\t        return elementName;\n\t    };\n\t    JSXParser.prototype.parseJSXAttributeName = function () {\n\t        var node = this.createJSXNode();\n\t        var attributeName;\n\t        var identifier = this.parseJSXIdentifier();\n\t        if (this.matchJSX(':')) {\n\t            var namespace = identifier;\n\t            this.expectJSX(':');\n\t            var name_2 = this.parseJSXIdentifier();\n\t            attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));\n\t        }\n\t        else {\n\t            attributeName = identifier;\n\t        }\n\t        return attributeName;\n\t    };\n\t    JSXParser.prototype.parseJSXStringLiteralAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        var token = this.nextJSXToken();\n\t        if (token.type !== token_1.Token.StringLiteral) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t        var raw = this.getTokenRaw(token);\n\t        return this.finalize(node, new Node.Literal(token.value, raw));\n\t    };\n\t    JSXParser.prototype.parseJSXExpressionAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('{');\n\t        this.finishJSX();\n\t        if (this.match('}')) {\n\t            this.tolerateError('JSX attributes must only be assigned a non-empty expression');\n\t        }\n\t        var expression = this.parseAssignmentExpression();\n\t        this.reenterJSX();\n\t        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\n\t    };\n\t    JSXParser.prototype.parseJSXAttributeValue = function () {\n\t        return this.matchJSX('{') ? this.parseJSXExpressionAttribute() :\n\t            this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();\n\t    };\n\t    JSXParser.prototype.parseJSXNameValueAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        var name = this.parseJSXAttributeName();\n\t        var value = null;\n\t        if (this.matchJSX('=')) {\n\t            this.expectJSX('=');\n\t            value = this.parseJSXAttributeValue();\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXAttribute(name, value));\n\t    };\n\t    JSXParser.prototype.parseJSXSpreadAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('{');\n\t        this.expectJSX('...');\n\t        this.finishJSX();\n\t        var argument = this.parseAssignmentExpression();\n\t        this.reenterJSX();\n\t        return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));\n\t    };\n\t    JSXParser.prototype.parseJSXAttributes = function () {\n\t        var attributes = [];\n\t        while (!this.matchJSX('/') && !this.matchJSX('>')) {\n\t            var attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() :\n\t                this.parseJSXNameValueAttribute();\n\t            attributes.push(attribute);\n\t        }\n\t        return attributes;\n\t    };\n\t    JSXParser.prototype.parseJSXOpeningElement = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('<');\n\t        var name = this.parseJSXElementName();\n\t        var attributes = this.parseJSXAttributes();\n\t        var selfClosing = this.matchJSX('/');\n\t        if (selfClosing) {\n\t            this.expectJSX('/');\n\t        }\n\t        this.expectJSX('>');\n\t        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\n\t    };\n\t    JSXParser.prototype.parseJSXBoundaryElement = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('<');\n\t        if (this.matchJSX('/')) {\n\t            this.expectJSX('/');\n\t            var name_3 = this.parseJSXElementName();\n\t            this.expectJSX('>');\n\t            return this.finalize(node, new JSXNode.JSXClosingElement(name_3));\n\t        }\n\t        var name = this.parseJSXElementName();\n\t        var attributes = this.parseJSXAttributes();\n\t        var selfClosing = this.matchJSX('/');\n\t        if (selfClosing) {\n\t            this.expectJSX('/');\n\t        }\n\t        this.expectJSX('>');\n\t        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\n\t    };\n\t    JSXParser.prototype.parseJSXEmptyExpression = function () {\n\t        var node = this.createJSXChildNode();\n\t        this.collectComments();\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.lineNumber = this.scanner.lineNumber;\n\t        this.lastMarker.lineStart = this.scanner.lineStart;\n\t        return this.finalize(node, new JSXNode.JSXEmptyExpression());\n\t    };\n\t    JSXParser.prototype.parseJSXExpressionContainer = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('{');\n\t        var expression;\n\t        if (this.matchJSX('}')) {\n\t            expression = this.parseJSXEmptyExpression();\n\t            this.expectJSX('}');\n\t        }\n\t        else {\n\t            this.finishJSX();\n\t            expression = this.parseAssignmentExpression();\n\t            this.reenterJSX();\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\n\t    };\n\t    JSXParser.prototype.parseJSXChildren = function () {\n\t        var children = [];\n\t        while (!this.scanner.eof()) {\n\t            var node = this.createJSXChildNode();\n\t            var token = this.nextJSXText();\n\t            if (token.start < token.end) {\n\t                var raw = this.getTokenRaw(token);\n\t                var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));\n\t                children.push(child);\n\t            }\n\t            if (this.scanner.source[this.scanner.index] === '{') {\n\t                var container = this.parseJSXExpressionContainer();\n\t                children.push(container);\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return children;\n\t    };\n\t    JSXParser.prototype.parseComplexJSXElement = function (el) {\n\t        var stack = [];\n\t        while (!this.scanner.eof()) {\n\t            el.children = el.children.concat(this.parseJSXChildren());\n\t            var node = this.createJSXChildNode();\n\t            var element = this.parseJSXBoundaryElement();\n\t            if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {\n\t                var opening = (element);\n\t                if (opening.selfClosing) {\n\t                    var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));\n\t                    el.children.push(child);\n\t                }\n\t                else {\n\t                    stack.push(el);\n\t                    el = { node: node, opening: opening, closing: null, children: [] };\n\t                }\n\t            }\n\t            if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {\n\t                el.closing = (element);\n\t                var open_1 = getQualifiedElementName(el.opening.name);\n\t                var close_1 = getQualifiedElementName(el.closing.name);\n\t                if (open_1 !== close_1) {\n\t                    this.tolerateError('Expected corresponding JSX closing tag for %0', open_1);\n\t                }\n\t                if (stack.length > 0) {\n\t                    var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));\n\t                    el = stack.pop();\n\t                    el.children.push(child);\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        return el;\n\t    };\n\t    JSXParser.prototype.parseJSXElement = function () {\n\t        var node = this.createJSXNode();\n\t        var opening = this.parseJSXOpeningElement();\n\t        var children = [];\n\t        var closing = null;\n\t        if (!opening.selfClosing) {\n\t            var el = this.parseComplexJSXElement({ node: node, opening: opening, closing: closing, children: children });\n\t            children = el.children;\n\t            closing = el.closing;\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));\n\t    };\n\t    JSXParser.prototype.parseJSXRoot = function () {\n\t        // Pop the opening '<' added from the lookahead.\n\t        if (this.config.tokens) {\n\t            this.tokens.pop();\n\t        }\n\t        this.startJSX();\n\t        var element = this.parseJSXElement();\n\t        this.finishJSX();\n\t        return element;\n\t    };\n\t    return JSXParser;\n\t}(parser_1.Parser));\n\texports.JSXParser = JSXParser;\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t// Generated by generate-xhtml-entities.js. DO NOT MODIFY!\n\t\"use strict\";\n\texports.XHTMLEntities = {\n\t    quot: '\\u0022',\n\t    amp: '\\u0026',\n\t    apos: '\\u0027',\n\t    gt: '\\u003E',\n\t    nbsp: '\\u00A0',\n\t    iexcl: '\\u00A1',\n\t    cent: '\\u00A2',\n\t    pound: '\\u00A3',\n\t    curren: '\\u00A4',\n\t    yen: '\\u00A5',\n\t    brvbar: '\\u00A6',\n\t    sect: '\\u00A7',\n\t    uml: '\\u00A8',\n\t    copy: '\\u00A9',\n\t    ordf: '\\u00AA',\n\t    laquo: '\\u00AB',\n\t    not: '\\u00AC',\n\t    shy: '\\u00AD',\n\t    reg: '\\u00AE',\n\t    macr: '\\u00AF',\n\t    deg: '\\u00B0',\n\t    plusmn: '\\u00B1',\n\t    sup2: '\\u00B2',\n\t    sup3: '\\u00B3',\n\t    acute: '\\u00B4',\n\t    micro: '\\u00B5',\n\t    para: '\\u00B6',\n\t    middot: '\\u00B7',\n\t    cedil: '\\u00B8',\n\t    sup1: '\\u00B9',\n\t    ordm: '\\u00BA',\n\t    raquo: '\\u00BB',\n\t    frac14: '\\u00BC',\n\t    frac12: '\\u00BD',\n\t    frac34: '\\u00BE',\n\t    iquest: '\\u00BF',\n\t    Agrave: '\\u00C0',\n\t    Aacute: '\\u00C1',\n\t    Acirc: '\\u00C2',\n\t    Atilde: '\\u00C3',\n\t    Auml: '\\u00C4',\n\t    Aring: '\\u00C5',\n\t    AElig: '\\u00C6',\n\t    Ccedil: '\\u00C7',\n\t    Egrave: '\\u00C8',\n\t    Eacute: '\\u00C9',\n\t    Ecirc: '\\u00CA',\n\t    Euml: '\\u00CB',\n\t    Igrave: '\\u00CC',\n\t    Iacute: '\\u00CD',\n\t    Icirc: '\\u00CE',\n\t    Iuml: '\\u00CF',\n\t    ETH: '\\u00D0',\n\t    Ntilde: '\\u00D1',\n\t    Ograve: '\\u00D2',\n\t    Oacute: '\\u00D3',\n\t    Ocirc: '\\u00D4',\n\t    Otilde: '\\u00D5',\n\t    Ouml: '\\u00D6',\n\t    times: '\\u00D7',\n\t    Oslash: '\\u00D8',\n\t    Ugrave: '\\u00D9',\n\t    Uacute: '\\u00DA',\n\t    Ucirc: '\\u00DB',\n\t    Uuml: '\\u00DC',\n\t    Yacute: '\\u00DD',\n\t    THORN: '\\u00DE',\n\t    szlig: '\\u00DF',\n\t    agrave: '\\u00E0',\n\t    aacute: '\\u00E1',\n\t    acirc: '\\u00E2',\n\t    atilde: '\\u00E3',\n\t    auml: '\\u00E4',\n\t    aring: '\\u00E5',\n\t    aelig: '\\u00E6',\n\t    ccedil: '\\u00E7',\n\t    egrave: '\\u00E8',\n\t    eacute: '\\u00E9',\n\t    ecirc: '\\u00EA',\n\t    euml: '\\u00EB',\n\t    igrave: '\\u00EC',\n\t    iacute: '\\u00ED',\n\t    icirc: '\\u00EE',\n\t    iuml: '\\u00EF',\n\t    eth: '\\u00F0',\n\t    ntilde: '\\u00F1',\n\t    ograve: '\\u00F2',\n\t    oacute: '\\u00F3',\n\t    ocirc: '\\u00F4',\n\t    otilde: '\\u00F5',\n\t    ouml: '\\u00F6',\n\t    divide: '\\u00F7',\n\t    oslash: '\\u00F8',\n\t    ugrave: '\\u00F9',\n\t    uacute: '\\u00FA',\n\t    ucirc: '\\u00FB',\n\t    uuml: '\\u00FC',\n\t    yacute: '\\u00FD',\n\t    thorn: '\\u00FE',\n\t    yuml: '\\u00FF',\n\t    OElig: '\\u0152',\n\t    oelig: '\\u0153',\n\t    Scaron: '\\u0160',\n\t    scaron: '\\u0161',\n\t    Yuml: '\\u0178',\n\t    fnof: '\\u0192',\n\t    circ: '\\u02C6',\n\t    tilde: '\\u02DC',\n\t    Alpha: '\\u0391',\n\t    Beta: '\\u0392',\n\t    Gamma: '\\u0393',\n\t    Delta: '\\u0394',\n\t    Epsilon: '\\u0395',\n\t    Zeta: '\\u0396',\n\t    Eta: '\\u0397',\n\t    Theta: '\\u0398',\n\t    Iota: '\\u0399',\n\t    Kappa: '\\u039A',\n\t    Lambda: '\\u039B',\n\t    Mu: '\\u039C',\n\t    Nu: '\\u039D',\n\t    Xi: '\\u039E',\n\t    Omicron: '\\u039F',\n\t    Pi: '\\u03A0',\n\t    Rho: '\\u03A1',\n\t    Sigma: '\\u03A3',\n\t    Tau: '\\u03A4',\n\t    Upsilon: '\\u03A5',\n\t    Phi: '\\u03A6',\n\t    Chi: '\\u03A7',\n\t    Psi: '\\u03A8',\n\t    Omega: '\\u03A9',\n\t    alpha: '\\u03B1',\n\t    beta: '\\u03B2',\n\t    gamma: '\\u03B3',\n\t    delta: '\\u03B4',\n\t    epsilon: '\\u03B5',\n\t    zeta: '\\u03B6',\n\t    eta: '\\u03B7',\n\t    theta: '\\u03B8',\n\t    iota: '\\u03B9',\n\t    kappa: '\\u03BA',\n\t    lambda: '\\u03BB',\n\t    mu: '\\u03BC',\n\t    nu: '\\u03BD',\n\t    xi: '\\u03BE',\n\t    omicron: '\\u03BF',\n\t    pi: '\\u03C0',\n\t    rho: '\\u03C1',\n\t    sigmaf: '\\u03C2',\n\t    sigma: '\\u03C3',\n\t    tau: '\\u03C4',\n\t    upsilon: '\\u03C5',\n\t    phi: '\\u03C6',\n\t    chi: '\\u03C7',\n\t    psi: '\\u03C8',\n\t    omega: '\\u03C9',\n\t    thetasym: '\\u03D1',\n\t    upsih: '\\u03D2',\n\t    piv: '\\u03D6',\n\t    ensp: '\\u2002',\n\t    emsp: '\\u2003',\n\t    thinsp: '\\u2009',\n\t    zwnj: '\\u200C',\n\t    zwj: '\\u200D',\n\t    lrm: '\\u200E',\n\t    rlm: '\\u200F',\n\t    ndash: '\\u2013',\n\t    mdash: '\\u2014',\n\t    lsquo: '\\u2018',\n\t    rsquo: '\\u2019',\n\t    sbquo: '\\u201A',\n\t    ldquo: '\\u201C',\n\t    rdquo: '\\u201D',\n\t    bdquo: '\\u201E',\n\t    dagger: '\\u2020',\n\t    Dagger: '\\u2021',\n\t    bull: '\\u2022',\n\t    hellip: '\\u2026',\n\t    permil: '\\u2030',\n\t    prime: '\\u2032',\n\t    Prime: '\\u2033',\n\t    lsaquo: '\\u2039',\n\t    rsaquo: '\\u203A',\n\t    oline: '\\u203E',\n\t    frasl: '\\u2044',\n\t    euro: '\\u20AC',\n\t    image: '\\u2111',\n\t    weierp: '\\u2118',\n\t    real: '\\u211C',\n\t    trade: '\\u2122',\n\t    alefsym: '\\u2135',\n\t    larr: '\\u2190',\n\t    uarr: '\\u2191',\n\t    rarr: '\\u2192',\n\t    darr: '\\u2193',\n\t    harr: '\\u2194',\n\t    crarr: '\\u21B5',\n\t    lArr: '\\u21D0',\n\t    uArr: '\\u21D1',\n\t    rArr: '\\u21D2',\n\t    dArr: '\\u21D3',\n\t    hArr: '\\u21D4',\n\t    forall: '\\u2200',\n\t    part: '\\u2202',\n\t    exist: '\\u2203',\n\t    empty: '\\u2205',\n\t    nabla: '\\u2207',\n\t    isin: '\\u2208',\n\t    notin: '\\u2209',\n\t    ni: '\\u220B',\n\t    prod: '\\u220F',\n\t    sum: '\\u2211',\n\t    minus: '\\u2212',\n\t    lowast: '\\u2217',\n\t    radic: '\\u221A',\n\t    prop: '\\u221D',\n\t    infin: '\\u221E',\n\t    ang: '\\u2220',\n\t    and: '\\u2227',\n\t    or: '\\u2228',\n\t    cap: '\\u2229',\n\t    cup: '\\u222A',\n\t    int: '\\u222B',\n\t    there4: '\\u2234',\n\t    sim: '\\u223C',\n\t    cong: '\\u2245',\n\t    asymp: '\\u2248',\n\t    ne: '\\u2260',\n\t    equiv: '\\u2261',\n\t    le: '\\u2264',\n\t    ge: '\\u2265',\n\t    sub: '\\u2282',\n\t    sup: '\\u2283',\n\t    nsub: '\\u2284',\n\t    sube: '\\u2286',\n\t    supe: '\\u2287',\n\t    oplus: '\\u2295',\n\t    otimes: '\\u2297',\n\t    perp: '\\u22A5',\n\t    sdot: '\\u22C5',\n\t    lceil: '\\u2308',\n\t    rceil: '\\u2309',\n\t    lfloor: '\\u230A',\n\t    rfloor: '\\u230B',\n\t    loz: '\\u25CA',\n\t    spades: '\\u2660',\n\t    clubs: '\\u2663',\n\t    hearts: '\\u2665',\n\t    diams: '\\u2666',\n\t    lang: '\\u27E8',\n\t    rang: '\\u27E9'\n\t};\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.JSXSyntax = {\n\t    JSXAttribute: 'JSXAttribute',\n\t    JSXClosingElement: 'JSXClosingElement',\n\t    JSXElement: 'JSXElement',\n\t    JSXEmptyExpression: 'JSXEmptyExpression',\n\t    JSXExpressionContainer: 'JSXExpressionContainer',\n\t    JSXIdentifier: 'JSXIdentifier',\n\t    JSXMemberExpression: 'JSXMemberExpression',\n\t    JSXNamespacedName: 'JSXNamespacedName',\n\t    JSXOpeningElement: 'JSXOpeningElement',\n\t    JSXSpreadAttribute: 'JSXSpreadAttribute',\n\t    JSXText: 'JSXText'\n\t};\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar jsx_syntax_1 = __webpack_require__(13);\n\tvar JSXClosingElement = (function () {\n\t    function JSXClosingElement(name) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;\n\t        this.name = name;\n\t    }\n\t    return JSXClosingElement;\n\t}());\n\texports.JSXClosingElement = JSXClosingElement;\n\tvar JSXElement = (function () {\n\t    function JSXElement(openingElement, children, closingElement) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXElement;\n\t        this.openingElement = openingElement;\n\t        this.children = children;\n\t        this.closingElement = closingElement;\n\t    }\n\t    return JSXElement;\n\t}());\n\texports.JSXElement = JSXElement;\n\tvar JSXEmptyExpression = (function () {\n\t    function JSXEmptyExpression() {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;\n\t    }\n\t    return JSXEmptyExpression;\n\t}());\n\texports.JSXEmptyExpression = JSXEmptyExpression;\n\tvar JSXExpressionContainer = (function () {\n\t    function JSXExpressionContainer(expression) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;\n\t        this.expression = expression;\n\t    }\n\t    return JSXExpressionContainer;\n\t}());\n\texports.JSXExpressionContainer = JSXExpressionContainer;\n\tvar JSXIdentifier = (function () {\n\t    function JSXIdentifier(name) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;\n\t        this.name = name;\n\t    }\n\t    return JSXIdentifier;\n\t}());\n\texports.JSXIdentifier = JSXIdentifier;\n\tvar JSXMemberExpression = (function () {\n\t    function JSXMemberExpression(object, property) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;\n\t        this.object = object;\n\t        this.property = property;\n\t    }\n\t    return JSXMemberExpression;\n\t}());\n\texports.JSXMemberExpression = JSXMemberExpression;\n\tvar JSXAttribute = (function () {\n\t    function JSXAttribute(name, value) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;\n\t        this.name = name;\n\t        this.value = value;\n\t    }\n\t    return JSXAttribute;\n\t}());\n\texports.JSXAttribute = JSXAttribute;\n\tvar JSXNamespacedName = (function () {\n\t    function JSXNamespacedName(namespace, name) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;\n\t        this.namespace = namespace;\n\t        this.name = name;\n\t    }\n\t    return JSXNamespacedName;\n\t}());\n\texports.JSXNamespacedName = JSXNamespacedName;\n\tvar JSXOpeningElement = (function () {\n\t    function JSXOpeningElement(name, selfClosing, attributes) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;\n\t        this.name = name;\n\t        this.selfClosing = selfClosing;\n\t        this.attributes = attributes;\n\t    }\n\t    return JSXOpeningElement;\n\t}());\n\texports.JSXOpeningElement = JSXOpeningElement;\n\tvar JSXSpreadAttribute = (function () {\n\t    function JSXSpreadAttribute(argument) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;\n\t        this.argument = argument;\n\t    }\n\t    return JSXSpreadAttribute;\n\t}());\n\texports.JSXSpreadAttribute = JSXSpreadAttribute;\n\tvar JSXText = (function () {\n\t    function JSXText(value, raw) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXText;\n\t        this.value = value;\n\t        this.raw = raw;\n\t    }\n\t    return JSXText;\n\t}());\n\texports.JSXText = JSXText;\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar scanner_1 = __webpack_require__(8);\n\tvar error_handler_1 = __webpack_require__(6);\n\tvar token_1 = __webpack_require__(7);\n\tvar Reader = (function () {\n\t    function Reader() {\n\t        this.values = [];\n\t        this.curly = this.paren = -1;\n\t    }\n\t    ;\n\t    // A function following one of those tokens is an expression.\n\t    Reader.prototype.beforeFunctionExpression = function (t) {\n\t        return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',\n\t            'return', 'case', 'delete', 'throw', 'void',\n\t            // assignment operators\n\t            '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=',\n\t            '&=', '|=', '^=', ',',\n\t            // binary/unary operators\n\t            '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&',\n\t            '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',\n\t            '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;\n\t    };\n\t    ;\n\t    // Determine if forward slash (/) is an operator or part of a regular expression\n\t    // https://github.com/mozilla/sweet.js/wiki/design\n\t    Reader.prototype.isRegexStart = function () {\n\t        var previous = this.values[this.values.length - 1];\n\t        var regex = (previous !== null);\n\t        switch (previous) {\n\t            case 'this':\n\t            case ']':\n\t                regex = false;\n\t                break;\n\t            case ')':\n\t                var check = this.values[this.paren - 1];\n\t                regex = (check === 'if' || check === 'while' || check === 'for' || check === 'with');\n\t                break;\n\t            case '}':\n\t                // Dividing a function by anything makes little sense,\n\t                // but we have to check for that.\n\t                regex = false;\n\t                if (this.values[this.curly - 3] === 'function') {\n\t                    // Anonymous function, e.g. function(){} /42\n\t                    var check_1 = this.values[this.curly - 4];\n\t                    regex = check_1 ? !this.beforeFunctionExpression(check_1) : false;\n\t                }\n\t                else if (this.values[this.curly - 4] === 'function') {\n\t                    // Named function, e.g. function f(){} /42/\n\t                    var check_2 = this.values[this.curly - 5];\n\t                    regex = check_2 ? !this.beforeFunctionExpression(check_2) : true;\n\t                }\n\t        }\n\t        return regex;\n\t    };\n\t    ;\n\t    Reader.prototype.push = function (token) {\n\t        if (token.type === token_1.Token.Punctuator || token.type === token_1.Token.Keyword) {\n\t            if (token.value === '{') {\n\t                this.curly = this.values.length;\n\t            }\n\t            else if (token.value === '(') {\n\t                this.paren = this.values.length;\n\t            }\n\t            this.values.push(token.value);\n\t        }\n\t        else {\n\t            this.values.push(null);\n\t        }\n\t    };\n\t    ;\n\t    return Reader;\n\t}());\n\tvar Tokenizer = (function () {\n\t    function Tokenizer(code, config) {\n\t        this.errorHandler = new error_handler_1.ErrorHandler();\n\t        this.errorHandler.tolerant = config ? (typeof config.tolerant === 'boolean' && config.tolerant) : false;\n\t        this.scanner = new scanner_1.Scanner(code, this.errorHandler);\n\t        this.scanner.trackComment = config ? (typeof config.comment === 'boolean' && config.comment) : false;\n\t        this.trackRange = config ? (typeof config.range === 'boolean' && config.range) : false;\n\t        this.trackLoc = config ? (typeof config.loc === 'boolean' && config.loc) : false;\n\t        this.buffer = [];\n\t        this.reader = new Reader();\n\t    }\n\t    ;\n\t    Tokenizer.prototype.errors = function () {\n\t        return this.errorHandler.errors;\n\t    };\n\t    ;\n\t    Tokenizer.prototype.getNextToken = function () {\n\t        if (this.buffer.length === 0) {\n\t            var comments = this.scanner.scanComments();\n\t            if (this.scanner.trackComment) {\n\t                for (var i = 0; i < comments.length; ++i) {\n\t                    var e = comments[i];\n\t                    var comment = void 0;\n\t                    var value = this.scanner.source.slice(e.slice[0], e.slice[1]);\n\t                    comment = {\n\t                        type: e.multiLine ? 'BlockComment' : 'LineComment',\n\t                        value: value\n\t                    };\n\t                    if (this.trackRange) {\n\t                        comment.range = e.range;\n\t                    }\n\t                    if (this.trackLoc) {\n\t                        comment.loc = e.loc;\n\t                    }\n\t                    this.buffer.push(comment);\n\t                }\n\t            }\n\t            if (!this.scanner.eof()) {\n\t                var loc = void 0;\n\t                if (this.trackLoc) {\n\t                    loc = {\n\t                        start: {\n\t                            line: this.scanner.lineNumber,\n\t                            column: this.scanner.index - this.scanner.lineStart\n\t                        },\n\t                        end: {}\n\t                    };\n\t                }\n\t                var token = void 0;\n\t                if (this.scanner.source[this.scanner.index] === '/') {\n\t                    token = this.reader.isRegexStart() ? this.scanner.scanRegExp() : this.scanner.scanPunctuator();\n\t                }\n\t                else {\n\t                    token = this.scanner.lex();\n\t                }\n\t                this.reader.push(token);\n\t                var entry = void 0;\n\t                entry = {\n\t                    type: token_1.TokenName[token.type],\n\t                    value: this.scanner.source.slice(token.start, token.end)\n\t                };\n\t                if (this.trackRange) {\n\t                    entry.range = [token.start, token.end];\n\t                }\n\t                if (this.trackLoc) {\n\t                    loc.end = {\n\t                        line: this.scanner.lineNumber,\n\t                        column: this.scanner.index - this.scanner.lineStart\n\t                    };\n\t                    entry.loc = loc;\n\t                }\n\t                if (token.regex) {\n\t                    entry.regex = token.regex;\n\t                }\n\t                this.buffer.push(entry);\n\t            }\n\t        }\n\t        return this.buffer.shift();\n\t    };\n\t    ;\n\t    return Tokenizer;\n\t}());\n\texports.Tokenizer = Tokenizer;\n\n\n/***/ }\n/******/ ])\n});\n;"]},"metadata":{},"sourceType":"script"}