{"ast":null,"code":"'use strict';\n/**\n * Module exports.\n */\n\nmodule.exports = exports = PacProxyAgent;\n/**\n * Supported \"protocols\". Delegates out to the `get-uri` module.\n */\n\nvar getUri = require('get-uri');\n\nObject.defineProperty(exports, 'protocols', {\n  enumerable: true,\n  configurable: true,\n  get: function get() {\n    return Object.keys(getUri.protocols);\n  }\n});\n/**\n * Module dependencies.\n */\n\nvar net = require('net');\n\nvar tls = require('tls');\n\nvar crypto = require('crypto');\n\nvar parse = require('url').parse;\n\nvar format = require('url').format;\n\nvar Agent = require('agent-base');\n\nvar HttpProxyAgent = require('http-proxy-agent');\n\nvar HttpsProxyAgent = require('https-proxy-agent');\n\nvar SocksProxyAgent = require('socks-proxy-agent');\n\nvar PacResolver = require('pac-resolver');\n\nvar getRawBody = require('raw-body');\n\nvar inherits = require('util').inherits;\n\nvar debug = require('debug')('pac-proxy-agent');\n/**\n * The `PacProxyAgent` class.\n *\n * A few different \"protocol\" modes are supported (supported protocols are\n * backed by the `get-uri` module):\n *\n *   - \"pac+data\", \"data\" - refers to an embedded \"data:\" URI\n *   - \"pac+file\", \"file\" - refers to a local file\n *   - \"pac+ftp\", \"ftp\" - refers to a file located on an FTP server\n *   - \"pac+http\", \"http\" - refers to an HTTP endpoint\n *   - \"pac+https\", \"https\" - refers to an HTTPS endpoint\n *\n * @api public\n */\n\n\nfunction PacProxyAgent(uri, opts) {\n  if (!(this instanceof PacProxyAgent)) return new PacProxyAgent(uri, opts); // was an options object passed in first?\n\n  if ('object' === typeof uri) {\n    opts = uri; // result of a url.parse() call?\n\n    if (opts.href) {\n      if (opts.path && !opts.pathname) {\n        opts.pathname = opts.path;\n      }\n\n      opts.slashes = true;\n      uri = format(opts);\n    } else {\n      uri = opts.uri;\n    }\n  }\n\n  if (!opts) opts = {};\n  if (!uri) throw new Error('a PAC file URI must be specified!');\n  debug('creating PacProxyAgent with URI %o and options %o', uri, opts);\n  Agent.call(this, connect); // strip the \"pac+\" prefix\n\n  this.uri = uri.replace(/^pac\\+/i, '');\n  this.sandbox = opts.sandbox;\n  this.proxy = opts;\n  this.cache = this._resolver = null;\n}\n\ninherits(PacProxyAgent, Agent);\n/**\n * Loads the PAC proxy file from the source if necessary, and returns\n * a generated `FindProxyForURL()` resolver function to use.\n *\n * @param {Function} fn callback function\n * @api private\n */\n\nPacProxyAgent.prototype.loadResolver = function (fn) {\n  var self = this; // kick things off by attempting to (re)load the contents of the PAC file URI\n\n  this.loadPacFile(onpacfile); // loadPacFile() callback function\n\n  function onpacfile(err, code) {\n    if (err) {\n      if ('ENOTMODIFIED' == err.code) {\n        debug('got ENOTMODIFIED response, reusing previous proxy resolver');\n        fn(null, self._resolver);\n      } else {\n        fn(err);\n      }\n\n      return;\n    } // create a sha1 hash of the JS code\n\n\n    var hash = crypto.createHash('sha1').update(code).digest('hex');\n\n    if (self._resolver && self._resolver.hash == hash) {\n      debug('same sha1 hash for code - contents have not changed, reusing previous proxy resolver');\n      fn(null, self._resolver);\n      return;\n    } // cache the resolver\n\n\n    debug('creating new proxy resolver instance');\n    self._resolver = new PacResolver(code, {\n      filename: self.uri,\n      sandbox: self.sandbox\n    }); // store that sha1 hash on the resolver instance\n    // for future comparison purposes\n\n    self._resolver.hash = hash;\n    fn(null, self._resolver);\n  }\n};\n/**\n * Loads the contents of the PAC proxy file.\n *\n * @param {Function} fn callback function\n * @api private\n */\n\n\nPacProxyAgent.prototype.loadPacFile = function (fn) {\n  debug('loading PAC file: %o', this.uri);\n  var self = this; // delegate out to the `get-uri` module\n\n  var opts = {};\n\n  if (this.cache) {\n    opts.cache = this.cache;\n  }\n\n  getUri(this.uri, opts, onstream);\n\n  function onstream(err, rs) {\n    if (err) return fn(err);\n    debug('got stream.Readable instance for URI');\n    self.cache = rs;\n    getRawBody(rs, 'utf8', onbuffer);\n  }\n\n  function onbuffer(err, buf) {\n    if (err) return fn(err);\n    debug('read %o byte PAC file from URI', buf.length);\n    fn(null, buf);\n  }\n};\n/**\n * Called when the node-core HTTP client library is creating a new HTTP request.\n *\n * @api public\n */\n\n\nfunction connect(req, opts, fn) {\n  var url;\n  var host;\n  var self = this;\n  var secure = Boolean(opts.secureEndpoint); // first we need get a generated FindProxyForURL() function,\n  // either cached or retreived from the source\n\n  this.loadResolver(onresolver); // `loadResolver()` callback function\n\n  function onresolver(err, FindProxyForURL) {\n    if (err) return fn(err); // calculate the `url` parameter\n\n    var defaultPort = secure ? 443 : 80;\n    var path = req.path;\n    var firstQuestion = path.indexOf('?');\n    var search;\n\n    if (-1 != firstQuestion) {\n      search = path.substring(firstQuestion);\n      path = path.substring(0, firstQuestion);\n    }\n\n    url = format(Object.assign({}, opts, {\n      protocol: secure ? 'https:' : 'http:',\n      pathname: path,\n      search: search,\n      // need to use `hostname` instead of `host` otherwise `port` is ignored\n      hostname: opts.host,\n      host: null,\n      // set `port` to null when it is the protocol default port (80 / 443)\n      port: defaultPort == opts.port ? null : opts.port\n    })); // calculate the `host` parameter\n\n    host = parse(url).hostname;\n    debug('url: %o, host: %o', url, host);\n    FindProxyForURL(url, host, onproxy);\n  } // `FindProxyForURL()` callback function\n\n\n  function onproxy(err, proxy) {\n    if (err) return fn(err); // default to \"DIRECT\" if a falsey value was returned (or nothing)\n\n    if (!proxy) proxy = 'DIRECT';\n    var proxies = String(proxy).trim().split(/\\s*;\\s*/g).filter(Boolean); // XXX: right now, only the first proxy specified will be used\n\n    var first = proxies[0];\n    debug('using proxy: %o', first);\n    var agent;\n    var parts = first.split(/\\s+/);\n    var type = parts[0];\n\n    if ('DIRECT' == type) {\n      // direct connection to the destination endpoint\n      var socket;\n\n      if (secure) {\n        socket = tls.connect(opts);\n      } else {\n        socket = net.connect(opts);\n      }\n\n      return fn(null, socket);\n    } else if ('SOCKS' == type) {\n      // use a SOCKS proxy\n      agent = new SocksProxyAgent('socks://' + parts[1]);\n    } else if ('PROXY' == type || 'HTTPS' == type) {\n      // use an HTTP or HTTPS proxy\n      // http://dev.chromium.org/developers/design-documents/secure-web-proxy\n      var proxyURL = ('HTTPS' === type ? 'https' : 'http') + '://' + parts[1];\n      var proxy = Object.assign({}, self.proxy, parse(proxyURL));\n\n      if (secure) {\n        agent = new HttpsProxyAgent(proxy);\n      } else {\n        agent = new HttpProxyAgent(proxy);\n      }\n    } else {\n      throw new Error('Unknown proxy type: ' + type);\n    }\n\n    if (agent) agent.callback(req, opts, fn);\n  }\n}","map":{"version":3,"sources":["/home/yamin/My_repos/new-email-app/new-email-app/node_modules/pac-proxy-agent/index.js"],"names":["module","exports","PacProxyAgent","getUri","require","Object","defineProperty","enumerable","configurable","get","keys","protocols","net","tls","crypto","parse","format","Agent","HttpProxyAgent","HttpsProxyAgent","SocksProxyAgent","PacResolver","getRawBody","inherits","debug","uri","opts","href","path","pathname","slashes","Error","call","connect","replace","sandbox","proxy","cache","_resolver","prototype","loadResolver","fn","self","loadPacFile","onpacfile","err","code","hash","createHash","update","digest","filename","onstream","rs","onbuffer","buf","length","req","url","host","secure","Boolean","secureEndpoint","onresolver","FindProxyForURL","defaultPort","firstQuestion","indexOf","search","substring","assign","protocol","hostname","port","onproxy","proxies","String","trim","split","filter","first","agent","parts","type","socket","proxyURL","callback"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * Module exports.\n */\n\nmodule.exports = exports = PacProxyAgent;\n\n/**\n * Supported \"protocols\". Delegates out to the `get-uri` module.\n */\n\nvar getUri = require('get-uri');\nObject.defineProperty(exports, 'protocols', {\n  enumerable: true,\n  configurable: true,\n  get: function () { return Object.keys(getUri.protocols); }\n});\n\n/**\n * Module dependencies.\n */\n\nvar net = require('net');\nvar tls = require('tls');\nvar crypto = require('crypto');\nvar parse = require('url').parse;\nvar format = require('url').format;\nvar Agent = require('agent-base');\nvar HttpProxyAgent = require('http-proxy-agent');\nvar HttpsProxyAgent = require('https-proxy-agent');\nvar SocksProxyAgent = require('socks-proxy-agent');\nvar PacResolver = require('pac-resolver');\nvar getRawBody = require('raw-body');\nvar inherits = require('util').inherits;\nvar debug = require('debug')('pac-proxy-agent');\n\n/**\n * The `PacProxyAgent` class.\n *\n * A few different \"protocol\" modes are supported (supported protocols are\n * backed by the `get-uri` module):\n *\n *   - \"pac+data\", \"data\" - refers to an embedded \"data:\" URI\n *   - \"pac+file\", \"file\" - refers to a local file\n *   - \"pac+ftp\", \"ftp\" - refers to a file located on an FTP server\n *   - \"pac+http\", \"http\" - refers to an HTTP endpoint\n *   - \"pac+https\", \"https\" - refers to an HTTPS endpoint\n *\n * @api public\n */\n\nfunction PacProxyAgent (uri, opts) {\n  if (!(this instanceof PacProxyAgent)) return new PacProxyAgent(uri, opts);\n\n  // was an options object passed in first?\n  if ('object' === typeof uri) {\n    opts = uri;\n\n    // result of a url.parse() call?\n    if (opts.href) {\n      if (opts.path && !opts.pathname) {\n        opts.pathname = opts.path;\n      }\n      opts.slashes = true;\n      uri = format(opts);\n    } else {\n      uri = opts.uri;\n    }\n  }\n  if (!opts) opts = {};\n\n  if (!uri) throw new Error('a PAC file URI must be specified!');\n  debug('creating PacProxyAgent with URI %o and options %o', uri, opts);\n\n  Agent.call(this, connect);\n\n  // strip the \"pac+\" prefix\n  this.uri = uri.replace(/^pac\\+/i, '');\n\n  this.sandbox = opts.sandbox;\n\n  this.proxy = opts;\n\n  this.cache = this._resolver = null;\n}\ninherits(PacProxyAgent, Agent);\n\n/**\n * Loads the PAC proxy file from the source if necessary, and returns\n * a generated `FindProxyForURL()` resolver function to use.\n *\n * @param {Function} fn callback function\n * @api private\n */\n\nPacProxyAgent.prototype.loadResolver = function (fn) {\n  var self = this;\n\n  // kick things off by attempting to (re)load the contents of the PAC file URI\n  this.loadPacFile(onpacfile);\n\n  // loadPacFile() callback function\n  function onpacfile (err, code) {\n    if (err) {\n      if ('ENOTMODIFIED' == err.code) {\n        debug('got ENOTMODIFIED response, reusing previous proxy resolver');\n        fn(null, self._resolver);\n      } else {\n        fn(err);\n      }\n      return;\n    }\n\n    // create a sha1 hash of the JS code\n    var hash = crypto.createHash('sha1').update(code).digest('hex');\n\n    if (self._resolver && self._resolver.hash == hash) {\n      debug('same sha1 hash for code - contents have not changed, reusing previous proxy resolver');\n      fn(null, self._resolver);\n      return;\n    }\n\n    // cache the resolver\n    debug('creating new proxy resolver instance');\n    self._resolver = new PacResolver(code, {\n      filename: self.uri,\n      sandbox: self.sandbox\n    });\n\n    // store that sha1 hash on the resolver instance\n    // for future comparison purposes\n    self._resolver.hash = hash;\n\n    fn(null, self._resolver);\n  }\n};\n\n/**\n * Loads the contents of the PAC proxy file.\n *\n * @param {Function} fn callback function\n * @api private\n */\n\nPacProxyAgent.prototype.loadPacFile = function (fn) {\n  debug('loading PAC file: %o', this.uri);\n  var self = this;\n\n  // delegate out to the `get-uri` module\n  var opts = {};\n  if (this.cache) {\n    opts.cache = this.cache;\n  }\n  getUri(this.uri, opts, onstream);\n\n  function onstream (err, rs) {\n    if (err) return fn(err);\n    debug('got stream.Readable instance for URI');\n    self.cache = rs;\n    getRawBody(rs, 'utf8', onbuffer);\n  }\n\n  function onbuffer (err, buf) {\n    if (err) return fn(err);\n    debug('read %o byte PAC file from URI', buf.length);\n    fn(null, buf);\n  }\n};\n\n/**\n * Called when the node-core HTTP client library is creating a new HTTP request.\n *\n * @api public\n */\n\nfunction connect (req, opts, fn) {\n  var url;\n  var host;\n  var self = this;\n  var secure = Boolean(opts.secureEndpoint);\n\n  // first we need get a generated FindProxyForURL() function,\n  // either cached or retreived from the source\n  this.loadResolver(onresolver);\n\n  // `loadResolver()` callback function\n  function onresolver (err, FindProxyForURL) {\n    if (err) return fn(err);\n\n    // calculate the `url` parameter\n    var defaultPort = secure ? 443 : 80;\n    var path = req.path;\n    var firstQuestion = path.indexOf('?');\n    var search;\n    if (-1 != firstQuestion) {\n      search = path.substring(firstQuestion);\n      path = path.substring(0, firstQuestion);\n    }\n    url = format(Object.assign({}, opts, {\n      protocol: secure ? 'https:' : 'http:',\n      pathname: path,\n      search: search,\n\n      // need to use `hostname` instead of `host` otherwise `port` is ignored\n      hostname: opts.host,\n      host: null,\n\n      // set `port` to null when it is the protocol default port (80 / 443)\n      port: defaultPort == opts.port ? null : opts.port\n    }));\n\n    // calculate the `host` parameter\n    host = parse(url).hostname;\n\n    debug('url: %o, host: %o', url, host);\n    FindProxyForURL(url, host, onproxy);\n  }\n\n  // `FindProxyForURL()` callback function\n  function onproxy (err, proxy) {\n    if (err) return fn(err);\n\n    // default to \"DIRECT\" if a falsey value was returned (or nothing)\n    if (!proxy) proxy = 'DIRECT';\n\n    var proxies = String(proxy).trim().split(/\\s*;\\s*/g).filter(Boolean);\n\n    // XXX: right now, only the first proxy specified will be used\n    var first = proxies[0];\n    debug('using proxy: %o', first);\n\n    var agent;\n    var parts = first.split(/\\s+/);\n    var type = parts[0];\n\n    if ('DIRECT' == type) {\n      // direct connection to the destination endpoint\n      var socket;\n      if (secure) {\n        socket = tls.connect(opts);\n      } else {\n        socket = net.connect(opts);\n      }\n      return fn(null, socket);\n    } else if ('SOCKS' == type) {\n      // use a SOCKS proxy\n      agent = new SocksProxyAgent('socks://' + parts[1]);\n    } else if ('PROXY' == type || 'HTTPS' == type) {\n      // use an HTTP or HTTPS proxy\n      // http://dev.chromium.org/developers/design-documents/secure-web-proxy\n      var proxyURL = ('HTTPS' === type ? 'https' : 'http') + '://' + parts[1];\n      var proxy = Object.assign({}, self.proxy, parse(proxyURL));\n      if (secure) {\n        agent = new HttpsProxyAgent(proxy);\n      } else {\n        agent = new HttpProxyAgent(proxy);\n      }\n    } else {\n      throw new Error('Unknown proxy type: ' + type);\n    }\n    if (agent) agent.callback(req, opts, fn);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}